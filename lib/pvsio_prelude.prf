(|stdlang|)
(|stdexc|)
(|stdexc_tags|)
(|stdcatch|
 (|catch_list_lift_TCC1| 0
  (|catch_list_lift_TCC1-1| |nil| 3729453539 ("" (TERMINATION-TCC) NIL NIL)
   ((<< ADT-DEF-DECL "(strict_well_founded?[list])" |list_adt| NIL)) SHOSTAK
   (|catch_list_lift| TERMINATION
    "stdcatch.catch_list_lift(stdcatch.r, stdcatch.f1, stdcatch.f2)"
    #A((3) BASE-CHAR . "NIL")))))
(|stdprog|)
(|stdglobal|)
(|stdmutable|)
(|stdmath|
 (RANDOM_TCC1 0
  (RANDOM_TCC1-1 |nil| 3729453539 ("" (INST 1 "0") NIL NIL)
   ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL))
   SHOSTAK (RANDOM EXISTENCE "" "{y: real_types.nnreal | reals.<=(y, 1)}")))
 (NRANDOM_TCC1 0
  (NRANDOM_TCC1-1 |nil| 3729453539
   ("" (INST 1 "lambda (x: posnat): 0") NIL NIL)
   ((> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL))
   SHOSTAK
   (NRANDOM EXISTENCE ""
    "[n: posnat -> {y: naturalnumbers.nat | reals.<(y, n)}]")))
 (|rat2numden_TCC1| 0
  (|rat2numden_TCC1-1| NIL 3904825051
   ("" (LEMMA "rational_pred_ax2")
    (("" (INST 1 "LAMBDA(r:rat):choose({nd : [int,posnat] | r = nd`1/nd`2})")
      (("" (SKOLEM 1 "r")
        (("" (INST -1 "r")
          (("" (EXPAND "nonempty?")
            (("" (EXPAND "empty?")
              (("" (SKOLEM -2 ("i" "p"))
                (("" (INST -1 "(i,p)")
                  (("" (EXPAND "member") (("" (PROPAX) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|choose| CONST-DECL "(p)" |sets| NIL)
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|rational_pred_ax2| FORMULA-DECL NIL |rational_props| NIL))
   SHOSTAK
   (|rat2numden| EXISTENCE ""
    "[r: rat -> {nd: [integers.int, integers.posnat] | r = number_fields./(nd`1, nd`2)}]"))))
(|stdstr|
 (|space_TCC1| 0
  (|space_TCC1-1| NIL 3904825051 ("" (GRIND) NIL NIL)
   ((|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL))
   SHOSTAK (|space| SUBTYPE "\" \"" "StringChar")))
 (|singlequote_TCC1| 0
  (|singlequote_TCC1-1| NIL 3904825051 ("" (GRIND) NIL NIL)
   ((|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL))
   SHOSTAK (|singlequote| SUBTYPE "\"'\"" "StringChar")))
 (|backquote_TCC1| 0
  (|backquote_TCC1-1| NIL 3904825051 ("" (GRIND) NIL NIL)
   ((|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL))
   SHOSTAK (|backquote| SUBTYPE "\"`\"" "StringChar")))
 (|spaces_TCC1| 0
  (|spaces_TCC1-1| NIL 3904825051
   ("" (INST 1 "LAMBDA(n:nat):choose({s:string | length(s)=n})")
    (("" (INDUCT "n")
      ((#A((1) BASE-CHAR . "1") (GRIND)
        ((#A((1) BASE-CHAR . "1") (INST -1 "emptystr")
          ((#A((1) BASE-CHAR . "1") (GRIND) NIL NIL)) NIL))
        NIL)
       (#A((1) BASE-CHAR . "2") (SKEEP)
        ((#A((1) BASE-CHAR . "2") (EXPAND "nonempty?")
          ((#A((1) BASE-CHAR . "2") (EXPAND "empty?")
            ((#A((1) BASE-CHAR . "2") (SKOLEM 1 "x")
              ((#A((1) BASE-CHAR . "2") (INST -2 "add(' ',x)")
                ((#A((1) BASE-CHAR . "2") (GRIND) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|emptystr| CONST-DECL "string" |stdstr| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|char| ADT-CONSTRUCTOR-DECL "[below[0x110000] -> (char?)]" |character_adt|
     NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|seq| TYPE-EQ-DECL NIL |more_finseq| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|choose| CONST-DECL "(p)" |sets| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL) (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|string| TYPE-EQ-DECL NIL |strings| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL))
   SHOSTAK
   (|spaces| EXISTENCE ""
    "[n: nat -> {str: strings.string | length(str) = n}]")))
 (|charcode_TCC1| 0
  (|charcode_TCC1-1| NIL 3904825051 ("" (INST 1 "LAMBDA(x:nat):space") NIL NIL)
   ((|space| CONST-DECL "StringChar" |stdstr| NIL)
    (|StringChar| TYPE-EQ-DECL NIL |stdstr| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|string| TYPE-EQ-DECL NIL |strings| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   SHOSTAK (|charcode| EXISTENCE "" "[nat -> StringChar]")))
 (|upcase_TCC1| 0
  (|upcase_TCC1-1| NIL 3904825051 ("" (INST 1 "LAMBDA(s:string):s") NIL NIL)
   ((= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|string| TYPE-EQ-DECL NIL |strings| NIL))
   SHOSTAK
   (|upcase| EXISTENCE ""
    "[s: string -> {str: strings.string | length(str) = length(s)}]")))
 (|strfind_TCC1| 0
  (|strfind_TCC1-1| NIL 3904825051
   ("" (INST 1 "LAMBDA(d:[string,string]):length(d`2) - length(d`1)") NIL NIL)
   ((|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|string| TYPE-EQ-DECL NIL |strings| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   SHOSTAK
   (|strfind| EXISTENCE ""
    "[d: [string, string] -> {i: integers.int | reals.<=(i, (number_fields.-)(length(d`2), length(d`1)))}]")))
 (|strconcat_TCC1| 0
  (|strconcat_TCC1-1| NIL 3904825051 ("" (SUBTYPE-TCC))
   ((O CONST-DECL "finseq" |finite_sequences| NIL)) SHOSTAK
   (|strconcat| SUBTYPE "finite_sequences[char].o(stdstr.s1, stdstr.s2)"
    "{str: strings.string | length(str) = (number_fields.+)(length(stdstr.s1), length(stdstr.s2))}")))
 (|pad_TCC1| 0
  (|pad_TCC1-1| |nil| 3729453539 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   SHOSTAK (|pad| SUBTYPE "(number_fields.-)(stdstr.n, 1)" "nat")))
 (|pad_TCC2| 0
  (|pad_TCC2-1| |nil| 3729453539 ("" (TERMINATION-TCC) NIL NIL) NIL SHOSTAK
   (|pad| TERMINATION "stdstr.pad((number_fields.-)(stdstr.n, 1), stdstr.s)"
    #A((3) BASE-CHAR . "NIL"))))
 (|strcmp_TCC1| 0
  (|strcmp_TCC1-1| NIL 3904825051
   ("" (INST 1 "LAMBDA(d:[string,string,bool]):0") NIL NIL)
   ((|subrange| TYPE-EQ-DECL NIL |integers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|string| TYPE-EQ-DECL NIL |strings| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL))
   SHOSTAK
   (|strcmp| EXISTENCE "" "[[string, string, bool] -> subrange(-1, 1)]"))))
(|stdpvs|)
(|stdio|
 (|with_openin_file_TCC1| 0
  (|with_openin_file_TCC1-1| NIL 3904825051 ("" (SUBTYPE-TCC))
   ((|input_mode?| CONST-DECL "bool" |stdio| NIL)) SHOSTAK
   (|with_openin_file| SUBTYPE "stdio.input" "(stdio.input_mode?)")))
 (|with_openout_file_TCC1| 0
  (|with_openout_file_TCC1-1| NIL 3904825051 ("" (SUBTYPE-TCC))
   ((|output_mode?| CONST-DECL "bool" |stdio| NIL)) SHOSTAK
   (|with_openout_file| SUBTYPE "stdio.output" "(stdio.output_mode?)")))
 (|filename_without_extension_TCC1| 0
  (|filename_without_extension_TCC1-1| NIL 3904825051 ("" (GRIND) NIL NIL)
   ((|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL))
   SHOSTAK (|filename_without_extension| SUBTYPE "\".\"" "StringChar"))))
(|stdfmap|
 (|fmap_TCC1| 0
  (|fmap_TCC1-1| |nil| 3729453539 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|Stream| NONEMPTY-TYPE-DECL NIL |stdio| NIL)
    (|IStream_pred| CONST-DECL "[Stream -> boolean]" |stdio| NIL)
    (|IStream| NONEMPTY-TYPE-FROM-DECL NIL |stdio| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|eof?| CONST-DECL "bool" |stdio| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL))
   SHOSTAK (|fmap| SUBTYPE "(number_fields.-)(stdfmap.n, 1)" "nat")))
 (|fmap_TCC2| 0
  (|fmap_TCC2-1| |nil| 3729453539 ("" (TERMINATION-TCC) NIL NIL)
   ((|length| DEF-DECL "nat" |list_props| NIL)
    (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL)
    (|ClosedStream| CONST-DECL "ExceptionTag[string]" |stdexc_tags| NIL)
    (|emptystr| CONST-DECL "string" |stdstr| NIL)
    (|fname| CONST-DECL "string" |stdio| NIL)
    (|make_exc| CONST-DECL "Exception" |stdexc| NIL)
    (|eof?| CONST-DECL "bool" |stdio| NIL))
   SHOSTAK
   (|fmap| TERMINATION
    "stdfmap.fmap(stdfmap.f, stdfmap.fread, stdfmap.nt, stdfmap.st, (number_fields.-)(stdfmap.n, 1))"
    #A((3) BASE-CHAR . "NIL")))))
(|stdpvsio|)
(|stdsys|)

