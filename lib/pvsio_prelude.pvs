% PVSio support theories

%% stdpvs 
%% Basic language definitions

%% stdlang.pvs
%% In PVS-8.0, stdlang theory was integrated into stdpvs

stdpvs : THEORY
BEGIN

  void : TYPE = bool

  skip : void = TRUE
  fail : void = FALSE

  try(s1:void,s2:void)  : MACRO void = s1 OR s2
  try(s:void)           : MACRO void = try(s,skip)
  ifthen(b:bool,s:void) : MACRO void = IF b THEN s ELSE skip ENDIF
  ifelse(b:bool,s:void) : MACRO void = IF b THEN skip ELSE s ENDIF
  do_when(b:bool,s:void)    : MACRO void = ifthen(b,s)
  do_unless(b:bool,s:void)  : MACRO void = ifelse(b,s)

  Dummy : TYPE  = bool
  dummy : MACRO Dummy = FALSE
  dummy_fun[T:TYPE](t:T): Dummy = dummy

  prog[T:TYPE](s:void,t:T): T = t

%% Throw a PVSio error with a message provided by the user
  error[T:TYPE+](mssg:string):T 

%% Exit the current evaluation and return to PVSio
  exit[T:TYPE+] : T

%% last_iteration breaks a loop with a given value
  last_iteration[T:TYPE](t:T):T

  return[T:TYPE](t:T):T 

%% Loops
  loop_lift[T:TYPE+](f:[Dummy->void]): T

  loop[T:TYPE+](s:void): MACRO T = loop_lift(LAMBDA(d:Dummy):s)

%% While loops
  break : MACRO void = last_iteration(skip)

  while(b:bool,s:void) : MACRO void =
    loop(if b then s else break endif)

  for(si:void,b:bool,sinc,s:void): MACRO void =
    si & while(b,s & sinc)

%% Formatting text
  format[T:TYPE](s:string,t:T):string

%% Assert
  assert(b:bool,str:string):void =
    try(b,error[void](format("PVSio Assertion Failure: ~a",str)) & fail)

%% Used for untyped lisp attachments
  Lisp_ : TYPE+  

  Lisp[T:TYPE] : TYPE+  %% Used for PVS-typed lisp attachments

  to_lisp[T:TYPE](t:T) : Lisp  % To PVS-typed lisp
  
  to_lisp_[T:TYPE](t:T) : Lisp_ % To untyped lisp

  list2listlisp[T:TYPE](l:list[T]) : list[Lisp[T]] =
    map(LAMBDA(t:T): to_lisp(t))(l)

  ;>>[T:TYPE] : [list[T]->list[Lisp[T]]] = list2listlisp

  {||}[T:TYPE](t:T) : Lisp = to_lisp(t)

  unwind_protect_lift[T:TYPE+](ft:[Dummy->T],fcu:[Dummy->void]) : T

  % Evaluate t, returning its value. The cleanup code will be evaluated if control leaves t.
  unwind_protect[T:TYPE+](t:T,cleanup:void) : MACRO T =
    unwind_protect_lift(LAMBDA(d:Dummy):t,LAMBDA(d:Dummy):cleanup)

  type_of_domain_lisp[T:TYPE](f:[T->void]): string

  %% Return string representing the type of t (t may be an uninterpreted constant)
  typeof[T:TYPE](t:T) : MACRO string =
    type_of_domain_lisp[T](dummy_fun)

  %% Returns a PVS object represented by a string
  str2pvs[T:TYPE+](s:string):T 

  %% Returns string representing a PVS object
  pvs2str_lisp[T:TYPE](t:T) : string

  %% May throw exception CantTranslateBack 
  pvs2str[T:TYPE](t:T) : MACRO string =
    pvs2str_lisp[T](t)

END stdpvs


%% stdexc.pvs
%% Definition of exception type

stdexc[T:TYPE] : THEORY
BEGIN

  ExceptionTag : TYPE = string

  Exception : TYPE = [#
    tag : ExceptionTag,
    val : T
  #]

  make_exc(e:ExceptionTag,t:T) : Exception = (#
    tag := e,
    val := t
  #)

END stdexc

stdexc_tags : THEORY
BEGIN

  % PVSioError Exception Tag
  PVSioError : ExceptionTag[string] = "PVSioError"

  % Mutable Exception Tag
  UndefinedMutableVariable : ExceptionTag[string] = "UndefinedMutableVariable"

  % Boolean Exception Tag
  NotABoolean : ExceptionTag[string] ="NotABoolean"

  % Math Exception Tags
  NotARealNumber : ExceptionTag[string] = "NotARealNumber"
  NotAnInteger   : ExceptionTag[string] = "NotAnInteger"

  MathExceptions : list[ExceptionTag[string]] = (: NotARealNumber, NotAnInteger :)

  % I/O Exception Tags
  FileNotFound          : ExceptionTag[string] = "FileNotFound"
  FileAlreadyExists     : ExceptionTag[string] = "FileAlreadyExists"
  ClosedStream          : ExceptionTag[string] = "ClosedStream"
  EndOfFile             : ExceptionTag[string] = "EndOfFile"
  
  IOExceptionTags : list[ExceptionTag[string]] = 
    (: NotARealNumber, NotAnInteger, FileNotFound,
       FileAlreadyExists, ClosedStream, EndOfFile :)

  % PVS2CL Exception Tag
  CantTranslateBack	       : ExceptionTag[string] = "CantTranslateBack"

END stdexc_tags

%% stdcatch.pvs
%% Definition of catch and throw 

stdcatch[ResultType:TYPE+,ExcTagType:TYPE] : THEORY
BEGIN

  catch_lift(tag:ExceptionTag[ExcTagType],
             result:[Dummy->ResultType],
             handler:[Exception[ExcTagType]->ResultType]) : ResultType

  % Catch with a handler
  catch(tag:ExceptionTag[ExcTagType],
        result:ResultType,
        handler:[Exception[ExcTagType]->ResultType]) : MACRO ResultType =
    catch_lift(tag,LAMBDA(d:Dummy):result,handler)

  % Catch with an exceptional result
  catch(tag:ExceptionTag[ExcTagType],result,exc_result:ResultType): MACRO ResultType =
    catch(tag,result,LAMBDA(e:Exception[ExcTagType]):exc_result)

  catch_list_lift(l:list[ExceptionTag[ExcTagType]],
                  f1:[Dummy->ResultType],
                  f2:[Exception[ExcTagType]->ResultType]) : RECURSIVE ResultType =
    CASES l OF
      null : f1(dummy),
      cons(e,r) : catch_lift(e,
                             LAMBDA(d:Dummy):catch_list_lift(r,f1,f2),
                             f2)
    ENDCASES
    MEASURE l BY <<  

  % Catch list with a handler
  catch(l:list[ExceptionTag[ExcTagType]],
        result:ResultType,handler:[Exception[ExcTagType]->ResultType]) : MACRO ResultType =
    catch_list_lift(l,LAMBDA(d:Dummy):result,handler)

  % Catch list with an execptional result
  catch(l:list[ExceptionTag[ExcTagType]],result,exc_result:ResultType) : MACRO ResultType =
    catch(l,result,LAMBDA(e:Exception[ExcTagType]):exc_result)

  throw(e:Exception[ExcTagType]):ResultType

  throw(tag:ExceptionTag[ExcTagType],exc_val:ExcTagType) : MACRO ResultType =
    throw(make_exc(tag,exc_val))

END stdcatch

%% stdprog.pvs
%% Imperative aspects such as exceptions and mutables 

stdprog[T:TYPE+] : THEORY
BEGIN

  throw(tag:ExceptionTag[void]): MACRO T = throw[T,void](tag,fail)

  catch(tag:ExceptionTag[void],t1,t2:T): MACRO T =
    catch_lift[T,void](tag,LAMBDA(d:Dummy):t1,LAMBDA(e:Exception[void]):t2)

  catch(l:list[ExceptionTag[void]],t1,t2:T) : MACRO T =
    catch_list_lift[T,void](l,LAMBDA(d:Dummy):t1,LAMBDA(e:Exception[void]):t2)

  % Mutable data

  Mutable : TYPE+

  % Creates a mutable variable and sets it to given value
  ref(t:T) : Mutable

  % Creates a new mutable variable with an undefined value
  new      : Mutable 

  % Sets mutable variable to undefined
  reset(v:Mutable) : void

  % Returns TRUE if mutable variable is undefined"
  undef(v:Mutable)    : bool

  undefined?(v:Mutable) : MACRO bool =
    undef(v)

  defined?(v:Mutable) : MACRO bool =
    NOT undef(v)

  val_lisp(v:Mutable) : T

  % Returns value of mutable variable.
  % Throws exception UndefinedMutableVariable when undefined?(v)"
  val(v:Mutable): T =
    val_lisp(v)

  % Sets mutable variable gvar to given value
  def(v:Mutable,t:T) : T = t

  set(v:Mutable,t:T) : void = 
    LET nt = def(v,t) IN
    skip

  %% Mutable variables can be used as stacks, where val is the top of the stack.
  %% Stack is empty when undef is true
  
  push_lisp(v:(defined?),t:T) : void

  % Pushes value to the top of the mutable variable and skips
  push(v:Mutable,t:T) : MACRO void =
    IF undef(v) THEN set(v,t)
    ELSE push_lisp(v,t)
    ENDIF

  pop_lisp(v:(defined?)) : void

  % Pops value of the mutable variable and fails silently when mutable variable is undefined
  pop(v:Mutable) : MACRO void =
    IF undef(v) THEN fail
    ELSE pop_lisp(v)
    ENDIF

  CONVERSION val

  % Global uninitilized variables
  Global : TYPE+ = Mutable

END stdprog

%% stdglobal.pvs
%% Global variables

stdglobal[T:TYPE,t:T] : THEORY
BEGIN

  Global : TYPE+ = Mutable[T]

END stdglobal

%% stdmutable.pvs
%% Utility for mutable variables

stdmutable[T,P:TYPE+] : THEORY
BEGIN

  save_lift(fp:[Dummy->P],gv:Mutable[T],val:T):P =
    unwind_protect(fp(dummy),set(gv,val))

  %% Save mutable variable gv of type T and restore its value after p of type P is evaluated,
  %% even if control leaves p, e.g., due to an exception
  with_mutable(gv:Mutable[T],p:P) : MACRO P =
    IF undef(gv) THEN
      unwind_protect(p,reset(gv))
    ELSE
      save_lift(LAMBDA(dummy:Dummy):p,gv,val(gv))
    ENDIF

  %% Set mutable variable gv to t and restore its value after p of type P is evaluated,
  %% even if control leaves p, e.g., due to an exception
  with_mutable(gv:Mutable[T],t:T,p:P) : MACRO P =
   with_mutable(gv,prog(set(gv,t),p))
 
END stdmutable

%% stdmath.pvs
%% PVSio math library 

stdmath : THEORY
BEGIN

  %% The following functions are available in the NASA PVS Library
  %% div and mod: ints@div_nat and ints@mod_nat
  %% sq: reals@sq
  %% sqrt: reals@sqrt
  %% sin and cos: trig@sincos_def
  %% tan: trig@trig_basic
  %% acos: trig@acos
  %% asin: trig@asin
  %% atan: trig@atan
  %% pi: trig@pi_def
  %% ln, exp, e:lnexp@ln_exp
  %% sinh, cosh, tanh: lnexp@hyperbolic

  % Rounding Modes
  RoundingMode : TYPE = {TowardsZero,TowardsInfnty,TowardsNegInfnty,TowardsPosInfnty}
  Truncate     : MACRO RoundingMode = TowardsZero
  AwayFromZero : MACRO RoundingMode = TowardsInfnty
  Ceiling      : MACRO RoundingMode = TowardsPosInfnty
  Floor        : MACRO RoundingMode = TowardsNegInfnty

  % set(PRECISION,<precision>) sets default precision to 10^(-val(PRECISION)) for computations and printing
  PRECISION : Global[nat,6] 

  % set(ROUNDING,<mode>) sets default rounding mode for computation and printing
  ROUNDING  : Global[RoundingMode,TowardsZero]

  %% set(PP_RATIONALS,<bool>) sets default for pretty printing rational numbers in PVSio
  PP_RATIONALS : Global[bool,TRUE]

  RANDOM            : {y:nnreal | 0 <= y AND y <= 1} 
  NRANDOM(n:posnat) : {y:nat | 0 <= y AND y < n} 
  BRANDOM           : bool = (NRANDOM(2) = 0)

  % Returns a rational number that is close to the real number (identity when input is rational)
  rational(x:real) : rat

  % Returns numerator,denominator of rational number
  rat2numden(r:rat) : {nd:[int,posnat] | LET (num,den) = nd IN r = num/den}

  % Returns numerator of rational number
  numerator(r:rat) : int =
    rat2numden(r)`1

  % Returns denominator of rational number
  denominator(r:rat): posnat =
    rat2numden(r)`2

  % Compute the decimal precision of a rational number. Return 2 values. The first one is the number of
  % non-repeating digits. If maxperiod is negative, the second value is the period of the repeating
  % digits. Computing the period is expensive for rationals with large denominators. Therefore, if
  % maxperiod is non-negative, the second value is the minimum between the period and maxperiod+1.
  % In either case, if the second value is 0, the rational has a finite decimal representation.
  decimal_precision(r:rat,maxperiod:int) : [nat,nat] 

END stdmath


%% stdstr.pvs
%% String operations

stdstr: THEORY
BEGIN

  StringChar : TYPE = {str:string | length(str) = 1}
  
% Prints standard table of characters
  chartable     : void 

  emptystr      : string = ""
  space         : StringChar = " "
  newline       : StringChar 
  tab           : string 
  singlequote   : StringChar = "'"
  backquote     : StringChar = "`"
  spaces(n:nat) : {str : string | length(str)=n} 

% Char from code n
  charcode(n:nat) : StringChar
  doublequote   : StringChar = charcode(34)

  upcase(s:string): {str: string | length(str)=length(s)}
  downcase(s:string): {str: string | length(str)=length(s)}
  capitalize(s:string): {str: string | length(str)=length(s)}
  
  %% Index of leftmost occurrence of s1 in s2 or -1 if s1 doesn't occur in s2
  strfind(s1,s2:string): {i:int | i <= length(s2)-length(s1)}

  %% Index of rightmost occurrence of s1 in s2 or -1 if s1 doesn't occur in s2
  strfind_from_end(s1,s2:string): {i:int | i <= length(s2)-length(s1)}

  %% If i <= j returns substring S[i..j]. Otherwise, returns substring
  %% S[j..i]. Empty if indices are out of range    
  %% NOTE: Name changed in PVS-8.0 from substr to substring to avoid clash
  %% with charstring.substr. stdstr.substr is still available but requires full
  %% qualification
  substring(s:string,i,j:int) : string

  substr(s:string,i,j:int) : string =
    substring(s,i,j)

  %% Reverse string
  strreverse(s:string) : string =
    IF length(s) = 0 THEN s
    ELSE 
      substring(s,length(s)-1,0)
    ENDIF

  %% Returns a new string in which all the occurences of part in s 
  %% is replaced with replacement."
  strreplace(s,part,replacement:string): string

  %% Split str using separator
  strsplit(str: string, separator: StringChar): list[string]

  %% Converts real number to string decimal representation using given precision, i.e., natural
  %% number n denoting 10^(-n), rounding mode, i.e, TowardsZero,TowardsInfnty,TowardsNegInfnty,
  %% TowardsPosInfnty. Displays trailing zeros when zeros is set to TRUE
  rat2decstr_with_zeros(r:rat,precision:nat,rounding:RoundingMode,zeros:bool) : string

  rat2decstr(r:rat,precision:nat,rounding:RoundingMode) : string =
    rat2decstr_with_zeros(r,precision,rounding,FALSE)

  %% Converts rational number to string decimal representation, truncating at precision, and with
  %% trailing zeros when significant
  rat2decstr(r:rat,precision:nat) : string =
    LET (finp,infp) = decimal_precision(r,precision),
        prec = IF infp = 0 AND finp <= precision THEN finp ELSE precision ENDIF IN
    rat2decstr_with_zeros(r,prec,Truncate,TRUE)    
 
  rat2decstr(r:rat) : string =
    rat2decstr(r,val(PRECISION))

  %% Converts rational number to string. The rational is printed in decimal representation if the
  %% representation is finite. Otherwise, it prints its rational form.
  rat2str(r:rat) : string =
    LET (finp,infp) = decimal_precision(r,0) IN
    IF infp = 0 THEN
      rat2decstr(r,finp,Truncate)
    ELSE
      format("~a",r)
    ENDIF
      
  %% Pretty prints decimal using overline to indicate repeating digits. Finp is the number of 
  %% non-repeating digits. Truncated indicates that the infinite representation was truncated.
  pp_decstr(str:string,finp:nat,truncated:bool) : string 

  %% Pretty prints rational numbers upto precision using overline to indicate repeating digits
  %% and ellipsis when decimal expansion is truncated.
  pp_rat(r:rat) : string =
    LET  precision = val(PRECISION),
         (finp,infp) = decimal_precision(r,precision),
	 str = rat2decstr_with_zeros(r,min(precision,finp+infp),Truncate,TRUE) IN
    pp_decstr(str,finp,finp+infp > precision)

  %% Converts real number r to string using a given precision and rounding, where the precision represents
  %% the accuracy  10^-precision and rounding mode is one of TowardsZero,TowardsInfnty,TowardsNegInfnty,
  %% TowardsPosInfnty.
  real2decstr(r:real,precision:nat,rounding:RoundingMode) : string =
    LET rat  = rational(r) IN
      rat2decstr(rat,precision,rounding)

  %% Converts real number to string decimal representation using default precision and rounding mode
  real2str(r:real) :string =
    real2decstr(r,val(PRECISION),val(ROUNDING))

  %% Converts string representing a decimal number to rational number
  %% May throw exception NotARealNumber
  decstr2rat(s:string) : rat

  %% Bool to string
  bool2str(b:bool): string =
    IF b THEN "TRUE" ELSE "FALSE" ENDIF

  tostr(r:real): MACRO string = real2str(r)
  tostr(b:bool): MACRO string = bool2str(b)

  %% String to real
  %% May throw exception NotARealNumber
  str2real(s:string): rat

  %% String to real
  %% May throw exception NotAnInteger
  str2int(s:string) : int
  
  str2bool(s,answer:string):bool = downcase(s) = downcase(answer)

  %% May throw NotABoolean                              
  str2boolean(s:string): bool =
    IF str2bool(s,"TRUE")  THEN TRUE
    ELSIF str2bool(s,"FALSE") THEN FALSE
    ELSE throw(NotABoolean,s)
    ENDIF

  %% String is a number
  number?(s:string):bool

  %% String is an integer
  int?(s:string):bool

  %% String concatenation
  strconcat(s1:string,s2:string):{ str:string | length(str)=length(s1)+length(s2) } =
    s1 o s2

  %% This name is DEPRECATED. Use strconcat instead
  concat(s1:string,s2:string) : MACRO string =
    strconcat(s1,s2)

  ;+(s1:string,s2:string): MACRO string = strconcat(s1,s2)
  ;+(r:real,s:string): MACRO string = strconcat(tostr(r),s)
  ;+(s:string,r:real): MACRO string = strconcat(s,tostr(r))
  ;+(b:bool,s:string): MACRO string = strconcat(tostr(b),s)
  ;+(s:string,b:bool): MACRO string = strconcat(s,tostr(b))

  %% Concatenates n-times string s
  pad(n:nat,s:string): RECURSIVE string = 
    IF n=0 THEN emptystr
    ELSE s+pad(n-1,s)
    ENDIF
    MEASURE n

  %% String comparison, with case sensitivity
  %% = 0 if s1 = s2
  %% < 0 if s1 < s2
  %% > 0 if s1 > s2
  strcmp(s1,s2:string,sensitive:bool):subrange(-1,1)

  %% NOTE: Name changed in PVS-8.0 from strcmp to strcompare to avoid clash
  %% with charstring.strcmp. The function stdstr.strcmp is still available but
  %% requires full qualification
  strcompare(s1,s2:string): subrange(-1,1) = 
    strcmp(s1,s2,TRUE)

  strcmp(s1,s2:string) : subrange(-1,1) =
    strcmp(s2,s2,TRUE)  

  %% A substring of s2, with all the characters in s1 stripped of 
  %% the beginning and end
  strtrim(s1,s2:string):string

  %% Returns a substring of s2, with all the characters in s1 stripped of 
  %% the beginning 
  strtrim_left(s1,s2:string):string

  %% Returns a substring of s2, with all the characters in s1 stripped of 
  %% the end
  strtrim_right(s1,s2:string):string

  %% Returns a substring of s, with all the space characters stripped of 
  %% the beginning and end
  trim(s:string):string

  %% Returns a substring of s, with all the space characters stripped of 
  %% the beginning 
  trim_left(s:string):string

  %% Returns a substring of s, with all the space characters stripped of 
  %% the end
  trim_right(s:string):string

  %% Returns TRUE if T1 is a subtype of T2 (types are represented using strings).
  %% Uses subtype judgements, but otherwise it's essentially syntactic
  subtypeof?(T1,T2:string) : bool

 END stdstr

%% stdio.pvs
%% Input/output operations

stdio : THEORY
BEGIN

%% Print, Println 

  %% Prints lisp format of string s
  printstr(s:string):void = skip

  print(s:string)   : MACRO void = printstr(s)
  print(r:real)     : MACRO void = print(r+emptystr)
  print(b:bool)     : MACRO void = print(b+emptystr)
  println(s:string) : MACRO void = print(s+newline)
  println(r:real)   : MACRO void = print(r+newline)
  println(b:bool)   : MACRO void = print(b+newline)

%% Reading

  % Querying from stdin with prompt message
  query_token(mssg,s:string): string
  query_word(mssg:string)   : MACRO string = query_token(mssg,emptystr) 
  query_line(mssg:string)   : string

  % May throw exception NotARealNumber
  query_real(mssg:string)   : rat

  % May throw exception NotAnInteger
  query_int(mssg:string)    : int
  
  query_bool(mssg,answer:string):bool = str2bool(query_word(mssg),answer)

  % Reads from stdin
  read_token(s:string): MACRO string = query_token(emptystr,s) 
  read_word : MACRO string = query_word(emptystr)
  read_line : MACRO string = query_line(emptystr)
  read_real : MACRO rat    = query_real(emptystr)
  read_int  : MACRO int    = query_int(emptystr)
  read_bool(answer:string): MACRO bool   = query_bool(emptystr,answer)

%% Character Streams
  Stream   : TYPE+ 
  IStream  : TYPE+ FROM Stream
  OStream  : TYPE+ FROM Stream

  fclose(f:Stream)     :void =   %% Close an stream
    skip
  fexists(s:string)    :bool     %% true IFF file s exists
  fopen?(f:Stream)     :bool     %% Open stream?
  strstream?(f:Stream) :bool     %% String stream?
  filestream?(f:Stream):bool     %% File stream?
  sdtstream?(f:Stream) :bool =   %% Standard stream?
    NOT (filestream?(f) OR strstream?(f))
  finput?(f:Stream)    :bool     %% Input stream?
  foutput?(f:Stream)   :bool     %% Output stream?

%% Standard I/O Steams
  stdin    : IStream 
  stdout   : OStream 
  stderr   : OStream

  Mode   : TYPE = {
    input,  % Open input file stream or throw exception FileNotFound if file doesn't exist
    output, % Open output file stream or throw exception FileAlreadyExists if file does exist
    create, % Create output file stream regardless of existence of the file
    append, % Open output file stream and prepare for writing at end of stream (create file if it doesn't exist)
    overwrite, % Open output file stream and prepare for writing at beggining of stream (create file if it doesn't exist)
    rename, % Open output file stream (rename old file if file does exist)  
    str     % Open string stream for input or output
  }    
 
  input_mode?(m:Mode) : bool =
    (m = input OR m = str)

  output_mode?(m:Mode) : bool =
    (m = output OR m = create OR m = append OR m = overwrite OR
     m = rename OR m = str)

  mode2str(m:Mode) : string = pvs2str[Mode](m)

  tostr(m:Mode) : MACRO string = mode2str(m) 

  fopenin_lisp(s:string)        : IStream 
  fopenout_lisp(s:string,n:nat) : OStream
  
  sopenin(s:string)             : IStream
  sopenout(s:string)            : OStream

  fopenin(s:string) : IStream =
    IF length(s) = 0 THEN stdin
    ELSE 
      fopenin_lisp(s)
    ENDIF

  % Opens a file as an input stream
  fopenin(m:(input_mode?),s:string) : IStream = 
    IF m = input THEN fopenin(s)
    ELSE sopenin(s) %% m = str
    ENDIF

  % Closes file when done (no matter what)
  with_openin_file[P:TYPE+](m:(input_mode?),s:string,fp:[IStream->P]): P =
    LET fin = fopenin(m,s) IN
    unwind_protect(fp(fin),fclose(fin))

  % Closes file when done (no matter what)
  with_openin_file[P:TYPE+](s:string,fp:[IStream->P]): MACRO P =
    with_openin_file(input,s,fp)

  fopenout(s:string) : OStream =
    IF length(s) = 0 THEN stdout
    ELSE
      fopenout_lisp(s,0)
    ENDIF

  % Opens a file as an oput stream
  fopenout(m:(output_mode?),s:string): OStream =
    IF m = output       THEN fopenout(s) 
    ELSIF m = create    THEN fopenout_lisp(s,1)
    ELSIF m = append    THEN fopenout_lisp(s,2)
    ELSIF m = overwrite THEN fopenout_lisp(s,3)
    ELSIF m = rename    THEN fopenout_lisp(s,4)
    ELSE sopenout(s) %% m = str
    ENDIF

  % Closes file when done (no matter what)
  with_openout_file[P:TYPE+](m:(output_mode?),s:string,fp:[OStream->P]): P =
    LET fout = fopenout(m,s) IN
    unwind_protect(fp(fout),fclose(fout))

  % Closes file when done (no matter what)
  with_openout_file[P:TYPE+](s:string,fp:[OStream->P]): MACRO P =
    with_openout_file(output,s,fp)

  fname_lisp(f:Stream)           :string
  fgetstr_lisp(f:OStream)        :string
  eof_lisp(f:IStream)            :bool           
  flength_lisp(f:Stream)         :nat          
  fgetpos_lisp(f:Stream)         :nat         
  fsetpos_lisp(f:Stream,n:nat)   :void   
  fprint_lisp(f:OStream,s:string):void = skip

  % Gets the full name of a file string
  fname(f:Stream):string =
    if filestream?(f) then 
      fname_lisp(f)
    else
      emptystr
    endif

  % Gets string from an *output string* stream 
  fgetstr(f:OStream):string =
    if fopen?(f) then fgetstr_lisp(f)
    else throw(ClosedStream,fname(f))
    endif

  %% true IFF f has reached EOF
  eof?(f:IStream):bool =
    if fopen?(f) then eof_lisp(f)
    else throw(ClosedStream,fname(f))
    endif

  %% Length of stream 
  flength(f:Stream):nat =
    if fopen?(f) then flength_lisp(f)
    else throw(ClosedStream,fname(f))
    endif

  %% Gets current position 
  fgetpos(f:Stream):nat = 
    if fopen?(f) then fgetpos_lisp(f)
    else throw(ClosedStream,fname(f))
    endif

  % Prints to a stream
  fprint(f:OStream,s:string):void = 
    if fopen?(f) then fprint_lisp(f,s)
    else throw(ClosedStream,fname(f))
    endif
  fprint(f:OStream,r:real)    : MACRO void = fprint(f,r+emptystr)
  fprint(f:OStream,b:bool)    : MACRO void = fprint(f,b+emptystr)
  
  %% Sets current positions
  fsetpos(f:Stream,n:nat):void =
    if fopen?(f) then fsetpos_lisp(f,n)
    else throw(ClosedStream,fname(f))
    endif

  % Printlns to a stream
  fprintln(f:OStream,s:string): MACRO void = fprint(f,s+newline)
  fprintln(f:OStream,r:real)  : MACRO void = fprint(f,r+newline)
  fprintln(f:OStream,b:bool)  : MACRO void = fprint(f,b+newline)

  % Prints to a stream and echoes to stdout
  echo(f:OStream,s:string): MACRO void = print(s) & fprint(f,s) 
  echo(f:OStream,r:real)  : MACRO void = print(r) & fprint(f,r) 
  echo(f:OStream,b:bool)  : MACRO void = print(b) & fprint(f,b) 

  % Printlns to a stream and echo to stdout
  echoln(f:OStream,s:string): MACRO void = println(s) & fprintln(f,s)
  echoln(f:OStream,r:real)  : MACRO void = println(r) & fprintln(f,r) 
  echoln(f:OStream,b:bool)  : MACRO void = println(b) & fprintln(f,b) 

%% Input functions
  fread_token_lisp(f:IStream,s:string) : string
  fread_line_lisp(f:IStream) : string
  fread_real_lisp(f:IStream) : rat
  fread_int_lisp(f:IStream)  : int

  fcheck(f:IStream): bool = 
    (fopen?(f)   OR throw(ClosedStream,fname(f))) AND
    (NOT eof?(f) OR throw(EndOfFile,fname(f)))

  % Reads a token from f separated by characters in s from a stream
  fread_token(f:IStream,s:string) : string =
    prog(fcheck(f),fread_token_lisp(f,s))

  % Reads a word from f
  fread_word(f:IStream) : MACRO string =
    fread_token(f,emptystr)

  % Reads a line from f
  fread_line(f:IStream) : string =
    prog(fcheck(f),fread_line_lisp(f))

  % Reads a real number from f
  % May throw the exception NotARealNumber 
  fread_real(f:IStream) : rat =
    prog(fcheck(f),fread_real_lisp(f))

  % Reads an integer from f
  % May throw the exception NotAnInteger 
  fread_int(f:IStream)  : int =
    prog(fcheck(f),fread_int_lisp(f))

  % Reads a boolean from f
  fread_bool(f:IStream,answer:string): MACRO bool=
    str2bool(fread_word(f),answer)

  % Returns the name part of a file name
  filename(s:string):string

  % Returns the directory part of a file name
  directory(s:string):string

  %% Return path name as a list of directories
  pathname_path(name:string) : list[string]

  %% Split filename given a seprator
  split_filename(name:string,separator:StringChar) : [string,string] =
    LET pos = strfind_from_end(separator,name) IN
      IF pos < 0 THEN
        (name,"")
       ELSE
        (substring(name,0,pos-1),substring(name,pos+1,length(name)-1))
      ENDIF

  %% Filename without extension
  filename_without_extension(name:string) : string =
    split_filename(name,".")`1

  %% Extension of filename
  filename_extension(name:string) : string =
    split_filename(name,".")`2

  %% Formatting functions
  center(col:nat,s:string):string = format("~"+col+":@<~a~>",s)

  flushleft(col:nat,s:string) :string = format("~"+col+"a",s)

  flushright(col:nat,s:string):string = format("~"+col+"@a",s)

  printf(s:string) : MACRO void =
    print(format(s,""))

  fprintf(f:OStream,s:string): MACRO void =
    fprint(f,format(s,""))

  % Writes a PVS object to an output stream, so that it can be retrieved afterwards by fread
  fwrite_lisp(f:OStream,typ:string,t:Lisp_) : void

  % Writes a PVS object to an output stream, so that it can be retrieved afterwards by fread
  fwrite[T:TYPE](f:OStream,t:T) : MACRO void =
    LET the_type = type_of_domain_lisp(dummy_fun[T]) IN
    fwrite_lisp(f,the_type,to_lisp_[T](t))

  FileWriter[T:TYPE]  : TYPE = [[OStream,T]->void]

  %fwrite_writer[T:TYPE] : JUDGEMENT
  %  fwrite[T] HAS_TYPE FileWriter

  fread_lisp[T:TYPE+](f:IStream,typ:string) : T

  % Reads a PVS object of type T from an input stream written by fwrite.
  % Throws CantTranslateBack exception if read object is not of type T
  fread[T:TYPE+](f:IStream) : MACRO T =
    LET the_type = type_of_domain_lisp(dummy_fun[T]) IN
      fread_lisp(f,the_type)

  FileReader[T:TYPE+] : TYPE = [[IStream]->T]

  %fread_reader[T:TYPE+] : JUDGEMENT
  %  fread[T] HAS_TYPE FileReader

  % Iterates a function on a file n times
  fmap[T:TYPE+](f:IStream,fread:[IStream->string],t:T,st:[[string,T]->T],n:nat) : 
    RECURSIVE T =
    IF fopen?(f) THEN
      IF n=0 or eof?(f) THEN t
      ELSE
        LET s  = fread(f) IN
        LET nt = st(s,t) IN
          fmap(f,fread,nt,st,n-1)
      ENDIF
    ELSE throw(ClosedStream,fname(f))
    ENDIF
    MEASURE n

  % Iterates a function on a file until the end. Closes file when done (no matter what)
  fmap[T:TYPE+](f:IStream,fread:[IStream->string],t:T,st:[[string,T]->T]) : T =
    LET l = flength(f) IN
    unwind_protect(fmap(f,fread,t,st,l),fclose(f))

  % Iterates a function on a file line by line until the end. Closes file when done (no matter what)
  fmap_line[T:TYPE+](f:IStream,t:T,st:[[string,T]->T]):T =
    LET l = flength(f) IN
    unwind_protect(fmap(f,fread_line,t,st,l),fclose(f))

  % Formatting text to a file
  printf[T:TYPE](s:string,t:T): MACRO void =
    print(format(s,t))

  fprintf[T:TYPE](f:OStream,s:string,t:T): MACRO void =
    fprint(f,format(s,t))

END stdio

%% stdfmap.pvs
%% In PVS-8.0, stdfmap was integrated into stdio

%% stdindent.pvs
%% In PVS-8.0, stdindent was moved to NASALib/pvsio_utils

%% stdtokenizer.pvs
%% In PVS-8.0, stdindent theory was moved to NASALib/pvsio_utils

%% stdpvsio.pvs
%% PVSio interface

stdpvsio : THEORY
BEGIN

  help_pvs_attachment(s:string) : void 

  help_pvs_theory_attachments(s:string) : void 

  pvsio_version : string

  set_promptin(s:string) : void

  set_promptout(s:string) : void

END stdpvsio

%% stdsys.pvs
%% PVSio sytem library 

stdsys : THEORY
BEGIN
  
  Time : TYPE = [# 
    second : below(60),
    minute : below(60),
    hour   : below(24),
    day    : subrange(1,31),
    month  : subrange(1,12),
    year   : nat,
    dow    : below(7), % Day of week: 0 Monday
    dst    : bool,     % Dayligth saving time?
    tz     : {x:rat| -24 <= x AND x <= 24} % Time zone 
  #]

  tinybang : Time = (#
    day    := 1,
    dow    := 0,
    dst    := false,
    hour   := 0,
    minute := 0,
    month  := 1,
    second := 0,
    tz     := 0,
    year   := 0
  #)

  days_of_week(dow:below(7)):string =
    if    dow=0 then "Monday"
    elsif dow=1 then "Tuesday"
    elsif dow=2 then "Wednesday"
    elsif dow=3 then "Thursday" 
    elsif dow=4 then "Friday"
    elsif dow=5 then "Saturday"
    else  "Sunday"
    endif
 
  months(month:subrange(1,12)):string =
    if    month=1  then "January"
    elsif month=2  then "February"
    elsif month=3  then "March"
    elsif month=4  then "April"
    elsif month=5  then "May"
    elsif month=6  then "June"
    elsif month=7  then "July"
    elsif month=8  then "August"
    elsif month=9  then "September"
    elsif month=10 then "October"
    elsif month=11 then "November"
    else "December"
    endif

  tostr(t:Time): string =
    days_of_week(dow(t))+" "+months(month(t))+
    format(" ~2,'0d ",day(t))+year(t)+
    format(", ~2,'0d:~2,'0d:~2,'0d ",{| hour(t),minute(t),second(t) |})+
    format("(GMT~@d)",-tz(t))
    
  get_time : Time     % Get current time

  %% Today in US format mm/dd/yy
  today : string =
    LET t = get_time IN
    format("~2,'0d/~2,'0d/~d",{| month(t), day(t), year(t) |})

  %% Today in long format
  date : string =
    tostr(get_time)

  %% Today in yyyy-mm-dd format
  date_yyyy_mm_dd : string =
    LET t = get_time IN
    format("~d-~2,'0d-~2,'0d",{| year(t), month(t), day(t) |})

  %% Today in dd-mm-yyyy format
  date_dd_mm_yyyy : string =
    LET t = get_time IN
    format("~2,'0d-~2,'0d-~d",{| day(t), month(t), year(t) |})

  real_time : nat % Realtime in internal units
  run_time  : nat % Realtime in internal units
  internal_time_units : posreal % Internal units

  Stamp : Global[[nat,nat],(0,0)]  % (realtime,runtime)

  tic : void =
    set[[nat,nat]](Stamp,(real_time,run_time))

  Toc : TYPE = [nnreal,nnreal]
  
  %% Return times in seconds
  toc : Toc = 
    LET (ret,rut) = (real_time,run_time),
        (re0,ru0) = val[[nat,nat]](Stamp) IN
      (max(0,(ret-re0))/internal_time_units,
       max(0,(rut-ru0)/internal_time_units))

  % t is in secods; returns formatted string in the form "<h>h:<m>m:<s>s"
  hms(t:real) : string =
    LET ts : int = floor(t),
	ms : real = t-ts,
	h  : int = floor(ts/3600),
        m  : int = floor(mod(ts,3600)/60),
        s  : real = mod(mod(ts,3600),60)+ms IN
    format("~ah:~am:~,3fs",{|h,m,s|})

  strtoc(atoc:Toc) : MACRO string =
    LET (realtime,runtime) = atoc IN 
    format("Real Time: ~a (~,3f sec). Run Time: ~a (~,3f sec)~%",
	  {| hms(realtime), realtime, hms(runtime), runtime |})

  %% Time profiler of a function
  time_profiler[T:TYPE+](fun:T) : MACRO T =
    LET (result,atoc) = prog[[T,Toc]](tic,(fun,toc)) IN
      prog(print(strtoc(atoc)),
    	   result)

  sleep(n:nat): void  % Sleep n seconds 

  get_env(name,default:string):string % Get environment variable (default)

  get_env(name:string): MACRO string = get_env(name,emptystr)

  % Make a system call and return status and output string
  system_call(call:string) : [nat,string]

END stdsys
