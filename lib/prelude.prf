(|booleans|)(|equalities|)(|notequal|)(|if_def| (IF_TCC1 0 (IF_TCC1-1 |nil| 3237052399 ("" (INST 1 "LAMBDA (x: [boolean, T, T]): PROJ_2(x)") NIL NIL) ((T FORMAL-TYPE-DECL NIL |if_def| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL (IF EXISTENCE "" "[[booleans.boolean, if_def.T, if_def.T] -> if_def.T]"))))(|boolean_props| (|bool_exclusive| 0 (|bool_exclusive-1| |nil| 3237052399 ("" (IFF) (("" (PROP) NIL NIL)) NIL) NIL NIL)) (|bool_inclusive| 0 (|bool_inclusive-1| |nil| 3237052399 ("" (SKOLEM!) (("" (PROP) (("" (IFF) (("" (PROP) NIL NIL)) NIL)) NIL)) NIL) NIL NIL)) (|not_def| 0 (|not_def-1| |nil| 3237052399 ("" (SKOSIMP) (("" (IFF) (("" (PROP) NIL NIL)) NIL)) NIL) NIL NIL)) (|and_def| 0 (|and_def-1| |nil| 3237052399 ("" (SKOLEM!) (("" (IFF) (("" (PROP) NIL NIL)) NIL)) NIL) NIL NIL)) (|syand_def| 0 (|syand_def-1| |nil| 3237052399 ("" (PROPAX) NIL NIL) NIL NIL)) (|or_def| 0 (|or_def-1| |nil| 3237052399 ("" (SKOLEM!) (("" (IFF) (("" (PROP) NIL NIL)) NIL)) NIL) NIL NIL)) (|implies_def| 0 (|implies_def-1| |nil| 3237052399 ("" (SKOLEM!) (("" (IFF) (("" (PROP) NIL NIL)) NIL)) NIL) NIL NIL)) (|syimplies_def| 0 (|syimplies_def-1| |nil| 3237052399 ("" (PROPAX) NIL NIL) NIL NIL)) (|when_def| 0 (|when_def-1| |nil| 3237052399 ("" (SKOLEM!) NIL NIL) NIL NIL)) (|iff_def| 0 (|iff_def-1| |nil| 3237052399 ("" (SKOLEM!) (("" (IFF) (("" (PROP) NIL NIL)) NIL)) NIL) NIL NIL)) (|syiff_def| 0 (|syiff_def-1| |nil| 3237052399 ("" (PROPAX) NIL NIL) NIL NIL)) (|excluded_middle| 0 (|excluded_middle-1| |nil| 3237052399 ("" (GRIND) NIL NIL) NIL NIL)))(|xor_def| (|xor_def| 0 (|xor_def-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((/= CONST-DECL "boolean" |notequal| NIL) (XOR CONST-DECL "bool" |xor_def| NIL)) NIL)))(|quantifier_props| (|not_exists| 0 (|not_exists-1| |nil| 3237052399 ("" (SKOLEM!) (("" (IFF) (("" (PROP) (("1" (SKOLEM!) (("1" (INST?) NIL NIL)) NIL) ("2" (SKOLEM!) (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL) (NIL) NIL)) (|exists_not| 0 (|exists_not-1| |nil| 3237052399 ("" (GRIND) NIL NIL) (NIL) NIL)) (|exists_or| 0 (|exists_or-1| |nil| 3237052399 ("" (GRIND) NIL NIL) (NIL) NIL)) (|exists_implies| 0 (|exists_implies-1| |nil| 3237052399 ("" (GRIND) NIL NIL) (NIL) NIL)) (|exists_and| 0 (|exists_and-1| |nil| 3237052399 ("" (GRIND) NIL NIL) (NIL) NIL)) (|not_forall| 0 (|not_forall-1| |nil| 3237052399 ("" (GRIND) NIL NIL) (NIL) NIL)) (|forall_not| 0 (|forall_not-1| |nil| 3237052399 ("" (GRIND) NIL NIL) (NIL) NIL)) (|forall_and| 0 (|forall_and-1| |nil| 3237052399 ("" (GRIND) NIL NIL) (NIL) NIL)) (|forall_or| 0 (|forall_or-1| |nil| 3237052399 ("" (GRIND) NIL NIL) (NIL) NIL)))(|defined_types|)(|exists1| (|unique_lem| 0 (|unique_lem-1| |nil| 3237052399 ("" (SKOLEM!) (("" (FLATTEN) (("" (EXPAND "unique?") (("" (SKOLEM!) (("" (FLATTEN) (("" (INST-CP -1 "x!1") (("" (INST -1 "y!1") (("" (INST - "x!1" "y!1") (("" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((T FORMAL-TYPE-DECL NIL |exists1| NIL) (|unique?| CONST-DECL "bool" |exists1| NIL)) NIL)) (|exists1_lem| 0 (|exists1_lem-1| |nil| 3237052399 ("" (SKOLEM!) (("" (FLATTEN) (("" (EXPAND "exists1") (("" (PROP) NIL NIL)) NIL)) NIL)) NIL) ((|exists1| CONST-DECL "bool" |exists1| NIL)) NIL)))(|equality_props| (|IF_true| 0 (|IF_true-1| |nil| 3237052399 ("" (GRIND) NIL NIL) NIL NIL)) (|IF_false| 0 (|IF_false-1| |nil| 3237052399 ("" (GRIND) NIL NIL) NIL NIL)) (|IF_same| 0 (|IF_same-1| |nil| 3237052399 ("" (GRIND) NIL NIL) NIL NIL)) (|reflexivity_of_equals| 0 (|reflexivity_of_equals-1| |nil| 3237052399 ("" (SKOLEM!) NIL NIL) NIL NIL)) (|transitivity_of_equals| 0 (|transitivity_of_equals-1| |nil| 3237052399 ("" (SKOLEM!) (("" (FLATTEN) (("" (REPLACE -1) (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) NIL NIL)) (|symmetry_of_equals| 0 (|symmetry_of_equals-1| |nil| 3237052399 ("" (SKOLEM!) (("" (FLATTEN) (("" (REPLACE -1) (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) NIL NIL)))(|if_props| (|lift_if1| 0 (|lift_if1-1| |nil| 3237052399 ("" (GRIND) NIL NIL) NIL NIL)) (|lift_if2| 0 (|lift_if2-1| |nil| 3237052399 ("" (GRIND) NIL NIL) NIL NIL)))(|functions| (|extensionality_postulate| 0 (|extensionality_postulate-1| |nil| 3237052399 ("" (SKOSIMP) (("" (PROP) (("1" (APPLY-EXTENSIONALITY) NIL NIL) ("2" (SKOSIMP) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((D FORMAL-TYPE-DECL NIL |functions| NIL) (R FORMAL-TYPE-DECL NIL |functions| NIL)) NIL)) (|extensionality| 0 (|extensionality-1| |nil| 3237052399 ("" (SKOLEM!) (("" (FLATTEN) (("" (APPLY-EXTENSIONALITY) NIL NIL)) NIL)) NIL) ((D FORMAL-TYPE-DECL NIL |functions| NIL) (R FORMAL-TYPE-DECL NIL |functions| NIL)) NIL)) (|congruence| 0 (|congruence-1| |nil| 3237052399 ("" (GRIND) NIL NIL) NIL NIL)) (|eta| 0 (|eta-1| |nil| 3237052399 ("" (SKOLEM!) (("" (APPLY-EXTENSIONALITY) NIL NIL)) NIL) ((R FORMAL-TYPE-DECL NIL |functions| NIL) (D FORMAL-TYPE-DECL NIL |functions| NIL)) NIL)))(|functions_alt|)(|transpose|)(|restrict| (|injective_restrict| 0 (|injective_restrict-1| |nil| 3237052399 ("" (EXPAND "injective?") (("" (SKOSIMP*) (("" (GRIND) NIL NIL)) NIL)) NIL) ((|restrict| CONST-DECL "R" |restrict| NIL) (S FORMAL-SUBTYPE-DECL NIL |restrict| NIL) (|S_pred| CONST-DECL "[T -> boolean]" |restrict| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |restrict| NIL) (|injective?| CONST-DECL "bool" |functions| NIL)) NIL)) (|restrict_of_inj_is_inj| 0 (|restrict_of_inj_is_inj-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |restrict| NIL) (R FORMAL-TYPE-DECL NIL |restrict| NIL) (S FORMAL-SUBTYPE-DECL NIL |restrict| NIL) (|S_pred| CONST-DECL "[T -> boolean]" |restrict| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (|injective?| CONST-DECL "bool" |functions| NIL)) NIL (|restrict_of_inj_is_inj| SUBTYPE "restrict.restrict(restrict.f)" "(functions[S, restrict.R].injective?)"))))(|restrict_props| (|restrict_full| 0 (|restrict_full-1| |nil| 3245191654 ("" (GRIND :IF-MATCH NIL) (("" (APPLY-EXTENSIONALITY :HIDE? T) NIL NIL)) NIL) ((R FORMAL-TYPE-DECL NIL |restrict_props| NIL) (T FORMAL-TYPE-DECL NIL |restrict_props| NIL) (|restrict| CONST-DECL "R" |restrict| NIL)) SHOSTAK)))(|extend| (|restrict_extend| 0 (|restrict_extend-1| |nil| 3237052399 ("" (GRIND) (("" (APPLY-EXTENSIONALITY) NIL NIL)) NIL) ((R FORMAL-TYPE-DECL NIL |extend| NIL) (S FORMAL-SUBTYPE-DECL NIL |extend| NIL) (|S_pred| CONST-DECL "[T -> boolean]" |extend| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |extend| NIL) (|extend| CONST-DECL "R" |extend| NIL) (|restrict| CONST-DECL "R" |restrict| NIL)) NIL)))(|extend_bool|)(|extend_props| (|extend_full| 0 (|extend_full-1| |nil| 3245191700 ("" (GRIND :IF-MATCH NIL) (("" (APPLY-EXTENSIONALITY :HIDE? T) NIL NIL)) NIL) ((R FORMAL-TYPE-DECL NIL |extend_props| NIL) (T FORMAL-TYPE-DECL NIL |extend_props| NIL) (|extend| CONST-DECL "R" |extend| NIL) (|d| FORMAL-CONST-DECL "R" |extend_props| NIL)) SHOSTAK)))(|extend_func_props| (|surjective_extend| 0 (|surjective_extend-1| |nil| 3249327214 ("" (SKOLEM-TYPEPRED) (("" (EXPAND "surjective?") (("" (SKOLEM!) (("" (INST?) (("" (SKOLEM!) (("" (INST?) (("" (EXPAND "extend") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|extend| CONST-DECL "R" |extend| NIL) (|surjective?| CONST-DECL "bool" |functions| NIL) (R FORMAL-TYPE-DECL NIL |extend_func_props| NIL) (S FORMAL-SUBTYPE-DECL NIL |extend_func_props| NIL) (|S_pred| CONST-DECL "[T -> boolean]" |extend_func_props| NIL) (T FORMAL-TYPE-DECL NIL |extend_func_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL (|surjective_extend| SUBTYPE "extend[extend_func_props.T, S, extend_func_props.R, extend_func_props.d].extend(extend_func_props.f)" "(functions[extend_func_props.T, extend_func_props.R].surjective?)"))))(|K_conversion|)(|K_props| (|K_preserves1| 0 (|K_preserves1-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|K_conversion| CONST-DECL "T1" |K_conversion| NIL)) NIL (|K_preserves1| SUBTYPE "K_conversion[K_props.T1, K_props.T2].K_conversion(K_props.x)" "[K_props.T2 -> S]"))))(|identity| (I_TCC1 0 (I_TCC1-1 |nil| 3237052399 ("" (GRIND) NIL NIL) ((T FORMAL-TYPE-DECL NIL |identity| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (|surjective?| CONST-DECL "bool" |functions| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL)) NIL (I SUBTYPE "(LAMBDA x: identity.x)" "(functions[identity.T, identity.T].bijective?)"))))(|identity_props|)(|relations|)(|orders| (|strict_order_is_antisymmetric| 0 (|strict_order_is_antisymmetric-1| |nil| 3252220963 ("" (GRIND :IF-MATCH NIL) (("" (INST -2 "x!2" "y!1" "x!2") (("" (ASSERT) (("" (INST -1 "x!2") NIL NIL)) NIL)) NIL)) NIL) ((|irreflexive?| CONST-DECL "bool" |relations| NIL) (|transitive?| CONST-DECL "bool" |relations| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|strict_order?| CONST-DECL "bool" |orders| NIL) (|antisymmetric?| CONST-DECL "bool" |relations| NIL)) SHOSTAK (|strict_order_is_antisymmetric| SUBTYPE "orders.x" "(relations[orders.T].antisymmetric?)"))) (|linear_is_total| 0 (|linear_is_total-1| |nil| 3237052399 ("" (SKOLEM-TYPEPRED) (("" (EXPAND "linear_order?") (("" (PROPAX) NIL NIL)) NIL)) NIL) ((|linear_order?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (T FORMAL-TYPE-DECL NIL |orders| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL (|linear_is_total| SUBTYPE "orders.x" "(orders.total_order?)"))) (|total_is_linear| 0 (|total_is_linear-1| |nil| 3237052399 ("" (SKOLEM-TYPEPRED) (("" (EXPAND "linear_order?") (("" (PROPAX) NIL NIL)) NIL)) NIL) ((|linear_order?| CONST-DECL "bool" |orders| NIL) (|total_order?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (T FORMAL-TYPE-DECL NIL |orders| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL (|total_is_linear| SUBTYPE "orders.x" "(orders.linear_order?)"))))(|orders_alt| (|least_upper_bound_is_upper_bound| 0 (|least_upper_bound_is_upper_bound-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |orders_alt| NIL) (|least_upper_bound?| CONST-DECL "[T -> bool]" |orders_alt| NIL) (|pe| FORMAL-CONST-DECL "nonempty_pred[T]" |orders_alt| NIL) (|nonempty_pred| TYPE-EQ-DECL NIL |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) NIL NIL (|upper_bound?| CONST-DECL "[T -> bool]" |orders_alt| NIL) NIL NIL) NIL (|least_upper_bound_is_upper_bound| SUBTYPE "orders_alt.x" "(orders_alt.upper_bound?)"))) (|greatest_lower_bound_is_lower_bound| 0 (|greatest_lower_bound_is_lower_bound-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |orders_alt| NIL) (|greatest_lower_bound?| CONST-DECL "[T -> bool]" |orders_alt| NIL) (|pe| FORMAL-CONST-DECL "nonempty_pred[T]" |orders_alt| NIL) (|nonempty_pred| TYPE-EQ-DECL NIL |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) NIL NIL (|lower_bound?| CONST-DECL "[T -> bool]" |orders_alt| NIL) NIL NIL) NIL (|greatest_lower_bound_is_lower_bound| SUBTYPE "orders_alt.x" "(orders_alt.lower_bound?)"))))(|restrict_order_props| (|reflexive_restrict| 0 (|reflexive_restrict-1| |nil| 3249347110 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |restrict_order_props| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (S FORMAL-SUBTYPE-DECL NIL |restrict_order_props| NIL) (|S_pred| CONST-DECL "[T -> boolean]" |restrict_order_props| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (|reflexive?| CONST-DECL "bool" |relations| NIL)) NIL (|reflexive_restrict| SUBTYPE "restrict[[restrict_order_props.T, restrict_order_props.T], [S, S], bool].restrict(restrict_order_props.R)" "(relations[S].reflexive?)"))) (|irreflexive_restrict| 0 (|irreflexive_restrict-1| |nil| 3249347110 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |restrict_order_props| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (S FORMAL-SUBTYPE-DECL NIL |restrict_order_props| NIL) (|S_pred| CONST-DECL "[T -> boolean]" |restrict_order_props| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (|irreflexive?| CONST-DECL "bool" |relations| NIL)) NIL (|irreflexive_restrict| SUBTYPE "restrict[[restrict_order_props.T, restrict_order_props.T], [S, S], bool].restrict(restrict_order_props.R)" "(relations[S].irreflexive?)"))) (|symmetric_restrict| 0 (|symmetric_restrict-1| |nil| 3249347110 ("" (SKOLEM-TYPEPRED) (("" (EXPAND* "symmetric?" "restrict") (("" (SKOSIMP) (("" (INST - "x!1" "y!1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|restrict| CONST-DECL "R" |restrict| NIL) (S FORMAL-SUBTYPE-DECL NIL |restrict_order_props| NIL) (|S_pred| CONST-DECL "[T -> boolean]" |restrict_order_props| NIL) (|symmetric?| CONST-DECL "bool" |relations| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (T FORMAL-TYPE-DECL NIL |restrict_order_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL (|symmetric_restrict| SUBTYPE "restrict[[restrict_order_props.T, restrict_order_props.T], [S, S], bool].restrict(restrict_order_props.R)" "(relations[S].symmetric?)"))) (|antisymmetric_restrict| 0 (|antisymmetric_restrict-1| |nil| 3249347110 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |restrict_order_props| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (S FORMAL-SUBTYPE-DECL NIL |restrict_order_props| NIL) (|S_pred| CONST-DECL "[T -> boolean]" |restrict_order_props| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (|antisymmetric?| CONST-DECL "bool" |relations| NIL)) NIL (|antisymmetric_restrict| SUBTYPE "restrict[[restrict_order_props.T, restrict_order_props.T], [S, S], bool].restrict(restrict_order_props.R)" "(relations[S].antisymmetric?)"))) (|connected_restrict| 0 (|connected_restrict-1| |nil| 3249347110 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |restrict_order_props| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (S FORMAL-SUBTYPE-DECL NIL |restrict_order_props| NIL) (|S_pred| CONST-DECL "[T -> boolean]" |restrict_order_props| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (|connected?| CONST-DECL "bool" |relations| NIL)) NIL (|connected_restrict| SUBTYPE "restrict[[restrict_order_props.T, restrict_order_props.T], [S, S], bool].restrict(restrict_order_props.R)" "(relations[S].connected?)"))) (|transitive_restrict| 0 (|transitive_restrict-1| |nil| 3249347110 ("" (SKOLEM-TYPEPRED) (("" (EXPAND* "transitive?" "restrict") (("" (SKOSIMP) (("" (INST - "x!1" "y!1" "z!1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|restrict| CONST-DECL "R" |restrict| NIL) (S FORMAL-SUBTYPE-DECL NIL |restrict_order_props| NIL) (|S_pred| CONST-DECL "[T -> boolean]" |restrict_order_props| NIL) (|transitive?| CONST-DECL "bool" |relations| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (T FORMAL-TYPE-DECL NIL |restrict_order_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL (|transitive_restrict| SUBTYPE "restrict[[restrict_order_props.T, restrict_order_props.T], [S, S], bool].restrict(restrict_order_props.R)" "(relations[S].transitive?)"))) (|equivalence_restrict| 0 (|equivalence_restrict-1| |nil| 3249347110 ("" (GRIND :IF-MATCH NIL) (("1" (INST -6 "x!1" "y!1" "z!1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST -4 "x!1" "y!1") (("2" (ASSERT) NIL NIL)) NIL) ("3" (INST -2 "x!1") NIL NIL)) NIL) ((|equivalence?| CONST-DECL "bool" |relations| NIL) (|reflexive_restrict| APPLICATION-JUDGEMENT "(reflexive?[S])" |restrict_order_props| NIL) (|transitive_restrict| APPLICATION-JUDGEMENT "(transitive?[S])" |restrict_order_props| NIL) (|symmetric_restrict| APPLICATION-JUDGEMENT "(symmetric?[S])" |restrict_order_props| NIL)) NIL (|equivalence_restrict| SUBTYPE "restrict[[restrict_order_props.T, restrict_order_props.T], [S, S], bool].restrict(restrict_order_props.R)" "(relations[S].equivalence?)"))) (|preorder_restrict| 0 (|preorder_restrict-1| |nil| 3249347110 ("" (GRIND :IF-MATCH NIL) (("1" (INST -5 "x!1" "y!1" "z!1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST -2 "x!1") NIL NIL)) NIL) ((|preorder?| CONST-DECL "bool" |orders| NIL) (|reflexive_restrict| APPLICATION-JUDGEMENT "(reflexive?[S])" |restrict_order_props| NIL) (|transitive_restrict| APPLICATION-JUDGEMENT "(transitive?[S])" |restrict_order_props| NIL)) NIL (|preorder_restrict| SUBTYPE "restrict[[restrict_order_props.T, restrict_order_props.T], [S, S], bool].restrict(restrict_order_props.R)" "(orders[S].preorder?)"))) (|partial_order_restrict| 0 (|partial_order_restrict-1| |nil| 3249347110 ("" (GRIND :IF-MATCH NIL) (("1" (INST -5 "x!1" "y!1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST -5 "x!1" "y!1" "z!1") (("2" (ASSERT) NIL NIL)) NIL) ("3" (INST -2 "x!1") NIL NIL)) NIL) ((|partial_order?| CONST-DECL "bool" |orders| NIL) (|antisymmetric_restrict| APPLICATION-JUDGEMENT "(antisymmetric?[S])" |restrict_order_props| NIL) (|preorder_restrict| APPLICATION-JUDGEMENT "(preorder?[S])" |restrict_order_props| NIL)) NIL (|partial_order_restrict| SUBTYPE "restrict[[restrict_order_props.T, restrict_order_props.T], [S, S], bool].restrict(restrict_order_props.R)" "(orders[S].partial_order?)"))) (|strict_order_restrict| 0 (|strict_order_restrict-1| |nil| 3249347110 ("" (GRIND :IF-MATCH NIL) (("1" (INST -5 "x!1" "y!1" "z!1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST -2 "x!1") NIL NIL)) NIL) ((|strict_order?| CONST-DECL "bool" |orders| NIL) (|irreflexive_restrict| APPLICATION-JUDGEMENT "(irreflexive?[S])" |restrict_order_props| NIL) (|transitive_restrict| APPLICATION-JUDGEMENT "(transitive?[S])" |restrict_order_props| NIL) (|antisymmetric_restrict| APPLICATION-JUDGEMENT "(antisymmetric?[S])" |restrict_order_props| NIL)) NIL (|strict_order_restrict| SUBTYPE "restrict[[restrict_order_props.T, restrict_order_props.T], [S, S], bool].restrict(restrict_order_props.R)" "(orders[S].strict_order?)"))) (|dichotomous_restrict| 0 (|dichotomous_restrict-1| |nil| 3249347110 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |restrict_order_props| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (S FORMAL-SUBTYPE-DECL NIL |restrict_order_props| NIL) (|S_pred| CONST-DECL "[T -> boolean]" |restrict_order_props| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (|dichotomous?| CONST-DECL "bool" |orders| NIL)) NIL (|dichotomous_restrict| SUBTYPE "restrict[[restrict_order_props.T, restrict_order_props.T], [S, S], bool].restrict(restrict_order_props.R)" "(orders[S].dichotomous?)"))) (|total_order_restrict| 0 (|total_order_restrict-1| |nil| 3249347110 ("" (GRIND :IF-MATCH NIL) (("1" (INST -6 "x!1" "y!1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST -5 "x!1" "y!1") (("2" (ASSERT) NIL NIL)) NIL) ("3" (INST -5 "x!1" "y!1" "z!1") (("3" (ASSERT) NIL NIL)) NIL) ("4" (INST -2 "x!1") NIL NIL)) NIL) ((|total_order?| CONST-DECL "bool" |orders| NIL) (|partial_order_restrict| APPLICATION-JUDGEMENT "(partial_order?[S])" |restrict_order_props| NIL) (|dichotomous_restrict| APPLICATION-JUDGEMENT "(dichotomous?[S])" |restrict_order_props| NIL)) NIL (|total_order_restrict| SUBTYPE "restrict[[restrict_order_props.T, restrict_order_props.T], [S, S], bool].restrict(restrict_order_props.R)" "(orders[S].total_order?)"))) (|trichotomous_restrict| 0 (|trichotomous_restrict-1| |nil| 3249347110 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |restrict_order_props| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (S FORMAL-SUBTYPE-DECL NIL |restrict_order_props| NIL) (|S_pred| CONST-DECL "[T -> boolean]" |restrict_order_props| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (|trichotomous?| CONST-DECL "bool" |orders| NIL)) NIL (|trichotomous_restrict| SUBTYPE "restrict[[restrict_order_props.T, restrict_order_props.T], [S, S], bool].restrict(restrict_order_props.R)" "(orders[S].trichotomous?)"))) (|strict_total_order_restrict| 0 (|strict_total_order_restrict-1| |nil| 3249347110 ("" (GRIND :IF-MATCH NIL) (("1" (INST -5 "x!1" "y!1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST -5 "x!1" "y!1" "z!1") (("2" (ASSERT) NIL NIL)) NIL) ("3" (INST -2 "x!1") NIL NIL)) NIL) ((|strict_total_order?| CONST-DECL "bool" |orders| NIL) (|strict_order_restrict| APPLICATION-JUDGEMENT "(strict_order?[S])" |restrict_order_props| NIL) (|trichotomous_restrict| APPLICATION-JUDGEMENT "(trichotomous?[S])" |restrict_order_props| NIL)) NIL (|strict_total_order_restrict| SUBTYPE "restrict[[restrict_order_props.T, restrict_order_props.T], [S, S], bool].restrict(restrict_order_props.R)" "(orders[S].strict_total_order?)"))) (|well_founded_restrict| 0 (|well_founded_restrict-1| |nil| 3249347110 ("" (SKOLEM-TYPEPRED) (("" (EXPAND* "well_founded?" "restrict") (("" (SKOSIMP*) (("" (INST - "extend[T, S, bool, FALSE](p!1)") (("" (SPLIT) (("1" (SKOLEM-TYPEPRED) (("1" (EXPAND "extend") (("1" (PROP) (("1" (ASSERT) (("1" (INST + "y!2") (("1" (SKOLEM!) (("1" (INST - "x!1") (("1" (EXPAND "extend") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST + "y!1") (("2" (EXPAND "extend") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|restrict| CONST-DECL "R" |restrict| NIL) (|S_pred| CONST-DECL "[T -> boolean]" |restrict_order_props| NIL) (S FORMAL-SUBTYPE-DECL NIL |restrict_order_props| NIL) (FALSE CONST-DECL "bool" |booleans| NIL) (|extend| CONST-DECL "R" |extend| NIL) NIL NIL (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (T FORMAL-TYPE-DECL NIL |restrict_order_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL (|well_founded_restrict| SUBTYPE "restrict[[restrict_order_props.T, restrict_order_props.T], [S, S], bool].restrict(restrict_order_props.R)" "(orders[S].well_founded?)"))) (|well_ordered_restrict| 0 (|well_ordered_restrict-1| |nil| 3249347110 ("" (GRIND :IF-MATCH NIL) (("1" (INST -5 "p!1") (("1" (GRIND :IF-MATCH NIL) (("1" (INST 1 "y!2") (("1" (SKOSIMP) (("1" (INST -7 "x!1") NIL NIL)) NIL)) NIL) ("2" (INST 1 "y!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (INST -5 "x!1" "y!1") (("2" (ASSERT) NIL NIL)) NIL) ("3" (INST -5 "x!1" "y!1" "z!1") (("3" (ASSERT) NIL NIL)) NIL) ("4" (INST -2 "x!1") NIL NIL)) NIL) ((|well_ordered?| CONST-DECL "bool" |orders| NIL) (|strict_total_order_restrict| APPLICATION-JUDGEMENT "(strict_total_order?[S])" |restrict_order_props| NIL) (|well_founded_restrict| APPLICATION-JUDGEMENT "(well_founded?[S])" |restrict_order_props| NIL)) NIL (|well_ordered_restrict| SUBTYPE "restrict[[restrict_order_props.T, restrict_order_props.T], [S, S], bool].restrict(restrict_order_props.R)" "(orders[S].well_ordered?)"))))(|extend_order_props| (|irreflexive_extend| 0 (|irreflexive_extend-1| |nil| 3249327215 ("" (SKOLEM-TYPEPRED) (("" (EXPAND* "irreflexive?" "extend") (("" (SKOLEM!) (("" (PROP) (("" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|extend| CONST-DECL "R" |extend| NIL) (|irreflexive?| CONST-DECL "bool" |relations| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (S FORMAL-SUBTYPE-DECL NIL |extend_order_props| NIL) (|S_pred| CONST-DECL "[T -> boolean]" |extend_order_props| NIL) (T FORMAL-TYPE-DECL NIL |extend_order_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL (|irreflexive_extend| SUBTYPE "extend[[extend_order_props.T, extend_order_props.T], [S, S], bool, booleans.FALSE].extend(extend_order_props.R)" "(relations[extend_order_props.T].irreflexive?)"))) (|symmetric_extend| 0 (|symmetric_extend-1| |nil| 3249327215 ("" (SKOLEM-TYPEPRED) (("" (EXPAND* "symmetric?" "extend") (("" (SKOSIMP) (("" (PROP) (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|extend| CONST-DECL "R" |extend| NIL) (|symmetric?| CONST-DECL "bool" |relations| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (S FORMAL-SUBTYPE-DECL NIL |extend_order_props| NIL) (|S_pred| CONST-DECL "[T -> boolean]" |extend_order_props| NIL) (T FORMAL-TYPE-DECL NIL |extend_order_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL (|symmetric_extend| SUBTYPE "extend[[extend_order_props.T, extend_order_props.T], [S, S], bool, booleans.FALSE].extend(extend_order_props.R)" "(relations[extend_order_props.T].symmetric?)"))) (|antisymmetric_extend| 0 (|antisymmetric_extend-1| |nil| 3249327215 ("" (SKOLEM-TYPEPRED) (("" (EXPAND* "antisymmetric?" "extend") (("" (SKOSIMP) (("" (PROP) (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|extend| CONST-DECL "R" |extend| NIL) (|antisymmetric?| CONST-DECL "bool" |relations| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (S FORMAL-SUBTYPE-DECL NIL |extend_order_props| NIL) (|S_pred| CONST-DECL "[T -> boolean]" |extend_order_props| NIL) (T FORMAL-TYPE-DECL NIL |extend_order_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL (|antisymmetric_extend| SUBTYPE "extend[[extend_order_props.T, extend_order_props.T], [S, S], bool, booleans.FALSE].extend(extend_order_props.R)" "(relations[extend_order_props.T].antisymmetric?)"))) (|transitive_extend| 0 (|transitive_extend-1| |nil| 3249327215 ("" (SKOLEM-TYPEPRED) (("" (EXPAND* "transitive?" "extend") (("" (SKOSIMP) (("" (PROP) (("" (INST - "x!1" "y!1" "z!1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|extend| CONST-DECL "R" |extend| NIL) (|transitive?| CONST-DECL "bool" |relations| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (S FORMAL-SUBTYPE-DECL NIL |extend_order_props| NIL) (|S_pred| CONST-DECL "[T -> boolean]" |extend_order_props| NIL) (T FORMAL-TYPE-DECL NIL |extend_order_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL (|transitive_extend| SUBTYPE "extend[[extend_order_props.T, extend_order_props.T], [S, S], bool, booleans.FALSE].extend(extend_order_props.R)" "(relations[extend_order_props.T].transitive?)"))) (|strict_order_extend| 0 (|strict_order_extend-1| |nil| 3249327215 ("" (SKOLEM-TYPEPRED) (("" (EXPAND "strict_order?") (("" (FLATTEN) (("" (USE "irreflexive_extend") (("" (USE "transitive_extend") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|antisymmetric_extend| APPLICATION-JUDGEMENT "(antisymmetric?[T])" |extend_order_props| NIL) (|transitive_extend| APPLICATION-JUDGEMENT "(transitive?[T])" |extend_order_props| NIL) (|irreflexive_extend| APPLICATION-JUDGEMENT "(irreflexive?[T])" |extend_order_props| NIL) (|strict_order?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (S FORMAL-SUBTYPE-DECL NIL |extend_order_props| NIL) (|S_pred| CONST-DECL "[T -> boolean]" |extend_order_props| NIL) (T FORMAL-TYPE-DECL NIL |extend_order_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL (|strict_order_extend| SUBTYPE "extend[[extend_order_props.T, extend_order_props.T], [S, S], bool, booleans.FALSE].extend(extend_order_props.R)" "(orders[extend_order_props.T].strict_order?)"))))(|wf_induction| (|wf_induction| 0 (|wf_induction-1| |nil| 3237052399 ("" (SKOSIMP) (("" (SKOSIMP) (("" (TYPEPRED "<") (("" (EXPAND "well_founded?") (("" (INST -1 "{z:T|NOT p!1(z)}") (("" (ASSERT) (("" (SPLIT) (("1" (SKOSIMP) (("1" (INST -2 "y!1") (("1" (SPLIT) (("1" (TYPEPRED "y!1") (("1" (PROPAX) NIL NIL)) NIL) ("2" (SKOSIMP) (("2" (INST -2 "y!2") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "x!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |wf_induction| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (< FORMAL-CONST-DECL "(well_founded?[T])" |wf_induction| NIL)) NIL)))(|measure_induction| (|measure_induction| 0 (|measure_induction-1| |nil| 3237052399 ("" (LEMMA "wf_induction[T,(LAMBDA (x, y: T): m(x) < m(y))]") (("1" (SKOSIMP*) (("1" (INST -1 "p!1") (("1" (SPLIT) (("1" (INST -1 "x!1") NIL NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "well_founded?") (("2" (TYPEPRED "<") (("2" (EXPAND "well_founded?") (("2" (SKOSIMP*) (("2" (INST -1 "(LAMBDA (y:M): (exists (z:T): m(z) = y AND p!1(z)))") (("2" (SPLIT) (("1" (SKOSIMP*) (("1" (TYPEPRED "y!2") (("1" (SKOSIMP*) (("1" (INST 1 "z!1") (("1" (SKOSIMP*) (("1" (INST -3 "m(x!1)") (("1" (ASSERT) NIL NIL) ("2" (INST 1 "x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 2 "y!1") (("2" (SKOSIMP*) (("2" (INST 1 "m(y!1)") (("2" (INST 1 "y!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) NIL NIL NIL NIL (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|wf_induction| FORMULA-DECL NIL |wf_induction| NIL) (T FORMAL-TYPE-DECL NIL |measure_induction| NIL) (M FORMAL-TYPE-DECL NIL |measure_induction| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (< FORMAL-CONST-DECL "(well_founded?[M])" |measure_induction| NIL) (|m| FORMAL-CONST-DECL "[T -> M]" |measure_induction| NIL)) NIL)))(|epsilons|)(|decl_params|)(|sets| (|singleton_TCC1| 0 (|singleton_TCC1-1| |nil| 3237052399 ("" (SKOSIMP) (("" (EXPAND "singleton?") (("" (INST 1 "x!1") NIL NIL)) NIL)) NIL) ((|singleton?| CONST-DECL "bool" |sets| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |sets| NIL)) NIL (|singleton| SUBTYPE "{y | sets.y = sets.x}" "(sets.singleton?)"))) (|add_TCC1| 0 (|add_TCC1-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((T FORMAL-TYPE-DECL NIL |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL)) NIL (|add| SUBTYPE "{y | booleans.OR(sets.x = sets.y, sets.member(sets.y, sets.a))}" "(sets.nonempty?)"))) (|choose_TCC1| 0 (|choose_TCC1-2| "" 3458163628 ("" (INST 1 "lambda (p: (nonempty?)): epsilon(p)") (("1" (SKOLEM-TYPEPRED) (("1" (USE "epsilon_ax[T]") (("1" (PROP) (("1" (HIDE 2) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|epsilon_ax| FORMULA-DECL NIL |epsilons| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|epsilon| CONST-DECL "T" |epsilons| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |sets| NIL)) SHOSTAK (|choose| EXISTENCE "" "[p: (nonempty?) -> (p)]")) (|choose_TCC1-1| |nil| 3237052399 ("" (SKOLEM-TYPEPRED) (("" (GRIND) NIL NIL)) NIL) NIL NIL (|choose| EXISTENCE "" "[p: (nonempty?) -> (p)]"))) (|choose_is_epsilon_TCC1| 0 (|choose_is_epsilon_TCC1-1| |nil| 3471679708 ("" (EXISTENCE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL)) SHOSTAK (|choose_is_epsilon| EXISTENCE "" "sets.T"))) (|the_TCC1| 0 (|the_TCC1-2| "" 3425349882 ("" (INST 1 "lambda (x: (singleton?)): epsilon(x)") (("1" (SKOLEM-TYPEPRED) (("1" (EXPAND "singleton?") (("1" (SKOLEM-TYPEPRED) (("1" (USE "epsilon_ax[T]") (("1" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (INST?) NIL NIL)) NIL) ("2" (INST 1 "x!2") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOLEM-TYPEPRED) (("2" (EXPAND "singleton?") (("2" (SKOLEM-TYPEPRED) (("2" (INST 1 "x!2") NIL NIL)) NIL)) NIL)) NIL)) NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|epsilon_ax| FORMULA-DECL NIL |epsilons| NIL) (|epsilon| CONST-DECL "T" |epsilons| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|singleton?| CONST-DECL "bool" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |sets| NIL)) SHOSTAK (|the| EXISTENCE "" "[p: (singleton?) -> (p)]")) (|the_TCC1-1| |nil| 3237052399 ("" (SKOLEM-TYPEPRED) (("" (USE "epsilon_ax[T]") (("" (ASSERT) (("" (EXPAND "singleton?") (("" (SKOSIMP*) (("" (INST 1 "x!1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|the| EXISTENCE "" "[p: (singleton?) -> (p)]"))) (|the_lem| 0 (|the_lem-2| "" 3737148469 ("" (SKOLEM-TYPEPRED) (("" (EXPAND "singleton?") (("" (SKOLEM-TYPEPRED) (("" (TYPEPRED "the(p!1)") (("" (LEMMA "epsilon_ax[T]") (("1" (INST -1 "p!1") (("1" (SPLIT) (("1" (INST-CP -4 "the(p!1)") (("1" (INST -4 "epsilon(p!1)") (("1" (ASSERT) NIL NIL) ("2" (INST 1 "x!1") NIL NIL)) NIL)) NIL) ("2" (INST 1 "x!1") NIL NIL)) NIL)) NIL) ("2" (INST 1 "x!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|the| CONST-DECL "(p)" |sets| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|epsilon| CONST-DECL "T" |epsilons| NIL) NIL (|epsilon_ax| FORMULA-DECL NIL |epsilons| NIL) (|singleton?| CONST-DECL "bool" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (T FORMAL-TYPE-DECL NIL |sets| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) SHOSTAK) (|the_lem-1| |nil| 3425282612 ("" (SKOLEM-TYPEPRED) (("" (EXPAND "singleton?") (("" (SKOLEM-TYPEPRED) (("" (TYPEPRED "the(p!1)") (("" (LEMMA "epsilon_ax[T]") (("" (INST -1 "p!1") (("" (SPLIT) (("1" (INST-CP -4 "the(p!1)") (("1" (INST -4 "epsilon(p!1)") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (INST 1 "x!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|the_prop| 0 (|the_prop-1| |nil| 3425283476 ("" (SKOLEM-TYPEPRED) (("" (ASSERT) NIL NIL)) NIL) ((|singleton?| CONST-DECL "bool" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (T FORMAL-TYPE-DECL NIL |sets| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) SHOSTAK)) (|singleton_elt_TCC1| 0 (|singleton_elt_TCC1-1| |nil| 3282864729 ("" (SUBTYPE-TCC) (("" (TYPEPRED "a!1") (("" (EXPAND "singleton?") (("" (SKOSIMP) (("" (INST-CP -1 "x!1") (("" (INST -1 "y!1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|singleton?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL)) SHOSTAK (|singleton_elt| SUBTYPE "LAMBDA x: sets.member(sets.x, sets.a)" "(sets.singleton?)"))) (|is_singleton| 0 (|is_singleton-1| |nil| 3412877319 ("" (SKOSIMP*) (("" (EXPAND "singleton?") (("" (EXPAND "nonempty?") (("" (EXPAND "empty?") (("" (SKOSIMP*) (("" (EXPAND "member") (("" (INST 1 "x!1") (("" (SKOSIMP*) (("" (INST? -2) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|singleton?| CONST-DECL "bool" |sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (T FORMAL-TYPE-DECL NIL |sets| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) NIL NIL (|nonempty?| CONST-DECL "bool" |sets| NIL)) SHOSTAK)) (|singleton_elt_lem| 0 (|singleton_elt_lem-3| "" 3737148573 ("" (SKOSIMP*) (("" (EXPAND "singleton_elt") (("" (EXPAND "singleton?") (("" (SKOSIMP*) (("" (REWRITE "the_lem") (("1" (EXPAND "member") (("1" (USE "epsilon_ax[T]") (("1" (PROP) (("1" (INST-CP -2 "epsilon(LAMBDA x: a!1(x))") (("1" (INST -2 "x!1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST 1 "x!1") NIL NIL)) NIL) ("2" (INST?) NIL NIL)) NIL) ("2" (INST?) NIL NIL)) NIL)) NIL) ("2" (EXPAND "member") (("2" (EXPAND "singleton?") (("2" (INST 1 "x!2") (("2" (ASSERT) (("2" (SKOSIMP*) (("2" (INST -1 "y!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|singleton_elt| CONST-DECL "T" |sets| NIL) NIL (|epsilon| CONST-DECL "T" |epsilons| NIL) NIL (|epsilon_ax| FORMULA-DECL NIL |epsilons| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |sets| NIL) (|the_lem| FORMULA-DECL NIL |sets| NIL) (|singleton?| CONST-DECL "bool" |sets| NIL)) SHOSTAK) (|singleton_elt_lem-2| "" 3425350335 ("" (SKOSIMP*) (("" (EXPAND "singleton_elt") (("" (EXPAND "singleton?") (("" (SKOSIMP*) (("" (REWRITE "the_lem") (("1" (EXPAND "member") (("1" (USE "epsilon_ax[T]") (("1" (PROP) (("1" (INST-CP -2 "epsilon(LAMBDA x: a!1(x))") (("1" (INST -2 "x!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (INST 1 "x!1") NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "member") (("2" (EXPAND "singleton?") (("2" (INST 1 "x!2") (("2" (ASSERT) (("2" (SKOSIMP*) (("2" (INST -1 "y!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|singleton_elt_lem-1| |nil| 3412877468 ("" (SKOSIMP*) (("" (EXPAND "singleton_elt") (("" (EXPAND "singleton?") (("" (SKOSIMP*) (("" (EXPAND "the") (("" (EXPAND "member") (("" (USE "epsilon_ax[T]") (("" (PROP) (("1" (INST-CP -2 "epsilon(LAMBDA x: a!1(x))") (("1" (INST -2 "x!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (INST 1 "x!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|singleton_elt_def_TCC1| 0 (|singleton_elt_def_TCC1-1| |nil| 3412876783 ("" (SUBTYPE-TCC) NIL NIL) ((|set| TYPE-EQ-DECL NIL |sets| NIL) (T FORMAL-TYPE-DECL NIL |sets| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|singleton?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL)) SHOSTAK (|singleton_elt_def| SUBTYPE "sets.a" "(sets.nonempty?)"))) (|singleton_elt_def| 0 (|singleton_elt_def-3| "" 3737148743 ("" (SKOSIMP*) (("" (EXPAND "singleton_elt") (("" (EXPAND "singleton?") (("" (REWRITE "the_lem") (("1" (EXPAND "member") (("1" (SKOSIMP*) (("1" (USE "epsilon_ax[T]") (("1" (PROP) (("1" (INST-CP -2 "epsilon(LAMBDA x: a!1(x))") (("1" (INST -2 "choose(a!1)") (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST 1 "x!1") NIL NIL)) NIL) ("2" (ASSERT) (("2" (INST 1 "x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "x!1") NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "member") (("2" (EXPAND "singleton?") (("2" (SKOSIMP*) (("2" (INST 1 "x!1") (("2" (SKOSIMP*) (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|singleton_elt| CONST-DECL "T" |sets| NIL) (|the_lem| FORMULA-DECL NIL |sets| NIL) (T FORMAL-TYPE-DECL NIL |sets| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|choose| CONST-DECL "(p)" |sets| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|epsilon| CONST-DECL "T" |epsilons| NIL) NIL (|epsilon_ax| FORMULA-DECL NIL |epsilons| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|singleton?| CONST-DECL "bool" |sets| NIL)) SHOSTAK) (|singleton_elt_def-2| "" 3425350533 ("" (SKOSIMP*) (("" (EXPAND "singleton_elt") (("" (EXPAND "singleton?") (("" (REWRITE "the_lem") (("1" (EXPAND "member") (("1" (SKOSIMP*) (("1" (USE "epsilon_ax[T]") (("1" (PROP) (("1" (INST-CP -2 "epsilon(LAMBDA x: a!1(x))") (("1" (INST -2 "choose(a!1)") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (INST 1 "x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "member") (("2" (EXPAND "singleton?") (("2" (SKOSIMP*) (("2" (INST 1 "x!1") (("2" (SKOSIMP*) (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|singleton_elt_def-1| |nil| 3412877903 ("" (SKOSIMP*) (("" (EXPAND "singleton_elt") (("" (EXPAND "singleton?") (("" (EXPAND "the") (("" (EXPAND "member") (("" (SKOSIMP*) (("" (USE "epsilon_ax[T]") (("" (PROP) (("1" (INST-CP -2 "epsilon(LAMBDA x: a!1(x))") (("1" (INST -2 "choose(a!1)") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (INST 1 "x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|singleton_singleton| 0 (|singleton_singleton-1| |nil| 3458163659 ("" (SKOSIMP) (("" (EXPAND "singleton?") (("" (SKOLEM-TYPEPRED) (("" (INST 1 "x!1") (("" (EXPAND "singleton") (("" (APPLY-EXTENSIONALITY :HIDE? T) (("" (CASE "a!1(x!2)") (("1" (INST -3 "x!2") (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|singleton?| CONST-DECL "bool" |sets| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) NIL NIL (|singleton| CONST-DECL "(singleton?)" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (T FORMAL-TYPE-DECL NIL |sets| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) SHOSTAK)) (|singleton_rew| 0 (|singleton_rew-3| "" 3737176775 ("" (SKOSIMP*) (("" (EXPAND "singleton") (("" (EXPAND "singleton_elt") (("" (REWRITE "the_lem") (("1" (EXPAND "member") (("1" (USE "epsilon_ax[T]") (("1" (PROP) (("1" (INST 1 "x!1") NIL NIL)) NIL) ("2" (INST?) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|singleton| CONST-DECL "(singleton?)" |sets| NIL) (|the_lem| FORMULA-DECL NIL |sets| NIL) (T FORMAL-TYPE-DECL NIL |sets| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|singleton?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|epsilon_ax| FORMULA-DECL NIL |epsilons| NIL) (|singleton_elt| CONST-DECL "T" |sets| NIL)) SHOSTAK) (|singleton_rew-2| "" 3425350586 ("" (SKOSIMP*) (("" (EXPAND "singleton") (("" (EXPAND "singleton_elt") (("" (REWRITE "the_lem") (("1" (EXPAND "member") (("1" (USE "epsilon_ax[T]") (("1" (PROP) (("1" (INST 1 "x!1") NIL NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|singleton_rew-1| |nil| 3412878278 ("" (SKOSIMP*) (("" (EXPAND "singleton") (("" (EXPAND "singleton_elt") (("" (EXPAND "the") (("" (EXPAND "member") (("" (USE "epsilon_ax[T]") (("" (PROP) (("" (INST 1 "x!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|rest_TCC1| 0 (|rest_TCC1-1| |nil| 3237052399 ("" (SKOLEM!) (("" (FLATTEN) (("" (EXPAND "nonempty?") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ((|nonempty?| CONST-DECL "bool" |sets| NIL)) NIL (|rest| SUBTYPE "sets.a" "(sets.nonempty?)"))) (|nonempty_singleton| 0 (|nonempty_singleton-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|singleton?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL)) NIL (|nonempty_singleton| SUBTYPE "sets.x" "(sets.nonempty?)"))) (|nonempty_union1| 0 (|nonempty_union1-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|union| CONST-DECL "set" |sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL)) NIL (|nonempty_union1| SUBTYPE "sets.union(sets.a, sets.b)" "(sets.nonempty?)"))) (|nonempty_union2| 0 (|nonempty_union2-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|union| CONST-DECL "set" |sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL)) NIL (|nonempty_union2| SUBTYPE "sets.union(sets.a, sets.b)" "(sets.nonempty?)"))))(|sets_lemmas| (|extensionality| 0 (|extensionality-1| |nil| 3237052399 ("" (SKOLEM!) (("" (FLATTEN) (("" (APPLY-EXTENSIONALITY) (("" (INST?) (("" (EXPAND "member") (("" (IFF) (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|member| CONST-DECL "bool" |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL)) NIL)) (|emptyset_is_empty?| 0 (|emptyset_is_empty?-1| |nil| 3237052399 ("" (SKOLEM!) (("" (EXPAND "empty?") (("" (EXPAND "emptyset") (("" (EXPAND "member") (("" (PROP) (("1" (APPLY-EXTENSIONALITY) (("1" (INST?) NIL NIL)) NIL) ("2" (SKOLEM!) (("2" (REPLACE -1) (("2" (BETA) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|empty?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (FALSE CONST-DECL "bool" |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|emptyset| CONST-DECL "set" |sets| NIL)) NIL)) (|empty_no_members| 0 (|empty_no_members-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|emptyset| CONST-DECL "set" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL)) NIL)) (|emptyset_min| 0 (|emptyset_min-1| |nil| 3237052399 ("" (GRIND) (("" (APPLY-EXTENSIONALITY) (("" (INST?) NIL NIL)) NIL)) NIL) ((|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|emptyset| CONST-DECL "set" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL)) NIL)) (|nonempty_member| 0 (|nonempty_member-1| |nil| 3237052399 ("" (TCC) NIL NIL) ((T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL)) NIL)) (|fullset_member| 0 (|fullset_member-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|fullset| CONST-DECL "set" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL)) NIL)) (|fullset_max| 0 (|fullset_max-1| |nil| 3237052399 ("" (GRIND) (("" (APPLY-EXTENSIONALITY) (("" (INST?) NIL NIL)) NIL)) NIL) ((|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|fullset| CONST-DECL "set" |sets| NIL)) NIL)) (|fullset_is_full?| 0 (|fullset_is_full?-1| |nil| 3253512686 ("" (GRIND) (("" (APPLY-EXTENSIONALITY) (("" (INST?) NIL NIL)) NIL)) NIL) ((|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|fullset| CONST-DECL "set" |sets| NIL) (|full?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL)) NIL)) (|nonempty_exists| 0 (|nonempty_exists-1| |nil| 3237052399 ("" (EXPAND "nonempty?") (("" (EXPAND "empty?") (("" (EXPAND "member") (("" (SKOSIMP*) (("" (SPLIT) (("1" (SKOSIMP*) (("1" (INST * "x!1") NIL NIL)) NIL) ("2" (FLATTEN) (("2" (SKOLEM * "x!1") (("2" (INST * "x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|empty?| CONST-DECL "bool" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) NIL NIL (|member| CONST-DECL "bool" |sets| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL)) NIL)) (|subset_emptyset| 0 (|subset_emptyset-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|emptyset| CONST-DECL "set" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|subset?| CONST-DECL "bool" |sets| NIL)) NIL)) (|subset_fullset| 0 (|subset_fullset-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|member| CONST-DECL "bool" |sets| NIL) (|fullset| CONST-DECL "set" |sets| NIL) (|subset?| CONST-DECL "bool" |sets| NIL)) NIL)) (|subset_reflexive| 0 (|subset_reflexive-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|member| CONST-DECL "bool" |sets| NIL) (|subset?| CONST-DECL "bool" |sets| NIL)) NIL)) (|subset_antisymmetric| 0 (|subset_antisymmetric-1| |nil| 3237052399 ("" (SKOSIMP) (("" (EXPAND "subset?") (("" (EXPAND "member") (("" (APPLY-EXTENSIONALITY) (("" (INST?) (("" (INST?) (("" (PROP) (("1" (IFF) (("1" (PROP) NIL NIL)) NIL) ("2" (IFF) (("2" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|subset?| CONST-DECL "bool" |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|member| CONST-DECL "bool" |sets| NIL)) NIL)) (|subset_transitive| 0 (|subset_transitive-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|subset?| CONST-DECL "bool" |sets| NIL)) NIL)) (|subset_partial_order| 0 (|subset_partial_order-1| |nil| 3237052399 ("" (EXPAND "partial_order?") (("" (EXPAND "preorder?") (("" (EXPAND "reflexive?") (("" (PROP) (("1" (SKOSIMP) (("1" (EXPAND "subset?") (("1" (EXPAND "member") (("1" (SKOSIMP) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "transitive?") (("2" (SKOSIMP) (("2" (EXPAND "subset?") (("2" (SKOSIMP) (("2" (INST?) (("2" (INST?) (("2" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "antisymmetric?") (("3" (SKOSIMP) (("3" (EXPAND "subset?") (("3" (APPLY-EXTENSIONALITY) (("3" (INST?) (("3" (INST?) (("3" (EXPAND "member") (("3" (IFF) (("3" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|preorder?| CONST-DECL "bool" |orders| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|transitive?| CONST-DECL "bool" |relations| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|antisymmetric?| CONST-DECL "bool" |relations| NIL) (|reflexive?| CONST-DECL "bool" |relations| NIL) (|partial_order?| CONST-DECL "bool" |orders| NIL)) NIL)) (|subset_is_partial_order| 0 (|subset_is_partial_order-1| |nil| 3253512252 ("" (GRIND) (("" (APPLY-EXTENSIONALITY) (("" (GRIND) NIL NIL)) NIL)) NIL) ((|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|partial_order?| CONST-DECL "bool" |orders| NIL) (|antisymmetric?| CONST-DECL "bool" |relations| NIL) (|preorder?| CONST-DECL "bool" |orders| NIL) (|transitive?| CONST-DECL "bool" |relations| NIL) (|reflexive?| CONST-DECL "bool" |relations| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL)) NIL (|subset_is_partial_order| SUBTYPE "sets[sets_lemmas.T].subset?" "(orders[set[T]].partial_order?)"))) (|strict_subset_irreflexive| 0 (|strict_subset_irreflexive-1| |nil| 3253512777 ("" (GRIND) NIL NIL) ((|member| CONST-DECL "bool" |sets| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|strict_subset?| CONST-DECL "bool" |sets| NIL)) NIL)) (|strict_subset_transitive| 0 (|strict_subset_transitive-1| |nil| 3253512783 ("" (GRIND) (("" (APPLY-EXTENSIONALITY) (("" (GRIND) NIL NIL)) NIL)) NIL) ((|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|strict_subset?| CONST-DECL "bool" |sets| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL)) NIL)) (|strict_subset_strict_order| 0 (|strict_subset_strict_order-1| |nil| 3253512806 ("" (GRIND) (("" (APPLY-EXTENSIONALITY) (("" (GRIND) NIL NIL)) NIL)) NIL) ((|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|strict_order?| CONST-DECL "bool" |orders| NIL) (|transitive?| CONST-DECL "bool" |relations| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|irreflexive?| CONST-DECL "bool" |relations| NIL) (|strict_subset?| CONST-DECL "bool" |sets| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL)) NIL)) (|strict_subset_is_strict_order| 0 (|strict_subset_is_strict_order-1| |nil| 3253512252 ("" (GRIND) (("" (APPLY-EXTENSIONALITY) (("" (GRIND) NIL NIL)) NIL)) NIL) ((|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|strict_order?| CONST-DECL "bool" |orders| NIL) (|transitive?| CONST-DECL "bool" |relations| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|irreflexive?| CONST-DECL "bool" |relations| NIL) (|strict_subset?| CONST-DECL "bool" |sets| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL)) NIL (|strict_subset_is_strict_order| SUBTYPE "sets[sets_lemmas.T].strict_subset?" "(orders[set[T]].strict_order?)"))) (|union_idempotent| 0 (|union_idempotent-1| |nil| 3237052399 ("" (SKOSIMP) (("" (EXPAND "union") (("" (APPLY-EXTENSIONALITY) (("" (EXPAND "member") (("" (IFF) (("" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|union| CONST-DECL "set" |sets| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)) NIL)) (|union_commutative| 0 (|union_commutative-1| |nil| 3237052399 ("" (SKOSIMP) (("" (EXPAND "union") (("" (APPLY-EXTENSIONALITY) (("" (IFF) (("" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|union| CONST-DECL "set" |sets| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)) NIL)) (|union_associative| 0 (|union_associative-1| |nil| 3237052399 ("" (SKOSIMP) (("" (EXPAND "union") (("" (APPLY-EXTENSIONALITY) (("" (EXPAND "member") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|union| CONST-DECL "set" |sets| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)) NIL)) (|union_empty| 0 (|union_empty-1| |nil| 3237052399 ("" (SKOSIMP) (("" (EXPAND "union") (("" (APPLY-EXTENSIONALITY) (("" (EXPAND "member") (("" (EXPAND "emptyset") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|union| CONST-DECL "set" |sets| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|emptyset| CONST-DECL "set" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)) NIL)) (|union_full| 0 (|union_full-1| |nil| 3237052399 ("" (SKOSIMP) (("" (EXPAND "fullset") (("" (EXPAND "union") (("" (APPLY-EXTENSIONALITY) (("" (EXPAND "member") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|fullset| CONST-DECL "set" |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|union| CONST-DECL "set" |sets| NIL)) NIL)) (|union_subset1| 0 (|union_subset1-1| |nil| 3237052399 ("" (SKOSIMP) (("" (EXPAND "subset?") (("" (EXPAND "union") (("" (SKOSIMP) (("" (EXPAND "member") (("" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|subset?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|union| CONST-DECL "set" |sets| NIL)) NIL)) (|union_subset2| 0 (|union_subset2-1| |nil| 3237052399 ("" (SKOSIMP) (("" (EXPAND "subset?") (("" (EXPAND "union") (("" (APPLY-EXTENSIONALITY) (("" (INST?) (("" (IFF) (("" (EXPAND "member") (("" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|subset?| CONST-DECL "bool" |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|union| CONST-DECL "set" |sets| NIL)) NIL)) (|subset_union| 0 (|subset_union-1| |nil| 3471679976 ("" (GRIND) NIL NIL) ((T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|union| CONST-DECL "set" |sets| NIL) (|subset?| CONST-DECL "bool" |sets| NIL)) SHOSTAK)) (|union_upper_bound| 0 (|union_upper_bound-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|union| CONST-DECL "set" |sets| NIL)) NIL)) (|union_difference| 0 (|union_difference-1| |nil| 3237052399 ("" (GRIND) (("" (APPLY-EXTENSIONALITY :HIDE? T) (("" (GRIND) NIL NIL)) NIL)) NIL) ((T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|difference| CONST-DECL "set" |sets| NIL) (|union| CONST-DECL "set" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|member| CONST-DECL "bool" |sets| NIL)) NIL)) (|union_diff_subset| 0 (|union_diff_subset-1| |nil| 3237052399 ("" (GRIND) (("" (APPLY-EXTENSIONALITY :HIDE? T) (("" (GRIND) NIL NIL)) NIL)) NIL) ((|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|union| CONST-DECL "set" |sets| NIL) (|difference| CONST-DECL "set" |sets| NIL) (T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL)) NIL)) (|intersection_idempotent| 0 (|intersection_idempotent-1| |nil| 3237052399 ("" (SKOSIMP) (("" (EXPAND "intersection") (("" (APPLY-EXTENSIONALITY) (("" (EXPAND "member") (("" (IFF) (("" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|intersection| CONST-DECL "set" |sets| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)) NIL)) (|intersection_commutative| 0 (|intersection_commutative-1| |nil| 3237052399 ("" (SKOSIMP) (("" (EXPAND "intersection") (("" (APPLY-EXTENSIONALITY) (("" (IFF) (("" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|intersection| CONST-DECL "set" |sets| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)) NIL)) (|intersection_associative| 0 (|intersection_associative-1| |nil| 3237052399 ("" (SKOSIMP) (("" (EXPAND "intersection") (("" (APPLY-EXTENSIONALITY) (("" (EXPAND "member") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|intersection| CONST-DECL "set" |sets| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)) NIL)) (|intersection_empty| 0 (|intersection_empty-1| |nil| 3237052399 ("" (SKOSIMP) (("" (EXPAND "intersection") (("" (EXPAND "emptyset") (("" (APPLY-EXTENSIONALITY) (("" (EXPAND "member") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|intersection| CONST-DECL "set" |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (FALSE CONST-DECL "bool" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|emptyset| CONST-DECL "set" |sets| NIL)) NIL)) (|intersection_full| 0 (|intersection_full-1| |nil| 3237052399 ("" (SKOSIMP) (("" (EXPAND "intersection") (("" (EXPAND "fullset") (("" (EXPAND "member") (("" (APPLY-EXTENSIONALITY) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|intersection| CONST-DECL "set" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|fullset| CONST-DECL "set" |sets| NIL)) NIL)) (|intersection_subset1| 0 (|intersection_subset1-1| |nil| 3237052399 ("" (SKOSIMP) (("" (EXPAND "intersection") (("" (EXPAND "subset?") (("" (SKOSIMP) (("" (EXPAND "member") (("" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|intersection| CONST-DECL "set" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|subset?| CONST-DECL "bool" |sets| NIL)) NIL)) (|intersection_subset2| 0 (|intersection_subset2-1| |nil| 3237052399 ("" (SKOSIMP) (("" (EXPAND "intersection") (("" (EXPAND "subset?") (("" (APPLY-EXTENSIONALITY) (("" (EXPAND "member") (("" (INST?) (("" (IFF) (("" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|intersection| CONST-DECL "set" |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|subset?| CONST-DECL "bool" |sets| NIL)) NIL)) (|intersection_lower_bound| 0 (|intersection_lower_bound-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|intersection| CONST-DECL "set" |sets| NIL)) NIL)) (|distribute_intersection_union| 0 (|distribute_intersection_union-1| |nil| 3237052399 ("" (SKOSIMP) (("" (EXPAND "intersection") (("" (EXPAND "union") (("" (EXPAND "member") (("" (APPLY-EXTENSIONALITY) (("" (IFF) (("" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|intersection| CONST-DECL "set" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|union| CONST-DECL "set" |sets| NIL)) NIL)) (|distribute_union_intersection| 0 (|distribute_union_intersection-1| |nil| 3237052399 ("" (SKOSIMP) (("" (EXPAND "intersection") (("" (EXPAND "union") (("" (EXPAND "member") (("" (APPLY-EXTENSIONALITY) (("" (IFF) (("" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|intersection| CONST-DECL "set" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|union| CONST-DECL "set" |sets| NIL)) NIL)) (|complement_emptyset| 0 (|complement_emptyset-1| |nil| 3237052399 ("" (EXPAND "complement") (("" (EXPAND "emptyset") (("" (EXPAND "fullset") (("" (EXPAND "member") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|emptyset| CONST-DECL "set" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|fullset| CONST-DECL "set" |sets| NIL) (|complement| CONST-DECL "set" |sets| NIL)) NIL)) (|complement_fullset| 0 (|complement_fullset-1| |nil| 3237052399 ("" (EXPAND "complement") (("" (EXPAND "emptyset") (("" (EXPAND "fullset") (("" (EXPAND "member") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|emptyset| CONST-DECL "set" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|fullset| CONST-DECL "set" |sets| NIL) (|complement| CONST-DECL "set" |sets| NIL)) NIL)) (|complement_complement| 0 (|complement_complement-1| |nil| 3237052399 ("" (SKOSIMP) (("" (EXPAND "complement") (("" (APPLY-EXTENSIONALITY) (("" (EXPAND "member") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|complement| CONST-DECL "set" |sets| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)) NIL)) (|complement_equal| 0 (|complement_equal-1| |nil| 3253512934 ("" (GRIND) (("" (APPLY-EXTENSIONALITY) (("" (DECOMPOSE-EQUALITY) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|complement| CONST-DECL "set" |sets| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)) NIL)) (|subset_complement| 0 (|subset_complement-1| |nil| 3237052399 ("" (SKOSIMP) (("" (EXPAND "complement") (("" (EXPAND "subset?") (("" (EXPAND "member") (("" (PROP) (("1" (SKOSIMP) (("1" (INST?) (("1" (PROP) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (INST?) (("2" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|complement| CONST-DECL "set" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|subset?| CONST-DECL "bool" |sets| NIL)) NIL)) (|demorgan1| 0 (|demorgan1-1| |nil| 3237052399 ("" (GRIND) (("" (APPLY-EXTENSIONALITY) (("" (IFF) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|intersection| CONST-DECL "set" |sets| NIL) (|union| CONST-DECL "set" |sets| NIL) (|complement| CONST-DECL "set" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|member| CONST-DECL "bool" |sets| NIL)) NIL)) (|demorgan2| 0 (|demorgan2-1| |nil| 3237052399 ("" (GRIND) (("" (APPLY-EXTENSIONALITY) (("" (IFF) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|union| CONST-DECL "set" |sets| NIL) (|intersection| CONST-DECL "set" |sets| NIL) (|complement| CONST-DECL "set" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|member| CONST-DECL "bool" |sets| NIL)) NIL)) (|difference_emptyset1| 0 (|difference_emptyset1-1| |nil| 3237052399 ("" (SKOSIMP) (("" (EXPAND "difference") (("" (EXPAND "emptyset") (("" (EXPAND "member") (("" (APPLY-EXTENSIONALITY) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|difference| CONST-DECL "set" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|emptyset| CONST-DECL "set" |sets| NIL)) NIL)) (|difference_emptyset2| 0 (|difference_emptyset2-1| |nil| 3237052399 ("" (SKOSIMP) (("" (EXPAND "difference") (("" (EXPAND "emptyset") (("" (EXPAND "member") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|difference| CONST-DECL "set" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|emptyset| CONST-DECL "set" |sets| NIL)) NIL)) (|difference_fullset1| 0 (|difference_fullset1-1| |nil| 3237052399 ("" (SKOSIMP) (("" (EXPAND "difference") (("" (EXPAND "emptyset") (("" (EXPAND "fullset") (("" (EXPAND "member") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|difference| CONST-DECL "set" |sets| NIL) (|fullset| CONST-DECL "set" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|emptyset| CONST-DECL "set" |sets| NIL)) NIL)) (|difference_fullset2| 0 (|difference_fullset2-1| |nil| 3237052399 ("" (SKOSIMP) (("" (EXPAND "difference") (("" (EXPAND "fullset") (("" (EXPAND "complement") (("" (APPLY-EXTENSIONALITY) (("" (EXPAND "member") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|difference| CONST-DECL "set" |sets| NIL) (|complement| CONST-DECL "set" |sets| NIL) (T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|fullset| CONST-DECL "set" |sets| NIL)) NIL)) (|difference_intersection| 0 (|difference_intersection-1| |nil| 3237052399 ("" (SKOSIMP) (("" (EXPAND "difference") (("" (EXPAND "intersection") (("" (EXPAND "complement") (("" (EXPAND "member") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|difference| CONST-DECL "set" |sets| NIL) (|complement| CONST-DECL "set" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|intersection| CONST-DECL "set" |sets| NIL)) NIL)) (|difference_difference1| 0 (|difference_difference1-1| |nil| 3237052399 ("" (SKOSIMP) (("" (EXPAND "difference") (("" (EXPAND "member") (("" (EXPAND "union") (("" (EXPAND "member") (("" (APPLY-EXTENSIONALITY) (("" (IFF) (("" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|difference| CONST-DECL "set" |sets| NIL) (|union| CONST-DECL "set" |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|member| CONST-DECL "bool" |sets| NIL)) NIL)) (|difference_difference2| 0 (|difference_difference2-1| |nil| 3237052399 ("" (SKOSIMP) (("" (EXPAND "difference") (("" (EXPAND "union") (("" (EXPAND "intersection") (("" (EXPAND "member") (("" (APPLY-EXTENSIONALITY) (("" (IFF) (("" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|difference| CONST-DECL "set" |sets| NIL) (|intersection| CONST-DECL "set" |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|union| CONST-DECL "set" |sets| NIL)) NIL)) (|difference_subset| 0 (|difference_subset-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|member| CONST-DECL "bool" |sets| NIL) (|difference| CONST-DECL "set" |sets| NIL) (|subset?| CONST-DECL "bool" |sets| NIL)) NIL)) (|difference_subset2| 0 (|difference_subset2-1| |nil| 3253513129 ("" (GRIND) (("" (APPLY-EXTENSIONALITY) (("" (FLATTEN) (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|difference| CONST-DECL "set" |sets| NIL) (|emptyset| CONST-DECL "set" |sets| NIL) (T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL)) NIL)) (|difference_disjoint| 0 (|difference_disjoint-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|member| CONST-DECL "bool" |sets| NIL) (|difference| CONST-DECL "set" |sets| NIL) (|intersection| CONST-DECL "set" |sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|disjoint?| CONST-DECL "bool" |sets| NIL)) NIL)) (|difference_disjoint2| 0 (|difference_disjoint2-1| |nil| 3253513146 ("" (GRIND) (("" (APPLY-EXTENSIONALITY) (("" (GRIND) NIL NIL)) NIL)) NIL) ((|difference| CONST-DECL "set" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|disjoint?| CONST-DECL "bool" |sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|intersection| CONST-DECL "set" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL)) NIL)) (|diff_union_inter| 0 (|diff_union_inter-1| |nil| 3237052399 ("" (GRIND) (("" (APPLY-EXTENSIONALITY :HIDE? T) (("" (GRIND) NIL NIL)) NIL)) NIL) ((T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|intersection| CONST-DECL "set" |sets| NIL) (|union| CONST-DECL "set" |sets| NIL) (|difference| CONST-DECL "set" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|member| CONST-DECL "bool" |sets| NIL)) NIL)) (|nonempty_add| 0 (|nonempty_add-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|add| CONST-DECL "(nonempty?)" |sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL)) NIL)) (|member_add| 0 (|member_add-1| |nil| 3237052399 ("" (SKOSIMP*) (("" (EXPAND "add") (("" (APPLY-EXTENSIONALITY) (("" (HIDE 2) (("" (IFF) (("" (EXPAND "member") (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|add| CONST-DECL "(nonempty?)" |sets| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)) NIL)) (|member_add_reduce| 0 (|member_add_reduce-1| |nil| 3471679996 ("" (GRIND) NIL NIL) ((|member| CONST-DECL "bool" |sets| NIL) (|add| CONST-DECL "(nonempty?)" |sets| NIL)) SHOSTAK)) (|member_remove| 0 (|member_remove-1| |nil| 3237052399 ("" (SKOSIMP*) (("" (APPLY-EXTENSIONALITY) (("" (HIDE 3) (("" (EXPAND "remove") (("" (EXPAND "member") (("" (IFF) (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|remove| CONST-DECL "set" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|member| CONST-DECL "bool" |sets| NIL)) NIL)) (|add_remove_member| 0 (|add_remove_member-1| |nil| 3237052399 ("" (GRIND) (("" (APPLY-EXTENSIONALITY :HIDE? T) (("" (GRIND) NIL NIL)) NIL)) NIL) ((/= CONST-DECL "boolean" |notequal| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|add| CONST-DECL "(nonempty?)" |sets| NIL) (|remove| CONST-DECL "set" |sets| NIL) (T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL)) NIL)) (|remove_add_member| 0 (|remove_add_member-1| |nil| 3237052399 ("" (GRIND) (("" (APPLY-EXTENSIONALITY :HIDE? T) (("" (GRIND) NIL NIL)) NIL)) NIL) ((/= CONST-DECL "boolean" |notequal| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|remove| CONST-DECL "set" |sets| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|add| CONST-DECL "(nonempty?)" |sets| NIL) (T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|member| CONST-DECL "bool" |sets| NIL)) NIL)) (|subset_add| 0 (|subset_add-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|member| CONST-DECL "bool" |sets| NIL) (|add| CONST-DECL "(nonempty?)" |sets| NIL) (|subset?| CONST-DECL "bool" |sets| NIL)) NIL)) (|add_as_union| 0 (|add_as_union-1| |nil| 3237052399 ("" (GRIND) (("" (APPLY-EXTENSIONALITY :HIDE? T) (("" (GRIND) NIL NIL)) NIL)) NIL) ((|member| CONST-DECL "bool" |sets| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|add| CONST-DECL "(nonempty?)" |sets| NIL) (|union| CONST-DECL "set" |sets| NIL) (|singleton?| CONST-DECL "bool" |sets| NIL) (|singleton| CONST-DECL "(singleton?)" |sets| NIL) (T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|nonempty_union2| APPLICATION-JUDGEMENT "(nonempty?)" |sets| NIL)) NIL)) (|singleton_as_add| 0 (|singleton_as_add-1| |nil| 3237052399 ("" (GRIND) (("" (APPLY-EXTENSIONALITY :HIDE? T) (("" (GRIND) NIL NIL)) NIL)) NIL) ((T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|emptyset| CONST-DECL "set" |sets| NIL) (|add| CONST-DECL "(nonempty?)" |sets| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|singleton| CONST-DECL "(singleton?)" |sets| NIL) (|singleton?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL)) NIL)) (|subset_remove| 0 (|subset_remove-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((/= CONST-DECL "boolean" |notequal| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|remove| CONST-DECL "set" |sets| NIL) (|subset?| CONST-DECL "bool" |sets| NIL)) NIL)) (|remove_as_difference| 0 (|remove_as_difference-1| |nil| 3237052399 ("" (GRIND) (("" (APPLY-EXTENSIONALITY :HIDE? T) (("" (GRIND) NIL NIL)) NIL)) NIL) ((T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|singleton| CONST-DECL "(singleton?)" |sets| NIL) (|singleton?| CONST-DECL "bool" |sets| NIL) (|difference| CONST-DECL "set" |sets| NIL) (|remove| CONST-DECL "set" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|member| CONST-DECL "bool" |sets| NIL) (/= CONST-DECL "boolean" |notequal| NIL)) NIL)) (|remove_member_singleton| 0 (|remove_member_singleton-1| |nil| 3237052399 ("" (GRIND) (("" (APPLY-EXTENSIONALITY :HIDE? T) (("" (GRIND) NIL NIL)) NIL)) NIL) ((T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|emptyset| CONST-DECL "set" |sets| NIL) (|singleton| CONST-DECL "(singleton?)" |sets| NIL) (|singleton?| CONST-DECL "bool" |sets| NIL) (|remove| CONST-DECL "set" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|member| CONST-DECL "bool" |sets| NIL) (/= CONST-DECL "boolean" |notequal| NIL)) NIL)) (|choose_rest_TCC1| 0 (|choose_rest_TCC1-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|member| CONST-DECL "bool" |sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL)) NIL (|choose_rest| SUBTYPE "sets_lemmas.a" "(sets[sets_lemmas.T].nonempty?)"))) (|choose_rest| 0 (|choose_rest-1| |nil| 3237052399 ("" (SKOSIMP*) (("" (APPLY-EXTENSIONALITY) (("1" (HIDE 3) (("1" (EXPAND "add") (("1" (HIDE 2) (("1" (IFF) (("1" (SPLIT) (("1" (FLATTEN) (("1" (EXPAND "member") (("1" (SPLIT) (("1" (ASSERT) NIL NIL) ("2" (EXPAND "rest") (("2" (EXPAND "remove") (("2" (FLATTEN) (("2" (EXPAND "member") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "member") (("2" (EXPAND "rest") (("2" (EXPAND "remove") (("2" (EXPAND "member") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nonempty?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ((T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|rest| CONST-DECL "set" |sets| NIL) (|choose| CONST-DECL "(p)" |sets| NIL) (|add| CONST-DECL "(nonempty?)" |sets| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|remove| CONST-DECL "set" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL)) NIL)) (|choose_member| 0 (|choose_member-1| |nil| 3237052399 ("" (GRIND) (("" (REWRITE "epsilon_ax[T]") (("1" (INST?) NIL NIL) ("2" (INST 1 "x!1") NIL NIL)) NIL)) NIL) ((|member| CONST-DECL "bool" |sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL)) NIL)) (|choose_not_member| 0 (|choose_not_member-1| |nil| 3237052399 ("" (SKOSIMP*) (("" (EXPAND "member") (("" (EXPAND "rest") (("" (ASSERT) (("" (EXPAND "remove") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|member| CONST-DECL "bool" |sets| NIL) (|remove| CONST-DECL "set" |sets| NIL) (|rest| CONST-DECL "set" |sets| NIL)) NIL)) (|rest_not_equal| 0 (|rest_not_equal-1| |nil| 3237052399 ("" (SKOSIMP) (("" (EXPAND "rest") (("" (REPLACE 1) (("" (EXPAND "remove") (("" (EXPAND "empty?") (("" (SKOSIMP) (("" (EXPAND "member") (("" (TYPEPRED "choose(a!1)") (("1" (REPLACE -3 -1 :DIR RL) (("1" (BETA) (("1" (FLATTEN) (("1" (REPLACE -2) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|rest| CONST-DECL "set" |sets| NIL) (|remove| CONST-DECL "set" |sets| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|choose| CONST-DECL "(p)" |sets| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL)) NIL)) (|rest_member| 0 (|rest_member-1| |nil| 3237052399 ("" (TCC :DEFS !) NIL NIL) ((|member| CONST-DECL "bool" |sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|rest| CONST-DECL "set" |sets| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|remove| CONST-DECL "set" |sets| NIL)) NIL)) (|rest_subset| 0 (|rest_subset-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|member| CONST-DECL "bool" |sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|rest| CONST-DECL "set" |sets| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|remove| CONST-DECL "set" |sets| NIL) (|subset?| CONST-DECL "bool" |sets| NIL)) NIL)) (|choose_add| 0 (|choose_add-1| |nil| 3237052399 ("" (GRIND) (("" (TYPEPRED " choose(add(x!1, a!1))") (("" (EXPAND "add" -1 1) (("" (EXPAND "member") (("" (EXPAND "choose") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|add| CONST-DECL "(nonempty?)" |sets| NIL) (|choose| CONST-DECL "(p)" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL)) NIL)) (|choose_rest_or_TCC1| 0 (|choose_rest_or_TCC1-1| |nil| 3237052399 ("" (TCC :DEFS !) NIL NIL) ((|member| CONST-DECL "bool" |sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|rest| CONST-DECL "set" |sets| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|remove| CONST-DECL "set" |sets| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL)) NIL (|choose_rest_or| SUBTYPE "sets_lemmas.a" "(sets[sets_lemmas.T].nonempty?)"))) (|choose_rest_or| 0 (|choose_rest_or-1| |nil| 3237052399 ("" (TCC :DEFS !) NIL NIL) ((|member| CONST-DECL "bool" |sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|rest| CONST-DECL "set" |sets| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|remove| CONST-DECL "set" |sets| NIL)) NIL)) (|choose_singleton| 0 (|choose_singleton-1| |nil| 3237052399 ("" (SKOSIMP*) (("" (TYPEPRED "choose(singleton(x!1))") (("1" (EXPAND "singleton") (("1" (PROPAX) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|choose| CONST-DECL "(p)" |sets| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|singleton| CONST-DECL "(singleton?)" |sets| NIL) (|singleton?| CONST-DECL "bool" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL)) (|rest_singleton| 0 (|rest_singleton-1| |nil| 3237052399 ("" (SKOSIMP*) (("" (APPLY-EXTENSIONALITY :HIDE? T) (("" (EXPAND "rest") (("" (EXPAND "singleton") (("" (EXPAND "remove") (("" (LIFT-IF) (("" (EXPAND "emptyset") (("" (PROP) (("1" (EXPAND "empty?") (("1" (INST -1 "x!1") (("1" (EXPAND "member") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "member") (("2" (EXPAND "choose") (("2" (USE "epsilon_ax[T]") (("1" (ASSERT) NIL NIL) ("2" (INST 1 "x!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|emptyset| CONST-DECL "set" |sets| NIL) (|singleton| CONST-DECL "(singleton?)" |sets| NIL) (|singleton?| CONST-DECL "bool" |sets| NIL) (|rest| CONST-DECL "set" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|epsilon_ax| FORMULA-DECL NIL |epsilons| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|remove| CONST-DECL "set" |sets| NIL)) NIL)) (|singleton_subset| 0 (|singleton_subset-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|singleton| CONST-DECL "(singleton?)" |sets| NIL) (|subset?| CONST-DECL "bool" |sets| NIL)) NIL)) (|rest_empty_lem| 0 (|rest_empty_lem-1| |nil| 3237052399 ("" (SKOSIMP*) (("" (EXPAND "extend") (("" (APPLY-EXTENSIONALITY) (("1" (HIDE 3) (("1" (LIFT-IF) (("1" (EXPAND "singleton") (("1" (EXPAND "empty?") (("1" (SKOSIMP*) (("1" (EXPAND "member") (("1" (SPLIT) (("1" (FLATTEN) (("1" (TYPEPRED "choose(a!1)") (("1" (INST -4 "x!1") (("1" (EXPAND "rest") (("1" (EXPAND "remove") (("1" (EXPAND "member") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (EXPAND "nonempty?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|extend| CONST-DECL "R" |extend| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|rest| CONST-DECL "set" |sets| NIL) (|remove| CONST-DECL "set" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) NIL (|nonempty?| CONST-DECL "bool" |sets| NIL) (FALSE CONST-DECL "bool" |booleans| NIL) (|choose| CONST-DECL "(p)" |sets| NIL) (|singleton| CONST-DECL "(singleton?)" |sets| NIL) (|singleton?| CONST-DECL "bool" |sets| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL)) NIL)) (|singleton_disjoint| 0 (|singleton_disjoint-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|member| CONST-DECL "bool" |sets| NIL) (|singleton| CONST-DECL "(singleton?)" |sets| NIL) (|intersection| CONST-DECL "set" |sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|disjoint?| CONST-DECL "bool" |sets| NIL)) NIL)) (|disjoint_remove_left| 0 (|disjoint_remove_left-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|intersection| CONST-DECL "set" |sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|disjoint?| CONST-DECL "bool" |sets| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|remove| CONST-DECL "set" |sets| NIL)) NIL)) (|disjoint_remove_right| 0 (|disjoint_remove_right-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|intersection| CONST-DECL "set" |sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|disjoint?| CONST-DECL "bool" |sets| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|remove| CONST-DECL "set" |sets| NIL)) NIL)) (|union_disj_remove_left| 0 (|union_disj_remove_left-1| |nil| 3237052399 ("" (GRIND) (("" (APPLY-EXTENSIONALITY :HIDE? T) (("" (GRIND) NIL NIL)) NIL)) NIL) ((/= CONST-DECL "boolean" |notequal| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|union| CONST-DECL "set" |sets| NIL) (|remove| CONST-DECL "set" |sets| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|disjoint?| CONST-DECL "bool" |sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|intersection| CONST-DECL "set" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL)) NIL)) (|union_disj_remove_right| 0 (|union_disj_remove_right-1| |nil| 3237052399 ("" (GRIND) (("" (APPLY-EXTENSIONALITY :HIDE? T) (("" (GRIND) NIL NIL)) NIL)) NIL) ((/= CONST-DECL "boolean" |notequal| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|union| CONST-DECL "set" |sets| NIL) (|remove| CONST-DECL "set" |sets| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|disjoint?| CONST-DECL "bool" |sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|intersection| CONST-DECL "set" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL)) NIL)) (|subset_powerset| 0 (|subset_powerset-1| |nil| 3237053513 ("" (GRIND) NIL NIL) ((|member| CONST-DECL "bool" |sets| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|powerset| CONST-DECL "setofsets" |sets| NIL)) SHOSTAK)) (|empty_powerset| 0 (|empty_powerset-1| |nil| 3237053527 ("" (GRIND :IF-MATCH NIL) (("1" (INST 1 "emptyset") (("1" (SKOLEM-TYPEPRED) (("1" (GRIND :IF-MATCH NIL) (("1" (APPLY-EXTENSIONALITY) (("1" (INST -2 "x!1") (("1" (INST -3 "x!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (INST-CP -3 "emptyset") (("1" (INST -3 "a!1") (("1" (REPLACE -3 :HIDE? T) (("1" (DECOMPOSE-EQUALITY) (("1" (HIDE -2) (("1" (INST -1 "x!1") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ((= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|emptyset| CONST-DECL "set" |sets| NIL) NIL (|subset?| CONST-DECL "bool" |sets| NIL) (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |sets_lemmas| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|setof| TYPE-EQ-DECL NIL |defined_types| NIL) (|setofsets| TYPE-EQ-DECL NIL |sets| NIL) (|powerset| CONST-DECL "setofsets" |sets| NIL) (|singleton?| CONST-DECL "bool" |sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL)) SHOSTAK)) (|powerset_emptyset| 0 (|powerset_emptyset-1| |nil| 3253513380 ("" (GRIND) NIL NIL) ((|emptyset| CONST-DECL "set" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|powerset| CONST-DECL "setofsets" |sets| NIL)) NIL)) (|nonempty_powerset| 0 (|nonempty_powerset-1| |nil| 3237054070 ("" (GRIND :IF-MATCH NIL) (("" (INST -1 "emptyset") (("" (GRIND) NIL NIL)) NIL)) NIL) ((T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|emptyset| CONST-DECL "set" |sets| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|powerset| CONST-DECL "setofsets" |sets| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL)) SHOSTAK (|nonempty_powerset| SUBTYPE "sets[sets_lemmas.T].powerset(sets_lemmas.a)" "(sets[set[T]].nonempty?)"))) (|powerset_union| 0 (|powerset_union-1| |nil| 3253513413 ("" (GRIND) (("" (APPLY-EXTENSIONALITY) (("" (GRIND) NIL NIL)) NIL)) NIL) ((|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|setof| TYPE-EQ-DECL NIL |defined_types| NIL) (|setofsets| TYPE-EQ-DECL NIL |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|Union| CONST-DECL "set" |sets| NIL) (|powerset| CONST-DECL "setofsets" |sets| NIL) (T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |sets_lemmas| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL (|nonempty_powerset| APPLICATION-JUDGEMENT "(nonempty?[set[T]])" |sets_lemmas| NIL)) NIL)) (|powerset_intersection| 0 (|powerset_intersection-2| "" 3342855850 ("" (GRIND :IF-MATCH NIL) (("" (INST -1 "emptyset") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ((|subset?| CONST-DECL "bool" |sets| NIL) (|setof| TYPE-EQ-DECL NIL |defined_types| NIL) (|setofsets| TYPE-EQ-DECL NIL |sets| NIL) (|powerset| CONST-DECL "setofsets" |sets| NIL) NIL (|emptyset| CONST-DECL "set" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |sets_lemmas| NIL) (|nonempty_powerset| APPLICATION-JUDGEMENT "(nonempty?[set[T]])" |sets_lemmas| NIL) (|Intersection| CONST-DECL "set" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL)) SHOSTAK) (|powerset_intersection-1| |nil| 3253513443 ("" (GRIND) (("" (INST -1 "emptyset") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) NIL NIL)) (|powerset_subset| 0 (|powerset_subset-1| |nil| 3253513517 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|setof| TYPE-EQ-DECL NIL |defined_types| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|powerset| CONST-DECL "setofsets" |sets| NIL)) NIL)) (|Union_empty| 0 (|Union_empty-1| |nil| 3253513523 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|setof| TYPE-EQ-DECL NIL |defined_types| NIL) (|setofsets| TYPE-EQ-DECL NIL |sets| NIL) (|Union| CONST-DECL "set" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) NIL) NIL)) (|Union_full| 0 (|Union_full-1| |nil| 3253513528 ("" (GRIND) NIL NIL) ((|Union| CONST-DECL "set" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|full?| CONST-DECL "bool" |sets| NIL)) NIL)) (|Union_member| 0 (|Union_member-1| |nil| 3397714990 ("" (GRIND) NIL NIL) ((|Union| CONST-DECL "set" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL)) SHOSTAK)) (|Union_subset| 0 (|Union_subset-1| |nil| 3253513533 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|setof| TYPE-EQ-DECL NIL |defined_types| NIL) (|setofsets| TYPE-EQ-DECL NIL |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|Union| CONST-DECL "set" |sets| NIL) (|subset?| CONST-DECL "bool" |sets| NIL)) NIL)) (|Union_surjective| 0 (|Union_surjective-1| |nil| 3253512260 ("" (GRIND) (("" (INST 1 "powerset(y!1)") (("" (GRIND) (("" (APPLY-EXTENSIONALITY) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|setof| TYPE-EQ-DECL NIL |defined_types| NIL) (|setofsets| TYPE-EQ-DECL NIL |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|powerset| CONST-DECL "setofsets" |sets| NIL) (|Union| CONST-DECL "set" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |sets_lemmas| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL (|nonempty_powerset| APPLICATION-JUDGEMENT "(nonempty?[set[T]])" |sets_lemmas| NIL) (|surjective?| CONST-DECL "bool" |functions| NIL)) NIL (|Union_surjective| SUBTYPE "sets[sets_lemmas.T].Union" "(functions[setofsets[T], set[T]].surjective?)"))) (|Union_emptyset_rew| 0 (|Union_emptyset_rew-1| |nil| 3397715037 ("" (APPLY-EXTENSIONALITY :HIDE? T) (("" (GRIND) NIL NIL)) NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|Union_surjective| NAME-JUDGEMENT "(surjective?[setofsets[T], set[T]])" |sets_lemmas| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|setof| TYPE-EQ-DECL NIL |defined_types| NIL) (|setofsets| TYPE-EQ-DECL NIL |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|Union| CONST-DECL "set" |sets| NIL) (|emptyset| CONST-DECL "set" |sets| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL)) SHOSTAK)) (|Union_union_rew| 0 (|Union_union_rew-1| |nil| 3397715067 ("" (SKOSIMP) (("" (APPLY-EXTENSIONALITY :HIDE? T) (("" (CASE "add(choose(A!1), rest(A!1)) = A!1") (("1" (EXPAND "union") (("1" (EXPAND "member") (("1" (IFF) (("1" (DECOMPOSE-EQUALITY) (("1" (PROP) (("1" (EXPAND "Union" -1) (("1" (SKOSIMP) (("1" (INST -2 "a!1") (("1" (EXPAND "add") (("1" (EXPAND "member") (("1" (PROP) (("1" (ASSERT) NIL NIL) ("2" (EXPAND "Union" 2) (("2" (INST 2 "a!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "Union" 1) (("2" (INST 1 "choose(A!1)") NIL NIL)) NIL) ("3" (EXPAND "Union" 1) (("3" (EXPAND "Union") (("3" (SKOSIMP) (("3" (INST 1 "a!1") (("3" (TYPEPRED "a!1") (("3" (EXPAND "rest" -1) (("3" (EXPAND "nonempty?") (("3" (ASSERT) (("3" (EXPAND "remove") (("3" (EXPAND "member") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "add") (("2" (APPLY-EXTENSIONALITY :HIDE? T) (("2" (IFF) (("2" (EXPAND "member") (("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (EXPAND "rest") (("2" (EXPAND "nonempty?") (("2" (ASSERT) (("2" (EXPAND "remove") (("2" (EXPAND "member") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "rest") (("3" (EXPAND "nonempty?") (("3" (ASSERT) (("3" (EXPAND "remove") (("3" (EXPAND "member") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|rest| CONST-DECL "set" |sets| NIL) (|choose| CONST-DECL "(p)" |sets| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|union| CONST-DECL "set" |sets| NIL) (|Union| CONST-DECL "set" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|setofsets| TYPE-EQ-DECL NIL |sets| NIL) (|setof| TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|Union_surjective| NAME-JUDGEMENT "(surjective?[setofsets[T], set[T]])" |sets_lemmas| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL NIL NIL (|remove| CONST-DECL "set" |sets| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|member| CONST-DECL "bool" |sets| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|add| CONST-DECL "(nonempty?)" |sets| NIL)) SHOSTAK)) (|Intersection_empty| 0 (|Intersection_empty-1| |nil| 3253513663 ("" (GRIND) NIL NIL) ((T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|setofsets| TYPE-EQ-DECL NIL |sets| NIL) (|setof| TYPE-EQ-DECL NIL |defined_types| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|Intersection| CONST-DECL "set" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL)) NIL)) (|Intersection_full| 0 (|Intersection_full-1| |nil| 3253513669 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|setof| TYPE-EQ-DECL NIL |defined_types| NIL) (|setofsets| TYPE-EQ-DECL NIL |sets| NIL) (|Intersection| CONST-DECL "set" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|full?| CONST-DECL "bool" |sets| NIL) NIL) NIL)) (|Intersection_member| 0 (|Intersection_member-1| |nil| 3397715800 ("" (SKOSIMP) (("" (EXPAND "member") (("" (EXPAND "Intersection") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ((|member| CONST-DECL "bool" |sets| NIL) (|Intersection| CONST-DECL "set" |sets| NIL)) SHOSTAK)) (|Intersection_empty_full| 0 (|Intersection_empty_full-1| |nil| 3253513675 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|emptyset| CONST-DECL "set" |sets| NIL) (|Intersection| CONST-DECL "set" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|full?| CONST-DECL "bool" |sets| NIL)) NIL)) (|Intersection_surjective| 0 (|Intersection_surjective-1| |nil| 3253512260 ("" (GRIND) (("" (INST 1 "singleton(y!1)") (("" (GRIND) (("" (APPLY-EXTENSIONALITY) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|setof| TYPE-EQ-DECL NIL |defined_types| NIL) (|setofsets| TYPE-EQ-DECL NIL |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|singleton?| CONST-DECL "bool" |sets| NIL) (|singleton| CONST-DECL "(singleton?)" |sets| NIL) (|Intersection| CONST-DECL "set" |sets| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|surjective?| CONST-DECL "bool" |functions| NIL)) NIL (|Intersection_surjective| SUBTYPE "sets[sets_lemmas.T].Intersection" "(functions[setofsets[T], set[T]].surjective?)"))) (|Intersection_intersection_rew| 0 (|Intersection_intersection_rew-1| |nil| 3397617277 ("" (SKOSIMP) (("" (CASE "add(choose(A!1), rest(A!1)) = A!1") (("1" (EXPAND "add") (("1" (EXPAND "member") (("1" (DECOMPOSE-EQUALITY) (("1" (EXPAND "intersection") (("1" (APPLY-EXTENSIONALITY :HIDE? T) (("1" (EXPAND "member") (("1" (EXPAND "Intersection" 1 1) (("1" (IFF) (("1" (PROP) (("1" (INST -1 "choose(A!1)") NIL NIL) ("2" (EXPAND "Intersection") (("2" (SKOSIMP) (("2" (INST -1 "a!1") (("2" (TYPEPRED "a!1") (("2" (EXPAND "rest" -1) (("2" (EXPAND "nonempty?") (("2" (ASSERT) (("2" (EXPAND "remove") (("2" (EXPAND "member") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "Intersection" -2) (("3" (SKOSIMP) (("3" (INST -3 "a!1") (("3" (ASSERT) (("3" (INST -2 "a!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (APPLY-EXTENSIONALITY :HIDE? T) (("2" (EXPAND "add") (("2" (IFF) (("2" (PROP) (("1" (EXPAND "choose") (("1" (USE "epsilon_ax[setof[T]]") (("1" (PROP) (("1" (ASSERT) NIL NIL) ("2" (REVEAL -3) (("2" (EXPAND "nonempty?") (("2" (EXPAND "empty?") (("2" (SKOSIMP) (("2" (EXPAND "member") (("2" (INST 1 "x!2") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "member") (("2" (EXPAND "rest") (("2" (ASSERT) (("2" (REVEAL -2) (("2" (EXPAND "nonempty?") (("2" (ASSERT) (("2" (EXPAND "remove") (("2" (EXPAND "member") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "member") (("3" (EXPAND "rest") (("3" (ASSERT) (("3" (PROP) (("3" (EXPAND "remove") (("3" (EXPAND "member") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|rest| CONST-DECL "set" |sets| NIL) (|setofsets| TYPE-EQ-DECL NIL |sets| NIL) (|choose| CONST-DECL "(p)" |sets| NIL) (|add| CONST-DECL "(nonempty?)" |sets| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|setof| TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|intersection| CONST-DECL "set" |sets| NIL) NIL (|remove| CONST-DECL "set" |sets| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) NIL (|Intersection| CONST-DECL "set" |sets| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Intersection_surjective| NAME-JUDGEMENT "(surjective?[setofsets[T], set[T]])" |sets_lemmas| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|epsilon_ax| FORMULA-DECL NIL |epsilons| NIL) (|empty?| CONST-DECL "bool" |sets| NIL)) SHOSTAK)) (|Complement_empty| 0 (|Complement_empty-1| |nil| 3253513724 ("" (GRIND :IF-MATCH NIL) (("1" (INST -1 "complement(x!1)") (("1" (INST 1 "x!1") NIL NIL)) NIL) ("2" (INST -3 "b!1") NIL NIL)) NIL) ((|complement| CONST-DECL "set" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|setof| TYPE-EQ-DECL NIL |defined_types| NIL) (|setofsets| TYPE-EQ-DECL NIL |sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|Complement| CONST-DECL "setofsets[T]" |sets_lemmas| NIL)) NIL)) (|Complement_full| 0 (|Complement_full-1| |nil| 3253514020 ("" (GRIND :IF-MATCH NIL) (("1" (INST - "complement(x!1)") (("1" (SKOLEM!) (("1" (REWRITE "complement_equal") NIL NIL)) NIL)) NIL) ("2" (INST - "complement(x!1)") (("2" (INST + "complement(x!1)") (("2" (USE "complement_complement[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|complement_complement| FORMULA-DECL NIL |sets_lemmas| NIL) NIL NIL (T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|setof| TYPE-EQ-DECL NIL |defined_types| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|complement| CONST-DECL "set" |sets| NIL) (|setofsets| TYPE-EQ-DECL NIL |sets| NIL) (|complement_equal| FORMULA-DECL NIL |sets_lemmas| NIL) (|full?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|Complement| CONST-DECL "setofsets[T]" |sets_lemmas| NIL)) NIL)) (|Complement_Complement| 0 (|Complement_Complement-1| |nil| 3253514589 ("" (SKOLEM!) (("" (EXPAND "Complement") (("" (APPLY-EXTENSIONALITY :HIDE? T) (("" (SMASH) (("1" (SKOSIMP* :PREDS? T) (("1" (USE "complement_complement[T]") (("1" (ASSERT) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (INST + "complement(x!1)") (("1" (USE "complement_complement[T]") (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|Complement| CONST-DECL "setofsets[T]" |sets_lemmas| NIL) (|complement_complement| FORMULA-DECL NIL |sets_lemmas| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) NIL NIL (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|complement| CONST-DECL "set" |sets| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|setofsets| TYPE-EQ-DECL NIL |sets| NIL) (|setof| TYPE-EQ-DECL NIL |defined_types| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)) NIL)) (|subset_Complement| 0 (|subset_Complement-1| |nil| 3253515065 ("" (GRIND :IF-MATCH NIL) (("1" (INST - "complement(x!1)") (("1" (SPLIT) (("1" (SKOLEM!) (("1" (REWRITE "complement_equal") NIL NIL)) NIL) ("2" (INST?) NIL NIL)) NIL)) NIL) ("2" (INST - "b!1") (("2" (ASSERT) (("2" (INST + "b!1") NIL NIL)) NIL)) NIL)) NIL) ((|complement| CONST-DECL "set" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|complement_equal| FORMULA-DECL NIL |sets_lemmas| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|setof| TYPE-EQ-DECL NIL |defined_types| NIL) (|setofsets| TYPE-EQ-DECL NIL |sets| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|Complement| CONST-DECL "setofsets[T]" |sets_lemmas| NIL)) NIL)) (|Complement_bijective| 0 (|Complement_bijective-1| |nil| 3253512260 ("" (EXPAND* "bijective?" "injective?" "surjective?") (("" (SPLIT) (("1" (SKOSIMP) (("1" (LEMMA "Complement_Complement") (("1" (INST-CP - "x2!1") (("1" (INST - "x1!1") (("1" (ASSERT) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOLEM!) (("2" (INST + "Complement(y!1)") (("2" (USE "Complement_Complement") NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|Complement_Complement| FORMULA-DECL NIL |sets_lemmas| NIL) (|setofsets| TYPE-EQ-DECL NIL |sets| NIL) (|setof| TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|Complement| CONST-DECL "setofsets[T]" |sets_lemmas| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (|surjective?| CONST-DECL "bool" |functions| NIL)) NIL (|Complement_bijective| SUBTYPE "sets_lemmas.Complement" "(functions[setofsets[T], setofsets[T]].bijective?)"))) (|Demorgan1| 0 (|Demorgan1-1| |nil| 3253515330 ("" (SKOLEM!) (("" (APPLY-EXTENSIONALITY :HIDE? T) (("" (GRIND :IF-MATCH NIL) (("1" (INST?) NIL NIL) ("2" (INST - "complement(a!1)") (("1" (EXPAND* "complement" "member") NIL NIL) ("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|Complement| CONST-DECL "setofsets[T]" |sets_lemmas| NIL) (|Intersection| CONST-DECL "set" |sets| NIL) (|Union| CONST-DECL "set" |sets| NIL) (|setofsets| TYPE-EQ-DECL NIL |sets| NIL) (|setof| TYPE-EQ-DECL NIL |defined_types| NIL) (|complement| CONST-DECL "set" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|Complement_bijective| NAME-JUDGEMENT "(bijective?[setofsets[T], setofsets[T]])" |sets_lemmas| NIL) (|Intersection_surjective| NAME-JUDGEMENT "(surjective?[setofsets[T], set[T]])" |sets_lemmas| NIL) (|Union_surjective| NAME-JUDGEMENT "(surjective?[setofsets[T], set[T]])" |sets_lemmas| NIL) NIL (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) NIL (|member| CONST-DECL "bool" |sets| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)) NIL)) (|Demorgan2| 0 (|Demorgan2-1| |nil| 3253515430 ("" (SKOLEM!) (("" (APPLY-EXTENSIONALITY :HIDE? T) (("" (GRIND :IF-MATCH NIL) (("1" (INST + "complement(a!1)") (("1" (EXPAND* "complement" "member") NIL NIL) ("2" (INST?) NIL NIL)) NIL) ("2" (INST?) NIL NIL)) NIL)) NIL)) NIL) ((T FORMAL-TYPE-DECL NIL |sets_lemmas| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|Complement| CONST-DECL "setofsets[T]" |sets_lemmas| NIL) (|Union| CONST-DECL "set" |sets| NIL) (|Intersection| CONST-DECL "set" |sets| NIL) (|setofsets| TYPE-EQ-DECL NIL |sets| NIL) (|setof| TYPE-EQ-DECL NIL |defined_types| NIL) (|complement| CONST-DECL "set" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|Complement_bijective| NAME-JUDGEMENT "(bijective?[setofsets[T], setofsets[T]])" |sets_lemmas| NIL) (|Union_surjective| NAME-JUDGEMENT "(surjective?[setofsets[T], set[T]])" |sets_lemmas| NIL) (|Intersection_surjective| NAME-JUDGEMENT "(surjective?[setofsets[T], set[T]])" |sets_lemmas| NIL) NIL (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) NIL (|member| CONST-DECL "bool" |sets| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)) NIL)))(|function_inverse_def| (|left_inverse_is_inverse| 0 (|left_inverse_is_inverse-1| |nil| 3252428734 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (R FORMAL-TYPE-DECL NIL |function_inverse_def| NIL) (D FORMAL-TYPE-DECL NIL |function_inverse_def| NIL) (|left_inverse?| CONST-DECL "bool" |function_inverse_def| NIL) (|inverse?| CONST-DECL "bool" |function_inverse_def| NIL)) SHOSTAK)) (|left_inj_surj| 0 (|left_inj_surj-1| |nil| 3252428739 ("" (GRIND :IF-MATCH ALL) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (R FORMAL-TYPE-DECL NIL |function_inverse_def| NIL) (D FORMAL-TYPE-DECL NIL |function_inverse_def| NIL) (|left_inverse?| CONST-DECL "bool" |function_inverse_def| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (|surjective?| CONST-DECL "bool" |functions| NIL)) SHOSTAK)) (|inj_left_alt| 0 (|inj_left_alt-1| |nil| 3253554040 ("" (GRIND :IF-MATCH ALL) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (D FORMAL-TYPE-DECL NIL |function_inverse_def| NIL) (R FORMAL-TYPE-DECL NIL |function_inverse_def| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (|inverse?| CONST-DECL "bool" |function_inverse_def| NIL) (|left_inverse?| CONST-DECL "bool" |function_inverse_def| NIL)) SHOSTAK)) (|surj_inv_alt| 0 (|surj_inv_alt-1| |nil| 3253554148 ("" (SKOLEM!) (("" (USE "inj_left_alt") (("" (USE "left_inj_surj") (("" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL) ((|inj_left_alt| FORMULA-DECL NIL |function_inverse_def| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (R FORMAL-TYPE-DECL NIL |function_inverse_def| NIL) (D FORMAL-TYPE-DECL NIL |function_inverse_def| NIL) (|inverse?| CONST-DECL "bool" |function_inverse_def| NIL) (|left_inj_surj| FORMULA-DECL NIL |function_inverse_def| NIL) (|left_inverse?| CONST-DECL "bool" |function_inverse_def| NIL) NIL NIL) SHOSTAK)) (|injective_inverse_alt| 0 (|injective_inverse_alt-1| |nil| 3253554196 ("" (GRIND :IF-MATCH ALL) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (D FORMAL-TYPE-DECL NIL |function_inverse_def| NIL) (R FORMAL-TYPE-DECL NIL |function_inverse_def| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (|inverse?| CONST-DECL "bool" |function_inverse_def| NIL)) SHOSTAK)) (|comp_inverse_left_inj_alt| 0 (|comp_inverse_left_inj_alt-1| |nil| 3253554225 ("" (GRIND :IF-MATCH ALL) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (D FORMAL-TYPE-DECL NIL |function_inverse_def| NIL) (R FORMAL-TYPE-DECL NIL |function_inverse_def| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (|inverse?| CONST-DECL "bool" |function_inverse_def| NIL)) SHOSTAK)) (|noninjective_inverse_exists| 0 (|noninjective_inverse_exists-1| |nil| 3252428875 ("" (SKOSIMP) (("" (INST + "LAMBDA r: (epsilon! d: f!1(d) = r)") (("1" (EXPAND "inverse?") (("1" (SKOSIMP*) (("1" (USE "epsilon_ax[D]") (("1" (ASSERT) (("1" (INST?) NIL NIL)) NIL) ("2" (INST?) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOLEM!) (("2" (EXPAND "injective?") (("2" (SKOSIMP) (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((TRUE CONST-DECL "bool" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (D FORMAL-TYPE-DECL NIL |function_inverse_def| NIL) (R FORMAL-TYPE-DECL NIL |function_inverse_def| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|epsilon| CONST-DECL "T" |epsilons| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|epsilon_ax| FORMULA-DECL NIL |epsilons| NIL) (|inverse?| CONST-DECL "bool" |function_inverse_def| NIL) (|injective?| CONST-DECL "bool" |functions| NIL)) SHOSTAK)) (|right_inverse_is_inverse| 0 (|right_inverse_is_inverse-1| |nil| 3252429153 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (R FORMAL-TYPE-DECL NIL |function_inverse_def| NIL) (D FORMAL-TYPE-DECL NIL |function_inverse_def| NIL) (|right_inverse?| CONST-DECL "bool" |function_inverse_def| NIL) (|inverse?| CONST-DECL "bool" |function_inverse_def| NIL)) SHOSTAK)) (|right_surj_inj| 0 (|right_surj_inj-1| |nil| 3252429158 ("" (GRIND :IF-MATCH ALL) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (R FORMAL-TYPE-DECL NIL |function_inverse_def| NIL) (D FORMAL-TYPE-DECL NIL |function_inverse_def| NIL) (|right_inverse?| CONST-DECL "bool" |function_inverse_def| NIL) (|surjective?| CONST-DECL "bool" |functions| NIL) (|injective?| CONST-DECL "bool" |functions| NIL)) SHOSTAK)) (|surj_right_alt| 0 (|surj_right_alt-1| |nil| 3253554259 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (D FORMAL-TYPE-DECL NIL |function_inverse_def| NIL) (R FORMAL-TYPE-DECL NIL |function_inverse_def| NIL) (|surjective?| CONST-DECL "bool" |functions| NIL) (|inverse?| CONST-DECL "bool" |function_inverse_def| NIL) (|right_inverse?| CONST-DECL "bool" |function_inverse_def| NIL)) SHOSTAK)) (|inj_inv_alt| 0 (|inj_inv_alt-1| |nil| 3253554287 ("" (SKOLEM!) (("" (USE "surj_right_alt") (("" (USE "right_surj_inj") (("" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL) ((|surj_right_alt| FORMULA-DECL NIL |function_inverse_def| NIL) (|surjective?| CONST-DECL "bool" |functions| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (R FORMAL-TYPE-DECL NIL |function_inverse_def| NIL) (D FORMAL-TYPE-DECL NIL |function_inverse_def| NIL) (|inverse?| CONST-DECL "bool" |function_inverse_def| NIL) (|right_surj_inj| FORMULA-DECL NIL |function_inverse_def| NIL) (|right_inverse?| CONST-DECL "bool" |function_inverse_def| NIL) NIL NIL) SHOSTAK)) (|surjective_inverse_alt| 0 (|surjective_inverse_alt-1| |nil| 3253555867 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (D FORMAL-TYPE-DECL NIL |function_inverse_def| NIL) (R FORMAL-TYPE-DECL NIL |function_inverse_def| NIL) (|surjective?| CONST-DECL "bool" |functions| NIL) (|inverse?| CONST-DECL "bool" |function_inverse_def| NIL)) SHOSTAK)) (|comp_inverse_right_surj_alt| 0 (|comp_inverse_right_surj_alt-1| |nil| 3253554365 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (D FORMAL-TYPE-DECL NIL |function_inverse_def| NIL) (R FORMAL-TYPE-DECL NIL |function_inverse_def| NIL) (|surjective?| CONST-DECL "bool" |functions| NIL) (|inverse?| CONST-DECL "bool" |function_inverse_def| NIL)) SHOSTAK)) (|surjective_inverse_exists| 0 (|surjective_inverse_exists-1| |nil| 3252429210 ("" (SKOLEM-TYPEPRED) (("" (EXPAND "surjective?") (("" (INST + "LAMBDA r: (epsilon! d: f!1(d) = r)") (("1" (EXPAND "inverse?") (("1" (SKOSIMP*) (("1" (USE "epsilon_ax[D]") (("1" (ASSERT) (("1" (INST?) NIL NIL)) NIL) ("2" (INST?) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOLEM!) (("2" (INST - "r!1") (("2" (SKOLEM!) (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|inverse?| CONST-DECL "bool" |function_inverse_def| NIL) (|epsilon_ax| FORMULA-DECL NIL |epsilons| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|epsilon| CONST-DECL "T" |epsilons| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|surjective?| CONST-DECL "bool" |functions| NIL) (R FORMAL-TYPE-DECL NIL |function_inverse_def| NIL) (D FORMAL-TYPE-DECL NIL |function_inverse_def| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) SHOSTAK)) (|left_right_bij| 0 (|left_right_bij-1| |nil| 3252429300 ("" (SKOSIMP) (("" (USE "left_inj_surj") (("" (USE "right_surj_inj") (("" (EXPAND "bijective?") (("" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|left_inj_surj| FORMULA-DECL NIL |function_inverse_def| NIL) (R FORMAL-TYPE-DECL NIL |function_inverse_def| NIL) (D FORMAL-TYPE-DECL NIL |function_inverse_def| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|left_inverse?| CONST-DECL "bool" |function_inverse_def| NIL) NIL NIL (|bijective?| CONST-DECL "bool" |functions| NIL) (|right_surj_inj| FORMULA-DECL NIL |function_inverse_def| NIL) (|right_inverse?| CONST-DECL "bool" |function_inverse_def| NIL)) SHOSTAK)) (|bij_left_right| 0 (|bij_left_right-1| |nil| 3252429361 ("" (SKOLEM!) (("" (USE "inj_left_alt") (("" (USE "surj_right_alt") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|inj_left_alt| FORMULA-DECL NIL |function_inverse_def| NIL) (|inverse?| CONST-DECL "bool" |function_inverse_def| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (R FORMAL-TYPE-DECL NIL |function_inverse_def| NIL) (D FORMAL-TYPE-DECL NIL |function_inverse_def| NIL) (|surj_right_alt| FORMULA-DECL NIL |function_inverse_def| NIL) (|surjective?| CONST-DECL "bool" |functions| NIL)) SHOSTAK)) (|bij_inv_is_bij_alt| 0 (|bij_inv_is_bij_alt-1| |nil| 3253554448 ("" (SKOLEM!) (("" (USE "surj_inv_alt") (("" (USE "inj_inv_alt") (("" (EXPAND "bijective?") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|surj_inv_alt| FORMULA-DECL NIL |function_inverse_def| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (R FORMAL-TYPE-DECL NIL |function_inverse_def| NIL) (D FORMAL-TYPE-DECL NIL |function_inverse_def| NIL) (|inverse?| CONST-DECL "bool" |function_inverse_def| NIL) (|inj_inv_alt| FORMULA-DECL NIL |function_inverse_def| NIL) (|surjective?| CONST-DECL "bool" |functions| NIL)) SHOSTAK)) (|bijective_inverse_alt| 0 (|bijective_inverse_alt-1| |nil| 3253554490 ("" (SKOLEM!) (("" (USE "injective_inverse_alt") (("" (USE "surjective_inverse_alt") (("" (PROP) NIL NIL)) NIL)) NIL)) NIL) ((|injective_inverse_alt| FORMULA-DECL NIL |function_inverse_def| NIL) (|inverse?| CONST-DECL "bool" |function_inverse_def| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (R FORMAL-TYPE-DECL NIL |function_inverse_def| NIL) (D FORMAL-TYPE-DECL NIL |function_inverse_def| NIL) (|surjective_inverse_alt| FORMULA-DECL NIL |function_inverse_def| NIL) (|surjective?| CONST-DECL "bool" |functions| NIL)) SHOSTAK)) (|comp_inverse_right_alt| 0 (|comp_inverse_right_alt-1| |nil| 3253556090 ("" (SKOLEM!) (("" (USE "comp_inverse_right_surj_alt") NIL NIL)) NIL) ((|inverse?| CONST-DECL "bool" |function_inverse_def| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|surjective?| CONST-DECL "bool" |functions| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (D FORMAL-TYPE-DECL NIL |function_inverse_def| NIL) (R FORMAL-TYPE-DECL NIL |function_inverse_def| NIL) (|comp_inverse_right_surj_alt| FORMULA-DECL NIL |function_inverse_def| NIL)) SHOSTAK)) (|comp_inverse_left_alt| 0 (|comp_inverse_left_alt-1| |nil| 3253556119 ("" (SKOLEM!) (("" (USE "comp_inverse_left_inj_alt") NIL NIL)) NIL) ((|inverse?| CONST-DECL "bool" |function_inverse_def| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (R FORMAL-TYPE-DECL NIL |function_inverse_def| NIL) (D FORMAL-TYPE-DECL NIL |function_inverse_def| NIL) (|comp_inverse_left_inj_alt| FORMULA-DECL NIL |function_inverse_def| NIL)) SHOSTAK)) (|bijective_inverse_exists| 0 (|bijective_inverse_exists-1| |nil| 3252429536 ("" (SKOLEM-TYPEPRED) (("" (EXPAND "exists1") (("" (SPLIT) (("1" (INST + "LAMBDA r: (epsilon! d: f!1(d) = r)") (("1" (EXPAND "inverse?") (("1" (SKOSIMP*) (("1" (USE "epsilon_ax[D]") (("1" (ASSERT) (("1" (INST?) NIL NIL)) NIL) ("2" (INST?) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND* "bijective?" "surjective?") (("2" (SKOSIMP) (("2" (INST - "r!1") (("2" (SKOLEM!) (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "unique?") (("2" (SKOSIMP) (("2" (APPLY-EXTENSIONALITY :HIDE? T) (("2" (GRIND :IF-MATCH NIL) (("2" (INST - "x!2") (("2" (INST - "x!2") (("2" (INST - "x!2") (("2" (SKOLEM!) (("2" (SMASH) (("1" (INST - "x!1(x!2)" "y!1(x!2)") (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST? +) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|exists1| CONST-DECL "bool" |exists1| NIL) (|unique?| CONST-DECL "bool" |exists1| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|epsilon| CONST-DECL "T" |epsilons| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|epsilon_ax| FORMULA-DECL NIL |epsilons| NIL) (|inverse?| CONST-DECL "bool" |function_inverse_def| NIL) (|surjective?| CONST-DECL "bool" |functions| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (R FORMAL-TYPE-DECL NIL |function_inverse_def| NIL) (D FORMAL-TYPE-DECL NIL |function_inverse_def| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) SHOSTAK)) (|exists_inv1| 0 (|exists_inv1-1| |nil| 3253986702 ("" (PROP) (("1" (SKOSIMP*) (("1" (INST 1 "g!1(r!1)") NIL NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST 1 "LAMBDA r: epsilon! d: TRUE") (("2" (SKOSIMP*) (("2" (INST 1 "d!1") NIL NIL)) NIL)) NIL)) NIL) ("3" (INST 1 "LAMBDA r: epsilon! d: TRUE") (("3" (SKOSIMP*) (("3" (INST -1 "r!1") NIL NIL)) NIL)) NIL)) NIL) ((TRUE CONST-DECL "bool" |booleans| NIL) (|epsilon| CONST-DECL "T" |epsilons| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (R FORMAL-TYPE-DECL NIL |function_inverse_def| NIL) (D FORMAL-TYPE-DECL NIL |function_inverse_def| NIL)) SHOSTAK)) (|exists_inv2| 0 (|exists_inv2-1| |nil| 3253986940 ("" (PROP) (("" (SKOSIMP*) (("" (TYPEPRED "f!1") (("" (EXPAND "surjective?") (("" (INST -1 "r!1") (("" (SKOSIMP*) (("" (INST 1 "x!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (D FORMAL-TYPE-DECL NIL |function_inverse_def| NIL) (R FORMAL-TYPE-DECL NIL |function_inverse_def| NIL) (|surjective?| CONST-DECL "bool" |functions| NIL)) SHOSTAK)) (|exists_inv3| 0 (|exists_inv3-1| |nil| 3253986970 ("" (PROP) (("" (SKOSIMP*) (("" (EXPAND "injective?") (("" (SKOSIMP*) (("" (INST 2 "x1!1") NIL NIL)) NIL)) NIL)) NIL)) NIL) ((D FORMAL-TYPE-DECL NIL |function_inverse_def| NIL) (|injective?| CONST-DECL "bool" |functions| NIL)) NIL)))(|function_inverse| (|unique_bijective_inverse| 0 (|unique_bijective_inverse-1| |nil| 3237052399 ("" (SKOLEM-TYPEPRED) (("" (GRIND :IF-MATCH NIL) (("" (INST? -2) (("" (SKOSIMP) (("" (REPLACE -2 :DIR RL) (("" (USE "epsilon_ax[D]") (("" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (INST 1 "x!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|injective?| CONST-DECL "bool" |functions| NIL) (|surjective?| CONST-DECL "bool" |functions| NIL) (|inverse| CONST-DECL "D" |function_inverse| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|epsilon_ax| FORMULA-DECL NIL |epsilons| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (R FORMAL-TYPE-DECL NIL |function_inverse| NIL) (D FORMAL-NONEMPTY-TYPE-DECL NIL |function_inverse| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL (|unique_bijective_inverse| SUBTYPE "function_inverse.inverse(function_inverse.f)(function_inverse.y)" "{x: function_inverse.D | function_inverse.f(x) = function_inverse.y}"))) (|bijective_inverse_is_bijective| 0 (|bijective_inverse_is_bijective-1| |nil| 3237052399 ("" (SKOLEM-TYPEPRED) (("" (GRIND :IF-MATCH NIL) (("1" (INST 1 "f!1(y!1)") (("1" (USE "epsilon_ax[D]") (("1" (ASSERT) (("1" (SPLIT) (("1" (INST? -2) (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "epsilon_ax[D]") (("2" (SPLIT) (("1" (LEMMA "epsilon_ax[D]") (("1" (INST -1 "lambda (x: D): f!1(x) = x2!1") (("1" (SPLIT) (("1" (ASSERT) NIL NIL) ("2" (INST -3 "x2!1") NIL NIL)) NIL)) NIL)) NIL) ("2" (INST -2 "x1!1") NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|injective?| CONST-DECL "bool" |functions| NIL) (|surjective?| CONST-DECL "bool" |functions| NIL) (|inverse| CONST-DECL "D" |function_inverse| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|epsilon_ax| FORMULA-DECL NIL |epsilons| NIL) (|epsilon| CONST-DECL "T" |epsilons| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (R FORMAL-TYPE-DECL NIL |function_inverse| NIL) (D FORMAL-NONEMPTY-TYPE-DECL NIL |function_inverse| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL (|bijective_inverse_is_bijective| SUBTYPE "function_inverse.inverse(function_inverse.f)" "(functions[function_inverse.R, function_inverse.D].bijective?)"))) (|surjective_inverse| 0 (|surjective_inverse-1| |nil| 3253556988 ("" (SKOSIMP) (("" (EXPAND "inverse") (("" (LEMMA "epsilon_ax[D]") (("" (INST -1 "LAMBDA (x:D): f!1(x) = y!1") (("" (PROP) (("1" (REPLACE -2) (("1" (REPLACE -1) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "f!1") (("2" (EXPAND "surjective?") (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|inverse| CONST-DECL "D" |function_inverse| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (R FORMAL-TYPE-DECL NIL |function_inverse| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|surjective?| CONST-DECL "bool" |functions| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (D FORMAL-NONEMPTY-TYPE-DECL NIL |function_inverse| NIL) (|epsilon_ax| FORMULA-DECL NIL |epsilons| NIL)) SHOSTAK)) (|inverse_surjective| 0 (|inverse_surjective-1| |nil| 3299953777 ("" (SKOSIMP) (("" (USE "surjective_inverse") (("" (ASSERT) NIL NIL)) NIL)) NIL) ((|surjective_inverse| FORMULA-DECL NIL |function_inverse| NIL) (|surjective?| CONST-DECL "bool" |functions| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|inverse| CONST-DECL "D" |function_inverse| NIL) (R FORMAL-TYPE-DECL NIL |function_inverse| NIL) (D FORMAL-NONEMPTY-TYPE-DECL NIL |function_inverse| NIL)) SHOSTAK)) (|injective_inverse| 0 (|injective_inverse-1| |nil| 3237052399 ("" (SKOSIMP) (("" (EXPAND "inverse") (("" (TYPEPRED "f!1") (("" (EXPAND "injective?") (("" (LEMMA "epsilon_ax[D]") (("" (INST -1 "LAMBDA (x:D): f!1(x) = y!1") (("" (PROP) (("1" (REPLACE -3) (("1" (INST?) (("1" (REPLACE -1) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (INST?) (("2" (REPLACE -2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|inverse| CONST-DECL "D" |function_inverse| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|epsilon| CONST-DECL "T" |epsilons| NIL) (|epsilon_ax| FORMULA-DECL NIL |epsilons| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (R FORMAL-TYPE-DECL NIL |function_inverse| NIL) (D FORMAL-NONEMPTY-TYPE-DECL NIL |function_inverse| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL)) (|inverse_injective| 0 (|inverse_injective-1| |nil| 3299953859 ("" (SKOSIMP) (("" (USE "injective_inverse") NIL NIL)) NIL) ((|injective?| CONST-DECL "bool" |functions| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (R FORMAL-TYPE-DECL NIL |function_inverse| NIL) (D FORMAL-NONEMPTY-TYPE-DECL NIL |function_inverse| NIL) (|injective_inverse| FORMULA-DECL NIL |function_inverse| NIL)) SHOSTAK)) (|bijective_inverse| 0 (|bijective_inverse-1| |nil| 3237052399 ("" (SKOSIMP) (("" (SPLIT) (("1" (REWRITE "surjective_inverse") (("1" (TYPEPRED "f!1") (("1" (EXPAND "bijective?") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "injective_inverse") (("2" (TYPEPRED "f!1") (("2" (EXPAND "bijective?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|bijective?| CONST-DECL "bool" |functions| NIL) (|surjective?| CONST-DECL "bool" |functions| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (R FORMAL-TYPE-DECL NIL |function_inverse| NIL) (D FORMAL-NONEMPTY-TYPE-DECL NIL |function_inverse| NIL) (|surjective_inverse| FORMULA-DECL NIL |function_inverse| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (|injective_inverse| FORMULA-DECL NIL |function_inverse| NIL)) NIL)) (|bij_inv_is_bij| 0 (|bij_inv_is_bij-1| |nil| 3237052399 ("" (SKOSIMP*) (("" (EXPAND "bijective?") (("" (EXPAND "injective?") (("" (EXPAND "surjective?") (("" (FLATTEN) (("" (SPLIT) (("1" (SKOSIMP*) (("1" (LEMMA "bijective_inverse") (("1" (INST?) (("1" (ASSERT) (("1" (EXPAND "inverse" -1) (("1" (LEMMA "epsilon_ax[D]") (("1" (INST?) (("1" (SPLIT) (("1" (ASSERT) NIL NIL) ("2" (INST -4 "x2!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "bijective?") (("2" (EXPAND "injective?") (("2" (ASSERT) (("2" (REPLACE -2) (("2" (EXPAND "surjective?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST 1 "f!1(y!1)") (("2" (REWRITE "injective_inverse") (("2" (EXPAND "injective?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|bijective?| CONST-DECL "bool" |functions| NIL) (|surjective?| CONST-DECL "bool" |functions| NIL) (|bijective_inverse| FORMULA-DECL NIL |function_inverse| NIL) (|epsilon_ax| FORMULA-DECL NIL |epsilons| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (D FORMAL-NONEMPTY-TYPE-DECL NIL |function_inverse| NIL) (R FORMAL-TYPE-DECL NIL |function_inverse| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) NIL (|inverse| CONST-DECL "D" |function_inverse| NIL) (|injective_inverse| FORMULA-DECL NIL |function_inverse| NIL) (|injective?| CONST-DECL "bool" |functions| NIL)) NIL)) (|surj_right| 0 (|surj_right-1| |nil| 3237052399 ("" (GRIND) (("" (LEMMA "epsilon_ax[D]") (("" (INST?) (("" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|epsilon_ax| FORMULA-DECL NIL |epsilons| NIL) (R FORMAL-TYPE-DECL NIL |function_inverse| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|epsilon| CONST-DECL "T" |epsilons| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (D FORMAL-NONEMPTY-TYPE-DECL NIL |function_inverse| NIL) (|right_inverse?| CONST-DECL "bool" |function_inverse_def| NIL) (|inverse| CONST-DECL "D" |function_inverse| NIL) (|surjective?| CONST-DECL "bool" |functions| NIL)) NIL)) (|inj_left| 0 (|inj_left-1| |nil| 3237052399 ("" (SKOSIMP) (("" (PROP) (("1" (GRIND) (("1" (LEMMA "epsilon_ax[D]") (("1" (INST?) (("1" (ASSERT) (("1" (INST 1 "d!1") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "left_inverse?") (("2" (EXPAND "inverse") (("2" (EXPAND "injective?") (("2" (SKOSIMP) (("2" (INST-CP -1 "x1!1") (("2" (INST -1 "x2!1") (("2" (ASSERT) (("2" (REPLACE -3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|epsilon_ax| FORMULA-DECL NIL |epsilons| NIL) (D FORMAL-NONEMPTY-TYPE-DECL NIL |function_inverse| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|epsilon| CONST-DECL "T" |epsilons| NIL) (R FORMAL-TYPE-DECL NIL |function_inverse| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|left_inverse?| CONST-DECL "bool" |function_inverse_def| NIL) (|inverse| CONST-DECL "D" |function_inverse| NIL) (|injective?| CONST-DECL "bool" |functions| NIL)) NIL)) (|inj_inv| 0 (|inj_inv-1| |nil| 3237052399 ("" (SKOSIMP) (("" (EXPAND "surjective?") (("" (EXPAND "injective?") (("" (EXPAND "inverse") (("" (SKOSIMP) (("" (INST-CP -1 "x1!1") (("" (INST -1 "x2!1") (("" (SKOSIMP) (("" (SKOSIMP) (("" (LEMMA "epsilon_ax[D]") (("" (INST-CP -1 "LAMBDA (x:D): f!1(x)=x1!1") (("" (INST -1 "LAMBDA (x:D): f!1(x)=x2!1") (("" (PROP) (("1" (REPLACE -5) (("1" (REPLACE -1) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (INST?) NIL NIL) ("3" (INST?) NIL NIL) ("4" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|surjective?| CONST-DECL "bool" |functions| NIL) (|inverse| CONST-DECL "D" |function_inverse| NIL) (R FORMAL-TYPE-DECL NIL |function_inverse| NIL) (D FORMAL-NONEMPTY-TYPE-DECL NIL |function_inverse| NIL) (|epsilon_ax| FORMULA-DECL NIL |epsilons| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|injective?| CONST-DECL "bool" |functions| NIL)) NIL)) (|surj_inv| 0 (|surj_inv-1| |nil| 3237052399 ("" (SKOSIMP) (("" (EXPAND "surjective?") (("" (EXPAND "injective?") (("" (SKOSIMP) (("" (EXPAND "inverse") (("" (INST -1 "y!1" _) (("" (INST 1 "f!1(y!1)") (("" (INST -1 "(epsilon ! (x_5: D): f!1(x_5) = f!1(y!1))") (("" (PROP) (("1" (REPLACE -1) (("1" (REPLACE -1 :DIR RL) (("1" (REPLACE -1 :DIR RL) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "epsilon_ax[D]") (("2" (INST?) (("2" (PROP) (("1" (REPLACE -1) (("1" (PROPAX) NIL NIL)) NIL) ("2" (INST 1 "y!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|surjective?| CONST-DECL "bool" |functions| NIL) (D FORMAL-NONEMPTY-TYPE-DECL NIL |function_inverse| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|epsilon| CONST-DECL "T" |epsilons| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|epsilon_ax| FORMULA-DECL NIL |epsilons| NIL) (R FORMAL-TYPE-DECL NIL |function_inverse| NIL) (|inverse| CONST-DECL "D" |function_inverse| NIL) (|injective?| CONST-DECL "bool" |functions| NIL)) NIL)) (|inv_inj_is_surj| 0 (|inv_inj_is_surj-1| |nil| 3237052399 ("" (GRIND :IF-MATCH NIL) (("" (INST 1 "f!1(y!1)") (("" (INST? -1) (("" (ASSERT) (("" (LEMMA "epsilon_ax[D]") (("" (INST?) (("" (ASSERT) (("" (INST 1 "y!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|epsilon_ax| FORMULA-DECL NIL |epsilons| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|epsilon| CONST-DECL "T" |epsilons| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (D FORMAL-NONEMPTY-TYPE-DECL NIL |function_inverse| NIL) (R FORMAL-TYPE-DECL NIL |function_inverse| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (|surjective?| CONST-DECL "bool" |functions| NIL) (|inverse| CONST-DECL "D" |function_inverse| NIL)) NIL (|inv_inj_is_surj| SUBTYPE "function_inverse.inverse(function_inverse.f)" "(functions[function_inverse.R, function_inverse.D].surjective?)"))) (|inv_surj_is_inj| 0 (|inv_surj_is_inj-1| |nil| 3237052399 ("" (GRIND :IF-MATCH NIL) (("" (INST-CP -1 "x1!1") (("" (INST -1 "x2!1") (("" (SKOSIMP*) (("" (LEMMA "epsilon_ax[D]") (("" (LEMMA "epsilon_ax[D]") (("" (INST?) (("" (INST -2 "LAMBDA (x: D): f!1(x) = x2!1") (("" (ASSERT) (("" (PROP) (("1" (ASSERT) NIL NIL) ("2" (INST 1 "x!1") NIL NIL) ("3" (INST 1 "x!2") NIL NIL) ("4" (INST 1 "x!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|epsilon_ax| FORMULA-DECL NIL |epsilons| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (D FORMAL-NONEMPTY-TYPE-DECL NIL |function_inverse| NIL) (R FORMAL-TYPE-DECL NIL |function_inverse| NIL) (|surjective?| CONST-DECL "bool" |functions| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (|inverse| CONST-DECL "D" |function_inverse| NIL)) NIL (|inv_surj_is_inj| SUBTYPE "function_inverse.inverse(function_inverse.f)" "(functions[function_inverse.R, function_inverse.D].injective?)"))) (|comp_inverse_right_surj| 0 (|comp_inverse_right_surj-1| |nil| 3237052399 ("" (GRIND :IF-MATCH NIL) (("" (USE "epsilon_ax[D]") (("" (ASSERT) (("" (INST? -1) NIL NIL)) NIL)) NIL)) NIL) ((= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|epsilon_ax| FORMULA-DECL NIL |epsilons| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (D FORMAL-NONEMPTY-TYPE-DECL NIL |function_inverse| NIL) (R FORMAL-TYPE-DECL NIL |function_inverse| NIL) (|surjective?| CONST-DECL "bool" |functions| NIL) (|inverse| CONST-DECL "D" |function_inverse| NIL)) NIL)) (|comp_inverse_left_inj| 0 (|comp_inverse_left_inj-1| |nil| 3237052399 ("" (GRIND :IF-MATCH NIL) (("" (USE "epsilon_ax[D]") (("" (SPLIT) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST 1 "x!1") NIL NIL)) NIL)) NIL)) NIL) ((= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|epsilon_ax| FORMULA-DECL NIL |epsilons| NIL) (|epsilon| CONST-DECL "T" |epsilons| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (D FORMAL-NONEMPTY-TYPE-DECL NIL |function_inverse| NIL) (R FORMAL-TYPE-DECL NIL |function_inverse| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (|inverse| CONST-DECL "D" |function_inverse| NIL)) NIL)) (|comp_inverse_right| 0 (|comp_inverse_right-1| |nil| 3237052399 ("" (SKOSIMP) (("" (LEMMA "comp_inverse_right_surj") (("" (INST?) (("" (TYPEPRED "f!1") (("" (EXPAND "bijective?") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|comp_inverse_right_surj| FORMULA-DECL NIL |function_inverse| NIL) (R FORMAL-TYPE-DECL NIL |function_inverse| NIL) (D FORMAL-NONEMPTY-TYPE-DECL NIL |function_inverse| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|surjective?| CONST-DECL "bool" |functions| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL)) NIL)) (|comp_inverse_left| 0 (|comp_inverse_left-1| |nil| 3237052399 ("" (SKOLEM-TYPEPRED) (("" (EXPAND "bijective?") (("" (LEMMA "comp_inverse_left_inj") (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|injective?| CONST-DECL "bool" |functions| NIL) (|comp_inverse_left_inj| FORMULA-DECL NIL |function_inverse| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (R FORMAL-TYPE-DECL NIL |function_inverse| NIL) (D FORMAL-NONEMPTY-TYPE-DECL NIL |function_inverse| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL)))(|function_inverse_alt| (|inverses_TCC1| 0 (|inverses_TCC1-1| |nil| 3252433331 ("" (SKOLEM!) (("" (LEMMA "inverse_types") (("" (SPLIT) (("1" (SKOLEM!) (("1" (INST + "LAMBDA r: (epsilon! d: f!1(d) = r)") (("1" (EXPAND "inverse?") (("1" (SKOSIMP*) (("1" (USE "epsilon_ax[D]") (("1" (ASSERT) (("1" (INST?) NIL NIL)) NIL) ("2" (INST?) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOLEM!) (("2" (INST + "d!1") NIL NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "LAMBDA (r: R): epsilon[D](LAMBDA (d: D): TRUE)") (("1" (GRIND) NIL NIL) ("2" (SKOLEM!) (("2" (INST -1 "r!1") NIL NIL)) NIL)) NIL) ("3" (INST + "LAMBDA r: (epsilon! d: f!1(d) = r)") (("1" (EXPAND "inverse?") (("1" (SKOSIMP*) (("1" (USE "epsilon_ax[D]") (("1" (ASSERT) (("1" (INST?) NIL NIL)) NIL) ("2" (INST?) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST + "g!1(r!1)") NIL NIL)) NIL)) NIL) ("4" (SKOLEM-TYPEPRED) (("4" (INST + "LAMBDA r: (epsilon! d: f!1(d) = r)") (("1" (EXPAND "inverse?") (("1" (SKOSIMP*) (("1" (USE "epsilon_ax[D]") (("1" (ASSERT) (("1" (INST?) NIL NIL)) NIL) ("2" (INST?) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "surjective?") (("2" (SKOLEM!) (("2" (INST - "r!1") (("2" (SKOLEM!) (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (EXPAND "injective?") (("5" (SKOSIMP*) (("5" (INST + "LAMBDA r: (epsilon! d: f!1(d) = r)") (("1" (EXPAND "inverse?") (("1" (SKOSIMP*) (("1" (USE "epsilon_ax[D]") (("1" (ASSERT) (("1" (INST?) NIL NIL)) NIL) ("2" (INST?) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOLEM!) (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|inverse_types| FORMULA-DECL NIL |function_inverse_alt| NIL) (|epsilon_ax| FORMULA-DECL NIL |epsilons| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|epsilon| CONST-DECL "T" |epsilons| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|inverse?| CONST-DECL "bool" |function_inverse_def| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (D FORMAL-TYPE-DECL NIL |function_inverse_alt| NIL) (R FORMAL-TYPE-DECL NIL |function_inverse_alt| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) NIL) SHOSTAK (|inverses| EXISTENCE "" "{g | function_inverse_def[function_inverse_alt.D, function_inverse_alt.R].inverse?(g, function_inverse_alt.f)}"))) (|inverse_alt_TCC1| 0 (|inverse_alt_TCC1-1| |nil| 3252433785 ("" (GRIND) NIL NIL) ((|member| CONST-DECL "bool" |sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL)) SHOSTAK (|inverse_alt| SUBTYPE "{g: function_inverse_alt.inverses(function_inverse_alt.f) | booleans.TRUE}" "(sets[inverses(function_inverse_alt.f)].nonempty?)"))) (|bijective_inverse_is_inverse_alt| 0 (|bijective_inverse_is_inverse_alt-1| |nil| 3252433810 ("" (SKOLEM!) (("" (TYPEPRED "inverse_alt(f!1)") (("" (EXPAND "inverse?") (("" (TYPEPRED "g!1") (("" (EXPAND "inverse?") (("" (APPLY-EXTENSIONALITY :HIDE? T) (("" (INST -1 "x!1") (("" (INST -2 "x!1") (("" (TYPEPRED "f!1") (("" (PROP) (("1" (EXPAND "bijective?") (("1" (FLATTEN) (("1" (EXPAND "injective?") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "g!1(x!1)") NIL NIL) ("3" (INST 1 "inverse_alt(f!1)(x!1)") NIL NIL) ("4" (EXPAND "bijective?") (("4" (FLATTEN) (("4" (EXPAND "surjective?") (("4" (INST -2 "x!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|bijective?| CONST-DECL "bool" |functions| NIL) (|inverse_alt| CONST-DECL "inverses(f)" |function_inverse_alt| NIL) (|inverses| NONEMPTY-TYPE-EQ-DECL NIL |function_inverse_alt| NIL) (|inverse?| CONST-DECL "bool" |function_inverse_def| NIL) (D FORMAL-TYPE-DECL NIL |function_inverse_alt| NIL) (R FORMAL-TYPE-DECL NIL |function_inverse_alt| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (|surjective?| CONST-DECL "bool" |functions| NIL)) SHOSTAK)) (|unique_bijective_inverse_alt| 0 (|unique_bijective_inverse_alt-1| |nil| 3252311738 ("" (SKOLEM-TYPEPRED) (("" (TYPEPRED "inverse_alt(f!1)") (("" (EXPAND* "inverse?" "bijective?" "surjective?") (("" (INST - "r!1") (("" (SMASH) (("" (INST - "r!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|inverse?| CONST-DECL "bool" |function_inverse_def| NIL) (|inverses| NONEMPTY-TYPE-EQ-DECL NIL |function_inverse_alt| NIL) (|inverse_alt| CONST-DECL "inverses(f)" |function_inverse_alt| NIL) (|surjective?| CONST-DECL "bool" |functions| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (R FORMAL-TYPE-DECL NIL |function_inverse_alt| NIL) (D FORMAL-TYPE-DECL NIL |function_inverse_alt| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) SHOSTAK (|unique_bijective_inverse_alt| SUBTYPE "function_inverse_alt.inverse_alt(function_inverse_alt.f)(function_inverse_alt.r)" "{d | function_inverse_alt.f(function_inverse_alt.d) = function_inverse_alt.r}"))) (|bijective_inverse_alt_is_bijective| 0 (|bijective_inverse_alt_is_bijective-1| |nil| 3252311739 ("" (SKOLEM-TYPEPRED) (("" (TYPEPRED "inverse_alt(f!1)") (("" (EXPAND* "inverse?" "bijective?" "surjective?" "injective?") (("" (PROP) (("1" (SKOSIMP) (("1" (INST-CP - "x2!1") (("1" (INST - "x1!1") (("1" (SMASH) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOLEM!) (("2" (INST + "f!1(y!1)") (("2" (INST - "f!1(y!1)") (("2" (PROP) (("1" (INST - "inverse_alt(f!1)(f!1(y!1))" "y!1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|inverse?| CONST-DECL "bool" |function_inverse_def| NIL) (|inverses| NONEMPTY-TYPE-EQ-DECL NIL |function_inverse_alt| NIL) (|inverse_alt| CONST-DECL "inverses(f)" |function_inverse_alt| NIL) (|unique_bijective_inverse_alt| APPLICATION-JUDGEMENT "{d | f(d) = r}" |function_inverse_alt| NIL) (|surjective?| CONST-DECL "bool" |functions| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (R FORMAL-TYPE-DECL NIL |function_inverse_alt| NIL) (D FORMAL-TYPE-DECL NIL |function_inverse_alt| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) SHOSTAK (|bijective_inverse_alt_is_bijective| SUBTYPE "function_inverse_alt.inverse_alt(function_inverse_alt.f)" "(functions[function_inverse_alt.R, function_inverse_alt.D].bijective?)"))) (|inv_inj_is_surj_alt| 0 (|inv_inj_is_surj_alt-2| "" 3458163851 ("" (GRIND :IF-MATCH NIL) (("" (INST 1 "f!1(y!1)") (("" (NAME-REPLACE "gg" "choose({g: inverses(f!1) | TRUE})") (("" (TYPEPRED "gg") (("" (EXPAND "inverse?") (("" (INST -1 "f!1(y!1)") (("" (PROP) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST 1 "y!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|member| CONST-DECL "bool" |sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|choose| CONST-DECL "(p)" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|inverses| NONEMPTY-TYPE-EQ-DECL NIL |function_inverse_alt| NIL) (|inverse?| CONST-DECL "bool" |function_inverse_def| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (D FORMAL-TYPE-DECL NIL |function_inverse_alt| NIL) (R FORMAL-TYPE-DECL NIL |function_inverse_alt| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (|surjective?| CONST-DECL "bool" |functions| NIL) (|inverse_alt| CONST-DECL "inverses(f)" |function_inverse_alt| NIL)) SHOSTAK (|inv_inj_is_surj_alt| SUBTYPE "function_inverse_alt.inverse_alt(function_inverse_alt.f)" "(functions[function_inverse_alt.R, function_inverse_alt.D].surjective?)")) (|inv_inj_is_surj_alt-1| |nil| 3252311739 ("" (GRIND :IF-MATCH NIL) (("" (INST 1 "f!1(y!1)") (("" (NAME-REPLACE "gg" "epsilon({g: inverses(f!1) | TRUE})") (("" (TYPEPRED "gg") (("" (EXPAND "inverse?") (("" (INST -1 "f!1(y!1)") (("" (PROP) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST 1 "y!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|inv_inj_is_surj_alt| SUBTYPE "function_inverse_alt.inverse_alt(function_inverse_alt.f)" "(functions[function_inverse_alt.R, function_inverse_alt.D].surjective?)"))) (|inv_surj_is_inj_alt| 0 (|inv_surj_is_inj_alt-2| "" 3458163883 ("" (GRIND :IF-MATCH NIL) (("" (NAME-REPLACE "gg" "choose({g: inverses(f!1) | TRUE})") (("" (TYPEPRED "gg") (("" (EXPAND "inverse?") (("" (ASSERT) (("" (INST-CP -2 "x1!1") (("" (INST -2 "x2!1") (("" (INST-CP -1 "x1!1") (("" (INST -1 "x2!1") (("" (ASSERT) (("" (REPLACE -3) (("" (REPLACE -4) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|inverse?| CONST-DECL "bool" |function_inverse_def| NIL) (|inverses| NONEMPTY-TYPE-EQ-DECL NIL |function_inverse_alt| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|choose| CONST-DECL "(p)" |sets| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (D FORMAL-TYPE-DECL NIL |function_inverse_alt| NIL) (R FORMAL-TYPE-DECL NIL |function_inverse_alt| NIL) (|surjective?| CONST-DECL "bool" |functions| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (|inverse_alt| CONST-DECL "inverses(f)" |function_inverse_alt| NIL)) SHOSTAK (|inv_surj_is_inj_alt| SUBTYPE "function_inverse_alt.inverse_alt(function_inverse_alt.f)" "(functions[function_inverse_alt.R, function_inverse_alt.D].injective?)")) (|inv_surj_is_inj_alt-1| |nil| 3252311739 ("" (GRIND :IF-MATCH NIL) (("" (NAME-REPLACE "gg" "epsilon({g: inverses(f!1) | TRUE})") (("" (TYPEPRED "gg") (("" (EXPAND "inverse?") (("" (ASSERT) (("" (INST-CP -2 "x1!1") (("" (INST -2 "x2!1") (("" (INST-CP -1 "x1!1") (("" (INST -1 "x2!1") (("" (ASSERT) (("" (REPLACE -3) (("" (REPLACE -4) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|inv_surj_is_inj_alt| SUBTYPE "function_inverse_alt.inverse_alt(function_inverse_alt.f)" "(functions[function_inverse_alt.R, function_inverse_alt.D].injective?)"))))(|function_image| (|fun_exists| 0 (|fun_exists-1| |nil| 3237052399 ("" (FLATTEN) (("" (SPLIT) (("1" (SKOSIMP) (("1" (INST 1 "LAMBDA (x:D): y!1") NIL NIL)) NIL) ("2" (INST 2 "LAMBDA (x:D): epsilon! (y:R): TRUE") (("2" (SKOLEM-TYPEPRED) (("2" (INST 2 "x!1") NIL NIL)) NIL)) NIL)) NIL)) NIL) ((D FORMAL-TYPE-DECL NIL |function_image| NIL) (R FORMAL-TYPE-DECL NIL |function_image| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|epsilon| CONST-DECL "T" |epsilons| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL)) (|image_inverse_image| 0 (|image_inverse_image-1| |nil| 3237052399 ("" (GRIND) NIL NIL) (NIL (|set| TYPE-EQ-DECL NIL |sets| NIL) (R FORMAL-TYPE-DECL NIL |function_image| NIL) (D FORMAL-TYPE-DECL NIL |function_image| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) NIL (|member| CONST-DECL "bool" |sets| NIL) (|subset?| CONST-DECL "bool" |sets| NIL)) NIL)) (|inverse_image_image| 0 (|inverse_image_image-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((D FORMAL-TYPE-DECL NIL |function_image| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) NIL NIL (|subset?| CONST-DECL "bool" |sets| NIL)) NIL)) (|image_subset| 0 (|image_subset-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (D FORMAL-TYPE-DECL NIL |function_image| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) NIL) NIL)) (|inverse_image_subset| 0 (|inverse_image_subset-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((D FORMAL-TYPE-DECL NIL |function_image| NIL) (R FORMAL-TYPE-DECL NIL |function_image| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) NIL) NIL)) (|image_union| 0 (|image_union-1| |nil| 3237052399 ("" (GRIND) (("" (APPLY-EXTENSIONALITY) (("" (IFF) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((R FORMAL-TYPE-DECL NIL |function_image| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|union| CONST-DECL "set" |sets| NIL) NIL (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (D FORMAL-TYPE-DECL NIL |function_image| NIL) (|member| CONST-DECL "bool" |sets| NIL) NIL NIL NIL (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)) NIL)) (|image_intersection| 0 (|image_intersection-1| |nil| 3237052399 ("" (GRIND) NIL NIL) (NIL NIL NIL (|set| TYPE-EQ-DECL NIL |sets| NIL) (D FORMAL-TYPE-DECL NIL |function_image| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) NIL (|member| CONST-DECL "bool" |sets| NIL) (|intersection| CONST-DECL "set" |sets| NIL) (|subset?| CONST-DECL "bool" |sets| NIL)) NIL)) (|inverse_image_union| 0 (|inverse_image_union-1| |nil| 3237052399 ("" (GRIND) (("" (APPLY-EXTENSIONALITY) NIL NIL)) NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (D FORMAL-TYPE-DECL NIL |function_image| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|union| CONST-DECL "set" |sets| NIL) NIL (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (R FORMAL-TYPE-DECL NIL |function_image| NIL)) NIL)) (|inverse_image_intersection| 0 (|inverse_image_intersection-1| |nil| 3237052399 ("" (GRIND) (("" (APPLY-EXTENSIONALITY) NIL NIL)) NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (D FORMAL-TYPE-DECL NIL |function_image| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|intersection| CONST-DECL "set" |sets| NIL) NIL (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (R FORMAL-TYPE-DECL NIL |function_image| NIL)) NIL)) (|inverse_image_complement| 0 (|inverse_image_complement-1| |nil| 3237052399 ("" (GRIND) (("" (APPLY-EXTENSIONALITY) NIL NIL)) NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (D FORMAL-TYPE-DECL NIL |function_image| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|complement| CONST-DECL "set" |sets| NIL) NIL (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (R FORMAL-TYPE-DECL NIL |function_image| NIL)) NIL)))(|function_props| (|composition_injective| 0 (|composition_injective-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T1 FORMAL-TYPE-DECL NIL |function_props| NIL) (T2 FORMAL-TYPE-DECL NIL |function_props| NIL) (T3 FORMAL-TYPE-DECL NIL |function_props| NIL) (O CONST-DECL "T3" |function_props| NIL) (|injective?| CONST-DECL "bool" |functions| NIL)) NIL (|composition_injective| SUBTYPE "function_props.o(function_props.f2, function_props.f1)" "(functions[function_props.T1, function_props.T3].injective?)"))) (|composition_surjective| 0 (|composition_surjective-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T1 FORMAL-TYPE-DECL NIL |function_props| NIL) (T2 FORMAL-TYPE-DECL NIL |function_props| NIL) (T3 FORMAL-TYPE-DECL NIL |function_props| NIL) (O CONST-DECL "T3" |function_props| NIL) (|surjective?| CONST-DECL "bool" |functions| NIL)) NIL (|composition_surjective| SUBTYPE "function_props.o(function_props.f2, function_props.f1)" "(functions[function_props.T1, function_props.T3].surjective?)"))) (|composition_bijective| 0 (|composition_bijective-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|bijective?| CONST-DECL "bool" |functions| NIL) (|composition_injective| APPLICATION-JUDGEMENT "(injective?[T1, T3])" |function_props| NIL) (|composition_surjective| APPLICATION-JUDGEMENT "(surjective?[T1, T3])" |function_props| NIL)) NIL (|composition_bijective| SUBTYPE "function_props.o(function_props.f2, function_props.f1)" "(functions[function_props.T1, function_props.T3].bijective?)"))) (|image_composition| 0 (|image_composition-1| |nil| 3237052399 ("" (GRIND) (("" (APPLY-EXTENSIONALITY) (("" (GRIND) NIL NIL)) NIL)) NIL) ((T3 FORMAL-TYPE-DECL NIL |function_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (O CONST-DECL "T3" |function_props| NIL) (T1 FORMAL-TYPE-DECL NIL |function_props| NIL) NIL (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (T2 FORMAL-TYPE-DECL NIL |function_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) NIL (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) NIL NIL) NIL)) (|preserves_composition| 0 (|preserves_composition-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((T1 FORMAL-TYPE-DECL NIL |function_props| NIL) (T2 FORMAL-TYPE-DECL NIL |function_props| NIL) NIL (O CONST-DECL "T3" |function_props| NIL)) NIL)) (|inverts_composition1| 0 (|inverts_composition1-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((T1 FORMAL-TYPE-DECL NIL |function_props| NIL) (T2 FORMAL-TYPE-DECL NIL |function_props| NIL) NIL NIL (O CONST-DECL "T3" |function_props| NIL)) NIL)) (|inverts_composition2| 0 (|inverts_composition2-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((T1 FORMAL-TYPE-DECL NIL |function_props| NIL) (T2 FORMAL-TYPE-DECL NIL |function_props| NIL) NIL NIL (O CONST-DECL "T3" |function_props| NIL)) NIL)))(|function_props_alt| (|composition_preserves| 0 (|composition_preserves-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T1 FORMAL-TYPE-DECL NIL |function_props_alt| NIL) (T2 FORMAL-TYPE-DECL NIL |function_props_alt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (R1 FORMAL-CONST-DECL "PRED[[T1, T1]]" |function_props_alt| NIL) (R2 FORMAL-CONST-DECL "PRED[[T2, T2]]" |function_props_alt| NIL) (T3 FORMAL-TYPE-DECL NIL |function_props_alt| NIL) (R3 FORMAL-CONST-DECL "PRED[[T3, T3]]" |function_props_alt| NIL) (|preserves| CONST-DECL "[[D -> R] -> bool]" |functions_alt| NIL) (O CONST-DECL "T3" |function_props| NIL) NIL NIL) NIL (|composition_preserves| SUBTYPE "function_props[function_props_alt.T1, function_props_alt.T2, function_props_alt.T3].o(function_props_alt.f2, function_props_alt.f1)" "(functions_alt[function_props_alt.T1, function_props_alt.T3, function_props_alt.R1, function_props_alt.R3].preserves)"))) (|composition_inverts1| 0 (|composition_inverts1-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T1 FORMAL-TYPE-DECL NIL |function_props_alt| NIL) (T2 FORMAL-TYPE-DECL NIL |function_props_alt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (R1 FORMAL-CONST-DECL "PRED[[T1, T1]]" |function_props_alt| NIL) (R2 FORMAL-CONST-DECL "PRED[[T2, T2]]" |function_props_alt| NIL) (T3 FORMAL-TYPE-DECL NIL |function_props_alt| NIL) (R3 FORMAL-CONST-DECL "PRED[[T3, T3]]" |function_props_alt| NIL) (|preserves| CONST-DECL "[[D -> R] -> bool]" |functions_alt| NIL) NIL NIL (|inverts| CONST-DECL "[[D -> R] -> bool]" |functions_alt| NIL) (O CONST-DECL "T3" |function_props| NIL) NIL NIL) NIL (|composition_inverts1| SUBTYPE "function_props[function_props_alt.T1, function_props_alt.T2, function_props_alt.T3].o(function_props_alt.f2, function_props_alt.f1)" "(functions_alt[function_props_alt.T1, function_props_alt.T3, function_props_alt.R1, function_props_alt.R3].inverts)"))) (|composition_inverts2| 0 (|composition_inverts2-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T1 FORMAL-TYPE-DECL NIL |function_props_alt| NIL) (T2 FORMAL-TYPE-DECL NIL |function_props_alt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (R1 FORMAL-CONST-DECL "PRED[[T1, T1]]" |function_props_alt| NIL) (R2 FORMAL-CONST-DECL "PRED[[T2, T2]]" |function_props_alt| NIL) (|preserves| CONST-DECL "[[D -> R] -> bool]" |functions_alt| NIL) (T3 FORMAL-TYPE-DECL NIL |function_props_alt| NIL) (R3 FORMAL-CONST-DECL "PRED[[T3, T3]]" |function_props_alt| NIL) NIL NIL (|inverts| CONST-DECL "[[D -> R] -> bool]" |functions_alt| NIL) (O CONST-DECL "T3" |function_props| NIL) NIL NIL) NIL (|composition_inverts2| SUBTYPE "function_props[function_props_alt.T1, function_props_alt.T2, function_props_alt.T3].o(function_props_alt.f2, function_props_alt.f1)" "(functions_alt[function_props_alt.T1, function_props_alt.T3, function_props_alt.R1, function_props_alt.R3].inverts)"))))(|function_props2| (|assoc| 0 (|assoc-1| |nil| 3237052399 ("" (SKOLEM 1 ("f!1" "g!1" "h!1")) (("" (EXPAND "o") (("" (PROPAX) NIL NIL)) NIL)) NIL) ((O CONST-DECL "T3" |function_props| NIL)) NIL)))(|relation_defs|)(|relation_props| (|total_composition| 0 (|total_composition-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((T2 FORMAL-TYPE-DECL NIL |relation_props| NIL) (T3 FORMAL-TYPE-DECL NIL |relation_props| NIL) (T1 FORMAL-TYPE-DECL NIL |relation_props| NIL) (|total?| CONST-DECL "bool" |relation_defs| NIL) (O CONST-DECL "bool" |relation_props| NIL)) NIL)) (|onto_composition| 0 (|onto_composition-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((T2 FORMAL-TYPE-DECL NIL |relation_props| NIL) (T1 FORMAL-TYPE-DECL NIL |relation_props| NIL) (T3 FORMAL-TYPE-DECL NIL |relation_props| NIL) (|onto?| CONST-DECL "bool" |relation_defs| NIL) (O CONST-DECL "bool" |relation_props| NIL)) NIL)) (|composition_total| 0 (|composition_total-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T1 FORMAL-TYPE-DECL NIL |relation_props| NIL) (T2 FORMAL-TYPE-DECL NIL |relation_props| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (T3 FORMAL-TYPE-DECL NIL |relation_props| NIL) (O CONST-DECL "bool" |relation_props| NIL) (|total?| CONST-DECL "bool" |relation_defs| NIL)) NIL (|composition_total| SUBTYPE "relation_props.o(relation_props.R1, relation_props.R2)" "(relation_defs[relation_props.T1, relation_props.T3].total?)"))) (|composition_onto| 0 (|composition_onto-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T1 FORMAL-TYPE-DECL NIL |relation_props| NIL) (T2 FORMAL-TYPE-DECL NIL |relation_props| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (T3 FORMAL-TYPE-DECL NIL |relation_props| NIL) (O CONST-DECL "bool" |relation_props| NIL) (|onto?| CONST-DECL "bool" |relation_defs| NIL)) NIL (|composition_onto| SUBTYPE "relation_props.o(relation_props.R1, relation_props.R2)" "(relation_defs[relation_props.T1, relation_props.T3].onto?)"))))(|relation_props2| (|assoc| 0 (|assoc-1| |nil| 3237052399 ("" (SKOSIMP) (("" (APPLY-EXTENSIONALITY) (("" (HIDE 2) (("" (EXPAND "o") (("" (IFF) (("" (PROP) (("1" (SKOSIMP) (("1" (SKOSIMP) (("1" (INST?) (("1" (ASSERT) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST?) (("2" (ASSERT) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((T1 FORMAL-TYPE-DECL NIL |relation_props2| NIL) (T4 FORMAL-TYPE-DECL NIL |relation_props2| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T2 FORMAL-TYPE-DECL NIL |relation_props2| NIL) (O CONST-DECL "bool" |relation_props| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (T3 FORMAL-TYPE-DECL NIL |relation_props2| NIL)) NIL)))(|relation_converse_props| (|reflexive_converse| 0 (|reflexive_converse-1| |nil| 3249387244 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |relation_converse_props| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|converse| CONST-DECL "pred[[T2, T1]]" |relation_defs| NIL) (|reflexive?| CONST-DECL "bool" |relations| NIL)) SHOSTAK (|reflexive_converse| SUBTYPE "relation_defs[relation_converse_props.T, relation_converse_props.T].converse(relation_converse_props.R)" "(relations[relation_converse_props.T].reflexive?)"))) (|irreflexive_converse| 0 (|irreflexive_converse-1| |nil| 3249387255 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |relation_converse_props| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|converse| CONST-DECL "pred[[T2, T1]]" |relation_defs| NIL) (|irreflexive?| CONST-DECL "bool" |relations| NIL)) SHOSTAK (|irreflexive_converse| SUBTYPE "relation_defs[relation_converse_props.T, relation_converse_props.T].converse(relation_converse_props.R)" "(relations[relation_converse_props.T].irreflexive?)"))) (|symmetric_converse| 0 (|symmetric_converse-1| |nil| 3249387255 ("" (SKOLEM-TYPEPRED) (("" (EXPAND* "converse" "symmetric?") (("" (SKOSIMP) (("" (INST - "y!1" "x!1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|converse| CONST-DECL "pred[[T2, T1]]" |relation_defs| NIL) (|symmetric?| CONST-DECL "bool" |relations| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (T FORMAL-TYPE-DECL NIL |relation_converse_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) SHOSTAK (|symmetric_converse| SUBTYPE "relation_defs[relation_converse_props.T, relation_converse_props.T].converse(relation_converse_props.R)" "(relations[relation_converse_props.T].symmetric?)"))) (|antisymmetric_converse| 0 (|antisymmetric_converse-1| |nil| 3249387255 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |relation_converse_props| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|converse| CONST-DECL "pred[[T2, T1]]" |relation_defs| NIL) (|antisymmetric?| CONST-DECL "bool" |relations| NIL)) SHOSTAK (|antisymmetric_converse| SUBTYPE "relation_defs[relation_converse_props.T, relation_converse_props.T].converse(relation_converse_props.R)" "(relations[relation_converse_props.T].antisymmetric?)"))) (|connected_converse| 0 (|connected_converse-1| |nil| 3249387255 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |relation_converse_props| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|converse| CONST-DECL "pred[[T2, T1]]" |relation_defs| NIL) (|connected?| CONST-DECL "bool" |relations| NIL)) SHOSTAK (|connected_converse| SUBTYPE "relation_defs[relation_converse_props.T, relation_converse_props.T].converse(relation_converse_props.R)" "(relations[relation_converse_props.T].connected?)"))) (|transitive_converse| 0 (|transitive_converse-1| |nil| 3249387255 ("" (SKOLEM-TYPEPRED) (("" (EXPAND* "converse" "transitive?") (("" (SKOSIMP) (("" (INST - "z!1" "y!1" "x!1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|converse| CONST-DECL "pred[[T2, T1]]" |relation_defs| NIL) (|transitive?| CONST-DECL "bool" |relations| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (T FORMAL-TYPE-DECL NIL |relation_converse_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) SHOSTAK (|transitive_converse| SUBTYPE "relation_defs[relation_converse_props.T, relation_converse_props.T].converse(relation_converse_props.R)" "(relations[relation_converse_props.T].transitive?)"))) (|equivalence_converse| 0 (|equivalence_converse-1| |nil| 3249387255 ("" (SUBTYPE-TCC) NIL NIL) ((|equivalence?| CONST-DECL "bool" |relations| NIL) (|reflexive_converse| APPLICATION-JUDGEMENT "(reflexive?[T])" |relation_converse_props| NIL) (|transitive_converse| APPLICATION-JUDGEMENT "(transitive?[T])" |relation_converse_props| NIL) (|symmetric_converse| APPLICATION-JUDGEMENT "(symmetric?[T])" |relation_converse_props| NIL)) SHOSTAK (|equivalence_converse| SUBTYPE "relation_defs[relation_converse_props.T, relation_converse_props.T].converse(relation_converse_props.R)" "(relations[relation_converse_props.T].equivalence?)"))) (|preorder_converse| 0 (|preorder_converse-1| |nil| 3249387255 ("" (SUBTYPE-TCC) NIL NIL) ((|preorder?| CONST-DECL "bool" |orders| NIL) (|reflexive_converse| APPLICATION-JUDGEMENT "(reflexive?[T])" |relation_converse_props| NIL) (|transitive_converse| APPLICATION-JUDGEMENT "(transitive?[T])" |relation_converse_props| NIL)) SHOSTAK (|preorder_converse| SUBTYPE "relation_defs[relation_converse_props.T, relation_converse_props.T].converse(relation_converse_props.R)" "(orders[relation_converse_props.T].preorder?)"))) (|partial_order_converse| 0 (|partial_order_converse-1| |nil| 3249387255 ("" (SUBTYPE-TCC) NIL NIL) ((|partial_order?| CONST-DECL "bool" |orders| NIL) (|antisymmetric_converse| APPLICATION-JUDGEMENT "(antisymmetric?[T])" |relation_converse_props| NIL) (|preorder_converse| APPLICATION-JUDGEMENT "(preorder?[T])" |relation_converse_props| NIL)) SHOSTAK (|partial_order_converse| SUBTYPE "relation_defs[relation_converse_props.T, relation_converse_props.T].converse(relation_converse_props.R)" "(orders[relation_converse_props.T].partial_order?)"))) (|strict_order_converse| 0 (|strict_order_converse-1| |nil| 3249387255 ("" (SUBTYPE-TCC) NIL NIL) ((|strict_order?| CONST-DECL "bool" |orders| NIL) (|irreflexive_converse| APPLICATION-JUDGEMENT "(irreflexive?[T])" |relation_converse_props| NIL) (|transitive_converse| APPLICATION-JUDGEMENT "(transitive?[T])" |relation_converse_props| NIL) (|antisymmetric_converse| APPLICATION-JUDGEMENT "(antisymmetric?[T])" |relation_converse_props| NIL)) SHOSTAK (|strict_order_converse| SUBTYPE "relation_defs[relation_converse_props.T, relation_converse_props.T].converse(relation_converse_props.R)" "(orders[relation_converse_props.T].strict_order?)"))) (|dichotomous_converse| 0 (|dichotomous_converse-1| |nil| 3249387255 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |relation_converse_props| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|converse| CONST-DECL "pred[[T2, T1]]" |relation_defs| NIL) (|dichotomous?| CONST-DECL "bool" |orders| NIL)) SHOSTAK (|dichotomous_converse| SUBTYPE "relation_defs[relation_converse_props.T, relation_converse_props.T].converse(relation_converse_props.R)" "(orders[relation_converse_props.T].dichotomous?)"))) (|total_order_converse| 0 (|total_order_converse-1| |nil| 3249387255 ("" (SUBTYPE-TCC) NIL NIL) ((|total_order?| CONST-DECL "bool" |orders| NIL) (|partial_order_converse| APPLICATION-JUDGEMENT "(partial_order?[T])" |relation_converse_props| NIL) (|dichotomous_converse| APPLICATION-JUDGEMENT "(dichotomous?[T])" |relation_converse_props| NIL)) SHOSTAK (|total_order_converse| SUBTYPE "relation_defs[relation_converse_props.T, relation_converse_props.T].converse(relation_converse_props.R)" "(orders[relation_converse_props.T].total_order?)"))) (|trichotomous_converse| 0 (|trichotomous_converse-1| |nil| 3249387256 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |relation_converse_props| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|converse| CONST-DECL "pred[[T2, T1]]" |relation_defs| NIL) (|trichotomous?| CONST-DECL "bool" |orders| NIL)) SHOSTAK (|trichotomous_converse| SUBTYPE "relation_defs[relation_converse_props.T, relation_converse_props.T].converse(relation_converse_props.R)" "(orders[relation_converse_props.T].trichotomous?)"))) (|strict_total_order_converse| 0 (|strict_total_order_converse-1| |nil| 3249387256 ("" (SUBTYPE-TCC) NIL NIL) ((|strict_total_order?| CONST-DECL "bool" |orders| NIL) (|strict_order_converse| APPLICATION-JUDGEMENT "(strict_order?[T])" |relation_converse_props| NIL) (|trichotomous_converse| APPLICATION-JUDGEMENT "(trichotomous?[T])" |relation_converse_props| NIL)) SHOSTAK (|strict_total_order_converse| SUBTYPE "relation_defs[relation_converse_props.T, relation_converse_props.T].converse(relation_converse_props.R)" "(orders[relation_converse_props.T].strict_total_order?)"))))(|indexed_sets| (|IUnion_Union| 0 (|IUnion_Union-1| |nil| 3237054186 ("" (GRIND) (("" (APPLY-EXTENSIONALITY :HIDE? T) (("" (IFF) (("" (PROP) (("1" (SKOLEM-TYPEPRED) (("1" (INST 1 "A!1(i!1)") (("1" (INST 1 "i!1") NIL NIL)) NIL)) NIL) ("2" (SKOLEM-TYPEPRED) (("2" (GRIND :IF-MATCH NIL) (("2" (INST 1 "x!2") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|index| FORMAL-TYPE-DECL NIL |indexed_sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|IUnion| CONST-DECL "set[T]" |indexed_sets| NIL) (|setof| TYPE-EQ-DECL NIL |defined_types| NIL) (|setofsets| TYPE-EQ-DECL NIL |sets| NIL) (|Union| CONST-DECL "set" |sets| NIL) NIL (|fullset| CONST-DECL "set" |sets| NIL) (T FORMAL-TYPE-DECL NIL |indexed_sets| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) NIL NIL (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|Union_surjective| NAME-JUDGEMENT "(surjective?[setofsets[T], set[T]])" |sets_lemmas| NIL) NIL) SHOSTAK)) (|IIntersection_Intersection| 0 (|IIntersection_Intersection-1| |nil| 3237054338 ("" (GRIND :IF-MATCH NIL) (("" (APPLY-EXTENSIONALITY :HIDE? T) (("" (IFF) (("" (PROP) (("1" (SKOLEM-TYPEPRED) (("1" (GRIND :IF-MATCH NIL) (("1" (INST - "x!2") NIL NIL)) NIL)) NIL) ("2" (SKOLEM-TYPEPRED) (("2" (INST -1 "A!1(i!1)") (("2" (INST 1 "i!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|index| FORMAL-TYPE-DECL NIL |indexed_sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|IIntersection| CONST-DECL "set[T]" |indexed_sets| NIL) (|setof| TYPE-EQ-DECL NIL |defined_types| NIL) (|setofsets| TYPE-EQ-DECL NIL |sets| NIL) (|Intersection| CONST-DECL "set" |sets| NIL) NIL (|fullset| CONST-DECL "set" |sets| NIL) (T FORMAL-TYPE-DECL NIL |indexed_sets| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) NIL NIL (|Intersection_surjective| NAME-JUDGEMENT "(surjective?[setofsets[T], set[T]])" |sets_lemmas| NIL) NIL) SHOSTAK)) (|IUnion_union| 0 (|IUnion_union-1| |nil| 3237054431 ("" (SKOLEM-TYPEPRED) (("" (APPLY-EXTENSIONALITY :HIDE? T) (("" (IFF) (("" (GRIND :IF-MATCH NIL) (("1" (INST 1 "i!1") NIL NIL) ("2" (INST 2 "i!1") NIL NIL) ("3" (INST 1 "i!1") (("3" (ASSERT) NIL NIL)) NIL) ("4" (INST 1 "i!1") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((T FORMAL-TYPE-DECL NIL |indexed_sets| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|union| CONST-DECL "set" |sets| NIL) (|IUnion| CONST-DECL "set[T]" |indexed_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|index| FORMAL-TYPE-DECL NIL |indexed_sets| NIL) (|member| CONST-DECL "bool" |sets| NIL)) SHOSTAK)) (|IIntersection_intersection| 0 (|IIntersection_intersection-1| |nil| 3237054514 ("" (GRIND :IF-MATCH NIL) (("" (APPLY-EXTENSIONALITY :HIDE? T) (("" (GRIND :IF-MATCH NIL) (("1" (INST -1 "i!1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST -1 "i!1") (("2" (ASSERT) NIL NIL)) NIL) ("3" (INST -2 "i!1") NIL NIL) ("4" (INST -1 "i!1") NIL NIL)) NIL)) NIL)) NIL) ((T FORMAL-TYPE-DECL NIL |indexed_sets| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|intersection| CONST-DECL "set" |sets| NIL) (|IIntersection| CONST-DECL "set[T]" |indexed_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|index| FORMAL-TYPE-DECL NIL |indexed_sets| NIL) (|member| CONST-DECL "bool" |sets| NIL)) SHOSTAK)) (|IUnion_intersection| 0 (|IUnion_intersection-1| |nil| 3237054595 ("" (GRIND :IF-MATCH NIL) (("" (APPLY-EXTENSIONALITY :HIDE? T) (("" (GRIND :IF-MATCH NIL) (("" (INST 1 "i!1") NIL NIL)) NIL)) NIL)) NIL) ((T FORMAL-TYPE-DECL NIL |indexed_sets| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|intersection| CONST-DECL "set" |sets| NIL) (|IUnion| CONST-DECL "set[T]" |indexed_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|index| FORMAL-TYPE-DECL NIL |indexed_sets| NIL) (|member| CONST-DECL "bool" |sets| NIL)) SHOSTAK)) (|IIntersection_union| 0 (|IIntersection_union-1| |nil| 3237054623 ("" (GRIND :IF-MATCH NIL) (("" (APPLY-EXTENSIONALITY :HIDE? T) (("" (GRIND :IF-MATCH NIL) (("" (INST?) NIL NIL)) NIL)) NIL)) NIL) ((T FORMAL-TYPE-DECL NIL |indexed_sets| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|union| CONST-DECL "set" |sets| NIL) (|IIntersection| CONST-DECL "set[T]" |indexed_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|index| FORMAL-TYPE-DECL NIL |indexed_sets| NIL) (|member| CONST-DECL "bool" |sets| NIL)) SHOSTAK)))(|operator_defs|)(|numbers|)(|number_fields| (|commutative_add| 0 (|commutative_add-1| |nil| 3242535784 ("" (SKOSIMP) (("" (ASSERT) NIL NIL)) NIL) NIL SHOSTAK)) (|associative_add| 0 (|associative_add-1| |nil| 3242535799 ("" (SKOSIMP) (("" (ASSERT) NIL NIL)) NIL) NIL SHOSTAK)) (|identity_add| 0 (|identity_add-1| |nil| 3242535806 ("" (SKOSIMP) (("" (ASSERT) NIL NIL)) NIL) NIL SHOSTAK)) (|inverse_add| 0 (|inverse_add-1| |nil| 3242535812 ("" (SKOSIMP) (("" (ASSERT) (("" (ASSERT) (("" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|minus_add| 0 (|minus_add-1| |nil| 3242537058 ("" (SKOSIMP) (("" (ASSERT) (("" (POSTPONE) NIL NIL)) NIL)) NIL) NIL SHOSTAK)) (|commutative_mult| 0 (|commutative_mult-1| |nil| 3242536887 ("" (SKOSIMP) (("" (ASSERT) (("" (POSTPONE) NIL NIL)) NIL)) NIL) NIL SHOSTAK)) (|associative_mult| 0 (|associative_mult-1| |nil| 3242536707 ("" (SKOSIMP) (("" (ASSERT) (("" (POSTPONE) NIL NIL)) NIL)) NIL) NIL SHOSTAK)) (|identity_mult| 0 (|identity_mult-1| |nil| 3242537143 ("" (SKOSIMP) (("" (ASSERT) (("" (POSTPONE) NIL NIL)) NIL)) NIL) NIL SHOSTAK)) (|inverse_mult| 0 (|inverse_mult-1| |nil| 3242537160 ("" (SKOSIMP) (("" (ASSERT) (("" (POSTPONE) NIL NIL)) NIL)) NIL) NIL SHOSTAK)) (|div_def| 0 (|div_def-1| |nil| 3242537180 ("" (SKOSIMP) (("" (ASSERT) (("" (POSTPONE) NIL NIL)) NIL)) NIL) NIL SHOSTAK)) (|distributive| 0 (|distributive-1| |nil| 3242537198 ("" (SKOSIMP) (("" (ASSERT) NIL NIL)) NIL) NIL SHOSTAK)))(|reals| (|real_plus_real_is_real| 0 (|real_plus_real_is_real-1| |nil| 3242538128 ("" (LEMMA "closed_plus") (("" (PROPAX) NIL NIL)) NIL) ((|closed_plus| FORMULA-DECL NIL |reals| NIL)) SHOSTAK (|real_plus_real_is_real| SUBTYPE "(number_fields.+)(reals.x, reals.y)" "real"))) (|real_minus_real_is_real| 0 (|real_minus_real_is_real-1| |nil| 3242538153 ("" (LEMMA "closed_minus") (("" (PROPAX) NIL NIL)) NIL) ((|closed_minus| FORMULA-DECL NIL |reals| NIL)) SHOSTAK (|real_minus_real_is_real| SUBTYPE "(number_fields.-)(reals.x, reals.y)" "real"))) (|real_times_real_is_real| 0 (|real_times_real_is_real-1| |nil| 3242538163 ("" (LEMMA "closed_times") (("" (PROPAX) NIL NIL)) NIL) ((|closed_times| FORMULA-DECL NIL |reals| NIL)) SHOSTAK (|real_times_real_is_real| SUBTYPE "number_fields.*(reals.x, reals.y)" "real"))) (|real_div_nzreal_is_real| 0 (|real_div_nzreal_is_real-1| |nil| 3242538175 ("" (LEMMA "closed_divides") (("" (PROPAX) NIL NIL)) NIL) ((|closed_divides| FORMULA-DECL NIL |reals| NIL)) SHOSTAK (|real_div_nzreal_is_real| SUBTYPE "number_fields./(reals.x, reals.n0z)" "real"))) (|minus_real_is_real| 0 (|minus_real_is_real-1| |nil| 3242538196 ("" (LEMMA "closed_neg") (("" (PROPAX) NIL NIL)) NIL) ((|closed_neg| FORMULA-DECL NIL |reals| NIL)) SHOSTAK (|minus_real_is_real| SUBTYPE "(number_fields.-)(reals.x)" "real"))) (|reals_totally_ordered| 0 (|reals_totally_ordered-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|irreflexive?| CONST-DECL "bool" |relations| NIL) (|transitive?| CONST-DECL "bool" |relations| NIL) (|strict_order?| CONST-DECL "bool" |orders| NIL) (|trichotomous?| CONST-DECL "bool" |orders| NIL) (|strict_total_order?| CONST-DECL "bool" |orders| NIL)) NIL)))(|real_axioms| (|posreal_add_closed| 0 (|posreal_add_closed-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL)) (|posreal_neg| 0 (|posreal_neg-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL)) (|trichotomy| 0 (|trichotomy-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)) NIL)))(|bounded_real_defs| (|real_lower_complete| 0 (|real_lower_complete-1| |nil| 3237052399 ("" (LEMMA "real_complete") (("" (SKOSIMP) (("" (INST -1 "{x: real | S!1(-x)}") (("1" (SKOSIMP) (("1" (SPLIT) (("1" (SKOSIMP) (("1" (EXPAND "least_upper_bound?") (("1" (INST 1 "-y!2") (("1" (EXPAND "greatest_lower_bound?") (("1" (HIDE -2) (("1" (PROP) (("1" (EXPAND "upper_bound?") (("1" (EXPAND "lower_bound?") (("1" (SKOSIMP) (("1" (INST -1 "-s!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (INST -3 "-y!3") (("2" (HIDE -2) (("2" (EXPAND "lower_bound?") (("2" (EXPAND "upper_bound?") (("2" (SPLIT) (("1" (ASSERT) NIL NIL) ("2" (SKOSIMP) (("2" (INST -1 "-s!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INST 1 "-y!1") (("2" (EXPAND "upper_bound?") (("2" (SKOSIMP) (("2" (EXPAND "lower_bound?") (("2" (INST -1 "-s!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "S!1") (("2" (HIDE -2 2) (("2" (EXPAND "nonempty?") (("2" (EXPAND "empty?") (("2" (SKOSIMP) (("2" (EXPAND "member") (("2" (INST -2 "-x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) NIL NIL NIL NIL (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) NIL (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|real_complete| FORMULA-DECL NIL |bounded_real_defs| NIL)) NIL)) (|lub_exists| 0 (|lub_exists-1| |nil| 3237052399 ("" (SKOLEM-TYPEPRED) (("" (USE "real_complete") (("" (ASSERT) (("" (REPLACE 1) (("" (ASSERT) (("" (EXPAND "bounded_above?") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_complete| FORMULA-DECL NIL |bounded_real_defs| NIL) (|bounded_above?| CONST-DECL "bool" |bounded_real_defs| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL)) (|lub_TCC1| 0 (|lub_TCC1-1| |nil| 3237052399 ("" (USE "real_complete") (("" (INST 1 "LAMBDA (S:(bounded_above?)): epsilon! (x:real): least_upper_bound?(x, S)") (("" (SKOSIMP) (("" (USE "epsilon_ax[real]") (("" (ASSERT) (("" (INST? -1) (("" (TYPEPRED "S!1") (("" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (EXPAND "bounded_above?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|bounded_above?| CONST-DECL "bool" |bounded_real_defs| NIL) NIL (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|epsilon| CONST-DECL "T" |epsilons| NIL) (|epsilon_ax| FORMULA-DECL NIL |epsilons| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_complete| FORMULA-DECL NIL |bounded_real_defs| NIL)) NIL (|lub| EXISTENCE "" "[SA: (bounded_above?) -> {x | bounded_real_defs.least_upper_bound?(bounded_real_defs.x, SA)}]"))) (|lub_lem| 0 (|lub_lem-1| |nil| 3237052399 ("" (SKOSIMP) (("" (TYPEPRED "lub(SA!1)") (("" (ASSERT) (("" (PROP) (("1" (ASSERT) NIL NIL) ("2" (GRIND :IF-MATCH NIL) (("2" (INST -2 "lub(SA!1)") (("2" (INST -4 "x!1") (("2" (REPLACE -1) (("2" (REPLACE -3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|lub| CONST-DECL "{x | least_upper_bound?(x, SA)}" |bounded_real_defs| NIL) (|bounded_above?| CONST-DECL "bool" |bounded_real_defs| NIL) NIL (|nonempty?| CONST-DECL "bool" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) NIL) NIL)) (|glb_exists| 0 (|glb_exists-1| |nil| 3237052399 ("" (SKOSIMP) (("" (USE "real_lower_complete") (("" (ASSERT) (("" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (TYPEPRED "SB!1") (("2" (EXPAND "bounded_below?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_lower_complete| FORMULA-DECL NIL |bounded_real_defs| NIL) (|bounded_below?| CONST-DECL "bool" |bounded_real_defs| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)) NIL)) (|glb_TCC1| 0 (|glb_TCC1-3| "" 3658944916 ("" (INST 1 "LAMBDA (S:(bounded_below?)): epsilon! (x:real): greatest_lower_bound?(x, S)") (("" (SKOLEM-TYPEPRED) (("" (USE "epsilon_ax[real]") (("" (ASSERT) (("" (EXPAND "bounded_below?") (("" (USE "real_lower_complete") (("" (ASSERT) (("" (REPLACE 1) (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_lower_complete| FORMULA-DECL NIL |bounded_real_defs| NIL) (|epsilon_ax| FORMULA-DECL NIL |epsilons| NIL) (|epsilon| CONST-DECL "T" |epsilons| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) NIL (|bounded_below?| CONST-DECL "bool" |bounded_real_defs| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK (|glb| EXISTENCE "" "[SB: (bounded_below?) -> {x | bounded_real_defs.greatest_lower_bound?(bounded_real_defs.x, SB)}]")) (|glb_TCC1-2| "" 3590856346 ("" (INST 1 "LAMBDA (S:(bounded_below?)): epsilon! (x:real): greatest_lower_bound?(x, S)") (("" (SKOLEM-TYPEPRED) (("" (USE "epsilon_ax[real]") (("" (ASSERT) (("" (EXPAND "bounded_below?") (("" (USE "real_lower_complete") (("" (ASSERT) (("" (REPLACE -2) (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|glb| EXISTENCE "" "[SB: (bounded_below?) -> {x | bounded_real_defs.greatest_lower_bound?(bounded_real_defs.x, SB)}]")) (|glb_TCC1-1| |nil| 3237052399 ("" (INST 1 "LAMBDA (S:(bounded_below?)): epsilon! (x:real): greatest_lower_bound?(x, S)") (("" (SKOLEM-TYPEPRED) (("" (USE "epsilon_ax[real]") (("" (ASSERT) (("" (EXPAND "bounded_below?") (("" (USE "real_lower_complete") (("" (ASSERT) (("" (REPLACE -3) (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|glb| EXISTENCE "" "[SB: (bounded_below?) -> {x | bounded_real_defs.greatest_lower_bound?(bounded_real_defs.x, SB)}]"))) (|glb_lem| 0 (|glb_lem-1| |nil| 3237052399 ("" (SKOSIMP) (("" (TYPEPRED "glb(SB!1)") (("" (PROP) (("1" (ASSERT) NIL NIL) ("2" (GRIND :IF-MATCH NIL) (("2" (INST -2 "glb(SB!1)") (("2" (INST -4 "x!1") (("2" (PROP) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|glb| CONST-DECL "{x | greatest_lower_bound?(x, SB)}" |bounded_real_defs| NIL) (|bounded_below?| CONST-DECL "bool" |bounded_real_defs| NIL) NIL (|nonempty?| CONST-DECL "bool" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) NIL) NIL)))(|bounded_real_defs_alt| (|lub_is_upper_bound| 0 (|lub_is_upper_bound-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|least_upper_bound?| CONST-DECL "[real -> bool]" |bounded_real_defs_alt| NIL) (S FORMAL-CONST-DECL "(nonempty?[real])" |bounded_real_defs_alt| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) NIL NIL (|upper_bound?| CONST-DECL "[real -> bool]" |bounded_real_defs_alt| NIL) NIL NIL) NIL (|lub_is_upper_bound| SUBTYPE "bounded_real_defs_alt.x" "(bounded_real_defs_alt.upper_bound?)"))) (|glb_is_lower_bound| 0 (|glb_is_lower_bound-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|greatest_lower_bound?| CONST-DECL "[real -> bool]" |bounded_real_defs_alt| NIL) (S FORMAL-CONST-DECL "(nonempty?[real])" |bounded_real_defs_alt| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) NIL NIL (|lower_bound?| CONST-DECL "[real -> bool]" |bounded_real_defs_alt| NIL) NIL NIL) NIL (|glb_is_lower_bound| SUBTYPE "bounded_real_defs_alt.x" "(bounded_real_defs_alt.lower_bound?)"))))(|real_types| (|posreal_is_nzreal| 0 (|posreal_is_nzreal-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|posreal_is_nzreal| SUBTYPE "real_types.x" "nzreal"))) (|negreal_is_nzreal| 0 (|negreal_is_nzreal-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|negreal_is_nzreal| SUBTYPE "real_types.x" "nzreal"))) (|nonneg_real_add_closed| 0 (|nonneg_real_add_closed-1| |nil| 3237052399 ("" (GRIND) NIL NIL) NIL NIL)) (|nonpos_real_add_closed| 0 (|nonpos_real_add_closed-1| |nil| 3237052399 ("" (GRIND) NIL NIL) NIL NIL)) (|negreal_add_closed| 0 (|negreal_add_closed-1| |nil| 3237052399 ("" (GRIND) NIL NIL) NIL NIL)) (|nonneg_real_mult_closed| 0 (|nonneg_real_mult_closed-1| |nil| 3237052399 ("" (GRIND) (("" (CASE "nnx!1 = 0") (("1" (ASSERT) NIL NIL) ("2" (CASE "nny!1 = 0") (("1" (ASSERT) NIL NIL) ("2" (LEMMA "posreal_mult_closed") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|posreal_mult_closed| FORMULA-DECL NIL |real_axioms| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)) NIL)) (|nzreal_times_nzreal_is_nzreal| 0 (|nzreal_times_nzreal_is_nzreal-1| |nil| 3237052399 ("" (LEMMA "posreal_mult_closed") (("" (SKOSIMP) (("" (CASE "nzx!1 > 0") (("1" (CASE "nzy!1 > 0") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST -2 "nzx!1" "-nzy!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (CASE "nzy!1 > 0") (("1" (INST -2 "-nzx!1" "nzy!1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST -1 "-nzx!1" "-nzy!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (> CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|posreal_mult_closed| FORMULA-DECL NIL |real_axioms| NIL)) NIL (|nzreal_times_nzreal_is_nzreal| SUBTYPE "number_fields.*(real_types.nzx, real_types.nzy)" "nzreal"))) (|nzreal_div_nzreal_is_nzreal| 0 (|nzreal_div_nzreal_is_nzreal-1| |nil| 3237052399 ("" (LEMMA "nzreal_times_nzreal_is_nzreal") (("" (SKOSIMP) (("" (INST -1 "nzx!1" "1/nzy!1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|nzreal_times_nzreal_is_nzreal| JUDGEMENT-TCC NIL |real_types| NIL)) NIL (|nzreal_div_nzreal_is_nzreal| SUBTYPE "number_fields./(real_types.nzx, real_types.nzy)" "nzreal"))) (|minus_nzreal_is_nzreal| 0 (|minus_nzreal_is_nzreal-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|minus_nzreal_is_nzreal| SUBTYPE "(number_fields.-)(real_types.nzx)" "nzreal"))) (|nnreal_plus_nnreal_is_nnreal| 0 (|nnreal_plus_nnreal_is_nnreal-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|nnreal_plus_nnreal_is_nnreal| SUBTYPE "(number_fields.+)(real_types.nnx, real_types.nny)" "nnreal"))) (|nnreal_times_nnreal_is_nnreal| 0 (|nnreal_times_nnreal_is_nnreal-1| |nil| 3237052399 ("" (SKOSIMP) (("" (LEMMA "posreal_mult_closed") (("" (CASE "nnx!1 = 0") (("1" (ASSERT) NIL NIL) ("2" (CASE "nny!1 = 0") (("1" (ASSERT) NIL NIL) ("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|posreal_mult_closed| FORMULA-DECL NIL |real_axioms| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL (|nnreal_times_nnreal_is_nnreal| SUBTYPE "number_fields.*(real_types.nnx, real_types.nny)" "nnreal"))) (|nnreal_div_posreal_is_nnreal| 0 (|nnreal_div_posreal_is_nnreal-1| |nil| 3237052399 ("" (GRIND) (("" (LEMMA "posreal_mult_closed") (("" (CASE "nnx!1 = 0") (("1" (ASSERT) NIL NIL) ("2" (INST -1 "nnx!1" "1/py!1") (("2" (ASSERT) (("2" (LEMMA "inverse_mult") (("2" (INST -1 "py!1") (("2" (ASSERT) (("2" (NAME-REPLACE "a" "1/py!1") (("2" (ASSERT) (("2" (LEMMA "posreal_mult_closed") (("2" (CASE-REPLACE "a = 0") (("1" (ASSERT) NIL NIL) ("2" (INST -1 "py!1" "-a") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|posreal_mult_closed| FORMULA-DECL NIL |real_axioms| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|inverse_mult| FORMULA-DECL NIL |number_fields| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)) NIL (|nnreal_div_posreal_is_nnreal| SUBTYPE "number_fields./(real_types.nnx, real_types.py)" "nnreal"))) (|nnreal_div_negreal_is_npreal| 0 (|nnreal_div_negreal_is_npreal-1| |nil| 3237052399 ("" (SKOSIMP) (("" (LEMMA "nnreal_div_posreal_is_nnreal") (("" (INST -1 "nnx!1" "-ny!1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|nnreal_div_posreal_is_nnreal| JUDGEMENT-TCC NIL |real_types| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL (|nnreal_div_negreal_is_npreal| SUBTYPE "number_fields./(real_types.nnx, real_types.ny)" "npreal"))) (|npreal_plus_npreal_is_npreal| 0 (|npreal_plus_npreal_is_npreal-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|npreal_plus_npreal_is_npreal| SUBTYPE "(number_fields.+)(real_types.npx, real_types.npy)" "npreal"))) (|npreal_times_npreal_is_nnreal| 0 (|npreal_times_npreal_is_nnreal-1| |nil| 3237052399 ("" (SKOSIMP) (("" (LEMMA "posreal_mult_closed") (("" (INST -1 "-npx!1" "-npy!1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|posreal_mult_closed| FORMULA-DECL NIL |real_axioms| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL (|npreal_times_npreal_is_nnreal| SUBTYPE "number_fields.*(real_types.npx, real_types.npy)" "nnreal"))) (|npreal_div_posreal_is_npreal| 0 (|npreal_div_posreal_is_npreal-1| |nil| 3237052399 ("" (SKOSIMP) (("" (LEMMA "nnreal_div_posreal_is_nnreal") (("" (INST -1 "-npx!1" "py!1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|nnreal_div_posreal_is_nnreal| JUDGEMENT-TCC NIL |real_types| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL (|npreal_div_posreal_is_npreal| SUBTYPE "number_fields./(real_types.npx, real_types.py)" "npreal"))) (|npreal_div_negreal_is_nnreal| 0 (|npreal_div_negreal_is_nnreal-1| |nil| 3237052399 ("" (SKOSIMP) (("" (LEMMA "npreal_div_posreal_is_npreal") (("" (INST -1 "npx!1" "-ny!1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|npreal_div_posreal_is_npreal| JUDGEMENT-TCC NIL |real_types| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL (|npreal_div_negreal_is_nnreal| SUBTYPE "number_fields./(real_types.npx, real_types.ny)" "nnreal"))) (|posreal_plus_nnreal_is_posreal| 0 (|posreal_plus_nnreal_is_posreal-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|posreal_plus_nnreal_is_posreal| SUBTYPE "(number_fields.+)(real_types.px, real_types.nny)" "posreal"))) (|nnreal_plus_posreal_is_posreal| 0 (|nnreal_plus_posreal_is_posreal-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|nnreal_plus_posreal_is_posreal| SUBTYPE "(number_fields.+)(real_types.nnx, real_types.py)" "posreal"))) (|posreal_times_posreal_is_posreal| 0 (|posreal_times_posreal_is_posreal-1| |nil| 3237052399 ("" (SKOSIMP) (("" (LEMMA "posreal_mult_closed") (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|posreal_mult_closed| FORMULA-DECL NIL |real_axioms| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL (|posreal_times_posreal_is_posreal| SUBTYPE "number_fields.*(real_types.px, real_types.py)" "posreal"))) (|posreal_div_posreal_is_posreal| 0 (|posreal_div_posreal_is_posreal-1| |nil| 3237052399 ("" (SKOSIMP) (("" (LEMMA "posreal_mult_closed") (("" (INST -1 "px!1" "1/py!1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|posreal_mult_closed| FORMULA-DECL NIL |real_axioms| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL (|posreal_div_posreal_is_posreal| SUBTYPE "number_fields./(real_types.px, real_types.py)" "posreal"))) (|negreal_plus_negreal_is_negreal| 0 (|negreal_plus_negreal_is_negreal-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|negreal_plus_negreal_is_negreal| SUBTYPE "(number_fields.+)(real_types.nx, real_types.ny)" "negreal"))) (|negreal_times_negreal_is_posreal| 0 (|negreal_times_negreal_is_posreal-1| |nil| 3237052399 ("" (SKOSIMP) (("" (LEMMA "posreal_mult_closed") (("" (INST -1 "-nx!1" "-ny!1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|posreal_mult_closed| FORMULA-DECL NIL |real_axioms| NIL) (|npreal_times_npreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL (|negreal_times_negreal_is_posreal| SUBTYPE "number_fields.*(real_types.nx, real_types.ny)" "posreal"))) (|negreal_div_negreal_is_posreal| 0 (|negreal_div_negreal_is_posreal-1| |nil| 3237052399 ("" (LEMMA "posreal_div_posreal_is_posreal") (("" (SKOSIMP) (("" (INST -1 "-nx!1" "-ny!1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|npreal_div_negreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|posreal_div_posreal_is_posreal| JUDGEMENT-TCC NIL |real_types| NIL)) NIL (|negreal_div_negreal_is_posreal| SUBTYPE "number_fields./(real_types.nx, real_types.ny)" "posreal"))))(|rationals| (|closed_plus| 0 (|closed_plus-1| |nil| 3246296579 ("" (POSTPONE) NIL NIL) NIL SHOSTAK)) (|rat_plus_rat_is_rat| 0 (|rat_plus_rat_is_rat-1| |nil| 3237052399 ("" (SKEEP :PREDS? T) (("" (REWRITE "closed_plus") NIL NIL)) NIL) ((|closed_plus| FORMULA-DECL NIL |rationals| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL)) NIL (|rat_plus_rat_is_rat| SUBTYPE "(number_fields.+)(rationals.x, rationals.y)" "rat"))) (|rat_minus_rat_is_rat| 0 (|rat_minus_rat_is_rat-1| |nil| 3237052399 ("" (SKEEP :PREDS? T) (("" (REWRITE "closed_minus") NIL NIL)) NIL) ((|closed_minus| FORMULA-DECL NIL |rationals| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL)) NIL (|rat_minus_rat_is_rat| SUBTYPE "(number_fields.-)(rationals.x, rationals.y)" "rat"))) (|rat_times_rat_is_rat| 0 (|rat_times_rat_is_rat-1| |nil| 3237052399 ("" (SKEEP :PREDS? T) (("" (REWRITE "closed_times") NIL NIL)) NIL) ((|closed_times| FORMULA-DECL NIL |rationals| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL)) NIL (|rat_times_rat_is_rat| SUBTYPE "number_fields.*(rationals.x, rationals.y)" "rat"))) (|rat_div_nzrat_is_rat| 0 (|rat_div_nzrat_is_rat-1| |nil| 3237052399 ("" (SKEEP :PREDS? T) (("" (REWRITE "closed_divides") NIL NIL)) NIL) ((|closed_divides| FORMULA-DECL NIL |rationals| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL)) NIL (|rat_div_nzrat_is_rat| SUBTYPE "number_fields./(rationals.x, rationals.n0z)" "rat"))) (|minus_rat_is_rat| 0 (|minus_rat_is_rat-1| |nil| 3237052399 ("" (SKEEP :PREDS? T) (("" (REWRITE "closed_neg") NIL NIL)) NIL) ((|closed_neg| FORMULA-DECL NIL |rationals| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL)) NIL (|minus_rat_is_rat| SUBTYPE "(number_fields.-)(rationals.x)" "rat"))) (|posrat_is_nzrat| 0 (|posrat_is_nzrat-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|posrat_is_nzrat| SUBTYPE "rationals.x" "nzrat"))) (|negrat_is_nzrat| 0 (|negrat_is_nzrat-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|negrat_is_nzrat| SUBTYPE "rationals.x" "nzrat"))) (|nzrat_times_nzrat_is_nzrat| 0 (|nzrat_times_nzrat_is_nzrat-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|nzrat_times_nzrat_is_nzrat| SUBTYPE "number_fields.*(rationals.n0x, rationals.n0y)" "nzrat"))) (|nzrat_div_nzrat_is_nzrat| 0 (|nzrat_div_nzrat_is_nzrat-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|nzrat_div_nzrat_is_nzrat| SUBTYPE "number_fields./(rationals.n0x, rationals.n0y)" "nzrat"))) (|minus_nzrat_is_nzrat| 0 (|minus_nzrat_is_nzrat-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|minus_nzrat_is_nzrat| SUBTYPE "(number_fields.-)(rationals.n0x)" "nzrat"))) (|nnrat_plus_nnrat_is_nnrat| 0 (|nnrat_plus_nnrat_is_nnrat-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|nnrat_plus_nnrat_is_nnrat| SUBTYPE "(number_fields.+)(rationals.nnx, rationals.nny)" "nonneg_rat"))) (|nnrat_times_nnrat_is_nnrat| 0 (|nnrat_times_nnrat_is_nnrat-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)) NIL (|nnrat_times_nnrat_is_nnrat| SUBTYPE "number_fields.*(rationals.nnx, rationals.nny)" "nonneg_rat"))) (|nnrat_div_posrat_is_nnrat| 0 (|nnrat_div_posrat_is_nnrat-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (> CONST-DECL "bool" |reals| NIL) (|posrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)) NIL (|nnrat_div_posrat_is_nnrat| SUBTYPE "number_fields./(rationals.nnx, rationals.py)" "nonneg_rat"))) (|nnrrat_div_negrat_is_nprat| 0 (|nnrrat_div_negrat_is_nprat-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nonpos_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (< CONST-DECL "bool" |reals| NIL) (|negrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|nnreal_div_negreal_is_npreal| APPLICATION-JUDGEMENT "npreal" |real_types| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)) NIL (|nnrrat_div_negrat_is_nprat| SUBTYPE "number_fields./(rationals.nnx, rationals.ny)" "nprat"))) (|nprat_plus_nprat_is_nprat| 0 (|nprat_plus_nprat_is_nprat-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|nprat_plus_nprat_is_nprat| SUBTYPE "(number_fields.+)(rationals.npx, rationals.npy)" "nprat"))) (|nprat_times_nprat_is_nnrat| 0 (|nprat_times_nprat_is_nnrat-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|nonpos_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|npreal_times_npreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)) NIL (|nprat_times_nprat_is_nnrat| SUBTYPE "number_fields.*(rationals.npx, rationals.npy)" "nnrat"))) (|nprat_div_posrat_is_nprat| 0 (|nprat_div_posrat_is_nprat-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|nonpos_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (> CONST-DECL "bool" |reals| NIL) (|posrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|npreal_div_posreal_is_npreal| APPLICATION-JUDGEMENT "npreal" |real_types| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)) NIL (|nprat_div_posrat_is_nprat| SUBTYPE "number_fields./(rationals.npx, rationals.py)" "nprat"))) (|nprat_div_negrat_is_nnrat| 0 (|nprat_div_negrat_is_nnrat-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|nonpos_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (< CONST-DECL "bool" |reals| NIL) (|negrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|npreal_div_negreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)) NIL (|nprat_div_negrat_is_nnrat| SUBTYPE "number_fields./(rationals.npx, rationals.ny)" "nnrat"))) (|posrat_plus_nnrat_is_posrat| 0 (|posrat_plus_nnrat_is_posrat-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|posrat_plus_nnrat_is_posrat| SUBTYPE "(number_fields.+)(rationals.px, rationals.nny)" "posrat"))) (|nnrat_plus_posrat_is_posrat| 0 (|nnrat_plus_posrat_is_posrat-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|nnrat_plus_posrat_is_posrat| SUBTYPE "(number_fields.+)(rationals.nnx, rationals.py)" "posrat"))) (|posrat_times_posrat_is_posrat| 0 (|posrat_times_posrat_is_posrat-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (> CONST-DECL "bool" |reals| NIL) (|posrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nnrat_times_nnrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|nzrat_times_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL)) NIL (|posrat_times_posrat_is_posrat| SUBTYPE "number_fields.*(rationals.px, rationals.py)" "posrat"))) (|posrat_div_posrat_is_posrat| 0 (|posrat_div_posrat_is_posrat-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (> CONST-DECL "bool" |reals| NIL) (|posrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|nzrat_div_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL)) NIL (|posrat_div_posrat_is_posrat| SUBTYPE "number_fields./(rationals.px, rationals.py)" "posrat"))) (|negrat_plus_negrat_is_negrat| 0 (|negrat_plus_negrat_is_negrat-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|negrat_plus_negrat_is_negrat| SUBTYPE "(number_fields.+)(rationals.nx, rationals.ny)" "negrat"))) (|negrat_times_negrat_is_posrat| 0 (|negrat_times_negrat_is_posrat-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|nonpos_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (< CONST-DECL "bool" |reals| NIL) (|negrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|negreal_times_negreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nprat_times_nprat_is_nnrat| APPLICATION-JUDGEMENT "nnrat" |rationals| NIL) (|nzrat_times_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL)) NIL (|negrat_times_negrat_is_posrat| SUBTYPE "number_fields.*(rationals.nx, rationals.ny)" "posrat"))) (|negrat_div_negrat_is_posrat| 0 (|negrat_div_negrat_is_posrat-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|nonpos_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (< CONST-DECL "bool" |reals| NIL) (|negrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|negreal_div_negreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nprat_div_negrat_is_nnrat| APPLICATION-JUDGEMENT "nnrat" |rationals| NIL) (|nzrat_div_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL)) NIL (|negrat_div_negrat_is_posrat| SUBTYPE "number_fields./(rationals.nx, rationals.ny)" "posrat"))))(|integers| (|upfrom_TCC1| 0 (|upfrom_TCC1-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|upfrom| SUBTYPE "integers.i" "upfrom(integers.i)"))) (|above_TCC1| 0 (|above_TCC1-1| |nil| 3237052399 ("" (SKEEP :PREDS? T) (("" (ASSERT) (("" (REWRITE "closed_plus") NIL NIL)) NIL)) NIL) ((|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|closed_plus| FORMULA-DECL NIL |integers| NIL)) NIL (|above| SUBTYPE "(number_fields.+)(integers.i, 1)" "above(integers.i)"))) (|int_plus_int_is_int| 0 (|int_plus_int_is_int-1| |nil| 3237052399 ("" (SKEEP :PREDS? T) (("" (REWRITE "closed_plus") NIL NIL)) NIL) ((|closed_plus| FORMULA-DECL NIL |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)) NIL (|int_plus_int_is_int| SUBTYPE "(number_fields.+)(integers.i, integers.j)" "int"))) (|int_minus_int_is_int| 0 (|int_minus_int_is_int-1| |nil| 3237052399 ("" (SKEEP :PREDS? T) (("" (REWRITE "closed_minus") NIL NIL)) NIL) ((|closed_minus| FORMULA-DECL NIL |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)) NIL (|int_minus_int_is_int| SUBTYPE "(number_fields.-)(integers.i, integers.j)" "int"))) (|int_times_int_is_int| 0 (|int_times_int_is_int-1| |nil| 3237052399 ("" (SKEEP :PREDS? T) (("" (REWRITE "closed_times") NIL NIL)) NIL) ((|closed_times| FORMULA-DECL NIL |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)) NIL (|int_times_int_is_int| SUBTYPE "number_fields.*(integers.i, integers.j)" "int"))) (|minus_int_is_int| 0 (|minus_int_is_int-1| |nil| 3237052399 ("" (SKEEP :PREDS? T) (("" (REWRITE "closed_neg") NIL NIL)) NIL) ((|closed_neg| FORMULA-DECL NIL |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)) NIL (|minus_int_is_int| SUBTYPE "(number_fields.-)(integers.i)" "int"))) (|minus_nzint_is_nzint| 0 (|minus_nzint_is_nzint-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|minus_nzint_is_nzint| SUBTYPE "(number_fields.-)(integers.n0i)" "nzint"))) (|posint_is_nzint| 0 (|posint_is_nzint-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|posint_is_nzint| SUBTYPE "integers.x" "nzint"))) (|negint_is_nzint| 0 (|negint_is_nzint-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|negint_is_nzint| SUBTYPE "integers.x" "nzint"))) (|nzint_times_nzint_is_nzint| 0 (|nzint_times_nzint_is_nzint-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|nzint_times_nzint_is_nzint| SUBTYPE "number_fields.*(integers.n0i, integers.n0j)" "nzint"))) (|nnint_plus_nnint_is_nnint| 0 (|nnint_plus_nnint_is_nnint-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|nnint_plus_nnint_is_nnint| SUBTYPE "(number_fields.+)(integers.nni, integers.nnj)" "nonneg_int"))) (|nnint_times_nnint_is_nnint| 0 (|nnint_times_nnint_is_nnint-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nnrat_times_nnrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|nnint_times_nnint_is_nnint| SUBTYPE "number_fields.*(integers.nni, integers.nnj)" "nonneg_int"))) (|npint_plus_npint_is_npint| 0 (|npint_plus_npint_is_npint-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|npint_plus_npint_is_npint| SUBTYPE "(number_fields.+)(integers.npi, integers.npj)" "nonpos_int"))) (|npint_times_npint_is_nnint| 0 (|npint_times_npint_is_nnint-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonpos_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nprat_times_nprat_is_nnrat| APPLICATION-JUDGEMENT "nnrat" |rationals| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|npint_times_npint_is_nnint| SUBTYPE "number_fields.*(integers.npi, integers.npj)" "nonneg_int"))) (|posint_plus_nnint_is_posint| 0 (|posint_plus_nnint_is_posint-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|posint_plus_nnint_is_posint| SUBTYPE "(number_fields.+)(integers.pi, integers.nnj)" "posint"))) (|nnint_plus_posint_is_posint| 0 (|nnint_plus_posint_is_posint-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|nnint_plus_posint_is_posint| SUBTYPE "(number_fields.+)(integers.nni, integers.pj)" "posint"))) (|posint_times_posint_is_posint| 0 (|posint_times_posint_is_posint-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posint| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nzint_times_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|posint_times_posint_is_posint| SUBTYPE "number_fields.*(integers.pi, integers.pj)" "posint"))) (|negint_plus_negint_is_negint| 0 (|negint_plus_negint_is_negint-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|negint_plus_negint_is_negint| SUBTYPE "(number_fields.+)(integers.ni, integers.nj)" "negint"))) (|negint_times_negint_is_posint| 0 (|negint_times_negint_is_posint-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonpos_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (< CONST-DECL "bool" |reals| NIL) (|negint| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|negrat_times_negrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|npint_times_npint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nzint_times_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|negint_times_negint_is_posint| SUBTYPE "number_fields.*(integers.ni, integers.nj)" "posint"))) (|even_int_TCC1| 0 (|even_int_TCC1-1| |nil| 3237052399 ("" (EXPAND "even?") (("" (INST 1 "0") (("" (ASSERT) NIL NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even?| CONST-DECL "bool" |integers| NIL)) NIL (|even_int| SUBTYPE "0" "even_int"))) (|odd_int_TCC1| 0 (|odd_int_TCC1-1| |nil| 3237052399 ("" (EXPAND "odd?") (("" (INST 1 "0") (("" (ASSERT) NIL NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|odd?| CONST-DECL "bool" |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|odd_int| SUBTYPE "1" "odd_int"))) (|odd_is_nzint| 0 (|odd_is_nzint-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|odd?| CONST-DECL "bool" |integers| NIL) (|odd_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (/= CONST-DECL "boolean" |notequal| NIL)) NIL (|odd_is_nzint| SUBTYPE "integers.x" "nzint"))) (|even_plus_even_is_even| 0 (|even_plus_even_is_even-1| |nil| 3237052399 ("" (GRIND :IF-MATCH NIL) (("" (INST 1 "j!1 + j!2") (("" (ASSERT) NIL NIL)) NIL)) NIL) ((+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|even_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|even?| CONST-DECL "bool" |integers| NIL)) NIL (|even_plus_even_is_even| SUBTYPE "(number_fields.+)(integers.e1, integers.e2)" "even_int"))) (|even_minus_even_is_even| 0 (|even_minus_even_is_even-1| |nil| 3237052399 ("" (GRIND :IF-MATCH NIL) (("" (INST 1 "j!1 - j!2") (("" (ASSERT) NIL NIL)) NIL)) NIL) ((- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|even_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|even?| CONST-DECL "bool" |integers| NIL)) NIL (|even_minus_even_is_even| SUBTYPE "(number_fields.-)(integers.e1, integers.e2)" "even_int"))) (|odd_plus_odd_is_even| 0 (|odd_plus_odd_is_even-1| |nil| 3237052399 ("" (GRIND :IF-MATCH NIL) (("" (INST 1 "1 + j!1 + j!2") (("" (ASSERT) NIL NIL)) NIL)) NIL) ((+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|odd?| CONST-DECL "bool" |integers| NIL) (|odd_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|even?| CONST-DECL "bool" |integers| NIL)) NIL (|odd_plus_odd_is_even| SUBTYPE "(number_fields.+)(integers.o1, integers.o2)" "even_int"))) (|odd_minus_odd_is_even| 0 (|odd_minus_odd_is_even-1| |nil| 3237052399 ("" (GRIND :IF-MATCH NIL) (("" (INST 1 "j!1 - j!2") (("" (ASSERT) NIL NIL)) NIL)) NIL) ((- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|odd?| CONST-DECL "bool" |integers| NIL) (|odd_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|even?| CONST-DECL "bool" |integers| NIL)) NIL (|odd_minus_odd_is_even| SUBTYPE "(number_fields.-)(integers.o1, integers.o2)" "even_int"))) (|odd_plus_even_is_odd| 0 (|odd_plus_even_is_odd-1| |nil| 3237052399 ("" (GRIND :IF-MATCH NIL) (("" (INST 1 "j!1 + j!2") (("" (ASSERT) NIL NIL)) NIL)) NIL) ((+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|even_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|odd_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|odd?| CONST-DECL "bool" |integers| NIL)) NIL (|odd_plus_even_is_odd| SUBTYPE "(number_fields.+)(integers.o1, integers.e2)" "odd_int"))) (|odd_minus_even_is_odd| 0 (|odd_minus_even_is_odd-1| |nil| 3237052399 ("" (GRIND :IF-MATCH NIL) (("" (INST 1 "j!2 - j!1") (("" (ASSERT) NIL NIL)) NIL)) NIL) ((- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|even_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|odd_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|odd?| CONST-DECL "bool" |integers| NIL)) NIL (|odd_minus_even_is_odd| SUBTYPE "(number_fields.-)(integers.o1, integers.e2)" "odd_int"))) (|even_plus_odd_is_odd| 0 (|even_plus_odd_is_odd-1| |nil| 3237052399 ("" (GRIND :IF-MATCH NIL) (("" (INST 1 "j!1 + j!2") (("" (ASSERT) NIL NIL)) NIL)) NIL) ((+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|even_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|odd_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|odd?| CONST-DECL "bool" |integers| NIL)) NIL (|even_plus_odd_is_odd| SUBTYPE "(number_fields.+)(integers.e1, integers.o2)" "odd_int"))) (|even_minus_odd_is_odd| 0 (|even_minus_odd_is_odd-1| |nil| 3282864786 ("" (GRIND :IF-MATCH NIL) (("" (INST 1 "j!1 - j!2 - 1") (("" (ASSERT) NIL NIL)) NIL)) NIL) ((- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|even_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|odd_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|odd?| CONST-DECL "bool" |integers| NIL)) SHOSTAK (|even_minus_odd_is_odd| SUBTYPE "(number_fields.-)(integers.e1, integers.o2)" "odd_int"))) (|even_times_int_is_even| 0 (|even_times_int_is_even-1| |nil| 3237052399 ("" (GRIND :IF-MATCH NIL) (("" (INST 1 "i!1 * j!1") NIL NIL)) NIL) ((* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|even_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|even?| CONST-DECL "bool" |integers| NIL)) NIL (|even_times_int_is_even| SUBTYPE "number_fields.*(integers.e1, integers.i)" "even_int"))) (|int_times_even_is_even| 0 (|int_times_even_is_even-1| |nil| 3237052399 ("" (GRIND :IF-MATCH NIL) (("" (INST 1 "i!1 * j!1") NIL NIL)) NIL) ((* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|even_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|even?| CONST-DECL "bool" |integers| NIL)) NIL (|int_times_even_is_even| SUBTYPE "number_fields.*(integers.i, integers.e2)" "even_int"))) (|odd_times_odd_is_odd| 0 (|odd_times_odd_is_odd-1| |nil| 3237052399 ("" (GRIND :IF-MATCH NIL) (("" (INST 1 "j!1 + j!2 + 2 * j!1 * j!2") (("" (ASSERT) NIL NIL)) NIL)) NIL) ((* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|odd_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nzint_times_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|odd?| CONST-DECL "bool" |integers| NIL)) NIL (|odd_times_odd_is_odd| SUBTYPE "number_fields.*(integers.o1, integers.o2)" "odd_int"))) (|minus_even_is_even| 0 (|minus_even_is_even-1| |nil| 3237052399 ("" (GRIND :IF-MATCH NIL) (("" (INST 1 "-j!1") (("" (ASSERT) NIL NIL)) NIL)) NIL) ((- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|even_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|even?| CONST-DECL "bool" |integers| NIL)) NIL (|minus_even_is_even| SUBTYPE "(number_fields.-)(integers.e1)" "even_int"))) (|minus_odd_is_odd| 0 (|minus_odd_is_odd-1| |nil| 3237052399 ("" (GRIND :IF-MATCH NIL) (("" (INST 1 "-1 - j!1") (("" (ASSERT) NIL NIL)) NIL)) NIL) ((- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|odd_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|odd?| CONST-DECL "bool" |integers| NIL)) NIL (|minus_odd_is_odd| SUBTYPE "(number_fields.-)(integers.o1)" "odd_int"))))(|naturalnumbers| (|upfrom_nat_is_nat| 0 (|upfrom_nat_is_nat-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|upfrom_nat_is_nat| SUBTYPE "naturalnumbers.x" "nat"))) (|upfrom_posnat_is_posnat| 0 (|upfrom_posnat_is_posnat-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|upfrom_posnat_is_posnat| SUBTYPE "naturalnumbers.x" "posnat"))) (|above_nat_is_posnat| 0 (|above_nat_is_posnat-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|above_nat_is_posnat| SUBTYPE "naturalnumbers.x" "posnat"))) (|subrange_nat_is_nat| 0 (|subrange_nat_is_nat-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|subrange_nat_is_nat| SUBTYPE "naturalnumbers.x" "nat"))) (|subrange_posnat_is_posnat| 0 (|subrange_posnat_is_posnat-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|subrange_posnat_is_posnat| SUBTYPE "naturalnumbers.x" "posnat"))) (|upto_TCC1| 0 (|upto_TCC1-1| |nil| 3237052399 ("" (TCC :DEFS !) NIL NIL) NIL NIL (|upto| SUBTYPE "naturalnumbers.i" "upto(naturalnumbers.i)"))) (|succ_TCC1| 0 (|succ_TCC1-1| |nil| 3658943917 ("" (SUBTYPE-TCC) NIL NIL) NIL SHOSTAK (|succ| SUBTYPE "(number_fields.+)(naturalnumbers.i, 1)" "nat"))) (|pred_TCC1| 0 (|pred_TCC1-1| |nil| 3237052399 ("" (TCC :DEFS !) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|pred| SUBTYPE "(number_fields.-)(naturalnumbers.i, 1)" "nat"))) (|tilde_TCC1| 0 (|tilde_TCC1-1| |nil| 3237052399 ("" (TCC :DEFS !) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|tilde| SUBTYPE "(number_fields.-)(naturalnumbers.i, naturalnumbers.j)" "nat"))) (|nat_induction| 0 (|nat_induction-1| |nil| 3237052399 ("" (LEMMA "wf_induction[nat, (LAMBDA (m,n:nat): m < n)]") (("1" (BETA) (("1" (SKOSIMP*) (("1" (INST -1 "p!1") (("1" (SPLIT) (("1" (INST -1 "i!1") NIL NIL) ("2" (SKOSIMP*) (("2" (CASE "x!1 = 0") (("1" (ASSERT) NIL NIL) ("2" (INST -1 "x!1 - 1") (("1" (INST -3 "x!1 - 1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (DELETE 2) (("2" (LEMMA "wf_nat") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ((|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) NIL (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|wf_induction| FORMULA-DECL NIL |wf_induction| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL)) NIL)) (|NAT_induction| 0 (|NAT_induction-1| |nil| 3237052399 ("" (LEMMA "nat_induction") (("" (SKOSIMP*) (("" (INST -1 "(LAMBDA (n:nat): (FORALL (m:nat): m <= n IMPLIES p!1(m)))") (("" (SPLIT) (("1" (INST -1 "i!1") (("1" (INST -1 "i!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST -2 "0") (("2" (SPLIT) (("1" (ASSERT) NIL NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (INST -3 "m!1") (("3" (ASSERT) (("3" (SKOSIMP*) (("3" (INST -1 "k!1") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (<= CONST-DECL "bool" |reals| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)) NIL)) (|even_or_odd| 0 (|even_or_odd-2| "" 3388684085 ("" (CASE "FORALL (n: nat): even?(n) IFF NOT odd?(n)") (("1" (SKOSIMP) (("1" (CASE "x!1 >= 0") (("1" (INST -2 "x!1") NIL NIL) ("2" (INST -1 "-x!1") (("1" (GRIND :IF-MATCH NIL) (("1" (INST 3 "-j!1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST 2 "-j!2") (("2" (ASSERT) NIL NIL)) NIL) ("3" (INST 4 "-j!1-1") (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT "n") (("1" (GRIND) NIL NIL) ("2" (GRIND :IF-MATCH NIL) (("2" (INST 2 "j!2 + 1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) NIL (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|odd?| CONST-DECL "bool" |integers| NIL)) SHOSTAK) (|even_or_odd-1| |nil| 3252307123 ("" (CASE "FORALL (n: nat): even?(n) IFF NOT odd?(n)") (("1" (SKOSIMP) (("1" (CASE "x!1 >= 0") (("1" (INST -2 "x!1") NIL NIL) ("2" (INST -1 "-x!1") (("1" (GRIND :IF-MATCH NIL) (("1" (INST 3 "-j!1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST 2 "-j!2") (("2" (ASSERT) NIL NIL)) NIL) ("3" (INST 4 "-j!1-1") (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT "n") (("1" (GRIND) NIL NIL) ("2" (GRIND :IF-MATCH NIL) NIL NIL) ("3" (SKOSIMP) (("3" (GRIND :IF-MATCH NIL) (("3" (INST 2 "j!2 + 1") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|odd_iff_not_even| 0 (|odd_iff_not_even-1| |nil| 3307950416 ("" (SKOSIMP*) (("" (REWRITE "even_or_odd") (("" (ASSERT) NIL NIL)) NIL)) NIL) ((|even_or_odd| FORMULA-DECL NIL |naturalnumbers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)) SHOSTAK)) (|even_iff_not_odd| 0 (|even_iff_not_odd-1| |nil| 3307950458 ("" (SKOSIMP*) (("" (REWRITE "even_or_odd") NIL NIL)) NIL) ((|even_or_odd| FORMULA-DECL NIL |naturalnumbers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)) SHOSTAK)) (|odd_or_even_int| 0 (|odd_or_even_int-1| |nil| 3307950482 ("" (SKOSIMP*) (("" (REWRITE "even_or_odd") NIL NIL)) NIL) ((|even_or_odd| FORMULA-DECL NIL |naturalnumbers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)) SHOSTAK)) (|odd_iff_even_succ| 0 (|odd_iff_even_succ-1| |nil| 3307950500 ("" (SKOSIMP*) (("" (EXPAND "even?") (("" (EXPAND "odd?") (("" (SPLIT) (("1" (SKOSIMP*) (("1" (INST + "j!1+1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST + "j!1-1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|even?| CONST-DECL "bool" |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|odd?| CONST-DECL "bool" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)) SHOSTAK)) (|even_iff_odd_succ| 0 (|even_iff_odd_succ-1| |nil| 3307950534 ("" (EXPAND "even?") (("" (EXPAND "odd?") (("" (PROPAX) NIL NIL)) NIL)) NIL) ((|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|odd?| CONST-DECL "bool" |integers| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) SHOSTAK)) (|even_plus1| 0 (|even_plus1-1| |nil| 3307980590 ("" (SKOSIMP) (("" (REWRITE "even_iff_odd_succ") (("" (USE "odd_iff_not_even") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|even_iff_odd_succ| FORMULA-DECL NIL |naturalnumbers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|odd_iff_not_even| FORMULA-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)) SHOSTAK)) (|odd_plus1| 0 (|odd_plus1-1| |nil| 3307980758 ("" (SKOSIMP) (("" (REWRITE "odd_iff_even_succ") (("" (REWRITE "even_iff_not_odd") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|odd_iff_even_succ| FORMULA-DECL NIL |naturalnumbers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|even_iff_not_odd| FORMULA-DECL NIL |naturalnumbers| NIL)) SHOSTAK)) (|even_div2| 0 (|even_div2-1| |nil| 3307950586 ("" (EXPAND "even?") (("" (SKOSIMP*) (("" (REPLACE -1) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)) SHOSTAK)) (|odd_div2| 0 (|odd_div2-1| |nil| 3307950609 ("" (EXPAND "odd?") (("" (SKOSIMP*) (("" (REPLACE -1) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|odd?| CONST-DECL "bool" |integers| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)) SHOSTAK)))(|min_nat| (|min_TCC1| 0 (|min_TCC1-1| |nil| 3237052399 ("" (INST + "lambda S: epsilon(lambda (n: nat): T_pred(n) AND S(n) AND
                                    FORALL x: S(x) IMPLIES n <= x)") (("" (SKOLEM!) (("" (USE "epsilon_ax[nat]") (("" (SPLIT -) (("1" (PROPAX) NIL NIL) ("2" (DELETE 2) (("2" (ASSERT) (("2" (LEMMA "wf_nat") (("2" (EXPAND "well_founded?") (("2" (INST - "lambda (x: nat): T_pred(x) AND S!1(x)") (("2" (GROUND) (("1" (SKOLEM!) (("1" (INST? +) (("1" (ASSERT) (("1" (SKOSIMP) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (DELETE 2) (("2" (TYPEPRED "S!1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|well_founded?| CONST-DECL "bool" |orders| NIL) NIL NIL (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (|epsilon_ax| FORMULA-DECL NIL |epsilons| NIL) (|epsilon| CONST-DECL "T" |epsilons| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (T FORMAL-SUBTYPE-DECL NIL |min_nat| NIL) (|T_pred| CONST-DECL "[nat -> boolean]" |min_nat| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL (|min| EXISTENCE "" "[S: (nonempty?[T]) -> {a | booleans.AND(S(min_nat.a), FORALL x: booleans.IMPLIES(S(min_nat.x), reals.<=(min_nat.a, min_nat.x)))}]"))) (|min_def| 0 (|min_def-1| |nil| 3237052399 ("" (SKOLEM!) (("" (TYPEPRED "min(S!1)") (("" (EXPAND "minimum?") (("" (GROUND) (("1" (REPLACE*) NIL NIL) ("2" (INST? -2 :WHERE -4) (("2" (INST? - :WHERE -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|min| CONST-DECL "{a | S(a) AND (FORALL x: S(x) IMPLIES a <= x)}" |min_nat| NIL) (<= CONST-DECL "bool" |reals| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (T FORMAL-SUBTYPE-DECL NIL |min_nat| NIL) (|T_pred| CONST-DECL "[nat -> boolean]" |min_nat| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|minimum?| CONST-DECL "bool" |min_nat| NIL)) NIL)))(|real_defs| (|abs_TCC1| 0 (|abs_TCC1-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (|abs| SUBTYPE "(number_fields.-)(real_defs.m)" "{n: real_types.nonneg_real | booleans.AND(reals.>=(n, real_defs.m), reals.>=(n, (number_fields.-)(real_defs.m)))}"))) (|abs_TCC2| 0 (|abs_TCC2-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)) NIL (|abs| SUBTYPE "real_defs.m" "{n: real_types.nonneg_real | booleans.AND(reals.>=(n, real_defs.m), reals.>=(n, (number_fields.-)(real_defs.m)))}"))) (|nonzero_abs_is_pos| 0 (|nonzero_abs_is_pos-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)) NIL (|nonzero_abs_is_pos| SUBTYPE "real_defs.abs(real_defs.x)" "{y: real_types.posreal | reals.>=(y, real_defs.x)}"))) (|rat_abs_is_nonneg| 0 (|rat_abs_is_nonneg-1| |nil| 3237052399 ("" (SKOSIMP) (("" (EXPAND "abs") (("" (LIFT-IF) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)) NIL (|rat_abs_is_nonneg| SUBTYPE "real_defs.abs(real_defs.q)" "{r: rationals.nonneg_rat | reals.>=(r, real_defs.q)}"))) (|nzrat_abs_is_pos| 0 (|nzrat_abs_is_pos-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|nzrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|rat_abs_is_nonneg| APPLICATION-JUDGEMENT "{r: nonneg_rat | r >= q}" |real_defs| NIL) (|nonzero_abs_is_pos| APPLICATION-JUDGEMENT "{y: posreal | y >= x}" |real_defs| NIL)) NIL (|nzrat_abs_is_pos| SUBTYPE "real_defs.abs(real_defs.q)" "{r: rationals.posrat | reals.>=(r, real_defs.q)}"))) (|int_abs_is_nonneg| 0 (|int_abs_is_nonneg-1| |nil| 3237052399 ("" (SKOSIMP) (("" (EXPAND "abs") (("" (LIFT-IF) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)) NIL (|int_abs_is_nonneg| SUBTYPE "real_defs.abs(real_defs.i)" "{j: integers.nonneg_int | reals.>=(j, real_defs.i)}"))) (|nzint_abs_is_pos| 0 (|nzint_abs_is_pos-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nzint| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}" |real_defs| NIL) (|nzrat_abs_is_pos| APPLICATION-JUDGEMENT "{r: posrat | r >= q}" |real_defs| NIL)) NIL (|nzint_abs_is_pos| SUBTYPE "real_defs.abs(real_defs.i)" "{j: integers.posint | reals.>=(j, real_defs.i)}"))) (|max_TCC1| 0 (|max_TCC1-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)) NIL (|max| SUBTYPE "real_defs.n" "{p: reals.real | booleans.AND(reals.>=(p, real_defs.m), reals.>=(p, real_defs.n))}"))) (|max_TCC2| 0 (|max_TCC2-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)) NIL (|max| SUBTYPE "real_defs.m" "{p: reals.real | booleans.AND(reals.>=(p, real_defs.m), reals.>=(p, real_defs.n))}"))) (|min_TCC1| 0 (|min_TCC1-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)) NIL (|min| SUBTYPE "real_defs.n" "{p: reals.real | booleans.AND(reals.<=(p, real_defs.m), reals.<=(p, real_defs.n))}"))) (|min_TCC2| 0 (|min_TCC2-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)) NIL (|min| SUBTYPE "real_defs.m" "{p: reals.real | booleans.AND(reals.<=(p, real_defs.m), reals.<=(p, real_defs.n))}"))) (|nzreal_max| 0 (|nzreal_max-1| |nil| 3237052399 ("" (SKOSIMP) (("" (EXPAND "max") (("" (LIFT-IF) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)) NIL (|nzreal_max| SUBTYPE "real_defs.max(real_defs.x, real_defs.y)" "{z: reals.nzreal | booleans.AND(reals.>=(z, real_defs.x), reals.>=(z, real_defs.y))}"))) (|nzreal_min| 0 (|nzreal_min-1| |nil| 3237052399 ("" (SKOSIMP) (("" (EXPAND "min") (("" (LIFT-IF) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)) NIL (|nzreal_min| SUBTYPE "real_defs.min(real_defs.x, real_defs.y)" "{z: reals.nzreal | booleans.AND(reals.<=(z, real_defs.x), reals.<=(z, real_defs.y))}"))) (|nonneg_real_max| 0 (|nonneg_real_max-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)) NIL (|nonneg_real_max| SUBTYPE "real_defs.max(real_defs.x, real_defs.y)" "{z: real_types.nonneg_real | booleans.AND(reals.>=(z, real_defs.x), reals.>=(z, real_defs.y))}"))) (|nonneg_real_min| 0 (|nonneg_real_min-1| |nil| 3237052399 ("" (SKOSIMP) (("" (EXPAND "min") (("" (LIFT-IF) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)) NIL (|nonneg_real_min| SUBTYPE "real_defs.min(real_defs.x, real_defs.y)" "{z: real_types.nonneg_real | booleans.AND(reals.<=(z, real_defs.x), reals.<=(z, real_defs.y))}"))) (|posreal_max| 0 (|posreal_max-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nzreal_max| APPLICATION-JUDGEMENT "{z: nzreal | z >= x AND z >= y}" |real_defs| NIL) (|nonneg_real_max| APPLICATION-JUDGEMENT "{z: nonneg_real | z >= x AND z >= y}" |real_defs| NIL)) NIL (|posreal_max| SUBTYPE "real_defs.max(real_defs.x, real_defs.y)" "{z: real_types.posreal | booleans.AND(reals.>=(z, real_defs.x), reals.>=(z, real_defs.y))}"))) (|posreal_min| 0 (|posreal_min-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nzreal_min| APPLICATION-JUDGEMENT "{z: nzreal | z <= x AND z <= y}" |real_defs| NIL) (|nonneg_real_min| APPLICATION-JUDGEMENT "{z: nonneg_real | z <= x AND z <= y}" |real_defs| NIL)) NIL (|posreal_min| SUBTYPE "real_defs.min(real_defs.x, real_defs.y)" "{z: real_types.posreal | booleans.AND(reals.<=(z, real_defs.x), reals.<=(z, real_defs.y))}"))) (|rat_max| 0 (|rat_max-1| |nil| 3237052399 ("" (SKOSIMP) (("" (EXPAND "max") (("" (LIFT-IF) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)) NIL (|rat_max| SUBTYPE "real_defs.max(real_defs.q, real_defs.r)" "{s: rationals.rat | booleans.AND(reals.>=(s, real_defs.q), reals.>=(s, real_defs.r))}"))) (|rat_min| 0 (|rat_min-1| |nil| 3237052399 ("" (SKOSIMP) (("" (EXPAND "min") (("" (LIFT-IF) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)) NIL (|rat_min| SUBTYPE "real_defs.min(real_defs.q, real_defs.r)" "{s: rationals.rat | booleans.AND(reals.<=(s, real_defs.q), reals.<=(s, real_defs.r))}"))) (|nzrat_max| 0 (|nzrat_max-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|nzrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|rat_max| APPLICATION-JUDGEMENT "{s: rat | s >= q AND s >= r}" |real_defs| NIL) (|nzreal_max| APPLICATION-JUDGEMENT "{z: nzreal | z >= x AND z >= y}" |real_defs| NIL)) NIL (|nzrat_max| SUBTYPE "real_defs.max(real_defs.q, real_defs.r)" "{s: rationals.nzrat | booleans.AND(reals.>=(s, real_defs.q), reals.>=(s, real_defs.r))}"))) (|nzrat_min| 0 (|nzrat_min-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|nzrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|rat_min| APPLICATION-JUDGEMENT "{s: rat | s <= q AND s <= r}" |real_defs| NIL) (|nzreal_min| APPLICATION-JUDGEMENT "{z: nzreal | z <= x AND z <= y}" |real_defs| NIL)) NIL (|nzrat_min| SUBTYPE "real_defs.min(real_defs.q, real_defs.r)" "{s: rationals.nzrat | booleans.AND(reals.<=(s, real_defs.q), reals.<=(s, real_defs.r))}"))) (|nonneg_rat_max| 0 (|nonneg_rat_max-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|nonneg_real_max| APPLICATION-JUDGEMENT "{z: nonneg_real | z >= x AND z >= y}" |real_defs| NIL) (|rat_max| APPLICATION-JUDGEMENT "{s: rat | s >= q AND s >= r}" |real_defs| NIL)) NIL (|nonneg_rat_max| SUBTYPE "real_defs.max(real_defs.q, real_defs.r)" "{s: rationals.nonneg_rat | booleans.AND(reals.>=(s, real_defs.q), reals.>=(s, real_defs.r))}"))) (|nonneg_rat_min| 0 (|nonneg_rat_min-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|nonneg_real_min| APPLICATION-JUDGEMENT "{z: nonneg_real | z <= x AND z <= y}" |real_defs| NIL) (|rat_min| APPLICATION-JUDGEMENT "{s: rat | s <= q AND s <= r}" |real_defs| NIL)) NIL (|nonneg_rat_min| SUBTYPE "real_defs.min(real_defs.q, real_defs.r)" "{s: rationals.nonneg_rat | booleans.AND(reals.<=(s, real_defs.q), reals.<=(s, real_defs.r))}"))) (|posrat_max| 0 (|posrat_max-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (> CONST-DECL "bool" |reals| NIL) (|posrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|posreal_max| APPLICATION-JUDGEMENT "{z: posreal | z >= x AND z >= y}" |real_defs| NIL) (|nonneg_rat_max| APPLICATION-JUDGEMENT "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL) (|nzrat_max| APPLICATION-JUDGEMENT "{s: nzrat | s >= q AND s >= r}" |real_defs| NIL)) NIL (|posrat_max| SUBTYPE "real_defs.max(real_defs.q, real_defs.r)" "{s: rationals.posrat | booleans.AND(reals.>=(s, real_defs.q), reals.>=(s, real_defs.r))}"))) (|posrat_min| 0 (|posrat_min-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (> CONST-DECL "bool" |reals| NIL) (|posrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|posreal_min| APPLICATION-JUDGEMENT "{z: posreal | z <= x AND z <= y}" |real_defs| NIL) (|nonneg_rat_min| APPLICATION-JUDGEMENT "{s: nonneg_rat | s <= q AND s <= r}" |real_defs| NIL) (|nzrat_min| APPLICATION-JUDGEMENT "{s: nzrat | s <= q AND s <= r}" |real_defs| NIL)) NIL (|posrat_min| SUBTYPE "real_defs.min(real_defs.q, real_defs.r)" "{s: rationals.posrat | booleans.AND(reals.<=(s, real_defs.q), reals.<=(s, real_defs.r))}"))) (|int_max| 0 (|int_max-1| |nil| 3237052399 ("" (SKOSIMP) (("" (EXPAND "max") (("" (LIFT-IF) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)) NIL (|int_max| SUBTYPE "real_defs.max(real_defs.i, real_defs.j)" "{k: integers.int | booleans.AND(reals.<=(real_defs.i, k), reals.<=(real_defs.j, k))}"))) (|int_min| 0 (|int_min-1| |nil| 3237052399 ("" (SKOSIMP) (("" (EXPAND "min") (("" (LIFT-IF) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)) NIL (|int_min| SUBTYPE "real_defs.min(real_defs.i, real_defs.j)" "{k: integers.int | booleans.AND(reals.<=(k, real_defs.i), reals.<=(k, real_defs.j))}"))) (|nzint_max| 0 (|nzint_max-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nzint| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|int_max| APPLICATION-JUDGEMENT "{k: int | i <= k AND j <= k}" |real_defs| NIL) (|nzrat_max| APPLICATION-JUDGEMENT "{s: nzrat | s >= q AND s >= r}" |real_defs| NIL)) NIL (|nzint_max| SUBTYPE "real_defs.max(real_defs.i, real_defs.j)" "{k: integers.nzint | booleans.AND(reals.<=(real_defs.i, k), reals.<=(real_defs.j, k))}"))) (|nzint_min| 0 (|nzint_min-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nzint| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs| NIL) (|nzrat_min| APPLICATION-JUDGEMENT "{s: nzrat | s <= q AND s <= r}" |real_defs| NIL)) NIL (|nzint_min| SUBTYPE "real_defs.min(real_defs.i, real_defs.j)" "{k: integers.nzint | booleans.AND(reals.<=(k, real_defs.i), reals.<=(k, real_defs.j))}"))) (|nat_max| 0 (|nat_max-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_rat_max| APPLICATION-JUDGEMENT "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL) (|int_max| APPLICATION-JUDGEMENT "{k: int | i <= k AND j <= k}" |real_defs| NIL)) NIL (|nat_max| SUBTYPE "real_defs.max(real_defs.i, real_defs.j)" "{k: naturalnumbers.nat | booleans.AND(reals.<=(real_defs.i, k), reals.<=(real_defs.j, k))}"))) (|nat_min| 0 (|nat_min-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_rat_min| APPLICATION-JUDGEMENT "{s: nonneg_rat | s <= q AND s <= r}" |real_defs| NIL) (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs| NIL)) NIL (|nat_min| SUBTYPE "real_defs.min(real_defs.i, real_defs.j)" "{k: naturalnumbers.nat | booleans.AND(reals.<=(k, real_defs.i), reals.<=(k, real_defs.j))}"))) (|posint_max| 0 (|posint_max-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posint| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posrat_max| APPLICATION-JUDGEMENT "{s: posrat | s >= q AND s >= r}" |real_defs| NIL) (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs| NIL) (|nzint_max| APPLICATION-JUDGEMENT "{k: nzint | i <= k AND j <= k}" |real_defs| NIL)) NIL (|posint_max| SUBTYPE "real_defs.max(real_defs.i, real_defs.j)" "{k: integers.posint | booleans.AND(reals.<=(real_defs.i, k), reals.<=(real_defs.j, k))}"))) (|posint_min| 0 (|posint_min-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posint| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posrat_min| APPLICATION-JUDGEMENT "{s: posrat | s <= q AND s <= r}" |real_defs| NIL) (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs| NIL) (|nzint_min| APPLICATION-JUDGEMENT "{k: nzint | k <= i AND k <= j}" |real_defs| NIL)) NIL (|posint_min| SUBTYPE "real_defs.min(real_defs.i, real_defs.j)" "{k: integers.posint | booleans.AND(reals.<=(k, real_defs.i), reals.<=(k, real_defs.j))}"))) (|min_le| 0 (|min_le-1| |nil| 3307951039 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)) SHOSTAK)) (|min_lt| 0 (|min_lt-1| |nil| 3307951075 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)) SHOSTAK)) (|min_ge| 0 (|min_ge-1| |nil| 3307951084 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)) SHOSTAK)) (|min_gt| 0 (|min_gt-1| |nil| 3307951093 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)) SHOSTAK)) (|le_min| 0 (|le_min-1| |nil| 3307951100 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)) SHOSTAK)) (|lt_min| 0 (|lt_min-1| |nil| 3307951109 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)) SHOSTAK)) (|ge_min| 0 (|ge_min-1| |nil| 3307951118 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)) SHOSTAK)) (|gt_min| 0 (|gt_min-1| |nil| 3307951125 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)) SHOSTAK)) (|max_le| 0 (|max_le-1| |nil| 3307951134 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)) SHOSTAK)) (|max_lt| 0 (|max_lt-1| |nil| 3307951142 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)) SHOSTAK)) (|max_ge| 0 (|max_ge-1| |nil| 3307951149 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)) SHOSTAK)) (|max_gt| 0 (|max_gt-1| |nil| 3307951158 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)) SHOSTAK)) (|le_max| 0 (|le_max-1| |nil| 3307951168 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)) SHOSTAK)) (|lt_max| 0 (|lt_max-1| |nil| 3307951177 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)) SHOSTAK)) (|ge_max| 0 (|ge_max-1| |nil| 3307951188 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)) SHOSTAK)) (|gt_max| 0 (|gt_max-1| |nil| 3307951197 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)) SHOSTAK)))(|real_props| (|inv_ne_0| 0 (|inv_ne_0-1| |nil| 3237052399 ("" (GRIND) NIL NIL) NIL NIL)) (|both_sides_plus1| 0 (|both_sides_plus1-1| |nil| 3237052399 ("" (TCC :DEFS !) NIL NIL) NIL NIL)) (|both_sides_plus2| 0 (|both_sides_plus2-1| |nil| 3237052399 ("" (TCC :DEFS !) NIL NIL) NIL NIL)) (|both_sides_minus1| 0 (|both_sides_minus1-1| |nil| 3237052399 ("" (TCC :DEFS !) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL)) (|both_sides_minus2| 0 (|both_sides_minus2-1| |nil| 3237052399 ("" (TCC :DEFS !) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL)) (|both_sides_times1| 0 (|both_sides_times1-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL)) (|both_sides_times2| 0 (|both_sides_times2-1| |nil| 3237052399 ("" (LEMMA "both_sides_times1") (("" (SKOSIMP*) (("" (PROP) (("1" (INST -2 "n0z!1" "x!1" "y!1") (("1" (REPLACE -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|both_sides_times1| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|both_sides_div1| 0 (|both_sides_div1-1| |nil| 3237052399 ("" (GRIND) (("" (LEMMA "both_sides_times1") (("" (INST -1 "1/n0z!1" "x!1" "y!1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL)) (|both_sides_div2| 0 (|both_sides_div2-1| |nil| 3237052399 ("" (GRIND) (("" (LEMMA "both_sides_times1") (("" (INST-CP -1 "n0x!1" "n0z!1/n0x!1" "n0z!1/n0y!1") (("" (FLATTEN) (("" (DELETE -2) (("" (SPLIT) (("1" (CASE "n0z!1 = (n0z!1/n0x!1) * n0x!1") (("1" (REPLACE -1 :DIR RL) (("1" (DELETE -1) (("1" (DELETE -3) (("1" (INST -2 "n0y!1" "n0z!1" "(n0z!1/n0y!1)*n0x!1") (("1" (FLATTEN) (("1" (DELETE -2) (("1" (SPLIT) (("1" (CASE "(n0z!1 / n0y!1) * n0x!1 * n0y!1 = n0z!1 * n0x!1") (("1" (REPLACE -1) (("1" (REWRITE "both_sides_times2") NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3 2 3 4 5) (("2" (USE "div_def") (("2" (REPLACE -1) (("2" (USE "associative_mult") (("2" (REPLACE -1 :DIR RL) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL)) NIL)) (|times_plus| 0 (|times_plus-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL)) (|times_div1| 0 (|times_div1-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL)) (|times_div2| 0 (|times_div2-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL)) (|div_times| 0 (|div_times-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL)) NIL)) (|div_eq_zero| 0 (|div_eq_zero-1| |nil| 3237052399 ("" (GRIND) (("" (LEMMA "both_sides_times1") (("" (INST -1 "n0z!1" "x!1/n0z!1" "0") (("" (FLATTEN) (("" (DELETE -1) (("" (SPLIT) (("1" (DELETE -2) (("1" (ASSERT) (("1" (REWRITE "commutative_mult") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL)) (|div_simp| 0 (|div_simp-1| |nil| 3237052399 ("" (GRIND) NIL NIL) NIL NIL)) (|div_cancel1| 0 (|div_cancel1-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL)) (|div_cancel2| 0 (|div_cancel2-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL)) (|div_cancel3| 0 (|div_cancel3-1| |nil| 3237052399 ("" (TCC :DEFS !) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL)) (|div_cancel4| 0 (|div_cancel4-1| |nil| 3510504283 ("" (SKOSIMP) (("" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ((|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) SHOSTAK)) (|cross_mult| 0 (|cross_mult-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL)) (|add_div| 0 (|add_div-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL)) NIL)) (|minus_div1| 0 (|minus_div1-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL)) NIL)) (|minus_div2| 0 (|minus_div2-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL)) (|div_distributes| 0 (|div_distributes-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL)) (|div_distributes_minus| 0 (|div_distributes_minus-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL)) (|div_div1| 0 (|div_div1-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL)) (|div_div2| 0 (|div_div2-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL)) NIL)) (|idem_add_is_zero| 0 (|idem_add_is_zero-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL)) (|zero_times1| 0 (|zero_times1-1| |nil| 3237052399 ("" (GRIND) NIL NIL) NIL NIL)) (|zero_times2| 0 (|zero_times2-1| |nil| 3237052399 ("" (GRIND) NIL NIL) NIL NIL)) (|zero_times3| 0 (|zero_times3-1| |nil| 3237052399 ("" (SKOSIMP*) (("" (PROP) (("1" (LEMMA "trichotomy") (("1" (INST-CP -1 "x!1") (("1" (INST -1 "y!1") (("1" (ASSERT) (("1" (PROP) (("1" (LEMMA "posreal_mult_closed") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (LEMMA "posreal_mult_closed") (("2" (INST -1 "-x!1" "y!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (LEMMA "posreal_mult_closed") (("3" (INST -1 "x!1" "-y!1") (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (LEMMA "posreal_mult_closed") (("4" (INST -1 "-x!1" "-y!1") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|posreal_mult_closed| FORMULA-DECL NIL |real_axioms| NIL) (|trichotomy| FORMULA-DECL NIL |real_axioms| NIL)) NIL)) (|neg_times_neg| 0 (|neg_times_neg-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL)) (|zero_is_neg_zero| 0 (|zero_is_neg_zero-1| |nil| 3237052399 ("" (GRIND) NIL NIL) NIL NIL)) (|strict_lt| 0 (|strict_lt-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|irreflexive?| CONST-DECL "bool" |relations| NIL) (|transitive?| CONST-DECL "bool" |relations| NIL) (|strict_order?| CONST-DECL "bool" |orders| NIL) (|trichotomous?| CONST-DECL "bool" |orders| NIL) (|strict_total_order?| CONST-DECL "bool" |orders| NIL)) NIL)) (|trich_lt| 0 (|trich_lt-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)) NIL)) (|tri_unique_lt1| 0 (|tri_unique_lt1-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL)) NIL)) (|tri_unique_lt2| 0 (|tri_unique_lt2-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)) NIL)) (|zero_not_lt_zero| 0 (|zero_not_lt_zero-1| |nil| 3237052399 ("" (GRIND) NIL NIL) NIL NIL)) (|neg_lt| 0 (|neg_lt-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL)) (|pos_times_lt| 0 (|pos_times_lt-1| |nil| 3237052399 ("" (GRIND) (("1" (LEMMA "posreal_mult_closed") (("1" (CASE "x!1 = 0") (("1" (ASSERT) NIL NIL) ("2" (CASE "y!1 = 0") (("1" (ASSERT) NIL NIL) ("2" (INST -1 "x!1" "-y!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "x!1 = 0") (("1" (ASSERT) NIL NIL) ("2" (CASE "y!1 = 0") (("1" (ASSERT) NIL NIL) ("2" (LEMMA "posreal_mult_closed") (("2" (INST -1 "-x!1" "y!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "posreal_mult_closed") (("3" (INST -1 "x!1" "y!1") (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (LEMMA "posreal_mult_closed") (("4" (INST -1 "-x!1" "-y!1") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|posreal_mult_closed| FORMULA-DECL NIL |real_axioms| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)) NIL)) (|neg_times_lt| 0 (|neg_times_lt-1| |nil| 3237052399 ("" (SKOSIMP*) (("" (LEMMA "pos_times_lt") (("" (INST -1 "x!1" "-y!1") (("" (ASSERT) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|pos_times_lt| FORMULA-DECL NIL |real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL)) (|quotient_pos_lt| 0 (|quotient_pos_lt-1| |nil| 3237052399 ("" (SKOSIMP*) (("" (LEMMA "inverse_mult") (("" (INST?) (("" (LEMMA "pos_times_lt") (("" (INST -1 "n0x!1" "1/n0x!1") (("" (REPLACE -2) (("" (ASSERT) (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|inverse_mult| FORMULA-DECL NIL |number_fields| NIL) (|pos_times_lt| FORMULA-DECL NIL |real_props| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL)) (|quotient_neg_lt| 0 (|quotient_neg_lt-1| |nil| 3237052399 ("" (SKOSIMP*) (("" (LEMMA "quotient_pos_lt") (("" (INST -1 "-n0x!1") (("" (ASSERT) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|quotient_pos_lt| FORMULA-DECL NIL |real_props| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL)) (|pos_div_lt| 0 (|pos_div_lt-1| |nil| 3237052399 ("" (SKOSIMP*) (("" (LEMMA "pos_times_lt") (("" (INST -1 "x!1" "1/n0y!1") (("" (LEMMA "quotient_pos_lt") (("" (INST -1 "n0y!1") (("" (LEMMA "quotient_neg_lt") (("" (INST -1 "n0y!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|pos_times_lt| FORMULA-DECL NIL |real_props| NIL) (|quotient_pos_lt| FORMULA-DECL NIL |real_props| NIL) (|quotient_neg_lt| FORMULA-DECL NIL |real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL)) (|neg_div_lt| 0 (|neg_div_lt-1| |nil| 3237052399 ("" (SKOSIMP*) (("" (LEMMA "pos_div_lt") (("" (INST -1 "n0y!1" "-x!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|pos_div_lt| FORMULA-DECL NIL |real_props| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL)) (|div_mult_pos_lt1| 0 (|div_mult_pos_lt1-1| |nil| 3237052399 ("" (GRIND) (("1" (LEMMA "posreal_mult_closed") (("1" (INST -1 "x!1 - (z!1/py!1)" "py!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (LEMMA "posreal_mult_closed") (("2" (INST -1 "x!1*py!1 - z!1" "1/py!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|posreal_mult_closed| FORMULA-DECL NIL |real_axioms| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)) NIL)) (|div_mult_pos_lt2| 0 (|div_mult_pos_lt2-1| |nil| 3237052399 ("" (LEMMA "div_mult_pos_lt1") (("" (SKOSIMP) (("" (INST -1 "py!1" "-x!1" "-z!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|div_mult_pos_lt1| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|div_mult_neg_lt1| 0 (|div_mult_neg_lt1-1| |nil| 3237052399 ("" (LEMMA "div_mult_pos_lt2") (("" (SKOSIMP) (("" (INST -1 "-ny!1" "-x!1" "z!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|div_mult_pos_lt2| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|div_mult_neg_lt2| 0 (|div_mult_neg_lt2-1| |nil| 3237052399 ("" (SKOSIMP) (("" (LEMMA "div_mult_pos_lt1") (("" (INST -1 "-ny!1" "-x!1" "z!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|div_mult_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL)) (|both_sides_plus_lt1| 0 (|both_sides_plus_lt1-1| |nil| 3237052399 ("" (TCC :DEFS !) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL)) (|both_sides_plus_lt2| 0 (|both_sides_plus_lt2-1| |nil| 3237052399 ("" (TCC :DEFS !) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL)) (|both_sides_minus_lt1| 0 (|both_sides_minus_lt1-1| |nil| 3237052399 ("" (TCC :DEFS !) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL)) (|both_sides_minus_lt2| 0 (|both_sides_minus_lt2-1| |nil| 3237052399 ("" (TCC :DEFS !) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL)) (|both_sides_times_pos_lt1| 0 (|both_sides_times_pos_lt1-1| |nil| 3237052399 ("" (GRIND) (("1" (LEMMA "posreal_mult_closed") (("1" (INST -1 "(y!1 - x!1) * pz!1" "1/pz!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (LEMMA "posreal_mult_closed") (("2" (INST -1 "y!1-x!1" "pz!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|posreal_mult_closed| FORMULA-DECL NIL |real_axioms| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)) NIL)) (|both_sides_times_pos_lt2| 0 (|both_sides_times_pos_lt2-1| |nil| 3237052399 ("" (LEMMA "both_sides_times_pos_lt1") (("" (SKOSIMP) (("" (INST -1 "pz!1" "x!1" "y!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|both_sides_times_pos_lt1| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|both_sides_times_neg_lt1| 0 (|both_sides_times_neg_lt1-1| |nil| 3237052399 ("" (LEMMA "both_sides_times_pos_lt1") (("" (SKOSIMP) (("" (INST -1 "-nz!1" "y!1" "x!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|both_sides_times_pos_lt1| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|both_sides_times_neg_lt2| 0 (|both_sides_times_neg_lt2-1| |nil| 3237052399 ("" (LEMMA "both_sides_times_neg_lt1") (("" (SKOSIMP) (("" (INST -1 "nz!1" "x!1" "y!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|both_sides_times_neg_lt1| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|both_sides_div_pos_lt1| 0 (|both_sides_div_pos_lt1-1| |nil| 3237052399 ("" (LEMMA "both_sides_times_pos_lt1") (("" (SKOSIMP) (("" (INST -1 "1/pz!1" "x!1" "y!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|both_sides_times_pos_lt1| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|both_sides_div_pos_lt2| 0 (|both_sides_div_pos_lt2-1| |nil| 3237052399 ("" (SKOSIMP*) (("" (LEMMA "both_sides_times_pos_lt1") (("" (INST -1 "px!1 * py!1" "pz!1 / px!1" "pz!1 / py!1") (("" (ASSERT) (("" (GRIND) (("1" (CASE "pz!1 / px!1 * (px!1 * py!1) = pz!1 * py!1") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (CASE "pz!1 / py!1 * (px!1 * py!1) = pz!1 * px!1") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (REWRITE "both_sides_times_pos_lt2") NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (CASE "pz!1 / px!1 * (px!1 * py!1) = pz!1 * py!1") (("1" (CASE "pz!1 / py!1 * (px!1 * py!1) = pz!1 * px!1") (("1" (REPLACE -1) (("1" (REPLACE -2) (("1" (HIDE -1 -2) (("1" (LEMMA "both_sides_times_pos_lt2") (("1" (INST?) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|both_sides_times_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|both_sides_times_pos_lt2| FORMULA-DECL NIL |real_props| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL)) (|both_sides_div_pos_lt3| 0 (|both_sides_div_pos_lt3-1| |nil| 3237052399 ("" (SKOSIMP*) (("" (LEMMA "both_sides_div_pos_lt2") (("" (INST -1 "py!1" "px!1" "-nz!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|both_sides_div_pos_lt2| FORMULA-DECL NIL |real_props| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|npreal_div_posreal_is_npreal| APPLICATION-JUDGEMENT "npreal" |real_types| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL)) (|both_sides_div_neg_lt1| 0 (|both_sides_div_neg_lt1-1| |nil| 3237052399 ("" (LEMMA "both_sides_div_pos_lt1") (("" (SKOSIMP) (("" (INST -1 "-nz!1" "y!1" "x!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|both_sides_div_pos_lt1| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|both_sides_div_neg_lt2| 0 (|both_sides_div_neg_lt2-1| |nil| 3237052399 ("" (LEMMA "both_sides_div_pos_lt2") (("" (SKOSIMP) (("" (INST -1 "-ny!1" "-nx!1" "pz!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|nnreal_div_negreal_is_npreal| APPLICATION-JUDGEMENT "npreal" |real_types| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|both_sides_div_pos_lt2| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|both_sides_div_neg_lt3| 0 (|both_sides_div_neg_lt3-1| |nil| 3237052399 ("" (LEMMA "both_sides_div_pos_lt3") (("" (SKOSIMP) (("" (INST -1 "nz!1" "-ny!1" "-nx!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|negreal_div_negreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|both_sides_div_pos_lt3| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|lt_plus_lt1| 0 (|lt_plus_lt1-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL)) (|lt_plus_lt2| 0 (|lt_plus_lt2-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL)) (|lt_minus_lt1| 0 (|lt_minus_lt1-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL)) (|lt_minus_lt2| 0 (|lt_minus_lt2-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL)) (|lt_times_lt_pos1| 0 (|lt_times_lt_pos1-1| |nil| 3237052399 ("" (SKOSIMP*) (("" (CASE "nnz!1 = 0") (("1" (ASSERT) (("1" (LEMMA "pos_times_lt") (("1" (INST -1 "y!1" "w!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "both_sides_times_pos_lt1") (("2" (INST-CP -1 "nnz!1" "px!1" "y!1") (("1" (INST -1 "y!1" "nnz!1" "w!1") (("1" (GRIND) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|pos_times_lt| FORMULA-DECL NIL |real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) NIL (> CONST-DECL "bool" |reals| NIL) NIL (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|both_sides_times_pos_lt1| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|lt_times_lt_pos2| 0 (|lt_times_lt_pos2-1| |nil| 3237052399 ("" (SKOSIMP*) (("" (CASE "nnx!1 = 0") (("1" (ASSERT) (("1" (LEMMA "pos_times_lt") (("1" (INST -1 "y!1" "w!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "both_sides_times_pos_lt1") (("2" (INST-CP -1 "pz!1" "nnx!1" "y!1") (("2" (INST -1 "y!1" "pz!1" "w!1") (("1" (GRIND) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|pos_times_lt| FORMULA-DECL NIL |real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) NIL (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|both_sides_times_pos_lt1| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|lt_div_lt_pos1_TCC1| 0 (|lt_div_lt_pos1_TCC1-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (/= CONST-DECL "boolean" |notequal| NIL)) NIL (|lt_div_lt_pos1| SUBTYPE "real_props.w" "nznum"))) (|lt_div_lt_pos1| 0 (|lt_div_lt_pos1-1| |nil| 3237052399 ("" (GRIND) (("" (DELETE -5 -6) (("" (LEMMA "both_sides_div_pos_lt1") (("" (INST -1 "w!1" "px!1" "y!1") (("" (LEMMA "both_sides_div_pos_lt2") (("" (INST -1 "w!1" "pz!1" "y!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|both_sides_div_pos_lt2| FORMULA-DECL NIL |real_props| NIL) (|both_sides_div_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)) NIL)) (|lt_div_lt_pos2_TCC1| 0 (|lt_div_lt_pos2_TCC1-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (/= CONST-DECL "boolean" |notequal| NIL)) NIL (|lt_div_lt_pos2| SUBTYPE "real_props.w" "nznum"))) (|lt_div_lt_pos2| 0 (|lt_div_lt_pos2-1| |nil| 3237052399 ("" (GRIND) (("" (DELETE -4 -5) (("" (LEMMA "both_sides_div_pos_lt1") (("" (INST -1 "w!1" "nnx!1" "y!1") (("" (LEMMA "both_sides_div_pos_lt2") (("" (INST -1 "w!1" "pz!1" "y!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|both_sides_div_pos_lt2| FORMULA-DECL NIL |real_props| NIL) (|both_sides_div_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)) NIL)) (|lt_times_lt_neg1| 0 (|lt_times_lt_neg1-1| |nil| 3237052399 ("" (LEMMA "lt_times_lt_pos1") (("" (SKOSIMP) (("" (INST -1 "-npw!1" "-ny!1" "-z!1" "-x!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|npreal_times_npreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|lt_times_lt_pos1| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|lt_times_lt_neg2| 0 (|lt_times_lt_neg2-1| |nil| 3237052399 ("" (LEMMA "lt_times_lt_pos2") (("" (SKOSIMP) (("" (INST -1 "-npy!1" "-nw!1" "-z!1" "-x!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|npreal_times_npreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|lt_times_lt_pos2| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|lt_div_lt_neg1_TCC1| 0 (|lt_div_lt_neg1_TCC1-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (/= CONST-DECL "boolean" |notequal| NIL)) NIL (|lt_div_lt_neg1| SUBTYPE "real_props.z" "nznum"))) (|lt_div_lt_neg1| 0 (|lt_div_lt_neg1-1| |nil| 3237052399 ("" (LEMMA "lt_div_lt_pos1") (("" (SKOSIMP) (("" (INST -1 "-ny!1" "-nw!1" "-z!1" "-x!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|lt_div_lt_pos1| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|lt_div_lt_neg2_TCC1| 0 (|lt_div_lt_neg2_TCC1-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (/= CONST-DECL "boolean" |notequal| NIL)) NIL (|lt_div_lt_neg2| SUBTYPE "real_props.z" "nznum"))) (|lt_div_lt_neg2| 0 (|lt_div_lt_neg2-1| |nil| 3237052399 ("" (LEMMA "lt_div_lt_pos2") (("" (SKOSIMP) (("" (INST -1 "-npy!1" "-nw!1" "-z!1" "-x!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|lt_div_lt_pos2| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|total_le| 0 (|total_le-1| |nil| 3237052399 ("" (TCC :DEFS !) NIL NIL) ((|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|reflexive?| CONST-DECL "bool" |relations| NIL) (|transitive?| CONST-DECL "bool" |relations| NIL) (|preorder?| CONST-DECL "bool" |orders| NIL) (|antisymmetric?| CONST-DECL "bool" |relations| NIL) (|partial_order?| CONST-DECL "bool" |orders| NIL) (|dichotomous?| CONST-DECL "bool" |orders| NIL) (|total_order?| CONST-DECL "bool" |orders| NIL)) NIL)) (|dich_le| 0 (|dich_le-1| |nil| 3237052399 ("" (TCC :DEFS !) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)) NIL)) (|zero_le_zero| 0 (|zero_le_zero-1| |nil| 3237052399 ("" (TCC :DEFS !) NIL NIL) NIL NIL)) (|neg_le| 0 (|neg_le-1| |nil| 3237052399 ("" (TCC :DEFS !) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL)) (|pos_times_le| 0 (|pos_times_le-1| |nil| 3237052399 ("" (LEMMA "pos_times_lt") (("" (SKOSIMP) (("" (CASE "x!1 = 0") (("1" (GRIND) NIL NIL) ("2" (CASE "y!1 = 0") (("1" (GRIND) NIL NIL) ("2" (INST?) (("2" (LEMMA "zero_times3") (("2" (INST?) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|zero_times3| FORMULA-DECL NIL |real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|pos_times_lt| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|neg_times_le| 0 (|neg_times_le-1| |nil| 3237052399 ("" (LEMMA "pos_times_le") (("" (SKOSIMP) (("" (INST -1 "x!1" "-y!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|pos_times_le| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|quotient_pos_le| 0 (|quotient_pos_le-1| |nil| 3237052399 ("" (LEMMA "quotient_pos_lt") (("" (SKOSIMP) (("" (INST?) (("" (LEMMA "inv_ne_0") (("" (INST?) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|inv_ne_0| FORMULA-DECL NIL |real_props| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|quotient_pos_lt| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|quotient_neg_le| 0 (|quotient_neg_le-1| |nil| 3237052399 ("" (LEMMA "quotient_pos_le") (("" (SKOSIMP) (("" (INST -1 "-n0x!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|quotient_pos_le| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|pos_div_le| 0 (|pos_div_le-1| |nil| 3237052399 ("" (LEMMA "pos_div_lt") (("" (SKOSIMP) (("" (CASE "x!1 = 0") (("1" (GRIND) NIL NIL) ("2" (INST?) (("2" (LEMMA "zero_times3") (("2" (INST -1 "x!1" "1/n0y!1") (("2" (LEMMA "inv_ne_0") (("2" (INST -1 "n0y!1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((/= CONST-DECL "boolean" |notequal| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|inv_ne_0| FORMULA-DECL NIL |real_props| NIL) (|zero_times3| FORMULA-DECL NIL |real_props| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|pos_div_lt| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|neg_div_le| 0 (|neg_div_le-1| |nil| 3237052399 ("" (LEMMA "pos_div_le") (("" (SKOSIMP) (("" (INST -1 "-n0y!1" "x!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|pos_div_le| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|div_mult_pos_le1| 0 (|div_mult_pos_le1-1| |nil| 3237052399 ("" (LEMMA "div_mult_pos_lt1") (("" (SKOSIMP) (("" (INST?) (("" (INST?) (("" (GRIND) (("" (CASE-REPLACE "z!1 = x!1 * py!1") (("1" (ASSERT) (("1" (CASE-REPLACE "x!1 * py!1 / py!1 = x!1") (("1" (ASSERT) NIL NIL) ("2" (HIDE -1 -2 2 3 4) (("2" (USE "div_def") (("2" (REPLACE -1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|div_def| FORMULA-DECL NIL |number_fields| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|div_mult_pos_lt1| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|div_mult_pos_le2| 0 (|div_mult_pos_le2-1| |nil| 3237052399 ("" (LEMMA "div_mult_pos_lt2") (("" (SKOSIMP) (("" (INST?) (("" (INST?) (("" (GRIND) (("" (CASE-REPLACE "z!1 = x!1 * py!1") (("1" (ASSERT) (("1" (CASE-REPLACE "x!1 * py!1 / py!1 = x!1") (("1" (ASSERT) NIL NIL) ("2" (HIDE -1 -2 2 3 4) (("2" (USE "div_def") (("2" (REPLACE -1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|div_def| FORMULA-DECL NIL |number_fields| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|div_mult_pos_lt2| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|div_mult_neg_le1| 0 (|div_mult_neg_le1-1| |nil| 3237052399 ("" (LEMMA "div_mult_neg_lt1") (("" (SKOSIMP) (("" (INST?) (("" (INST?) (("" (GRIND) (("" (CASE-REPLACE "z!1 = x!1 * ny!1") (("1" (ASSERT) (("1" (CASE-REPLACE "x!1 * ny!1 / ny!1 = x!1") (("1" (ASSERT) NIL NIL) ("2" (HIDE -1 -2 2 3 4) (("2" (USE "div_def") (("2" (REPLACE -1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|div_def| FORMULA-DECL NIL |number_fields| NIL) (|nnreal_div_negreal_is_npreal| APPLICATION-JUDGEMENT "npreal" |real_types| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|div_mult_neg_lt1| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|div_mult_neg_le2| 0 (|div_mult_neg_le2-1| |nil| 3237052399 ("" (LEMMA "div_mult_neg_lt2") (("" (SKOSIMP) (("" (INST?) (("" (INST?) (("" (GRIND) (("" (CASE-REPLACE "z!1 = x!1 * ny!1") (("1" (ASSERT) (("1" (CASE-REPLACE "x!1 * ny!1 / ny!1 = x!1") (("1" (ASSERT) NIL NIL) ("2" (HIDE -1 -2 2 3 4) (("2" (USE "div_def") (("2" (REPLACE -1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|div_def| FORMULA-DECL NIL |number_fields| NIL) (|nnreal_div_negreal_is_npreal| APPLICATION-JUDGEMENT "npreal" |real_types| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|div_mult_neg_lt2| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|both_sides_plus_le1| 0 (|both_sides_plus_le1-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL)) (|both_sides_plus_le2| 0 (|both_sides_plus_le2-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL)) (|both_sides_minus_le1| 0 (|both_sides_minus_le1-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL)) (|both_sides_minus_le2| 0 (|both_sides_minus_le2-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL)) (|both_sides_times_pos_le1| 0 (|both_sides_times_pos_le1-1| |nil| 3237052399 ("" (LEMMA "both_sides_times_pos_lt1") (("" (SKOSIMP) (("" (INST?) (("" (INST -1 "y!1") (("" (GRIND) (("" (LEMMA "both_sides_times1") (("" (INST?) (("" (INST -1 "y!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|both_sides_times1| FORMULA-DECL NIL |real_props| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|both_sides_times_pos_lt1| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|both_sides_times_pos_le2| 0 (|both_sides_times_pos_le2-1| |nil| 3237052399 ("" (LEMMA "both_sides_times_pos_le1") (("" (SKOSIMP) (("" (INST -1 "pz!1" "x!1" "y!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|both_sides_times_pos_le1| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|both_sides_times_neg_le1| 0 (|both_sides_times_neg_le1-1| |nil| 3237052399 ("" (LEMMA "both_sides_times_pos_le1") (("" (SKOSIMP) (("" (INST -1 "-nz!1" "y!1" "x!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|both_sides_times_pos_le1| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|both_sides_times_neg_le2| 0 (|both_sides_times_neg_le2-1| |nil| 3237052399 ("" (LEMMA "both_sides_times_neg_le1") (("" (SKOSIMP) (("" (INST -1 "nz!1" "x!1" "y!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|both_sides_times_neg_le1| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|both_sides_div_pos_le1| 0 (|both_sides_div_pos_le1-1| |nil| 3237052399 ("" (LEMMA "both_sides_div_pos_lt1") (("" (SKOSIMP) (("" (INST?) (("" (INST -1 "y!1") (("" (GRIND) (("" (LEMMA "both_sides_times_pos_le1") (("" (INST -1 "1/pz!1" "x!1" "y!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|both_sides_div_pos_lt1| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|both_sides_div_pos_le2| 0 (|both_sides_div_pos_le2-1| |nil| 3237052399 ("" (LEMMA "both_sides_div_pos_lt2") (("" (SKOSIMP) (("" (INST?) (("" (INST -1 "py!1") (("" (GRIND) (("" (LEMMA "both_sides_div2") (("" (INST?) (("" (INST -1 "py!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|both_sides_div2| FORMULA-DECL NIL |real_props| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|both_sides_div_pos_lt2| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|both_sides_div_pos_le3| 0 (|both_sides_div_pos_le3-1| |nil| 3237052399 ("" (LEMMA "both_sides_div_pos_le2") (("" (SKOSIMP) (("" (INST -1 "py!1" "px!1" "-nz!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|npreal_div_posreal_is_npreal| APPLICATION-JUDGEMENT "npreal" |real_types| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|both_sides_div_pos_le2| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|both_sides_div_neg_le1| 0 (|both_sides_div_neg_le1-1| |nil| 3237052399 ("" (LEMMA "both_sides_div_pos_le1") (("" (SKOSIMP) (("" (INST -1 "-nz!1" "y!1" "x!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|both_sides_div_pos_le1| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|both_sides_div_neg_le2| 0 (|both_sides_div_neg_le2-1| |nil| 3237052399 ("" (LEMMA "both_sides_div_pos_le2") (("" (SKOSIMP) (("" (INST -1 "-ny!1" "-nx!1" "pz!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|nnreal_div_negreal_is_npreal| APPLICATION-JUDGEMENT "npreal" |real_types| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|both_sides_div_pos_le2| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|both_sides_div_neg_le3| 0 (|both_sides_div_neg_le3-1| |nil| 3237052399 ("" (LEMMA "both_sides_div_pos_le3") (("" (SKOSIMP) (("" (INST -1 "nz!1" "-ny!1" "-nx!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|negreal_div_negreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|both_sides_div_pos_le3| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|le_plus_le| 0 (|le_plus_le-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL)) (|le_minus_le| 0 (|le_minus_le-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL)) (|le_times_le_pos| 0 (|le_times_le_pos-1| |nil| 3237052399 ("" (LEMMA "lt_times_lt_pos1") (("" (SKOSIMP) (("" (CASE "nnz!1 = w!1") (("1" (LEMMA "both_sides_times_pos_le1") (("1" (INST -1 "w!1" "nnx!1" "y!1") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (INST -1 "nnz!1" "nnx!1" "w!1" "y!1") (("1" (GRIND) NIL NIL) ("2" (GRIND) (("2" (LEMMA "pos_times_le") (("2" (INST -1 "y!1" "w!1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL (|pos_times_le| FORMULA-DECL NIL |real_props| NIL) (|both_sides_times_pos_le1| FORMULA-DECL NIL |real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) NIL (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|lt_times_lt_pos1| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|le_div_le_pos_TCC1| 0 (|le_div_le_pos_TCC1-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (/= CONST-DECL "boolean" |notequal| NIL)) NIL (|le_div_le_pos| SUBTYPE "real_props.w" "nznum"))) (|le_div_le_pos| 0 (|le_div_le_pos-1| |nil| 3237052399 ("" (LEMMA "le_times_le_pos") (("" (SKOSIMP) (("" (INST -1 "nnx!1" "1/w!1" "1/pz!1" "y!1") (("1" (GRIND) (("1" (REWRITE "both_sides_div_pos_le2") NIL NIL)) NIL) ("2" (ASSERT) (("2" (LEMMA "quotient_pos_lt") (("2" (INST -1 "w!1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|quotient_pos_lt| FORMULA-DECL NIL |real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|both_sides_div_pos_le2| FORMULA-DECL NIL |real_props| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) NIL (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|le_times_le_pos| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|le_times_le_neg| 0 (|le_times_le_neg-1| |nil| 3237052399 ("" (LEMMA "le_times_le_pos") (("" (SKOSIMP) (("" (INST -1 "-npy!1" "-npw!1" "-z!1" "-x!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|npreal_times_npreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|le_times_le_pos| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|le_div_le_neg_TCC1| 0 (|le_div_le_neg_TCC1-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (/= CONST-DECL "boolean" |notequal| NIL)) NIL (|le_div_le_neg| SUBTYPE "real_props.z" "nznum"))) (|le_div_le_neg| 0 (|le_div_le_neg-1| |nil| 3237052399 ("" (LEMMA "le_div_le_pos") (("" (SKOSIMP) (("" (INST -1 "-npy!1" "-nw!1" "-z!1" "-x!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|le_div_le_pos| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|strict_gt| 0 (|strict_gt-1| |nil| 3237052399 ("" (TCC :DEFS !) NIL NIL) ((|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|irreflexive?| CONST-DECL "bool" |relations| NIL) (|transitive?| CONST-DECL "bool" |relations| NIL) (|strict_order?| CONST-DECL "bool" |orders| NIL) (|trichotomous?| CONST-DECL "bool" |orders| NIL) (|strict_total_order?| CONST-DECL "bool" |orders| NIL)) NIL)) (|trich_gt| 0 (|trich_gt-1| |nil| 3237052399 ("" (TCC :DEFS !) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)) NIL)) (|tri_unique_gt1| 0 (|tri_unique_gt1-1| |nil| 3237052399 ("" (TCC :DEFS !) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL)) NIL)) (|tri_unique_gt2| 0 (|tri_unique_gt2-1| |nil| 3237052399 ("" (TCC :DEFS !) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)) NIL)) (|zero_not_gt_zero| 0 (|zero_not_gt_zero-1| |nil| 3237052399 ("" (TCC :DEFS !) NIL NIL) NIL NIL)) (|neg_gt| 0 (|neg_gt-1| |nil| 3237052399 ("" (TCC :DEFS !) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL)) (|pos_times_gt| 0 (|pos_times_gt-1| |nil| 3237052399 ("" (LEMMA "pos_times_lt") (("" (SKOSIMP) (("" (INST?) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|pos_times_lt| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|neg_times_gt| 0 (|neg_times_gt-1| |nil| 3237052399 ("" (LEMMA "neg_times_lt") (("" (SKOSIMP) (("" (INST -1 "x!1" "y!1") (("" (ASSERT) (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|neg_times_lt| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|quotient_pos_gt| 0 (|quotient_pos_gt-1| |nil| 3237052399 ("" (LEMMA "quotient_pos_lt") (("" (SKOSIMP) (("" (INST?) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|quotient_pos_lt| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|quotient_neg_gt| 0 (|quotient_neg_gt-1| |nil| 3237052399 ("" (LEMMA "quotient_neg_lt") (("" (SKOSIMP) (("" (INST?) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|quotient_neg_lt| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|pos_div_gt| 0 (|pos_div_gt-1| |nil| 3237052399 ("" (LEMMA "pos_div_lt") (("" (SKOSIMP) (("" (INST?) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|pos_div_lt| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|neg_div_gt| 0 (|neg_div_gt-1| |nil| 3237052399 ("" (LEMMA "neg_div_lt") (("" (SKOSIMP) (("" (INST?) (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ((|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|neg_div_lt| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|both_sides_plus_gt1| 0 (|both_sides_plus_gt1-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL)) (|both_sides_plus_gt2| 0 (|both_sides_plus_gt2-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL)) (|both_sides_minus_gt1| 0 (|both_sides_minus_gt1-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL)) (|both_sides_minus_gt2| 0 (|both_sides_minus_gt2-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL)) (|both_sides_times_pos_gt1| 0 (|both_sides_times_pos_gt1-1| |nil| 3237052399 ("" (LEMMA "both_sides_times_pos_lt1") (("" (SKOSIMP) (("" (INST -1 "pz!1" "y!1" "x!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|both_sides_times_pos_lt1| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|both_sides_times_pos_gt2| 0 (|both_sides_times_pos_gt2-1| |nil| 3237052399 ("" (LEMMA "both_sides_times_pos_lt2") (("" (SKOSIMP) (("" (INST -1 "pz!1" "y!1" "x!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|both_sides_times_pos_lt2| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|both_sides_times_neg_gt1| 0 (|both_sides_times_neg_gt1-1| |nil| 3237052399 ("" (LEMMA "both_sides_times_neg_lt1") (("" (SKOSIMP) (("" (INST -1 "nz!1" "y!1" "x!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|both_sides_times_neg_lt1| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|both_sides_times_neg_gt2| 0 (|both_sides_times_neg_gt2-1| |nil| 3237052399 ("" (LEMMA "both_sides_times_neg_lt2") (("" (SKOSIMP) (("" (INST -1 "nz!1" "y!1" "x!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|both_sides_times_neg_lt2| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|both_sides_div_pos_gt1| 0 (|both_sides_div_pos_gt1-1| |nil| 3237052399 ("" (LEMMA "both_sides_div_pos_lt1") (("" (SKOSIMP) (("" (INST -1 "pz!1" "y!1" "x!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|both_sides_div_pos_lt1| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|both_sides_div_pos_gt2| 0 (|both_sides_div_pos_gt2-1| |nil| 3237052399 ("" (LEMMA "both_sides_div_pos_lt2") (("" (SKOSIMP) (("" (INST -1 "py!1" "px!1" "pz!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|both_sides_div_pos_lt2| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|both_sides_div_pos_gt3| 0 (|both_sides_div_pos_gt3-1| |nil| 3237052399 ("" (LEMMA "both_sides_div_pos_lt3") (("" (SKOSIMP) (("" (INST -1 "nz!1" "py!1" "px!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|npreal_div_posreal_is_npreal| APPLICATION-JUDGEMENT "npreal" |real_types| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|both_sides_div_pos_lt3| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|both_sides_div_neg_gt1| 0 (|both_sides_div_neg_gt1-1| |nil| 3237052399 ("" (LEMMA "both_sides_div_neg_lt1") (("" (SKOSIMP) (("" (INST -1 "nz!1" "y!1" "x!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|both_sides_div_neg_lt1| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|both_sides_div_neg_gt2| 0 (|both_sides_div_neg_gt2-1| |nil| 3237052399 ("" (LEMMA "both_sides_div_neg_lt2") (("" (SKOSIMP) (("" (INST -1 "ny!1" "nx!1" "pz!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|nnreal_div_negreal_is_npreal| APPLICATION-JUDGEMENT "npreal" |real_types| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|both_sides_div_neg_lt2| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|both_sides_div_neg_gt3| 0 (|both_sides_div_neg_gt3-1| |nil| 3237052399 ("" (LEMMA "both_sides_div_neg_lt3") (("" (SKOSIMP) (("" (INST -1 "ny!1" "nx!1" "nz!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|negreal_div_negreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|both_sides_div_neg_lt3| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|gt_plus_gt1| 0 (|gt_plus_gt1-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL)) (|gt_plus_gt2| 0 (|gt_plus_gt2-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL)) (|gt_minus_gt1| 0 (|gt_minus_gt1-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL)) (|gt_minus_gt2| 0 (|gt_minus_gt2-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL)) (|gt_times_gt_pos1| 0 (|gt_times_gt_pos1-1| |nil| 3237052399 ("" (LEMMA "lt_times_lt_pos1") (("" (SKOSIMP) (("" (INST -1 "nnw!1" "py!1" "z!1" "x!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|lt_times_lt_pos1| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|gt_times_gt_pos2| 0 (|gt_times_gt_pos2-1| |nil| 3237052399 ("" (LEMMA "lt_times_lt_pos2") (("" (SKOSIMP) (("" (INST -1 "nny!1" "pw!1" "z!1" "x!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|lt_times_lt_pos2| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|gt_div_gt_pos1_TCC1| 0 (|gt_div_gt_pos1_TCC1-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (/= CONST-DECL "boolean" |notequal| NIL)) NIL (|gt_div_gt_pos1| SUBTYPE "real_props.z" "nznum"))) (|gt_div_gt_pos1| 0 (|gt_div_gt_pos1-1| |nil| 3237052399 ("" (LEMMA "lt_div_lt_pos1") (("" (SKOSIMP) (("" (INST -1 "py!1" "pw!1" "z!1" "x!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|lt_div_lt_pos1| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|gt_div_gt_pos2_TCC1| 0 (|gt_div_gt_pos2_TCC1-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (/= CONST-DECL "boolean" |notequal| NIL)) NIL (|gt_div_gt_pos2| SUBTYPE "real_props.z" "nznum"))) (|gt_div_gt_pos2| 0 (|gt_div_gt_pos2-1| |nil| 3237052399 ("" (LEMMA "lt_div_lt_pos2") (("" (SKOSIMP) (("" (INST -1 "nny!1" "pw!1" "z!1" "x!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|lt_div_lt_pos2| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|gt_times_gt_neg1| 0 (|gt_times_gt_neg1-1| |nil| 3237052399 ("" (LEMMA "lt_times_lt_neg1") (("" (SKOSIMP) (("" (INST -1 "npz!1" "nx!1" "y!1" "w!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|npreal_times_npreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|lt_times_lt_neg1| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|gt_times_gt_neg2| 0 (|gt_times_gt_neg2-1| |nil| 3237052399 ("" (LEMMA "lt_times_lt_neg2") (("" (SKOSIMP) (("" (INST -1 "npx!1" "nz!1" "y!1" "w!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|npreal_times_npreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|lt_times_lt_neg2| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|gt_div_gt_neg1_TCC1| 0 (|gt_div_gt_neg1_TCC1-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (/= CONST-DECL "boolean" |notequal| NIL)) NIL (|gt_div_gt_neg1| SUBTYPE "real_props.w" "nznum"))) (|gt_div_gt_neg1| 0 (|gt_div_gt_neg1-1| |nil| 3237052399 ("" (LEMMA "lt_div_lt_neg1") (("" (SKOSIMP) (("" (INST -1 "nz!1" "nx!1" "y!1" "w!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|lt_div_lt_neg1| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|gt_div_gt_neg2_TCC1| 0 (|gt_div_gt_neg2_TCC1-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (/= CONST-DECL "boolean" |notequal| NIL)) NIL (|gt_div_gt_neg2| SUBTYPE "real_props.w" "nznum"))) (|gt_div_gt_neg2| 0 (|gt_div_gt_neg2-1| |nil| 3237052399 ("" (LEMMA "lt_div_lt_neg2") (("" (SKOSIMP) (("" (INST -1 "npx!1" "nz!1" "y!1" "w!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|lt_div_lt_neg2| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|total_ge| 0 (|total_ge-1| |nil| 3252308047 ("" (GRIND) NIL NIL) ((|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|reflexive?| CONST-DECL "bool" |relations| NIL) (|transitive?| CONST-DECL "bool" |relations| NIL) (|preorder?| CONST-DECL "bool" |orders| NIL) (|antisymmetric?| CONST-DECL "bool" |relations| NIL) (|partial_order?| CONST-DECL "bool" |orders| NIL) (|dichotomous?| CONST-DECL "bool" |orders| NIL) (|total_order?| CONST-DECL "bool" |orders| NIL)) SHOSTAK)) (|dich_ge| 0 (|dich_ge-1| |nil| 3237052399 ("" (TCC :DEFS !) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)) NIL)) (|zero_ge_zero| 0 (|zero_ge_zero-1| |nil| 3237052399 ("" (TCC :DEFS !) NIL NIL) NIL NIL)) (|neg_ge| 0 (|neg_ge-1| |nil| 3237052399 ("" (TCC :DEFS !) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL)) (|pos_times_ge| 0 (|pos_times_ge-1| |nil| 3237052399 ("" (LEMMA "pos_times_le") (("" (SKOSIMP) (("" (INST?) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|pos_times_le| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|neg_times_ge| 0 (|neg_times_ge-1| |nil| 3237052399 ("" (LEMMA "neg_times_le") (("" (SKOSIMP) (("" (INST?) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|neg_times_le| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|quotient_pos_ge| 0 (|quotient_pos_ge-1| |nil| 3237052399 ("" (LEMMA "quotient_pos_le") (("" (SKOSIMP) (("" (INST?) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|quotient_pos_le| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|quotient_neg_ge| 0 (|quotient_neg_ge-1| |nil| 3237052399 ("" (LEMMA "quotient_neg_le") (("" (SKOSIMP) (("" (GRIND) NIL NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|quotient_neg_le| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|pos_div_ge| 0 (|pos_div_ge-1| |nil| 3237052399 ("" (LEMMA "pos_div_le") (("" (SKOSIMP) (("" (INST?) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|pos_div_le| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|neg_div_ge| 0 (|neg_div_ge-1| |nil| 3237052399 ("" (LEMMA "neg_div_le") (("" (SKOSIMP) (("" (INST?) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|neg_div_le| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|div_mult_pos_ge1| 0 (|div_mult_pos_ge1-1| |nil| 3237052399 ("" (LEMMA "div_mult_pos_le2") (("" (SKOSIMP) (("" (INST?) (("" (INST?) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|div_mult_pos_le2| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|div_mult_pos_ge2| 0 (|div_mult_pos_ge2-1| |nil| 3237052399 ("" (LEMMA "div_mult_pos_le1") (("" (SKOSIMP) (("" (INST?) (("" (INST?) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|div_mult_pos_le1| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|div_mult_neg_ge1| 0 (|div_mult_neg_ge1-1| |nil| 3237052399 ("" (LEMMA "div_mult_neg_le2") (("" (SKOSIMP) (("" (INST?) (("" (INST?) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|div_mult_neg_le2| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|div_mult_neg_ge2| 0 (|div_mult_neg_ge2-1| |nil| 3237052399 ("" (LEMMA "div_mult_neg_le1") (("" (SKOSIMP) (("" (INST?) (("" (INST?) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|div_mult_neg_le1| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|both_sides_plus_ge1| 0 (|both_sides_plus_ge1-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL)) (|both_sides_plus_ge2| 0 (|both_sides_plus_ge2-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL)) (|both_sides_minus_ge1| 0 (|both_sides_minus_ge1-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL)) (|both_sides_minus_ge2| 0 (|both_sides_minus_ge2-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL)) (|both_sides_times_pos_ge1| 0 (|both_sides_times_pos_ge1-1| |nil| 3237052399 ("" (LEMMA "both_sides_times_pos_le1") (("" (SKOSIMP) (("" (INST -1 "pz!1" "y!1" "x!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|both_sides_times_pos_le1| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|both_sides_times_pos_ge2| 0 (|both_sides_times_pos_ge2-1| |nil| 3237052399 ("" (LEMMA "both_sides_times_pos_le2") (("" (SKOSIMP) (("" (INST -1 "pz!1" "y!1" "x!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|both_sides_times_pos_le2| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|both_sides_times_neg_ge1| 0 (|both_sides_times_neg_ge1-1| |nil| 3237052399 ("" (LEMMA "both_sides_times_neg_le1") (("" (SKOSIMP) (("" (INST -1 "nz!1" "y!1" "x!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|both_sides_times_neg_le1| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|both_sides_times_neg_ge2| 0 (|both_sides_times_neg_ge2-1| |nil| 3237052399 ("" (LEMMA "both_sides_times_neg_le2") (("" (SKOSIMP) (("" (INST -1 "nz!1" "y!1" "x!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|both_sides_times_neg_le2| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|both_sides_div_pos_ge1| 0 (|both_sides_div_pos_ge1-1| |nil| 3237052399 ("" (LEMMA "both_sides_div_pos_le1") (("" (SKOSIMP) (("" (INST -1 "pz!1" "y!1" "x!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|both_sides_div_pos_le1| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|both_sides_div_pos_ge2| 0 (|both_sides_div_pos_ge2-1| |nil| 3237052399 ("" (LEMMA "both_sides_div_pos_le2") (("" (SKOSIMP) (("" (INST -1 "py!1" "px!1" "pz!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|both_sides_div_pos_le2| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|both_sides_div_pos_ge3| 0 (|both_sides_div_pos_ge3-1| |nil| 3237052399 ("" (LEMMA "both_sides_div_pos_le3") (("" (SKOSIMP) (("" (INST -1 "nz!1" "py!1" "px!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|npreal_div_posreal_is_npreal| APPLICATION-JUDGEMENT "npreal" |real_types| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|both_sides_div_pos_le3| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|both_sides_div_neg_ge1| 0 (|both_sides_div_neg_ge1-1| |nil| 3237052399 ("" (LEMMA "both_sides_div_neg_le1") (("" (SKOSIMP) (("" (INST -1 "nz!1" "y!1" "x!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|both_sides_div_neg_le1| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|both_sides_div_neg_ge2| 0 (|both_sides_div_neg_ge2-1| |nil| 3237052399 ("" (LEMMA "both_sides_div_neg_le2") (("" (SKOSIMP) (("" (INST -1 "ny!1" "nx!1" "pz!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|nnreal_div_negreal_is_npreal| APPLICATION-JUDGEMENT "npreal" |real_types| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|both_sides_div_neg_le2| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|both_sides_div_neg_ge3| 0 (|both_sides_div_neg_ge3-1| |nil| 3237052399 ("" (LEMMA "both_sides_div_neg_le3") (("" (SKOSIMP) (("" (INST -1 "ny!1" "nx!1" "nz!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|negreal_div_negreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|both_sides_div_neg_le3| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|ge_plus_ge| 0 (|ge_plus_ge-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL)) (|ge_minus_ge| 0 (|ge_minus_ge-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL)) (|ge_times_ge_pos| 0 (|ge_times_ge_pos-1| |nil| 3237052399 ("" (LEMMA "le_times_le_pos") (("" (SKOSIMP) (("" (INST -1 "nny!1" "nnw!1" "z!1" "x!1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|le_times_le_pos| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|ge_div_ge_pos_TCC1| 0 (|ge_div_ge_pos_TCC1-1| |nil| 3237052399 ("" (TCC :DEFS EXPLICIT) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (/= CONST-DECL "boolean" |notequal| NIL)) NIL (|ge_div_ge_pos| SUBTYPE "real_props.z" "nznum"))) (|ge_div_ge_pos| 0 (|ge_div_ge_pos-1| |nil| 3237052399 ("" (LEMMA "le_div_le_pos") (("" (SKOSIMP) (("" (INST -1 "nny!1" "pw!1" "z!1" "x!1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|le_div_le_pos| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|ge_times_ge_neg| 0 (|ge_times_ge_neg-1| |nil| 3237052399 ("" (LEMMA "le_times_le_neg") (("" (SKOSIMP) (("" (INST -1 "npz!1" "npx!1" "y!1" "w!1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|npreal_times_npreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|le_times_le_neg| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|ge_div_ge_neg_TCC1| 0 (|ge_div_ge_neg_TCC1-1| |nil| 3237052399 ("" (TCC :DEFS EXPLICIT) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (/= CONST-DECL "boolean" |notequal| NIL)) NIL (|ge_div_ge_neg| SUBTYPE "real_props.w" "nznum"))) (|ge_div_ge_neg| 0 (|ge_div_ge_neg-1| |nil| 3237052399 ("" (LEMMA "le_div_le_neg") (("" (SKOSIMP*) (("" (INST -1 "npx!1" "nz!1" "y!1" "w!1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|le_div_le_neg| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|nonzero_times1| 0 (|nonzero_times1-1| |nil| 3237052399 ("" (LEMMA "zero_times3") (("" (SKOSIMP) (("" (INST?) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|zero_times3| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|nonzero_times2| 0 (|nonzero_times2-1| |nil| 3237052399 ("" (LEMMA "zero_times3") (("" (SKOSIMP) (("" (INST?) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|zero_times3| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|nonzero_times3| 0 (|nonzero_times3-1| |nil| 3237052399 ("" (LEMMA "zero_times3") (("" (SKOSIMP) (("" (INST?) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|zero_times3| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|eq1_gt| 0 (|eq1_gt-2| "" 3505059980 ("" (SKOSIMP) (("" (LEMMA "div_cancel3") (("" (INST -1 "y!1" "1" "x!1") (("1" (ASSERT) (("1" (HIDE -3) (("1" (REPLACE -1 :DIR RL) (("1" (HIDE -1) (("1" (LEMMA "div_mult_pos_ge2") (("1" (INST -1 "y!1" "1" "1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "zero_times3") (("2" (INST?) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|div_cancel3| FORMULA-DECL NIL |real_props| NIL) (|zero_times3| FORMULA-DECL NIL |real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|div_mult_pos_ge2| FORMULA-DECL NIL |real_props| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) NIL (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)) SHOSTAK) (|eq1_gt-1| |nil| 3237052399 ("" (SKOSIMP) (("" (LEMMA "div_cancel3") (("" (INST -1 "y!1" "1" "x!1") (("1" (ASSERT) (("1" (HIDE -3) (("1" (REPLACE -1 :DIR RL) (("1" (HIDE -1) (("1" (LEMMA "div_mult_pos_gt2") (("1" (INST -1 "y!1" "1" "1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "zero_times3") (("2" (INST?) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL)) (|eq1_ge| 0 (|eq1_ge-1| |nil| 3237052399 ("" (LEMMA "eq1_gt") (("" (SKOSIMP) (("" (CASE "x!1 = 1") (("1" (ASSERT) NIL NIL) ("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|eq1_gt| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|eqm1_gt| 0 (|eqm1_gt-1| |nil| 3237052399 ("" (SKOSIMP) (("" (LEMMA "eq1_gt") (("" (INST -1 "x!1" "-y!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|eq1_gt| FORMULA-DECL NIL |real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL)) (|eqm1_ge| 0 (|eqm1_ge-1| |nil| 3237052399 ("" (LEMMA "eq1_ge") (("" (SKOSIMP) (("" (INST -1 "x!1" "-y!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|eq1_ge| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|eqm1_lt| 0 (|eqm1_lt-1| |nil| 3237052399 ("" (SKOSIMP) (("" (LEMMA "eq1_gt") (("" (INST -1 "-x!1" "y!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|eq1_gt| FORMULA-DECL NIL |real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL)) (|eqm1_le| 0 (|eqm1_le-1| |nil| 3237052399 ("" (LEMMA "eq1_ge") (("" (SKOSIMP) (("" (INST -1 "-x!1" "y!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|eq1_ge| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|sqrt_1| 0 (|sqrt_1-1| |nil| 3237052399 ("" (SKOSIMP*) (("" (GROUND) (("" (CASE "abs(x!1)>1") (("1" (LEMMA "eq1_gt") (("1" (INST -1 "abs(x!1)" "abs(x!1)") (("1" (ASSERT) (("1" (EXPAND "abs" 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "div_mult_pos_ge1") (("2" (INST -1 "abs(x!1)" "1" "1") (("1" (GROUND) (("1" (LEMMA "eq1_ge") (("1" (INST -1 "1/abs(x!1)" "1/abs(x!1)") (("1" (ASSERT) (("1" (SPLIT) (("1" (CASE "abs(x!1) = 1") (("1" (ASSERT) (("1" (EXPAND "abs" -1) (("1" (LIFT-IF) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (ASSERT) (("2" (REWRITE "div_mult_pos_le1") (("2" (EXPAND "abs" 1) (("2" (LIFT-IF) (("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (CASE "x!1 = 0") (("1" (REPLACE -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "abs" 1) (("2" (LIFT-IF) (("2" (PROP) (("1" (REWRITE "div_times") (("1" (ASSERT) NIL NIL)) NIL) ("2" (REWRITE "div_times") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "x!1 = 0") (("1" (REPLACE -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "abs" 2) (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "x!1 = 0") (("1" (REPLACE -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "abs" 2) (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|div_mult_pos_ge1| FORMULA-DECL NIL |real_props| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|div_times| FORMULA-DECL NIL |real_props| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|odd_times_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|eq1_ge| FORMULA-DECL NIL |real_props| NIL) NIL (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|eq1_gt| FORMULA-DECL NIL |real_props| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL)) (|sqrt_1_lt| 0 (|sqrt_1_lt-1| |nil| 3237052399 ("" (SKOSIMP*) (("" (CASE-REPLACE "x!1 * x!1 - 1 < 0") (("1" (HIDE -2) (("1" (CASE-REPLACE "x!1 * x!1 - 1 = (x!1 + 1)*(x!1 - 1)") (("1" (HIDE -1) (("1" (LEMMA "pos_times_lt") (("1" (INST?) (("1" (ASSERT) (("1" (HIDE -1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ((* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (< CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|pos_times_lt| FORMULA-DECL NIL |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL)) (|sqrt_1_le| 0 (|sqrt_1_le-1| |nil| 3237052399 ("" (SKOSIMP*) (("" (CASE-REPLACE "x!1 * x!1 - 1 <= 0") (("1" (HIDE -2) (("1" (CASE-REPLACE "x!1 * x!1 - 1 = (x!1 + 1)*(x!1 - 1)") (("1" (HIDE -1) (("1" (LEMMA "neg_times_le") (("1" (INST?) (("1" (ASSERT) (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ((* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (<= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|neg_times_le| FORMULA-DECL NIL |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL)) (|idem_mult| 0 (|idem_mult-1| |nil| 3237052399 ("" (SKOSIMP*) (("" (GROUND) (("" (LEMMA "div_cancel3") (("" (INST -1 "x!1" "x!1" "x!1") (("" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|div_cancel3| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|product_1| 0 (|product_1-2| "Needed a :flush? t for some reason" 3299954096 ("" (SKOSIMP) (("" (CASE "i!1 = 0") (("1" (GRIND) NIL NIL) ("2" (CASE "j!1 = 0") (("1" (GRIND) NIL NIL) ("2" (LEMMA "eq1_ge") (("2" (INST?) (("2" (LEMMA "eq1_ge") (("2" (INST -1 "j!1" "i!1") (("2" (ASSERT) (("2" (ASSERT :FLUSH? T) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|eq1_ge| FORMULA-DECL NIL |real_props| NIL)) SHOSTAK) (|product_1-1| |nil| 3237052399 ("" (SKOSIMP) (("" (CASE "i!1 = 0") (("1" (GRIND) NIL NIL) ("2" (CASE "j!1 = 0") (("1" (GRIND) NIL NIL) ("2" (LEMMA "eq1_ge") (("2" (INST?) (("2" (LEMMA "eq1_ge") (("2" (INST -1 "j!1" "i!1") (("2" (ASSERT) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL)) (|product_m1| 0 (|product_m1-1| |nil| 3237052399 ("" (SKOSIMP) (("" (LEMMA "product_1") (("" (INST -1 "i!1" "-j!1") (("" (ASSERT) (("" (FLATTEN) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|product_1| FORMULA-DECL NIL |real_props| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL)) (|triangle| 0 (|triangle-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)) NIL)) (|abs_mult| 0 (|abs_mult-1| |nil| 3237052399 ("" (SKOSIMP) (("" (LEMMA "neg_times_lt") (("" (INST?) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|neg_times_lt| FORMULA-DECL NIL |real_props| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL)) (|abs_div| 0 (|abs_div-1| |nil| 3237052399 ("" (SKOSIMP*) (("" (LEMMA "pos_div_gt") (("" (INST?) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|pos_div_gt| FORMULA-DECL NIL |real_props| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|nonzero_abs_is_pos| APPLICATION-JUDGEMENT "{y: posreal | y >= x}" |real_defs| NIL) (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL)) (|abs_abs| 0 (|abs_abs-1| |nil| 3237052399 ("" (SKOSIMP*) (("" (EXPAND "abs") (("" (LIFT-IF) (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ((|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL)) (|abs_square| 0 (|abs_square-1| |nil| 3237052399 ("" (SKOSIMP*) (("" (EXPAND "abs") (("" (PROPAX) NIL NIL)) NIL)) NIL) ((|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL)) (|abs_limits| 0 (|abs_limits-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)) NIL)) (|axiom_of_archimedes| 0 (|axiom_of_archimedes-2| "" 3299954306 ("" (LEMMA "real_complete") (("" (INST -1 "{x:real|EXISTS (z : int) : z=x}") (("1" (GRIND :IF-MATCH NIL) (("1" (INST -4 "y!1 - 1") (("1" (REDUCE :IF-MATCH NIL) (("1" (INST - "s!1 + 1") (("1" (ASSERT) NIL NIL) ("2" (INST 1 "1 + s!1") (("2" (ASSERT) (("2" (LEMMA "int_plus_int_is_int") (("2" (INST?) (("2" (ASSERT) (("2" (LEMMA "rat_plus_rat_is_rat") (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REDUCE) NIL NIL)) NIL) ("2" (DELETE 2) (("2" (GRIND) (("2" (INST - "0") (("2" (ASSERT) (("2" (INST 1 "0") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) NIL (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|rat_plus_rat_is_rat| JUDGEMENT-TCC NIL |rationals| NIL) (|rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|int_plus_int_is_int| JUDGEMENT-TCC NIL |integers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) NIL (|member| CONST-DECL "bool" |sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|real_complete| FORMULA-DECL NIL |bounded_real_defs| NIL)) SHOSTAK) (|axiom_of_archimedes-1| |nil| 3237052399 ("" (LEMMA "real_complete") (("" (INST -1 "{x:real|EXISTS (z : int) : z=x}") (("1" (GRIND :IF-MATCH NIL) (("1" (INST -4 "y!1 - 1") (("1" (REDUCE :IF-MATCH NIL) (("1" (INST - "s!1 + 1") (("1" (ASSERT) NIL NIL) ("2" (LEMMA "int_plus_int_is_int") (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REDUCE) NIL NIL)) NIL) ("2" (DELETE 2) (("2" (GRIND) (("2" (INST - "0") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL)) (|archimedean| 0 (|archimedean-1| |nil| 3237052399 ("" (SKOLEM!) (("" (LEMMA "axiom_of_archimedes" ("x" "1/px!1")) (("" (SKOLEM!) (("" (ASSERT) (("" (INST + "i!1") (("" (REWRITE "div_mult_pos_lt1") (("" (REWRITE "div_mult_pos_lt1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|axiom_of_archimedes| FORMULA-DECL NIL |real_props| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|div_mult_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)) NIL)) (|real_lt_is_strict_total_order| 0 (|real_lt_is_strict_total_order-1| |nil| 3252221044 ("" (GRIND) NIL NIL) ((|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|irreflexive?| CONST-DECL "bool" |relations| NIL) (|transitive?| CONST-DECL "bool" |relations| NIL) (|strict_order?| CONST-DECL "bool" |orders| NIL) (|trichotomous?| CONST-DECL "bool" |orders| NIL) (|strict_total_order?| CONST-DECL "bool" |orders| NIL)) SHOSTAK (|real_lt_is_strict_total_order| SUBTYPE "reals.<" "(orders[real].strict_total_order?)"))) (|real_le_is_total_order| 0 (|real_le_is_total_order-1| |nil| 3252221044 ("" (GRIND) NIL NIL) ((|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|reflexive?| CONST-DECL "bool" |relations| NIL) (|transitive?| CONST-DECL "bool" |relations| NIL) (|preorder?| CONST-DECL "bool" |orders| NIL) (|antisymmetric?| CONST-DECL "bool" |relations| NIL) (|partial_order?| CONST-DECL "bool" |orders| NIL) (|dichotomous?| CONST-DECL "bool" |orders| NIL) (|total_order?| CONST-DECL "bool" |orders| NIL)) SHOSTAK (|real_le_is_total_order| SUBTYPE "reals.<=" "(orders[real].total_order?)"))) (|real_gt_is_strict_total_order| 0 (|real_gt_is_strict_total_order-1| |nil| 3252221044 ("" (GRIND) NIL NIL) ((|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|irreflexive?| CONST-DECL "bool" |relations| NIL) (|transitive?| CONST-DECL "bool" |relations| NIL) (|strict_order?| CONST-DECL "bool" |orders| NIL) (|trichotomous?| CONST-DECL "bool" |orders| NIL) (|strict_total_order?| CONST-DECL "bool" |orders| NIL)) SHOSTAK (|real_gt_is_strict_total_order| SUBTYPE "reals.>" "(orders[real].strict_total_order?)"))) (|real_ge_is_total_order| 0 (|real_ge_is_total_order-1| |nil| 3252221044 ("" (GRIND) NIL NIL) ((|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|reflexive?| CONST-DECL "bool" |relations| NIL) (|transitive?| CONST-DECL "bool" |relations| NIL) (|preorder?| CONST-DECL "bool" |orders| NIL) (|antisymmetric?| CONST-DECL "bool" |relations| NIL) (|partial_order?| CONST-DECL "bool" |orders| NIL) (|dichotomous?| CONST-DECL "bool" |orders| NIL) (|total_order?| CONST-DECL "bool" |orders| NIL)) SHOSTAK (|real_ge_is_total_order| SUBTYPE "reals.>=" "(orders[real].total_order?)"))))(|extra_real_props| (|pos_neg_split| 0 (|pos_neg_split-1| |nil| 3505061062 ("" (SKOSIMP*) (("" (INST 1 "abs(n0x!1)" "-abs(n0x!1)") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|nonzero_abs_is_pos| APPLICATION-JUDGEMENT "{y: posreal | y >= x}" |real_defs| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) NIL (< CONST-DECL "bool" |reals| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL)) NIL)) (|div_mult_pos_neg_lt1| 0 (|div_mult_pos_neg_lt1-1| |nil| 3505061062 ("" (AUTO-REWRITE-THEORY "real_props") (("" (GRIND) NIL NIL)) NIL) ((|div_mult_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|div_mult_neg_lt1| FORMULA-DECL NIL |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL)) (|div_mult_pos_neg_lt2| 0 (|div_mult_pos_neg_lt2-1| |nil| 3505061062 ("" (AUTO-REWRITE-THEORY "real_props") (("" (GRIND) NIL NIL)) NIL) ((|div_mult_pos_lt2| FORMULA-DECL NIL |real_props| NIL) (|div_mult_neg_lt2| FORMULA-DECL NIL |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL)) (|div_mult_pos_neg_le1| 0 (|div_mult_pos_neg_le1-1| |nil| 3505061062 ("" (AUTO-REWRITE-THEORY "real_props") (("" (GRIND) NIL NIL)) NIL) ((|div_mult_pos_le1| FORMULA-DECL NIL |real_props| NIL) (|div_mult_neg_le1| FORMULA-DECL NIL |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL)) (|div_mult_pos_neg_le2| 0 (|div_mult_pos_neg_le2-1| |nil| 3505061062 ("" (AUTO-REWRITE-THEORY "real_props") (("" (GRIND) NIL NIL)) NIL) ((|div_mult_pos_le2| FORMULA-DECL NIL |real_props| NIL) (|div_mult_neg_le2| FORMULA-DECL NIL |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL)) (|div_mult_pos_neg_gt1| 0 (|div_mult_pos_neg_gt1-1| |nil| 3505061062 ("" (AUTO-REWRITE-THEORY "real_props") (("" (SKOSIMP) (("" (PROP) (("1" (MULT-BY -2 "n0y!1") NIL NIL) ("2" (MULT-BY -1 "n0y!1" -) NIL NIL) ("3" (ASSERT) (("3" (LEMMA "div_mult_pos_ge2") (("3" (INST -1 "n0y!1" "x!1" "z!1") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (LEMMA "div_mult_neg_ge2") (("4" (INST -1 "n0y!1" "x!1" "z!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|div_mult_neg_ge2| FORMULA-DECL NIL |real_props| NIL) (|div_mult_pos_ge2| FORMULA-DECL NIL |real_props| NIL) (|both_sides_times_neg_gt1| FORMULA-DECL NIL |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (<= CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|both_sides_times_pos_gt1| FORMULA-DECL NIL |real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|div_cancel2| FORMULA-DECL NIL |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) NIL (> CONST-DECL "bool" |reals| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)) NIL)) (|div_mult_pos_neg_gt2| 0 (|div_mult_pos_neg_gt2-2| "" 3505092622 ("" (SKOSIMP) (("" (PROP) (("1" (LEMMA "div_mult_pos_ge1") (("1" (INST -1 "n0y!1" "x!1" "z!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (LEMMA "div_mult_neg_ge1") (("2" (INST -1 "n0y!1" "x!1" "z!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "div_mult_pos_ge1") (("3" (INST -1 "n0y!1" "x!1" "z!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (LEMMA "div_mult_neg_ge2") (("4" (INST -1 "n0y!1" "x!1" "z!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) NIL (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (>= CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|div_mult_pos_ge1| FORMULA-DECL NIL |real_props| NIL) (|div_mult_neg_ge1| FORMULA-DECL NIL |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|div_mult_neg_ge2| FORMULA-DECL NIL |real_props| NIL)) SHOSTAK) (|div_mult_pos_neg_gt2-1| |nil| 3505061062 ("" (AUTO-REWRITE-THEORY "real_props") (("" (GRIND) NIL NIL)) NIL) NIL NIL)) (|div_mult_pos_neg_ge1| 0 (|div_mult_pos_neg_ge1-1| |nil| 3505061062 ("" (AUTO-REWRITE-THEORY "real_props") (("" (GRIND) NIL NIL)) NIL) ((|div_mult_pos_ge1| FORMULA-DECL NIL |real_props| NIL) (|div_mult_neg_ge1| FORMULA-DECL NIL |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL)) (|div_mult_pos_neg_ge2| 0 (|div_mult_pos_neg_ge2-1| |nil| 3505061062 ("" (AUTO-REWRITE-THEORY "real_props") (("" (GRIND) NIL NIL)) NIL) ((|div_mult_pos_ge2| FORMULA-DECL NIL |real_props| NIL) (|div_mult_neg_ge2| FORMULA-DECL NIL |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL)) (|both_sides_times_pos_neg_lt1| 0 (|both_sides_times_pos_neg_lt1-1| |nil| 3505061062 ("" (AUTO-REWRITE-THEORY "real_props") (("" (GRIND) NIL NIL)) NIL) ((|both_sides_times_neg_lt1| FORMULA-DECL NIL |real_props| NIL) (|both_sides_times_pos_lt1| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|both_sides_times_pos_neg_lt2| 0 (|both_sides_times_pos_neg_lt2-1| |nil| 3505061062 ("" (AUTO-REWRITE-THEORY "real_props") (("" (GRIND) NIL NIL)) NIL) ((|both_sides_times_neg_lt2| FORMULA-DECL NIL |real_props| NIL) (|both_sides_times_pos_lt2| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|both_sides_times_pos_neg_le1| 0 (|both_sides_times_pos_neg_le1-1| |nil| 3505061062 ("" (AUTO-REWRITE-THEORY "real_props") (("" (GRIND) NIL NIL)) NIL) ((|both_sides_times_neg_le1| FORMULA-DECL NIL |real_props| NIL) (|both_sides_times_pos_le1| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|both_sides_times_pos_neg_le2| 0 (|both_sides_times_pos_neg_le2-1| |nil| 3505061062 ("" (AUTO-REWRITE-THEORY "real_props") (("" (GRIND) NIL NIL)) NIL) ((|both_sides_times_neg_le2| FORMULA-DECL NIL |real_props| NIL) (|both_sides_times_pos_le2| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|both_sides_times_pos_neg_gt1| 0 (|both_sides_times_pos_neg_gt1-1| |nil| 3505061062 ("" (AUTO-REWRITE-THEORY "real_props") (("" (GRIND) NIL NIL)) NIL) ((|both_sides_times_neg_gt1| FORMULA-DECL NIL |real_props| NIL) (|both_sides_times_pos_gt1| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|both_sides_times_pos_neg_gt2| 0 (|both_sides_times_pos_neg_gt2-1| |nil| 3505061062 ("" (AUTO-REWRITE-THEORY "real_props") (("" (GRIND) NIL NIL)) NIL) ((|both_sides_times_neg_gt2| FORMULA-DECL NIL |real_props| NIL) (|both_sides_times_pos_gt2| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|both_sides_times_pos_neg_ge1| 0 (|both_sides_times_pos_neg_ge1-1| |nil| 3505061062 ("" (AUTO-REWRITE-THEORY "real_props") (("" (GRIND) NIL NIL)) NIL) ((|both_sides_times_neg_ge1| FORMULA-DECL NIL |real_props| NIL) (|both_sides_times_pos_ge1| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|both_sides_times_pos_neg_ge2| 0 (|both_sides_times_pos_neg_ge2-1| |nil| 3505061062 ("" (AUTO-REWRITE-THEORY "real_props") (("" (GRIND) NIL NIL)) NIL) ((|both_sides_times_neg_ge2| FORMULA-DECL NIL |real_props| NIL) (|both_sides_times_pos_ge2| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|both_sides_div_pos_neg_lt1| 0 (|both_sides_div_pos_neg_lt1-1| |nil| 3505061062 ("" (AUTO-REWRITE-THEORY "real_props") (("" (GRIND) NIL NIL)) NIL) ((|both_sides_div_neg_lt1| FORMULA-DECL NIL |real_props| NIL) (|both_sides_div_pos_lt1| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|both_sides_div_pos_neg_lt2| 0 (|both_sides_div_pos_neg_lt2-1| |nil| 3505061062 ("" (AUTO-REWRITE-THEORY "real_props") (("" (GRIND) NIL NIL)) NIL) ((|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|both_sides_div_pos_lt2| FORMULA-DECL NIL |real_props| NIL) (|times_div2| FORMULA-DECL NIL |real_props| NIL) (|div_mult_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|div_mult_pos_lt2| FORMULA-DECL NIL |real_props| NIL) (|both_sides_times_neg_lt2| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|both_sides_div_pos_neg_lt3| 0 (|both_sides_div_pos_neg_lt3-1| |nil| 3505061062 ("" (AUTO-REWRITE-THEORY "real_props") (("" (GRIND) NIL NIL)) NIL) ((|both_sides_div_neg_lt3| FORMULA-DECL NIL |real_props| NIL) (|both_sides_div_neg_lt2| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|both_sides_div_pos_neg_le1| 0 (|both_sides_div_pos_neg_le1-1| |nil| 3505061062 ("" (AUTO-REWRITE-THEORY "real_props") (("" (GRIND) NIL NIL)) NIL) ((|both_sides_div_neg_le1| FORMULA-DECL NIL |real_props| NIL) (|both_sides_div_pos_le1| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|both_sides_div_pos_neg_le2| 0 (|both_sides_div_pos_neg_le2-1| |nil| 3505061062 ("" (AUTO-REWRITE-THEORY "real_props") (("" (GRIND) NIL NIL)) NIL) ((|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|both_sides_div_pos_le2| FORMULA-DECL NIL |real_props| NIL) (|times_div2| FORMULA-DECL NIL |real_props| NIL) (|div_mult_pos_le1| FORMULA-DECL NIL |real_props| NIL) (|div_mult_pos_le2| FORMULA-DECL NIL |real_props| NIL) (|both_sides_times_neg_le2| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|both_sides_div_pos_neg_le3| 0 (|both_sides_div_pos_neg_le3-1| |nil| 3505061062 ("" (AUTO-REWRITE-THEORY "real_props") (("" (GRIND) NIL NIL)) NIL) ((|both_sides_div_neg_le3| FORMULA-DECL NIL |real_props| NIL) (|both_sides_div_neg_le2| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|both_sides_div_pos_neg_gt1| 0 (|both_sides_div_pos_neg_gt1-1| |nil| 3505061062 ("" (AUTO-REWRITE-THEORY "real_props") (("" (GRIND) NIL NIL)) NIL) ((|both_sides_div_neg_gt1| FORMULA-DECL NIL |real_props| NIL) (|both_sides_div_pos_gt1| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|both_sides_div_pos_neg_gt2| 0 (|both_sides_div_pos_neg_gt2-2| "" 3717231822 ("" (SKOSIMP) (("" (LEMMA "both_sides_div_pos_neg_lt2") (("" (INST - "n0z!1" "py!1" " px!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|both_sides_div_pos_neg_lt2| FORMULA-DECL NIL |extra_real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK) (|both_sides_div_pos_neg_gt2-1| |nil| 3505061062 ("" (AUTO-REWRITE-THEORY "real_props") (("" (GRIND) NIL NIL)) NIL) NIL NIL)) (|both_sides_div_pos_neg_gt3| 0 (|both_sides_div_pos_neg_gt3-1| |nil| 3505061062 ("" (AUTO-REWRITE-THEORY "real_props") (("" (GRIND) NIL NIL)) NIL) ((|both_sides_div_neg_gt3| FORMULA-DECL NIL |real_props| NIL) (|both_sides_div_neg_gt2| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|both_sides_div_pos_neg_ge1| 0 (|both_sides_div_pos_neg_ge1-1| |nil| 3505061062 ("" (AUTO-REWRITE-THEORY "real_props") (("" (GRIND) NIL NIL)) NIL) ((|both_sides_div_neg_ge1| FORMULA-DECL NIL |real_props| NIL) (|both_sides_div_pos_ge1| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|both_sides_div_pos_neg_ge2| 0 (|both_sides_div_pos_neg_ge2-1| |nil| 3505061062 ("" (AUTO-REWRITE-THEORY "real_props") (("" (GRIND) NIL NIL)) NIL) ((|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|both_sides_div_pos_ge2| FORMULA-DECL NIL |real_props| NIL) (|times_div2| FORMULA-DECL NIL |real_props| NIL) (|div_mult_pos_ge1| FORMULA-DECL NIL |real_props| NIL) (|div_mult_pos_ge2| FORMULA-DECL NIL |real_props| NIL) (|both_sides_times_neg_ge2| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|both_sides_div_pos_neg_ge3| 0 (|both_sides_div_pos_neg_ge3-1| |nil| 3505061062 ("" (AUTO-REWRITE-THEORY "real_props") (("" (GRIND) NIL NIL)) NIL) ((|both_sides_div_neg_ge3| FORMULA-DECL NIL |real_props| NIL) (|both_sides_div_neg_ge2| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|both_sides_times1_imp| 0 (|both_sides_times1_imp-1| |nil| 3505061062 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)) NIL)) (|both_sides_times2_imp| 0 (|both_sides_times2_imp-1| |nil| 3505061062 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)) NIL)) (|both_sides_times_pos_le1_imp| 0 (|both_sides_times_pos_le1_imp-1| |nil| 3505061062 ("" (GRIND) (("" (CASE "nnw!1 = 0") (("1" (ASSERT) NIL NIL) ("2" (REWRITE "both_sides_times_pos_le1") NIL NIL)) NIL)) NIL) ((= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|both_sides_times_pos_le1| FORMULA-DECL NIL |real_props| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)) NIL)) (|both_sides_times_pos_le2_imp| 0 (|both_sides_times_pos_le2_imp-1| |nil| 3505061062 ("" (SKOSIMP*) (("" (CASE "nnw!1 = 0") (("1" (ASSERT) NIL NIL) ("2" (REWRITE "both_sides_times_pos_le2") NIL NIL)) NIL)) NIL) ((|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|both_sides_times_pos_le2| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|both_sides_times_neg_le1_imp| 0 (|both_sides_times_neg_le1_imp-1| |nil| 3505061062 ("" (SKOSIMP*) (("" (CASE "npw!1 = 0") (("1" (ASSERT) NIL NIL) ("2" (REWRITE "both_sides_times_neg_le1") NIL NIL)) NIL)) NIL) ((|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|both_sides_times_neg_le1| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|both_sides_times_neg_le2_imp| 0 (|both_sides_times_neg_le2_imp-1| |nil| 3505061062 ("" (SKOSIMP*) (("" (CASE "npw!1 = 0") (("1" (ASSERT) NIL NIL) ("2" (REWRITE "both_sides_times_neg_le2") NIL NIL)) NIL)) NIL) ((|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|both_sides_times_neg_le2| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|both_sides_times_pos_ge1_imp| 0 (|both_sides_times_pos_ge1_imp-1| |nil| 3505061062 ("" (SKOSIMP*) (("" (CASE "nnw!1 = 0") (("1" (ASSERT) NIL NIL) ("2" (REWRITE "both_sides_times_pos_ge1") NIL NIL)) NIL)) NIL) ((|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|both_sides_times_pos_ge1| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|both_sides_times_pos_ge2_imp| 0 (|both_sides_times_pos_ge2_imp-1| |nil| 3505061062 ("" (SKOSIMP*) (("" (CASE "nnw!1 = 0") (("1" (ASSERT) NIL NIL) ("2" (REWRITE "both_sides_times_pos_ge2") NIL NIL)) NIL)) NIL) ((|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|both_sides_times_pos_ge2| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|both_sides_times_neg_ge1_imp| 0 (|both_sides_times_neg_ge1_imp-1| |nil| 3505061062 ("" (SKOSIMP*) (("" (CASE "npw!1 = 0") (("1" (ASSERT) NIL NIL) ("2" (REWRITE "both_sides_times_neg_ge1") NIL NIL)) NIL)) NIL) ((|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|both_sides_times_neg_ge1| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|both_sides_times_neg_ge2_imp| 0 (|both_sides_times_neg_ge2_imp-1| |nil| 3505061062 ("" (SKOSIMP*) (("" (CASE "npw!1 = 0") (("1" (ASSERT) NIL NIL) ("2" (REWRITE "both_sides_times_neg_ge2") NIL NIL)) NIL)) NIL) ((|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|both_sides_times_neg_ge2| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|both_sides_times_pos_neg_le1_imp| 0 (|both_sides_times_pos_neg_le1_imp-1| |nil| 3505061062 ("" (AUTO-REWRITE-THEORY "real_props") (("" (GRIND) NIL NIL)) NIL) ((|both_sides_times_neg_le1| FORMULA-DECL NIL |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|both_sides_times_pos_le1| FORMULA-DECL NIL |real_props| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL)) (|both_sides_times_pos_neg_le2_imp| 0 (|both_sides_times_pos_neg_le2_imp-1| |nil| 3505061062 ("" (AUTO-REWRITE-THEORY "real_props") (("" (GRIND) NIL NIL)) NIL) ((|both_sides_times_neg_le2| FORMULA-DECL NIL |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|both_sides_times_pos_le2| FORMULA-DECL NIL |real_props| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL)) (|both_sides_times_pos_neg_ge1_imp| 0 (|both_sides_times_pos_neg_ge1_imp-1| |nil| 3505061062 ("" (AUTO-REWRITE-THEORY "real_props") (("" (GRIND) NIL NIL)) NIL) ((|both_sides_times_neg_ge1| FORMULA-DECL NIL |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|both_sides_times_pos_ge1| FORMULA-DECL NIL |real_props| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL)) (|both_sides_times_pos_neg_ge2_imp| 0 (|both_sides_times_pos_neg_ge2_imp-1| |nil| 3505061062 ("" (AUTO-REWRITE-THEORY "real_props") (("" (GRIND) NIL NIL)) NIL) ((|both_sides_times_neg_ge2| FORMULA-DECL NIL |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|both_sides_times_pos_ge2| FORMULA-DECL NIL |real_props| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL)) (|zero_times4| 0 (|zero_times4-1| |nil| 3505061062 ("" (SKOSIMP*) (("" (USE "zero_times3") (("" (GROUND) NIL NIL)) NIL)) NIL) ((|zero_times3| FORMULA-DECL NIL |real_props| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL)) (|times_div_cancel1| 0 (|times_div_cancel1-1| |nil| 3505061062 ("" (SKOSIMP*) (("" (ASSERT) NIL NIL)) NIL) ((|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL)) (|times_div_cancel2| 0 (|times_div_cancel2-1| |nil| 3505061062 ("" (SKOSIMP*) (("" (ASSERT) NIL NIL)) NIL) ((|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL)) (|div_mult_pos_gt1| 0 (|div_mult_pos_gt1-2| "" 3505095167 ("" (AUTO-REWRITE-THEORY "real_props") (("" (SKOSIMP) (("" (PROP) (("1" (MULT-BY -1 "py!1" +) NIL NIL) ("2" (LEMMA "div_mult_pos_neg_gt1") (("2" (INST -1 "py!1" "x!1" "z!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|div_mult_pos_neg_gt1| FORMULA-DECL NIL |extra_real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|both_sides_times_pos_gt1| FORMULA-DECL NIL |real_props| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|div_cancel2| FORMULA-DECL NIL |real_props| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK) (|div_mult_pos_gt1-1| |nil| 3505061062 ("" (AUTO-REWRITE-THEORY "real_props") (("" (GRIND) NIL NIL)) NIL) NIL NIL)) (|div_mult_pos_gt2| 0 (|div_mult_pos_gt2-2| "" 3505095229 ("" (SKOSIMP) (("" (PROP) (("1" (MULT-BY -1 "py!1" +) NIL NIL) ("2" (LEMMA "div_mult_pos_neg_gt2") (("2" (INST -1 "py!1" "x!1" "z!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|both_sides_times_pos_gt1| FORMULA-DECL NIL |real_props| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|div_cancel2| FORMULA-DECL NIL |real_props| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|div_mult_pos_neg_gt2| FORMULA-DECL NIL |extra_real_props| NIL)) SHOSTAK) (|div_mult_pos_gt2-1| |nil| 3505061062 ("" (AUTO-REWRITE-THEORY "real_props") (("" (GRIND) NIL NIL)) NIL) NIL NIL)) (|div_mult_neg_gt1| 0 (|div_mult_neg_gt1-2| "" 3505095500 ("" (SKOSIMP) (("" (PROP) (("1" (MULT-BY -1 "ny!1" -) NIL NIL) ("2" (LEMMA "div_mult_neg_le1") (("2" (INST -1 "ny!1" "x!1" "z!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|div_cancel2| FORMULA-DECL NIL |real_props| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|both_sides_times_neg_gt1| FORMULA-DECL NIL |real_props| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|div_mult_neg_le1| FORMULA-DECL NIL |real_props| NIL)) SHOSTAK) (|div_mult_neg_gt1-1| |nil| 3505061062 ("" (AUTO-REWRITE-THEORY "real_props") (("" (GRIND) NIL NIL)) NIL) NIL NIL)) (|div_mult_neg_gt2| 0 (|div_mult_neg_gt2-2| "" 3505095550 ("" (SKOSIMP) (("" (PROP) (("1" (MULT-BY -1 "ny!1" -) NIL NIL) ("2" (LEMMA "div_mult_neg_le2") (("2" (INST -1 "ny!1" "x!1" "z!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|both_sides_times_neg_gt1| FORMULA-DECL NIL |real_props| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|div_cancel2| FORMULA-DECL NIL |real_props| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|div_mult_neg_le2| FORMULA-DECL NIL |real_props| NIL)) SHOSTAK) (|div_mult_neg_gt2-1| |nil| 3505061062 ("" (AUTO-REWRITE-THEORY "real_props") (("" (GRIND) NIL NIL)) NIL) NIL NIL)) (|lt_cut| 0 (|lt_cut-1| |nil| 3505061062 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL)) (|le_cut| 0 (|le_cut-1| |nil| 3505061062 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL)) (|gt_cut| 0 (|gt_cut-1| |nil| 3505061062 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL)) (|ge_cut| 0 (|ge_cut-1| |nil| 3505061062 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL)) (|le_times_le_any1| 0 (|le_times_le_any1-1| |nil| 3505061062 ("" (SKOSIMP*) (("" (SPLIT) (("1" (FLATTEN) (("1" (SPLIT -3) (("1" (EXPAND "abs") (("1" (GROUND) (("1" (REWRITE "le_times_le_pos") NIL NIL) ("2" (LEMMA "le_times_le_pos") (("2" (INST -1 "-w!1" "-x!1" "z!1" "y!1") (("2" (GROUND) NIL NIL)) NIL)) NIL) ("3" (LEMMA "le_times_le_pos") (("3" (INST -1 "w!1" "x!1" "-z!1" "-y!1") (("3" (GROUND) NIL NIL)) NIL)) NIL) ("4" (REWRITE "le_times_le_neg") NIL NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (USE "neg_times_le") (("1" (LEMMA "pos_times_le") (("1" (INST -1 "y!1" "z!1") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "abs") (("2" (LEMMA "ge_times_ge_pos") (("2" (GROUND) (("1" (INST -3 "-z!1" "y!1" "w!1" "-x!1") (("1" (GROUND) NIL NIL)) NIL) ("2" (INST -3 "-z!1" "y!1" "-w!1" "x!1") (("2" (GROUND) NIL NIL)) NIL) ("3" (INST -3 "z!1" "-y!1" "w!1" "-x!1") (("3" (GROUND) NIL NIL)) NIL) ("4" (INST -3 "z!1" "-y!1" "-w!1" "x!1") (("4" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|le_times_le_pos| FORMULA-DECL NIL |real_props| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|le_times_le_neg| FORMULA-DECL NIL |real_props| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|pos_times_le| FORMULA-DECL NIL |real_props| NIL) (|neg_times_le| FORMULA-DECL NIL |real_props| NIL) (|ge_times_ge_pos| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|ge_times_ge_any1| 0 (|ge_times_ge_any1-1| |nil| 3505061062 ("" (SKOSIMP*) (("" (SPLIT) (("1" (FLATTEN) (("1" (SPLIT -3) (("1" (EXPAND "abs") (("1" (GROUND) (("1" (REWRITE "ge_times_ge_pos") NIL NIL) ("2" (LEMMA "ge_times_ge_pos") (("2" (INST -1 "-z!1" "-y!1" "w!1" "x!1") (("2" (GROUND) NIL NIL)) NIL)) NIL) ("3" (LEMMA "ge_times_ge_pos") (("3" (INST -1 "z!1" "y!1" "-w!1" "-x!1") (("3" (GROUND) NIL NIL)) NIL)) NIL) ("4" (REWRITE "ge_times_ge_neg") NIL NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (USE "pos_times_ge") (("1" (LEMMA "neg_times_ge") (("1" (INST -1 "y!1" "z!1") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "abs") (("2" (LEMMA "le_times_le_pos") (("2" (GROUND) (("1" (INST -3 "w!1" "-x!1" "-z!1" "y!1") (("1" (GROUND) NIL NIL)) NIL) ("2" (INST -3 "w!1" "-x!1" "z!1" "-y!1") (("2" (GROUND) NIL NIL)) NIL) ("3" (INST -3 "-w!1" "x!1" "-z!1" "y!1") (("3" (GROUND) NIL NIL)) NIL) ("4" (INST -3 "-w!1" "x!1" "z!1" "-y!1") (("4" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|ge_times_ge_pos| FORMULA-DECL NIL |real_props| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|ge_times_ge_neg| FORMULA-DECL NIL |real_props| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|neg_times_ge| FORMULA-DECL NIL |real_props| NIL) (|pos_times_ge| FORMULA-DECL NIL |real_props| NIL) (|le_times_le_pos| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|lt_times_lt_any1| 0 (|lt_times_lt_any1-1| |nil| 3505061062 ("" (SKOSIMP*) (("" (SPLIT) (("1" (LEMMA "pos_times_lt") (("1" (INST -1 "y!1" "z!1") (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT) (("1" (FLATTEN) (("1" (LEMMA "lt_times_lt_pos1") (("1" (LEMMA "lt_times_lt_pos2") (("1" (EXPAND "abs") (("1" (GROUND) (("1" (INST -8 "x!1" "w!1" "z!1" "y!1") (("1" (GROUND) NIL NIL)) NIL) ("2" (INST -7 "w!1" "x!1" "z!1" "y!1") (("2" (GROUND) NIL NIL)) NIL) ("3" (INST -6 "x!1" "w!1" "-z!1" "-y!1") (("3" (SMASH) NIL NIL)) NIL) ("4" (INST -5 "w!1" "x!1" "-z!1" "-y!1") (("4" (SMASH) NIL NIL)) NIL) ("5" (INST -6 "-x!1" "-w!1" "z!1" "y!1") (("5" (GROUND) NIL NIL)) NIL) ("6" (INST -5 "-w!1" "-x!1" "z!1" "y!1") (("6" (GROUND) NIL NIL)) NIL) ("7" (INST -4 "-x!1" "-w!1" "-z!1" "-y!1") (("7" (SMASH) NIL NIL)) NIL) ("8" (INST -3 "-w!1" "-x!1" "-z!1" "-y!1") (("8" (SMASH) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1 1) (("1" (USE "neg_times_lt") (("1" (LEMMA "pos_times_lt") (("1" (INST -1 "y!1" "z!1") (("1" (SMASH) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "gt_times_gt_pos1") (("2" (LEMMA "gt_times_gt_pos2") (("2" (EXPAND "abs") (("2" (GROUND) (("1" (INST -6 "-z!1" "y!1" "w!1" "-x!1") (("1" (GROUND) NIL NIL)) NIL) ("2" (INST -6 "-z!1" "y!1" "-w!1" "x!1") (("2" (GROUND) NIL NIL)) NIL) ("3" (SMASH) (("1" (INST -6 "y!1" "-z!1" "w!1" "-x!1") (("1" (GROUND) NIL NIL)) NIL) ("2" (USE "neg_times_lt") (("2" (GROUND) NIL NIL)) NIL)) NIL) ("4" (SMASH) (("1" (INST -6 "y!1" "-z!1" "-w!1" "x!1") (("1" (GROUND) NIL NIL)) NIL) ("2" (USE "neg_times_lt") (("2" (GROUND) NIL NIL)) NIL)) NIL) ("5" (SMASH) (("1" (INST -7 "z!1" "-y!1" "w!1" "-x!1") (("1" (GROUND) NIL NIL)) NIL) ("2" (USE "neg_times_lt") (("2" (GROUND) NIL NIL)) NIL)) NIL) ("6" (SMASH) (("1" (INST -7 "z!1" "-y!1" "-w!1" "x!1") (("1" (GROUND) NIL NIL)) NIL) ("2" (USE "neg_times_lt") (("2" (GROUND) NIL NIL)) NIL)) NIL) ("7" (SMASH) (("1" (INST -6 "-y!1" "z!1" "w!1" "-x!1") (("1" (GROUND) NIL NIL)) NIL) ("2" (USE "neg_times_lt") (("2" (GROUND) NIL NIL)) NIL)) NIL) ("8" (SMASH) (("1" (INST -6 "-y!1" "z!1" "-w!1" "x!1") (("1" (GROUND) NIL NIL)) NIL) ("2" (USE "neg_times_lt") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|pos_times_lt| FORMULA-DECL NIL |real_props| NIL) (|lt_times_lt_pos1| FORMULA-DECL NIL |real_props| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|lt_times_lt_pos2| FORMULA-DECL NIL |real_props| NIL) (|neg_times_lt| FORMULA-DECL NIL |real_props| NIL) (|gt_times_gt_pos2| FORMULA-DECL NIL |real_props| NIL) (|gt_times_gt_pos1| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|gt_times_gt_any1| 0 (|gt_times_gt_any1-1| |nil| 3505061062 ("" (SKOSIMP*) (("" (SPLIT) (("1" (LEMMA "pos_times_gt") (("1" (INST -1 "w!1" "x!1") (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT) (("1" (FLATTEN) (("1" (LEMMA "gt_times_gt_pos1") (("1" (LEMMA "gt_times_gt_pos2") (("1" (EXPAND "abs") (("1" (GROUND) (("1" (INST -8 "z!1" "y!1" "w!1" "x!1") (("1" (GROUND) NIL NIL)) NIL) ("2" (INST -7 "y!1" "z!1" "w!1" "x!1") (("2" (GROUND) NIL NIL)) NIL) ("3" (INST -6 "z!1" "y!1" "-w!1" "-x!1") (("3" (SMASH) NIL NIL)) NIL) ("4" (INST -5 "y!1" "z!1" "-w!1" "-x!1") (("4" (SMASH) NIL NIL)) NIL) ("5" (INST -6 "-z!1" "-y!1" "w!1" "x!1") (("5" (GROUND) NIL NIL)) NIL) ("6" (INST -5 "-y!1" "-z!1" "w!1" "x!1") (("6" (GROUND) NIL NIL)) NIL) ("7" (INST -4 "-z!1" "-y!1" "-w!1" "-x!1") (("7" (SMASH) NIL NIL)) NIL) ("8" (INST -3 "-y!1" "-z!1" "-w!1" "-x!1") (("8" (SMASH) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1 1) (("1" (USE "pos_times_gt") (("1" (LEMMA "neg_times_gt") (("1" (INST -1 "y!1" "z!1") (("1" (SMASH) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "lt_times_lt_pos1") (("2" (LEMMA "lt_times_lt_pos2") (("2" (EXPAND "abs") (("2" (GROUND) (("1" (INST -6 "-x!1" "w!1" "-z!1" "y!1") (("1" (GROUND) NIL NIL)) NIL) ("2" (INST -6 "-x!1" "w!1" "z!1" "-y!1") (("2" (GROUND) NIL NIL)) NIL) ("3" (SMASH) (("1" (INST -6 "w!1" "-x!1" "-z!1" "y!1") (("1" (GROUND) NIL NIL)) NIL) ("2" (LEMMA "neg_times_gt") (("2" (INST -1 "y!1" "z!1") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("4" (SMASH) (("1" (INST -6 "w!1" "-x!1" "z!1" "-y!1") (("1" (GROUND) NIL NIL)) NIL) ("2" (LEMMA "neg_times_gt") (("2" (INST -1 "y!1" "z!1") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("5" (SMASH) (("1" (INST -7 "x!1" "-w!1" "-z!1" "y!1") (("1" (GROUND) NIL NIL)) NIL) ("2" (LEMMA "neg_times_gt") (("2" (INST -1 "y!1" "z!1") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("6" (SMASH) (("1" (INST -7 "x!1" "-w!1" "z!1" "-y!1") (("1" (GROUND) NIL NIL)) NIL) ("2" (LEMMA "neg_times_gt") (("2" (INST -1 "y!1" "z!1") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("7" (SMASH) (("1" (INST -6 "-w!1" "x!1" "-z!1" "y!1") (("1" (GROUND) NIL NIL)) NIL) ("2" (LEMMA "neg_times_gt") (("2" (INST -1 "y!1" "z!1") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("8" (SMASH) (("1" (INST -6 "-w!1" "x!1" "z!1" "-y!1") (("1" (GROUND) NIL NIL)) NIL) ("2" (LEMMA "neg_times_gt") (("2" (INST -1 "y!1" "z!1") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|pos_times_gt| FORMULA-DECL NIL |real_props| NIL) (|gt_times_gt_pos1| FORMULA-DECL NIL |real_props| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|gt_times_gt_pos2| FORMULA-DECL NIL |real_props| NIL) (|neg_times_gt| FORMULA-DECL NIL |real_props| NIL) (|lt_times_lt_pos2| FORMULA-DECL NIL |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|lt_times_lt_pos1| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|le_times_le_any2| 0 (|le_times_le_any2-1| |nil| 3505061062 ("" (SKOSIMP*) (("" (LEMMA "gt_times_gt_any1") (("" (INST -1 "w!1" "x!1" "y!1" "z!1") (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ((|gt_times_gt_any1| FORMULA-DECL NIL |extra_real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL)) (|ge_times_ge_any2| 0 (|ge_times_ge_any2-1| |nil| 3505061062 ("" (SKOSIMP*) (("" (LEMMA "lt_times_lt_any1") (("" (INST -1 "w!1" "x!1" "y!1" "z!1") (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ((|lt_times_lt_any1| FORMULA-DECL NIL |extra_real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL)) (|lt_times_lt_any2| 0 (|lt_times_lt_any2-1| |nil| 3505061062 ("" (SKOSIMP*) (("" (LEMMA "ge_times_ge_any1") (("" (INST -1 "w!1" "x!1" "y!1" "z!1") (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ((|ge_times_ge_any1| FORMULA-DECL NIL |extra_real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL)) (|gt_times_gt_any2| 0 (|gt_times_gt_any2-1| |nil| 3505061062 ("" (SKOSIMP*) (("" (LEMMA "le_times_le_any1") (("" (INST -1 "w!1" "x!1" "y!1" "z!1") (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ((|le_times_le_any1| FORMULA-DECL NIL |extra_real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL)))(|extra_tegies| (|neg_mult| 0 (|neg_mult-1| |nil| 3505061119 ("" (GRIND) NIL NIL) ((|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL)) (|mult_neg| 0 (|mult_neg-1| |nil| 3505061119 ("" (GRIND) NIL NIL) ((|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL)) (|neg_add| 0 (|neg_add-1| |nil| 3505061119 ("" (GRIND) NIL NIL) ((|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL)) (|add_neg| 0 (|add_neg-1| |nil| 3505061119 ("" (GRIND) NIL NIL) ((|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL)) (|neg_div| 0 (|neg_div-1| |nil| 3505061119 ("" (GRIND) NIL NIL) ((|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL)) (|div_neg| 0 (|div_neg-1| |nil| 3505061119 ("" (GRIND) NIL NIL) ((|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL)) (|one_times| 0 (|one_times-1| |nil| 3505061119 ("" (GRIND) NIL NIL) NIL NIL)) (|neg_one_times| 0 (|neg_one_times-1| |nil| 3564901186 ("" (GRIND) NIL NIL) NIL SHOSTAK)) (|zero_div| 0 (|zero_div-1| |nil| 3505061119 ("" (GRIND) NIL NIL) NIL NIL)) (|neg_neg| 0 (|neg_neg-1| |nil| 3505061119 ("" (GRIND) NIL NIL) ((|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL)))(|rational_props| (|rational_pred_ax2| 0 (|rational_pred_ax2-1| |nil| 3243832709 ("" (SKOSIMP) (("" (LEMMA "rational_pred_ax") (("" (INST?) (("" (SKOSIMP) (("" (CASE "n0j!1 > 0") (("1" (INST 1 "i!1" "n0j!1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST 2 "-i!1" "-n0j!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|rational_pred_ax| FORMULA-DECL NIL |rational_props| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|nzint| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (> CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK)) (|density_positive| 0 (|density_positive-1| |nil| 3237052399 ("" (SKOSIMP) (("" (ASSERT) (("" (LEMMA "archimedean" ("px" "y!1 - x!1")) (("" (SKOLEM!) (("" (LEMMA "posreal_mult_closed" ("x" "y!1" "y" "n!1")) (("" (GROUND) (("" (LEMMA "wf_nat") (("" (EXPAND "well_founded?") (("" (INST -1 "LAMBDA (n : nat) : y!1 * n!1 <= n") (("" (REDUCE :IF-MATCH NIL) (("1" (AUTO-REWRITE "div_mult_pos_lt1" "div_mult_pos_lt2") (("1" (INST + "(y!2 - 1)/n!1") (("1" (ASSERT) (("1" (INST - "y!2 -1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "axiom_of_archimedes" ("x" "y!1 * n!1")) (("2" (SKOLEM!) (("2" (ASSERT) (("2" (INST + "i!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|div_mult_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|div_mult_pos_lt2| FORMULA-DECL NIL |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|axiom_of_archimedes| FORMULA-DECL NIL |real_props| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (<= CONST-DECL "bool" |reals| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (|posreal_mult_closed| FORMULA-DECL NIL |real_axioms| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|archimedean| FORMULA-DECL NIL |real_props| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL)) (|density| 0 (|density-1| |nil| 3237052399 ("" (LEMMA "density_positive") (("" (SKOSIMP) (("" (CASE "x!1 >= 0") (("1" (INST? -) (("1" (ASSERT) NIL NIL)) NIL) ("2" (LEMMA "axiom_of_archimedes" ("x" "-x!1")) (("2" (SKOSIMP) (("2" (INST -2 "i!1 + x!1" "i!1 + y!1") (("2" (ASSERT) (("2" (SKOSIMP) (("2" (INST 2 "r!1 - i!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|axiom_of_archimedes| FORMULA-DECL NIL |real_props| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|density_positive| FORMULA-DECL NIL |rational_props| NIL)) NIL)))(|integer_props| (|integer_pred_ax| 0 (|integer_pred_ax-1| |nil| 3237052399 ("" (SKOSIMP*) (("" (CASE "i!1 >= 0") (("1" (INST 1 "i!1") NIL NIL) ("2" (INST 2 "-i!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) NIL (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)) NIL)) (|div_simple| 0 (|div_simple-1| |nil| 3237052399 ("" (GRIND :IF-MATCH NIL) (("" (INST 2 "i!1/n0j!1") (("" (ASSERT) NIL NIL)) NIL)) NIL) ((/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzint| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)) NIL)) (|lub_nat_TCC1| 0 (|lub_nat_TCC1-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|extend| CONST-DECL "R" |extend| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL)) NIL (|lub_nat| SUBTYPE "extend[real, nat, bool, booleans.FALSE].extend(integer_props.N)" "(sets[real].nonempty?)"))) (|lub_nat| 0 (|lub_nat-2| "" 3299954571 ("" (INDUCT "m") (("1" (SKOSIMP*) (("1" (EXPAND "upper_bound?") (("1" (TYPEPRED "N!1") (("1" (EXPAND "nonempty?") (("1" (EXPAND "empty?") (("1" (SKOSIMP*) (("1" (EXPAND "member") (("1" (INST 1 "x!1") (("1" (EXPAND "least_upper_bound?") (("1" (SPLIT) (("1" (EXPAND "upper_bound?") (("1" (SKOSIMP*) (("1" (INST -2 "s!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (EXPAND "upper_bound?") (("2" (INST -1 "x!1") (("2" (EXPAND "extend") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST -1 "N!1") (("2" (ASSERT) (("2" (REPLACE 1) (("2" (ASSERT) (("2" (EXPAND "upper_bound?") (("2" (SKOSIMP*) (("2" (INST 2 "s!1") (("1" (EXPAND "least_upper_bound?") (("1" (SPLIT) (("1" (EXPAND "upper_bound?") (("1" (SKOSIMP*) (("1" (INST -1 "s!2") (("1" (ASSERT) (("1" (CASE "forall (i, j: int): i < j iff i + 1 <= j") (("1" (INST -1 "s!1" "s!2") (("1" (ASSERT) NIL NIL) ("2" (TYPEPRED "s!2") (("2" (EXPAND "extend") (("2" (PROP) NIL NIL)) NIL)) NIL) ("3" (TYPEPRED "s!1") (("3" (EXPAND "extend") (("3" (PROP) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (GROUND) (("2" (ASSERT :FLUSH? T) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (EXPAND "upper_bound?") (("2" (INST -1 "s!1") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "s!1") (("2" (EXPAND "extend") (("2" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKOSIMP) (("3" (SKOSIMP) (("3" (EXPAND "nonempty?") (("3" (EXPAND "empty?") (("3" (TYPEPRED "N!1") (("3" (EXPAND "nonempty?") (("3" (EXPAND "empty?") (("3" (SKOSIMP) (("3" (INST -3 "x!1") (("3" (EXPAND "member") (("3" (EXPAND "extend") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (SKOSIMP) (("4" (TYPEPRED "N!1") (("4" (EXPAND "nonempty?") (("4" (EXPAND "empty?") (("4" (SKOSIMP) (("4" (EXPAND "member") (("4" (INST -2 "x!1") (("4" (EXPAND "extend") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (<= CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) NIL (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL NIL (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) NIL NIL (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (FALSE CONST-DECL "bool" |booleans| NIL) (|extend| CONST-DECL "R" |extend| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL NIL (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK) (|lub_nat-1| |nil| 3237052399 ("" (INDUCT "m") (("1" (SKOSIMP*) (("1" (EXPAND "upper_bound?") (("1" (TYPEPRED "N!1") (("1" (EXPAND "nonempty?") (("1" (EXPAND "empty?") (("1" (SKOSIMP*) (("1" (EXPAND "member") (("1" (INST 1 "x!1") (("1" (EXPAND "least_upper_bound?") (("1" (SPLIT) (("1" (EXPAND "upper_bound?") (("1" (SKOSIMP*) (("1" (INST -2 "s!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (EXPAND "upper_bound?") (("2" (INST -1 "x!1") (("2" (EXPAND "extend") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST -1 "N!1") (("2" (ASSERT) (("2" (REPLACE 1) (("2" (ASSERT) (("2" (EXPAND "upper_bound?") (("2" (SKOSIMP*) (("2" (INST 2 "s!1") (("1" (EXPAND "least_upper_bound?") (("1" (SPLIT) (("1" (EXPAND "upper_bound?") (("1" (SKOSIMP*) (("1" (INST -1 "s!2") (("1" (ASSERT) (("1" (CASE "forall (i, j: int): i < j iff i + 1 <= j") (("1" (INST -1 "s!1" "s!2") (("1" (ASSERT) NIL NIL) ("2" (TYPEPRED "s!2") (("2" (EXPAND "extend") (("2" (PROP) NIL NIL)) NIL)) NIL) ("3" (TYPEPRED "s!1") (("3" (EXPAND "extend") (("3" (PROP) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (EXPAND "upper_bound?") (("2" (INST -1 "s!1") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "s!1") (("2" (EXPAND "extend") (("2" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKOSIMP) (("3" (SKOSIMP) (("3" (EXPAND "nonempty?") (("3" (EXPAND "empty?") (("3" (TYPEPRED "N!1") (("3" (EXPAND "nonempty?") (("3" (EXPAND "empty?") (("3" (SKOSIMP) (("3" (INST -3 "x!1") (("3" (EXPAND "member") (("3" (EXPAND "extend") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (SKOSIMP) (("4" (TYPEPRED "N!1") (("4" (EXPAND "nonempty?") (("4" (EXPAND "empty?") (("4" (SKOSIMP) (("4" (EXPAND "member") (("4" (INST -2 "x!1") (("4" (EXPAND "extend") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL)) (|lub_int_TCC1| 0 (|lub_int_TCC1-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|extend| CONST-DECL "R" |extend| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL)) NIL (|lub_int| SUBTYPE "extend[real, int, bool, booleans.FALSE].extend(integer_props.I)" "(sets[real].nonempty?)"))) (|lub_int| 0 (|lub_int-1| |nil| 3237052399 ("" (SKOSIMP*) (("" (TYPEPRED "I!1") (("" (EXPAND "nonempty?") (("" (EXPAND "empty?") (("" (SKOSIMP*) (("" (LEMMA "lub_nat") (("" (EXPAND "member") (("" (INST - "{n|I!1(n+x!1)}" "i!1-x!1") (("1" (PROP) (("1" (SKOSIMP*) (("1" (INST + "n!1+x!1") (("1" (ASSERT) (("1" (EXPAND "least_upper_bound?") (("1" (PROP) (("1" (EXPAND "upper_bound?") (("1" (SKOSIMP*) (("1" (ASSERT) (("1" (INST - "s!1-x!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (EXPAND "extend") (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (TYPEPRED "s!1") (("1" (EXPAND "extend") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "s!1") (("2" (EXPAND "extend") (("2" (PROP) (("1" (LEMMA "rat_minus_rat_is_rat") (("1" (INST?) NIL NIL)) NIL) ("2" (LEMMA "int_minus_int_is_int") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST - "y!1-x!1") (("2" (ASSERT) (("2" (EXPAND "upper_bound?") (("2" (SKOSIMP*) (("2" (INST?) (("2" (EXPAND "extend") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "upper_bound?") (("2" (SKOSIMP*) (("2" (TYPEPRED "s!1") (("2" (EXPAND "extend" -1) (("2" (PROP) (("2" (INST - "s!1+x!1") (("1" (ASSERT) NIL NIL) ("2" (EXPAND "extend" 1) (("2" (PROP) (("1" (LEMMA "rat_plus_rat_is_rat") (("1" (INST?) NIL NIL)) NIL) ("2" (LEMMA "int_plus_int_is_int") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "upper_bound?") (("2" (INST -2 "x!1") (("1" (ASSERT) NIL NIL) ("2" (EXPAND "extend") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "nonempty?") (("3" (EXPAND "empty?") (("3" (INST -1 "0") (("3" (EXPAND "member") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nonempty?| CONST-DECL "bool" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|lub_nat| FORMULA-DECL NIL |integer_props| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) NIL (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) NIL (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) NIL (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_plus_int_is_int| JUDGEMENT-TCC NIL |integers| NIL) (|rat_plus_rat_is_rat| JUDGEMENT-TCC NIL |rationals| NIL) NIL (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) NIL (|extend| CONST-DECL "R" |extend| NIL) (FALSE CONST-DECL "bool" |booleans| NIL) (|rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|rat_minus_rat_is_rat| JUDGEMENT-TCC NIL |rationals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|int_minus_int_is_int| JUDGEMENT-TCC NIL |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) NIL NIL NIL (|member| CONST-DECL "bool" |sets| NIL)) NIL)) (|glb_nat| 0 (|glb_nat-1| |nil| 3237052399 ("" (LEMMA "lub_int") (("" (SKOSIMP*) (("" (INST -1 "{i: nonpos_int | N!1(-i)}" "0") (("1" (GRIND :IF-MATCH NIL) (("1" (INST 1 "-j!1") (("1" (PROP) (("1" (SKOSIMP*) (("1" (INST -3 "-s!1") (("1" (ASSERT) NIL NIL) ("2" (TYPEPRED "s!1") (("2" (EXPAND "extend") (("2" (ASSERT) (("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) (("3" (LEMMA "minus_rat_is_rat") (("3" (INST -1 "s!1") NIL NIL)) NIL)) NIL) ("4" (LEMMA "minus_int_is_int") (("4" (INST -1 "s!1") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -3) (("2" (SKOSIMP*) (("2" (INST -4 "-y!1") (("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (SKOSIMP*) (("2" (INST -1 "-s!1") (("1" (ASSERT) NIL NIL) ("2" (TYPEPRED "s!1") (("2" (EXPAND "extend") (("2" (PROP) (("1" (LEMMA "minus_rat_is_rat") (("1" (INST -1 "s!1") NIL NIL)) NIL) ("2" (LEMMA "minus_int_is_int") (("2" (INST -1 "s!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "extend") (("2" (TYPEPRED "N!1") (("2" (EXPAND "nonempty?") (("2" (EXPAND "empty?") (("2" (SKOSIMP*) (("2" (INST -2 "-x!1") (("2" (EXPAND "member") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|empty?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) NIL NIL NIL NIL NIL (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|minus_rat_is_rat| JUDGEMENT-TCC NIL |rationals| NIL) (|rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|minus_int_is_int| JUDGEMENT-TCC NIL |integers| NIL) NIL (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nonpos_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (FALSE CONST-DECL "bool" |booleans| NIL) (|extend| CONST-DECL "R" |extend| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) NIL (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|lub_int| FORMULA-DECL NIL |integer_props| NIL)) NIL)) (|glb_int| 0 (|glb_int-1| |nil| 3237052399 ("" (LEMMA "lub_int") (("" (SKOSIMP*) (("" (INST -1 "{i: int | I!1(-i)}" "-i!1") (("1" (PROP) (("1" (SKOSIMP*) (("1" (GRIND :IF-MATCH NIL) (("1" (INST 1 "-j!1") (("1" (PROP) (("1" (SKOSIMP*) (("1" (INST -1 "-s!1") (("1" (ASSERT) NIL NIL) ("2" (HIDE -1 -2 2) (("2" (TYPEPRED "s!1") (("2" (EXPAND "extend") (("2" (ASSERT) (("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (LEMMA "minus_rat_is_rat") (("2" (INST -1 "s!1") NIL NIL)) NIL) ("3" (LEMMA "minus_int_is_int") (("3" (INST -1 "s!1") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST -3 "-y!1") (("2" (ASSERT) (("2" (SKOSIMP*) (("2" (INST -1 "-s!1") (("1" (ASSERT) NIL NIL) ("2" (HIDE -1 -2 2 3) (("2" (TYPEPRED "s!1") (("2" (EXPAND "extend") (("2" (ASSERT) (("2" (GROUND) (("1" (LEMMA "minus_rat_is_rat") (("1" (INST -1 "s!1") NIL NIL)) NIL) ("2" (LEMMA "minus_int_is_int") (("2" (INST -1 "s!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND :IF-MATCH NIL) (("2" (INST -4 "-s!1") (("1" (ASSERT) NIL NIL) ("2" (HIDE -1 -2 -3 2) (("2" (TYPEPRED "s!1") (("2" (EXPAND "extend") (("2" (GROUND) (("1" (LEMMA "minus_rat_is_rat") (("1" (INST -1 "s!1") NIL NIL)) NIL) ("2" (LEMMA "minus_int_is_int") (("2" (INST -1 "s!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (TYPEPRED "I!1") (("2" (GRIND :IF-MATCH NIL) (("2" (INST -3 "-x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|member| CONST-DECL "bool" |sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) NIL NIL NIL NIL (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) NIL (|extend| CONST-DECL "R" |extend| NIL) (FALSE CONST-DECL "bool" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|minus_int_is_int| JUDGEMENT-TCC NIL |integers| NIL) (|minus_rat_is_rat| JUDGEMENT-TCC NIL |rationals| NIL) (|rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) NIL NIL (TRUE CONST-DECL "bool" |booleans| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) NIL (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|lub_int| FORMULA-DECL NIL |integer_props| NIL)) NIL)))(|floor_ceil| (|floor_exists| 0 (|floor_exists-1| |nil| 3237052399 ("" (SKOSIMP*) (("" (LEMMA "lub_int") (("" (LEMMA "axiom_of_archimedes") (("" (INST?) (("" (SKOSIMP*) (("" (INST - "{i|i<=x!1}" "i!1") (("1" (PROP) (("1" (EXPAND "least_upper_bound?") (("1" (SKOLEM-TYPEPRED) (("1" (INST?) (("1" (PROP) (("1" (EXPAND "upper_bound?") (("1" (INST - "j!1+1") (("1" (ASSERT) NIL NIL) ("2" (EXPAND "extend") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "upper_bound?") (("2" (SKOLEM-TYPEPRED) (("2" (EXPAND "extend") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "nonempty_exists") (("2" (LEMMA "axiom_of_archimedes") (("2" (INST - "abs(x!1)") (("2" (SKOSIMP*) (("2" (INST + "-i!2") (("2" (EXPAND "abs") (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|lub_int| FORMULA-DECL NIL |integer_props| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) NIL (<= CONST-DECL "bool" |reals| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) NIL NIL (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (FALSE CONST-DECL "bool" |booleans| NIL) (|extend| CONST-DECL "R" |extend| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) NIL (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) NIL (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|nonempty_exists| FORMULA-DECL NIL |sets_lemmas| NIL) (|axiom_of_archimedes| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|ceiling_exists| 0 (|ceiling_exists-1| |nil| 3237052399 ("" (SKOSIMP*) (("" (CASE "integer?(x!1)") (("1" (INST?) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (EXPAND "integer?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "floor_exists") (("2" (INST?) (("2" (SKOSIMP*) (("2" (INST + "i!1+1") (("2" (ASSERT) (("2" (EXPAND "integer?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|integer?| CONST-DECL "bool" |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) NIL (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|floor_exists| FORMULA-DECL NIL |floor_ceil| NIL)) NIL)) (|floor_TCC1| 0 (|floor_TCC1-1| |nil| 3237052399 ("" (INST + "lambda x: choose( {i: integer | i <= x & x < 1 + i})") (("" (EXPAND "nonempty?") (("" (EXPAND "empty?") (("" (EXPAND "member") (("" (LEMMA "floor_exists") (("" (SKOSIMP*) (("" (INST?) (("" (SKOSIMP*) (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|member| CONST-DECL "bool" |sets| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|floor_exists| FORMULA-DECL NIL |floor_ceil| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|choose| CONST-DECL "(p)" |sets| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|floor| EXISTENCE "" "[x: real -> {i | booleans.&(reals.<=(floor_ceil.i, x), reals.<(x, (number_fields.+)(1, floor_ceil.i)))}]"))) (|fractional_TCC1| 0 (|fractional_TCC1-1| |nil| 3237052399 ("" (TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL (|fractional| SUBTYPE "(number_fields.-)(floor_ceil.x, floor_ceil.floor(floor_ceil.x))" "{x | booleans.&(reals.<=(0, floor_ceil.x), reals.<(floor_ceil.x, 1))}"))) (|ceiling_TCC1| 0 (|ceiling_TCC1-1| |nil| 3237052399 ("" (INST + "lambda x: choose( {i: integer | x <= i & i < x + 1})") (("" (EXPAND "nonempty?") (("" (EXPAND "empty?") (("" (EXPAND "member") (("" (LEMMA "ceiling_exists") (("" (SKOSIMP*) (("" (INST - "x!1") (("" (SKOSIMP*) (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|member| CONST-DECL "bool" |sets| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|ceiling_exists| FORMULA-DECL NIL |floor_ceil| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|choose| CONST-DECL "(p)" |sets| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (|ceiling| EXISTENCE "" "[x: real -> {i | booleans.&(reals.<=(x, floor_ceil.i), reals.<(floor_ceil.i, (number_fields.+)(1, x)))}]"))) (|floor_def| 0 (|floor_def-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL)) (|ceiling_def| 0 (|ceiling_def-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL)) (|floor_ceiling_reflect1| 0 (|floor_ceiling_reflect1-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL)) (|floor_ceiling_reflect2| 0 (|floor_ceiling_reflect2-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL)) (|nonneg_floor_is_nat| 0 (|nonneg_floor_is_nat-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL (|nonneg_floor_is_nat| SUBTYPE "floor_ceil.floor(floor_ceil.x)" "nat"))) (|nonneg_ceiling_is_nat| 0 (|nonneg_ceiling_is_nat-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL (|nonneg_ceiling_is_nat| SUBTYPE "floor_ceil.ceiling(floor_ceil.x)" "nat"))) (|floor_int| 0 (|floor_int-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL)) NIL)) (|ceiling_int| 0 (|ceiling_int-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL)) NIL)) (|floor_plus_int| 0 (|floor_plus_int-1| |nil| 3237052399 ("" (SKOLEM!) (("" (NAME "j!1" "floor(x!1+i!1)") (("" (NAME "k!1" "floor(x!1)") (("" (TYPEPRED "floor(i!1 + x!1)") (("" (TYPEPRED "floor(x!1)") (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|floor| CONST-DECL "{i | i <= x & x < i + 1}" |floor_ceil| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL)) (|ceiling_plus_int| 0 (|ceiling_plus_int-1| |nil| 3237052399 ("" (SKOLEM!) (("" (LEMMA "ceiling_def") (("" (INST-CP - "x!1+i!1") (("" (FLATTEN) (("" (NAME "j!1" "ceiling(x!1)") (("" (NAME "k!1" "ceiling(x!1+i!1)") (("" (REPLACE -1) (("" (REPLACE -2) (("" (INST - "x!1") (("" (REPLACE -2) (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|ceiling_def| FORMULA-DECL NIL |floor_ceil| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|ceiling| CONST-DECL "{i | x <= i & i < x + 1}" |floor_ceil| NIL) (< CONST-DECL "bool" |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL)) (|floor_ceiling_nonint| 0 (|floor_ceiling_nonint-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|integer?| CONST-DECL "bool" |integers| NIL)) NIL)) (|floor_ceiling_int| 0 (|floor_ceiling_int-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL)) NIL)) (|floor_neg| 0 (|floor_neg-1| |nil| 3237052399 ("" (SKOSIMP*) (("" (LIFT-IF) (("" (PROP) (("1" (REWRITE "floor_int") (("1" (REWRITE "floor_int") (("1" (ASSERT) NIL NIL) ("2" (REWRITE "closed_neg") (("1" (ASSERT) (("1" (EXPAND "integer?") (("1" (FLATTEN) (("1" (REWRITE "closed_neg") NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "integer?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "integer?") (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (EXPAND "integer?") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|floor_int| FORMULA-DECL NIL |floor_ceil| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|closed_neg| FORMULA-DECL NIL |rationals| NIL) (|integer?| CONST-DECL "bool" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|closed_neg| FORMULA-DECL NIL |integers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)) NIL)) (|real_parts| 0 (|real_parts-1| |nil| 3237052399 ("" (EXPAND "fractional") (("" (PROPAX) NIL NIL)) NIL) ((|fractional| CONST-DECL "{x | 0 <= x & x < 1}" |floor_ceil| NIL)) NIL)) (|floor_plus| 0 (|floor_plus-2| "" 3237078783 ("" (SKOSIMP) (("" (EXPAND "fractional") (("" (LEMMA "floor_plus_int") (("" (INST -1 "-1 * floor(x!1) - floor(y!1)" "x!1 + y!1") (("" (REPLACE -1) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|fractional| CONST-DECL "{x | 0 <= x & x < 1}" |floor_ceil| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|floor| CONST-DECL "{i | i <= x & x < i + 1}" |floor_ceil| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|floor_plus_int| FORMULA-DECL NIL |floor_ceil| NIL)) SHOSTAK) (|floor_plus-1| |nil| 3237052399 ("" (SKOLEM!) (("" (EXPAND "fractional") (("" (ASSERT) NIL NIL)) NIL)) NIL) NIL NIL)) (|ceiling_plus| 0 (|ceiling_plus-1| |nil| 3237052399 ("" (SKOLEM!) (("" (EXPAND "fractional") (("" (LEMMA "ceiling_plus_int") (("" (INST-CP -1 "-floor(x!1) - floor(y!1)" "x!1 + y!1") (("" (REPLACE -2) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|fractional| CONST-DECL "{x | 0 <= x & x < 1}" |floor_ceil| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|floor| CONST-DECL "{i | i <= x & x < i + 1}" |floor_ceil| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|ceiling_plus_int| FORMULA-DECL NIL |floor_ceil| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL)) (|floor_split| 0 (|floor_split-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL)) (|floor_within_1| 0 (|floor_within_1-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL)) (|ceiling_within_1| 0 (|ceiling_within_1-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL)) (|floor_val| 0 (|floor_val-2| "" 3299954653 ("" (GRIND :IF-MATCH NIL) (("" (TYPEPRED "floor(i!1/j!1)") (("" (CASE "j!1 > 0") (("1" (CASE "i!1/j!1 >= k!1" "i!1/j!1 < k!1 + 1") (("1" (NAME-REPLACE "q" "i!1/j!1") (("1" (HIDE -3 -6 -7 -8 -9 1) (("1" (ASSERT) (("1" (ASSERT :FLUSH? T) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE -1 -2 -3 -4 -5 -6 -7 2 3) (("2" (ASSERT) (("2" (USE "div_mult_pos_lt1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -1 -2 -3 -4 -5 -7 2 3) (("3" (USE "div_mult_pos_ge1") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|floor| CONST-DECL "{i | i <= x & x < i + 1}" |floor_ceil| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (>= CONST-DECL "bool" |reals| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|div_mult_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|div_mult_pos_ge1| FORMULA-DECL NIL |real_props| NIL) (> CONST-DECL "bool" |reals| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonzero_integer| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) SHOSTAK) (|floor_val-1| |nil| 3237052399 ("" (GRIND :IF-MATCH NIL) (("" (TYPEPRED "floor(i!1/j!1)") (("" (CASE "j!1 > 0") (("1" (CASE "i!1/j!1 >= k!1" "i!1/j!1 < k!1 + 1") (("1" (NAME-REPLACE "q" "i!1/j!1") (("1" (HIDE -3 -6 -7 -8 -9 1) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE -1 -2 -3 -4 -5 -6 -7 2 3) (("2" (ASSERT) (("2" (USE "div_mult_pos_lt1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -1 -2 -3 -4 -5 -7 2 3) (("3" (USE "div_mult_pos_ge1") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) NIL NIL)) (|floor_small| 0 (|floor_small-1| |nil| 3237052399 ("" (SKOSIMP) (("" (LIFT-IF) (("" (PROP) (("1" (CASE "i!1/j!1 < 1") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (CASE "(j!1 - i!1)/j!1 > 0") (("1" (ASSERT) NIL NIL) ("2" (GRIND) (("1" (USE "pos_div_gt") (("1" (ASSERT) NIL NIL)) NIL) ("2" (USE "pos_div_gt") (("2" (ASSERT) NIL NIL)) NIL) ("3" (USE "pos_div_gt") (("3" (ASSERT) NIL NIL)) NIL) ("4" (USE "pos_div_gt") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "floor(i!1/j!1)") (("2" (CASE "i!1/j!1 >= -1") (("1" (ASSERT) NIL NIL) ("2" (HIDE -1 -2 2 3) (("2" (CASE "(i!1 + j!1)/j!1 >= 0") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (GRIND :IF-MATCH NIL) (("1" (USE "pos_div_ge") (("1" (ASSERT) NIL NIL)) NIL) ("2" (USE "pos_div_ge") (("2" (ASSERT) NIL NIL)) NIL) ("3" (USE "pos_div_ge") (("3" (ASSERT) NIL NIL)) NIL) ("4" (USE "pos_div_ge") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|floor| CONST-DECL "{i | i <= x & x < i + 1}" |floor_ceil| NIL) (|pos_div_ge| FORMULA-DECL NIL |real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonzero_integer| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (> CONST-DECL "bool" |reals| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|pos_div_gt| FORMULA-DECL NIL |real_props| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nzint_abs_is_pos| APPLICATION-JUDGEMENT "{j: posint | j >= i}" |real_defs| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}" |real_defs| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)) NIL)) (|floor_eq_0| 0 (|floor_eq_0-1| |nil| 3237052399 ("" (SKOSIMP) (("" (TYPEPRED "floor(x!1)") (("" (ASSERT) NIL NIL)) NIL)) NIL) ((|floor| CONST-DECL "{i | i <= x & x < i + 1}" |floor_ceil| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (< CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL)) (|fractional_plus| 0 (|fractional_plus-1| |nil| 3307951383 ("" (SKOSIMP*) (("" (LEMMA "floor_plus" ("x" "x!1" "y" "y!1")) (("" (EXPAND "fractional" 1 1) (("" (REPLACE -1 1) (("" (LEMMA "real_parts" ("x" "fractional(x!1) + fractional(y!1)")) (("" (HIDE -2) (("" (LEMMA "real_parts" ("x" "x!1")) (("" (LEMMA "real_parts" ("x" "y!1")) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|floor_plus| FORMULA-DECL NIL |floor_ceil| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (< CONST-DECL "bool" |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|real_parts| FORMULA-DECL NIL |floor_ceil| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|fractional| CONST-DECL "{x | 0 <= x & x < 1}" |floor_ceil| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK)) (|floor_div| 0 (|floor_div-1| |nil| 3307951426 ("" (SKOSIMP*) (("" (LEMMA "floor_def" ("x" "x!1/py!1")) (("" (FLATTEN -1) (("" (SPLIT 1) (("1" (ASSERT) (("1" (FLATTEN) (("1" (REPLACE -1) (("1" (REWRITE "div_mult_pos_le2" -2) (("1" (REWRITE "div_mult_pos_lt1" -3) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (LEMMA "trich_lt" ("x" "floor(x!1 / py!1)" "y" "i!1")) (("2" (REWRITE "div_mult_pos_le2" -4) (("2" (REWRITE "div_mult_pos_lt1" -5) (("2" (SPLIT -1) (("1" (LEMMA "both_sides_times_pos_le1" ("y" "i!1" "x" "floor(x!1 / py!1)+1" "pz" "py!1")) (("1" (ASSERT) NIL NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (LEMMA "both_sides_times_pos_le1" ("x" "i!1+1" "y" "floor(x!1 / py!1)" "pz" "py!1")) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|floor_def| FORMULA-DECL NIL |floor_ceil| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|div_mult_pos_le2| FORMULA-DECL NIL |real_props| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|div_mult_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|trich_lt| FORMULA-DECL NIL |real_props| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|floor| CONST-DECL "{i | i <= x & x < i + 1}" |floor_ceil| NIL) (|both_sides_times_pos_le1| FORMULA-DECL NIL |real_props| NIL)) SHOSTAK)) (|floor_0| 0 (|floor_0-1| |nil| 3307951470 ("" (SKOSIMP*) (("" (LEMMA "floor_div" ("x" "x!1" "py" "1" "i" "0")) (("" (REPLACE -1 1) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|floor_div| FORMULA-DECL NIL |floor_ceil| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|odd_times_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) SHOSTAK)))(|exponentiation| (|expt_TCC1| 0 (|expt_TCC1-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|expt| SUBTYPE "(number_fields.-)(exponentiation.n, 1)" "nat"))) (|expt_TCC2| 0 (|expt_TCC2-1| |nil| 3237052399 ("" (GRIND) NIL NIL) NIL NIL (|expt| TERMINATION "exponentiation.expt(exponentiation.r, (number_fields.-)(exponentiation.n, 1))" "NIL"))) (|expt_pos_aux| 0 (|expt_pos_aux-1| |nil| 3237052399 ("" (INDUCT "n") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP*) (("2" (EXPAND "expt" +) (("2" (INST?) (("2" (REWRITE "pos_times_gt") NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|pos_times_gt| FORMULA-DECL NIL |real_props| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL)) (|expt_nonzero_aux| 0 (|expt_nonzero_aux-1| |nil| 3237052399 ("" (INDUCT "n") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP*) (("2" (EXPAND "expt" -2) (("2" (INST?) (("2" (REWRITE "zero_times3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|zero_times3| FORMULA-DECL NIL |real_props| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL)) (|nnreal_expt| 0 (|nnreal_expt-1| |nil| 3237052399 ("" (INDUCT "n") (("1" (SKOSIMP) (("1" (EXPAND "expt") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (EXPAND "expt" +) (("2" (INST -1 "x!1") (("2" (ASSERT) (("2" (LEMMA "pos_times_ge") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|pos_times_ge| FORMULA-DECL NIL |real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL (|nnreal_expt| SUBTYPE "exponentiation.expt(exponentiation.x, exponentiation.n)" "nnreal"))) (|posreal_expt| 0 (|posreal_expt-1| |nil| 3237052399 ("" (INDUCT "n") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP*) (("2" (INST -1 "x!1") (("2" (EXPAND "expt" +) (("2" (ASSERT) (("2" (LEMMA "pos_times_gt") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|pos_times_gt| FORMULA-DECL NIL |real_props| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|nnreal_expt| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL (|posreal_expt| SUBTYPE "exponentiation.expt(exponentiation.x, exponentiation.n)" "posreal"))) (|nzreal_expt| 0 (|nzreal_expt-1| |nil| 3237052399 ("" (INDUCT "n") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP*) (("2" (EXPAND "expt" -2) (("2" (INST -1 "x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL (|nzreal_expt| SUBTYPE "exponentiation.expt(exponentiation.x, exponentiation.n)" "nzreal"))) (|rat_expt| 0 (|rat_expt-1| |nil| 3237052399 ("" (INDUCT "n") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP*) (("2" (INST -1 "x!1") (("2" (EXPAND "expt" +) (("2" (LEMMA "rat_times_rat_is_rat") (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) NIL NIL (|rat_times_rat_is_rat| JUDGEMENT-TCC NIL |rationals| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL (|rat_expt| SUBTYPE "exponentiation.expt(exponentiation.x, exponentiation.n)" "rat"))) (|nnrat_expt| 0 (|nnrat_expt-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nnrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|nnreal_expt| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (|rat_expt| APPLICATION-JUDGEMENT "rat" |exponentiation| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL (|nnrat_expt| SUBTYPE "exponentiation.expt(exponentiation.x, exponentiation.n)" "nnrat"))) (|posrat_expt| 0 (|posrat_expt-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (> CONST-DECL "bool" |reals| NIL) (|posrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|posreal_expt| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|nnrat_expt| APPLICATION-JUDGEMENT "nnrat" |exponentiation| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL (|posrat_expt| SUBTYPE "exponentiation.expt(exponentiation.x, exponentiation.n)" "posrat"))) (|int_expt| 0 (|int_expt-1| |nil| 3237052399 ("" (INDUCT "n") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP*) (("2" (INST -1 "x!1") (("2" (EXPAND "expt" +) (("2" (LEMMA "int_times_int_is_int") (("2" (INST -1 "x!1" "expt(x!1, j!1)") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) NIL NIL (|int_times_int_is_int| JUDGEMENT-TCC NIL |integers| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|rat_expt| APPLICATION-JUDGEMENT "rat" |exponentiation| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL (|int_expt| SUBTYPE "exponentiation.expt(exponentiation.x, exponentiation.n)" "int"))) (|nat_expt| 0 (|nat_expt-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nnrat_expt| APPLICATION-JUDGEMENT "nnrat" |exponentiation| NIL) (|int_expt| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL (|nat_expt| SUBTYPE "exponentiation.expt(exponentiation.x, exponentiation.n)" "nat"))) (|posnat_expt| 0 (|posnat_expt-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posrat_expt| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|nat_expt| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL (|posnat_expt| SUBTYPE "exponentiation.expt(exponentiation.x, exponentiation.n)" "posnat"))) (|caret_TCC1| 0 (|caret_TCC1-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|caret| SUBTYPE "(number_fields.-)(exponentiation.i)" "nat"))) (|caret_TCC2| 0 (|caret_TCC2-1| |nil| 3237052399 ("" (SKOLEM!) (("" (TYPEPRED "i!1") (("" (REWRITE "expt_nonzero_aux") NIL NIL)) NIL)) NIL) ((|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|expt_nonzero_aux| FORMULA-DECL NIL |exponentiation| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|caret| SUBTYPE "exponentiation.expt(exponentiation.r, (number_fields.-)(exponentiation.i))" "nznum"))) (|expt_pos_TCC1| 0 (|expt_pos_TCC1-1| |nil| 3237052399 ("" (TCC :DEFS !) NIL NIL) NIL NIL (|expt_pos| SUBTYPE "exponentiation.i" "{i: integers.int | booleans.OR(exponentiation.px /= 0, reals.>=(i, 0))}"))) (|expt_pos| 0 (|expt_pos-1| |nil| 3237052399 ("" (SKOSIMP*) (("" (EXPAND "^") (("" (LIFT-IF) (("" (PROP) (("1" (REWRITE "expt_pos_aux") NIL NIL) ("2" (REWRITE "quotient_pos_gt") (("2" (REWRITE "expt_pos_aux") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((^ CONST-DECL "real" |exponentiation| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|expt_pos_aux| FORMULA-DECL NIL |exponentiation| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|quotient_pos_gt| FORMULA-DECL NIL |real_props| NIL) (|posreal_expt| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL)) (|expt_nonzero_TCC1| 0 (|expt_nonzero_TCC1-1| |nil| 3237052399 ("" (GRIND) NIL NIL) NIL NIL (|expt_nonzero| SUBTYPE "exponentiation.i" "{i: integers.int | booleans.OR(exponentiation.n0x /= 0, reals.>=(i, 0))}"))) (|expt_nonzero| 0 (|expt_nonzero-1| |nil| 3237052399 ("" (SKOSIMP*) (("" (EXPAND "^") (("" (LIFT-IF) (("" (PROP) (("1" (LEMMA "expt_nonzero_aux") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (LEMMA "inv_ne_0") (("2" (INST?) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((^ CONST-DECL "real" |exponentiation| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) NIL (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|nzreal_expt| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|expt_nonzero_aux| FORMULA-DECL NIL |exponentiation| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|inv_ne_0| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|nnreal_exp| 0 (|nnreal_exp-1| |nil| 3237052399 ("" (SKOLEM-TYPEPRED) (("" (EXPAND "^") (("" (LIFT-IF) (("" (SPLIT 1) (("1" (FLATTEN) (("1" (CASE-REPLACE "x!1 = 0") (("1" (EXPAND "expt") (("1" (LIFT-IF) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (USE "expt_pos_aux") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CASE-REPLACE "x!1 = 0") (("1" (EXPAND "expt") (("1" (LIFT-IF) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (USE "expt_pos_aux") (("1" (LEMMA "quotient_pos_gt") (("1" (INST -1 "expt(x!1, -i!1)") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((^ CONST-DECL "real" |exponentiation| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|nat_expt| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|nnreal_expt| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (|expt_pos_aux| FORMULA-DECL NIL |exponentiation| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (> CONST-DECL "bool" |reals| NIL) NIL NIL (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nzrat_div_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|quotient_pos_gt| FORMULA-DECL NIL |real_props| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL (|nnreal_exp| SUBTYPE "exponentiation.^(exponentiation.x, exponentiation.i)" "nnreal"))) (|posreal_exp| 0 (|posreal_exp-1| |nil| 3237052399 ("" (SKOLEM-TYPEPRED) (("" (EXPAND "^") (("" (LIFT-IF) (("" (PROP) (("1" (USE "expt_pos_aux") NIL NIL) ("2" (USE "expt_pos_aux") (("1" (LEMMA "quotient_pos_gt") (("1" (INST -1 "expt(x!1, -i!1)") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((^ CONST-DECL "real" |exponentiation| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) NIL (|expt_pos_aux| FORMULA-DECL NIL |exponentiation| NIL) (|quotient_pos_gt| FORMULA-DECL NIL |real_props| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|posreal_expt| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL (|posreal_exp| SUBTYPE "exponentiation.^(exponentiation.x, exponentiation.i)" "posreal"))) (|nzreal_exp| 0 (|nzreal_exp-1| |nil| 3237052399 ("" (SKOSIMP*) (("" (EXPAND "^") (("" (LIFT-IF) (("" (PROP) (("1" (LEMMA "nzreal_expt") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (LEMMA "nzreal_expt") (("2" (INST?) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((^ CONST-DECL "real" |exponentiation| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) NIL (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|nzreal_expt| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|nzreal_expt| JUDGEMENT-TCC NIL |exponentiation| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL)) NIL (|nzreal_exp| SUBTYPE "exponentiation.^(exponentiation.x, exponentiation.i)" "nzreal"))) (|rat_exp| 0 (|rat_exp-1| |nil| 3237052399 ("" (SKOLEM-TYPEPRED) (("" (EXPAND "^") (("" (PROPAX) NIL NIL)) NIL)) NIL) ((|rat_expt| APPLICATION-JUDGEMENT "rat" |exponentiation| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (>= CONST-DECL "bool" |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL (|rat_exp| SUBTYPE "exponentiation.^(exponentiation.x, exponentiation.i)" "rat"))) (|nnrat_exp| 0 (|nnrat_exp-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|nnrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nnreal_exp| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (|rat_exp| APPLICATION-JUDGEMENT "rat" |exponentiation| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL (|nnrat_exp| SUBTYPE "exponentiation.^(exponentiation.x, exponentiation.i)" "nnrat"))) (|posrat_exp_TCC1| 0 (|posrat_exp_TCC1-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|posrat_exp_| SUBTYPE "exponentiation.i" "{i: integers.int | booleans.OR(exponentiation.x /= 0, reals.>=(i, 0))}"))) (|posrat_exp| 0 (|posrat_exp-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (> CONST-DECL "bool" |reals| NIL) (|posrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|posreal_exp| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|nnrat_exp| APPLICATION-JUDGEMENT "nnrat" |exponentiation| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL (|posrat_exp| SUBTYPE "exponentiation.^(exponentiation.x, exponentiation.i)" "posrat"))) (|int_exp_TCC1| 0 (|int_exp_TCC1-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((/= CONST-DECL "boolean" |notequal| NIL)) NIL (|int_exp_| SUBTYPE "exponentiation.n" "{i: integers.int | booleans.OR(exponentiation.x /= 0, reals.>=(i, 0))}"))) (|int_exp| 0 (|int_exp-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|int_expt| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (^ CONST-DECL "real" |exponentiation| NIL)) NIL (|int_exp| SUBTYPE "exponentiation.^(exponentiation.x, exponentiation.n)" "int"))) (|nat_exp| 0 (|nat_exp-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nat_expt| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (^ CONST-DECL "real" |exponentiation| NIL)) NIL (|nat_exp| SUBTYPE "exponentiation.^(exponentiation.x, exponentiation.n)" "nat"))) (|posint_exp| 0 (|posint_exp-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posint| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (^ CONST-DECL "real" |exponentiation| NIL)) NIL (|posint_exp| SUBTYPE "exponentiation.^(exponentiation.x, exponentiation.n)" "posint"))) (|expt_x0_aux| 0 (|expt_x0_aux-1| |nil| 3237052399 ("" (TCC :DEFS !) NIL NIL) ((|expt| DEF-DECL "real" |exponentiation| NIL)) NIL)) (|expt_x1_aux| 0 (|expt_x1_aux-1| |nil| 3237052399 ("" (TCC :DEFS !) NIL NIL) ((|expt| DEF-DECL "real" |exponentiation| NIL)) NIL)) (|expt_1n_aux| 0 (|expt_1n_aux-1| |nil| 3237052399 ("" (INDUCT "n") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP*) (("2" (EXPAND "expt" +) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL)) (|increasing_expt_aux| 0 (|increasing_expt_aux-2| "" 3505096595 ("" (INDUCT "m") (("1" (SKOSIMP*) (("1" (EXPAND "expt") (("1" (EXPAND "expt") (("1" (EXPAND "expt") (("1" (LEMMA "both_sides_times_pos_gt1") (("1" (INST -1 "gt1x!1" "gt1x!1" "1") (("1" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST?) (("2" (EXPAND "expt" 1) (("2" (LEMMA "div_mult_pos_gt2") (("2" (INST -1 "gt1x!1" "expt(gt1x!1, j!1 + 2)" "gt1x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|posreal_expt| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|div_mult_pos_gt2| FORMULA-DECL NIL |extra_real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|both_sides_times_pos_gt1| FORMULA-DECL NIL |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK) (|increasing_expt_aux-1| |nil| 3237052399 ("" (INDUCT "m") (("1" (SKOSIMP*) (("1" (EXPAND "expt") (("1" (EXPAND "expt") (("1" (EXPAND "expt") (("1" (LEMMA "both_sides_times_pos_gt1") (("1" (INST -1 "gt1x!1" "gt1x!1" "1") (("1" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST?) (("2" (EXPAND "expt" 1) (("2" (LEMMA "div_mult_pos_gt1") (("2" (INST -1 "gt1x!1" "expt(gt1x!1, j!1 + 2)" "gt1x!1") (("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL)) (|decreasing_expt_aux| 0 (|decreasing_expt_aux-2| "" 3505096761 ("" (INDUCT "m") (("1" (SKOSIMP) (("1" (EXPAND "expt") (("1" (EXPAND "expt") (("1" (EXPAND "expt") (("1" (LEMMA "div_mult_pos_lt2") (("1" (INST -1 "lt1x!1" "lt1x!1" "lt1x!1") (("1" (PROP) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST?) (("2" (EXPAND "expt" +) (("2" (LEMMA "div_mult_pos_gt1") (("2" (INST -1 "lt1x!1" "expt(lt1x!1, 2 + j!1)" "lt1x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posreal_expt| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|div_mult_pos_gt1| FORMULA-DECL NIL |extra_real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|div_mult_pos_lt2| FORMULA-DECL NIL |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (< CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK) (|decreasing_expt_aux-1| |nil| 3237052399 ("" (INDUCT "m") (("1" (SKOSIMP) (("1" (EXPAND "expt") (("1" (EXPAND "expt") (("1" (EXPAND "expt") (("1" (LEMMA "div_mult_pos_lt2") (("1" (INST -1 "lt1x!1" "lt1x!1" "lt1x!1") (("1" (PROP) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST?) (("2" (EXPAND "expt" +) (("2" (LEMMA "div_mult_pos_gt2") (("2" (INST -1 "lt1x!1" "expt(lt1x!1, 2 + j!1)" "lt1x!1") (("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL)) (|expt_1_aux| 0 (|expt_1_aux-2| "" 3505096840 ("" (INDUCT "n") (("1" (SKOSIMP*) (("1" (PROP) (("1" (EXPAND "expt") (("1" (EXPAND "expt") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (SKOSIMP) (("2" (INST -1 "px!1") (("2" (EXPAND "expt" +) (("2" (GROUND) (("2" (CASE "j!1 = 0") (("1" (REPLACE -1) (("1" (EXPAND "expt") (("1" (EXPAND "expt") (("1" (ASSERT) (("1" (REWRITE "sqrt_1") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "px!1 > 1") (("1" (LEMMA "increasing_expt_aux") (("1" (INST -1 "px!1" "j!1-1") (("1" (ASSERT) (("1" (LEMMA "eq1_gt") (("1" (INST -1 "px!1" "expt(px!1, 1 + j!1)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (LEMMA "decreasing_expt_aux") (("2" (INST -1 "px!1" "j!1-1") (("1" (LEMMA "eq1_gt") (("1" (INST -1 "1/px!1" "1/expt(px!1, 1 + j!1)") (("1" (ASSERT) (("1" (SPLIT) (("1" (REWRITE "div_mult_pos_lt1") NIL NIL) ("2" (ASSERT) (("2" (REWRITE "div_mult_pos_gt1") NIL NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) NIL NIL (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|eq1_gt| FORMULA-DECL NIL |real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|increasing_expt_aux| FORMULA-DECL NIL |exponentiation| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|div_mult_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|div_mult_pos_gt1| FORMULA-DECL NIL |extra_real_props| NIL) (|decreasing_expt_aux| FORMULA-DECL NIL |exponentiation| NIL) (|sqrt_1| FORMULA-DECL NIL |real_props| NIL) (|posreal_expt| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK) (|expt_1_aux-1| |nil| 3237052399 ("" (INDUCT "n") (("1" (SKOSIMP*) (("1" (PROP) (("1" (EXPAND "expt") (("1" (EXPAND "expt") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (SKOSIMP) (("2" (INST -1 "px!1") (("2" (EXPAND "expt" +) (("2" (GROUND) (("2" (CASE "j!1 = 0") (("1" (REPLACE -1) (("1" (EXPAND "expt") (("1" (EXPAND "expt") (("1" (ASSERT) (("1" (REWRITE "sqrt_1") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "px!1 > 1") (("1" (LEMMA "increasing_expt_aux") (("1" (INST -1 "px!1" "j!1-1") (("1" (ASSERT) (("1" (LEMMA "eq1_gt") (("1" (INST -1 "px!1" "expt(px!1, 1 + j!1)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (LEMMA "decreasing_expt_aux") (("2" (INST -1 "px!1" "j!1-1") (("1" (LEMMA "eq1_gt") (("1" (INST -1 "1/px!1" "1/expt(px!1, 1 + j!1)") (("1" (ASSERT) (("1" (SPLIT) (("1" (REWRITE "div_mult_pos_lt1") NIL NIL) ("2" (ASSERT) (("2" (REWRITE "div_mult_pos_gt2") NIL NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL)) (|expt_plus_aux| 0 (|expt_plus_aux-1| |nil| 3237052399 ("" (INDUCT "n") (("1" (SKOSIMP*) (("1" (EXPAND "expt" 1 3) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (EXPAND "expt" 1 3) (("2" (EXPAND "expt" 1 1) (("2" (INST -1 "m!1" "n0x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|nzreal_expt| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL)) (|expt_minus_aux_TCC1| 0 (|expt_minus_aux_TCC1-1| |nil| 3237052399 ("" (TCC :DEFS !) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|expt_minus_aux| SUBTYPE "(number_fields.-)(exponentiation.m, exponentiation.n)" "nat"))) (|expt_minus_aux| 0 (|expt_minus_aux-1| |nil| 3237052399 ("" (INDUCT "m") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP*) (("2" (CASE "j!1 + 1 = n!1") (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "expt" 2 1) (("2" (EXPAND "expt" 2 2) (("2" (ASSERT) (("2" (INST?) (("2" (ASSERT) (("2" (REPLACE -1) (("2" (REWRITE "times_div1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (GRIND) NIL NIL)) NIL)) NIL) ((|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|nzreal_expt| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) NIL)) (|expt_times_aux| 0 (|expt_times_aux-1| |nil| 3237052399 ("" (INDUCT "n") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP*) (("2" (EXPAND "expt" 1 2) (("2" (EXPAND "expt" 1 1) (("2" (LIFT-IF) (("2" (INST -1 "m!1" "n0x!1") (("2" (REPLACE -1 :DIR RL) (("2" (PROP) (("1" (ASSERT) (("1" (CASE "m!1 = 0") (("1" (REPLACE -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (CASE "j!1 = 0") (("1" (ASSERT) NIL NIL) ("2" (LEMMA "posreal_mult_closed") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1) (("2" (CASE "m!1 = 0") (("1" (GRIND) NIL NIL) ("2" (CASE "j!1 = 0") (("1" (REPLACE -1) (("1" (EXPAND "expt" 3 3) (("1" (EXPAND "expt" 3 2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (LEMMA "expt_plus_aux") (("2" (INST -1 "m!1" "m!1 * j!1" "n0x!1") (("2" (REPLACE -1 :DIR RL) (("2" (EXPAND "expt" 3 2) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (ASSERT) (("2" (PROP) (("2" (LEMMA "zero_times3") (("2" (INST -1 "m!1" "j!1 + 1") (("2" (REPLACE -2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posreal_mult_closed| FORMULA-DECL NIL |real_axioms| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|expt_plus_aux| FORMULA-DECL NIL |exponentiation| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nzreal_expt| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL)) (|expt_divide_aux| 0 (|expt_divide_aux-1| |nil| 3237052399 ("" (INDUCT "n") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP*) (("2" (EXPAND "expt" 1 2) (("2" (INST?) (("2" (REPLACE -1 :DIR RL) (("2" (CASE "expt(n0x!1, j!1 * m!1 + m!1) = expt(n0x!1, m!1) * expt(n0x!1, m!1 * j!1)") (("1" (ASSERT) (("1" (REPLACE -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (REWRITE "expt_plus_aux") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|expt_plus_aux| FORMULA-DECL NIL |exponentiation| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|nzreal_expt| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL)) (|both_sides_expt1_aux| 0 (|both_sides_expt1_aux-1| |nil| 3237052399 ("" (INDUCT "m") (("1" (SKOSIMP) (("1" (EXPAND "expt") (("1" (EXPAND "expt" 1 1) (("1" (GROUND) (("1" (CASE "px!1 > 1") (("1" (LEMMA "increasing_expt_aux") (("1" (INST -1 "px!1" "n!1-1") (("1" (EXPAND "expt" -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "decreasing_expt_aux") (("2" (INST -1 "px!1" "n!1-1") (("1" (EXPAND "expt" -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "expt") (("2" (PROPAX) NIL NIL)) NIL) ("3" (REPLACE -1) (("3" (REWRITE "expt_1n_aux") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (SKOSIMP) (("2" (EXPAND "expt" 1 1) (("2" (EXPAND "expt" 1 2) (("2" (CASE "n!1 = 0") (("1" (REPLACE -1) (("1" (GROUND) (("1" (EXPAND "expt" -1 2) (("1" (CASE "px!1 >1") (("1" (LEMMA "increasing_expt_aux") (("1" (INST -1 "px!1" "j!1") (("1" (EXPAND "expt" -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "decreasing_expt_aux") (("2" (INST -1 "px!1" "j!1") (("1" (EXPAND "expt" -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1) (("2" (REWRITE "expt_1n_aux") (("2" (REWRITE "expt_1n_aux") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) (("1" (INST -2 "n!1-1" "px!1") (("1" (ASSERT) (("1" (REWRITE "both_sides_times2") NIL NIL)) NIL)) NIL) ("2" (REPLACE -1) (("2" (REWRITE "expt_1n_aux") (("2" (REWRITE "expt_1n_aux") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) NIL (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|both_sides_times2| FORMULA-DECL NIL |real_props| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|expt_1n_aux| FORMULA-DECL NIL |exponentiation| NIL) (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) NIL (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|increasing_expt_aux| FORMULA-DECL NIL |exponentiation| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|decreasing_expt_aux| FORMULA-DECL NIL |exponentiation| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|posreal_expt| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL)) (|both_sides_expt2_aux| 0 (|both_sides_expt2_aux-1| |nil| 3237052399 ("" (INDUCT "pm") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (SKOSIMP) (("3" (SKOSIMP) (("3" (SPLIT) (("1" (EXPAND "expt" +) (("1" (INST -1 "px!1" "py!1") (("1" (GROUND) (("1" (HIDE 1) (("1" (HIDE -2) (("1" (CASE "FORALL (m:nat), (px, py: posreal): px > py IMPLIES expt(px,m+1) > expt(py, m+1)") (("1" (CASE "px!1>py!1") (("1" (INST -2 "j!1-1" "px!1" "py!1") (("1" (ASSERT) (("1" (LEMMA "gt_times_gt_pos1") (("1" (INST -1 "expt(py!1, j!1)" "py!1" "px!1" "expt(px!1, j!1)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "expt" +) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (INST -1 "j!1-1" "py!1" "px!1") (("1" (ASSERT) (("1" (LEMMA "gt_times_gt_pos1") (("1" (INST -1 "expt(px!1, j!1)" "px!1" "py!1" "expt(py!1, j!1)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "expt" +) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2 3) (("2" (INDUCT "m") (("1" (SKOSIMP*) (("1" (EXPAND "expt") (("1" (EXPAND "expt") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST?) (("2" (ASSERT) (("2" (EXPAND "expt" +) (("2" (REWRITE "gt_times_gt_pos1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) NIL (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|gt_times_gt_pos1| FORMULA-DECL NIL |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|posreal_expt| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL)) (|both_sides_expt_pos_lt_aux| 0 (|both_sides_expt_pos_lt_aux-1| |nil| 3237052399 ("" (INDUCT "m") (("1" (SKOSIMP) (("1" (EXPAND "expt") (("1" (EXPAND "expt") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST -1 "px!1" "py!1") (("2" (EXPAND "expt" 1) (("2" (GROUND) (("1" (REWRITE "lt_times_lt_pos1") NIL NIL) ("2" (LEMMA "ge_times_ge_pos") (("2" (INST -1 "expt(py!1, 1 + j!1)" "py!1" "px!1" "expt(px!1, 1 + j!1)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|ge_times_ge_pos| FORMULA-DECL NIL |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|lt_times_lt_pos1| FORMULA-DECL NIL |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posreal_expt| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (< CONST-DECL "bool" |reals| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL)) (|both_sides_expt_gt1_lt_aux| 0 (|both_sides_expt_gt1_lt_aux-1| |nil| 3237052399 ("" (INDUCT "m") (("1" (SKOSIMP*) (("1" (EXPAND "expt") (("1" (EXPAND "expt" 1 1) (("1" (GROUND) (("1" (EXPAND "expt") (("1" (ASSERT) NIL NIL)) NIL) ("2" (LEMMA "increasing_expt_aux") (("2" (INST -1 "gt1x!1" "n!1 - 1") (("2" (EXPAND "expt" -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (EXPAND "expt" +) (("2" (GROUND) (("1" (CASE "n!1 = 0") (("1" (REPLACE -1) (("1" (EXPAND "expt" -2 2) (("1" (LEMMA "increasing_expt_aux") (("1" (INST -1 "gt1x!1" "j!1") (("1" (EXPAND "expt" -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -2 "gt1x!1" "n!1-1") (("1" (GROUND) (("1" (REWRITE "both_sides_times_pos_lt2") NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (INST -2 "gt1x!1" "n!1-1") (("2" (ASSERT) (("2" (REWRITE "both_sides_times_pos_lt2") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) NIL (|both_sides_times_pos_lt2| FORMULA-DECL NIL |real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|increasing_expt_aux| FORMULA-DECL NIL |exponentiation| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posreal_expt| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (< CONST-DECL "bool" |reals| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL)) (|both_sides_expt_lt1_lt_aux| 0 (|both_sides_expt_lt1_lt_aux-1| |nil| 3237052399 ("" (INDUCT "m") (("1" (SKOSIMP*) (("1" (EXPAND "expt" 1 1) (("1" (EXPAND "expt" -1 1) (("1" (GROUND) (("1" (LEMMA "decreasing_expt_aux") (("1" (INST -1 "lt1x!1" "n!1-1") (("1" (ASSERT) NIL NIL) ("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (EXPAND "expt" +) (("2" (INST -1 "lt1x!1" "n!1 - 1") (("1" (GROUND) (("1" (REWRITE "both_sides_times_pos_lt2") NIL NIL) ("2" (REWRITE "both_sides_times_pos_lt2") NIL NIL)) NIL) ("2" (GROUND) (("2" (EXPAND "expt" 1 2) (("2" (LEMMA "decreasing_expt_aux") (("2" (INST -1 "lt1x!1" "j!1") (("2" (EXPAND "expt" -1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL (|both_sides_times_pos_lt2| FORMULA-DECL NIL |real_props| NIL) (|decreasing_expt_aux| FORMULA-DECL NIL |exponentiation| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) NIL (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posreal_expt| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL)) (|both_sides_expt_pos_le_aux| 0 (|both_sides_expt_pos_le_aux-1| |nil| 3237052399 ("" (SKOSIMP) (("" (GROUND) (("1" (LEMMA "both_sides_expt_pos_lt_aux") (("1" (INST -1 "m!1" "py!1" "px!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (LEMMA "both_sides_expt_pos_lt_aux") (("2" (INST -1 "m!1" "py!1" "px!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posreal_expt| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|both_sides_expt_pos_lt_aux| FORMULA-DECL NIL |exponentiation| NIL)) NIL)) (|both_sides_expt_gt1_le_aux| 0 (|both_sides_expt_gt1_le_aux-1| |nil| 3237052399 ("" (SKOSIMP) (("" (LEMMA "both_sides_expt_gt1_lt_aux") (("" (INST -1 "gt1x!1" "n!1" "m!1") (("" (ASSERT) (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|both_sides_expt_gt1_lt_aux| FORMULA-DECL NIL |exponentiation| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posreal_expt| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL)) (|both_sides_expt_lt1_le_aux| 0 (|both_sides_expt_lt1_le_aux-1| |nil| 3237052399 ("" (LEMMA "both_sides_expt_lt1_lt_aux") (("" (SKOSIMP) (("" (INST -1 "lt1x!1" "n!1" "m!1") (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posreal_expt| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (< CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|both_sides_expt_lt1_lt_aux| FORMULA-DECL NIL |exponentiation| NIL)) NIL)) (|both_sides_expt_pos_gt_aux| 0 (|both_sides_expt_pos_gt_aux-1| |nil| 3237052399 ("" (LEMMA "both_sides_expt_pos_lt_aux") (("" (SKOSIMP) (("" (INST -1 "m!1" "py!1" "px!1") (("" (ASSERT) (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posreal_expt| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|both_sides_expt_pos_lt_aux| FORMULA-DECL NIL |exponentiation| NIL)) NIL)) (|both_sides_expt_gt1_gt_aux| 0 (|both_sides_expt_gt1_gt_aux-1| |nil| 3237052399 ("" (LEMMA "both_sides_expt_gt1_lt_aux") (("" (SKOSIMP) (("" (INST -1 "gt1x!1" "n!1" "m!1") (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posreal_expt| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|both_sides_expt_gt1_lt_aux| FORMULA-DECL NIL |exponentiation| NIL)) NIL)) (|both_sides_expt_lt1_gt_aux| 0 (|both_sides_expt_lt1_gt_aux-1| |nil| 3237052399 ("" (LEMMA "both_sides_expt_lt1_lt_aux") (("" (SKOSIMP) (("" (INST -1 "lt1x!1" "n!1" "m!1") (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posreal_expt| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (< CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|both_sides_expt_lt1_lt_aux| FORMULA-DECL NIL |exponentiation| NIL)) NIL)) (|both_sides_expt_pos_ge_aux| 0 (|both_sides_expt_pos_ge_aux-1| |nil| 3237052399 ("" (LEMMA "both_sides_expt_pos_le_aux") (("" (SKOSIMP) (("" (INST -1 "m!1" "py!1" "px!1") (("" (ASSERT) (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posreal_expt| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|both_sides_expt_pos_le_aux| FORMULA-DECL NIL |exponentiation| NIL)) NIL)) (|both_sides_expt_gt1_ge_aux| 0 (|both_sides_expt_gt1_ge_aux-1| |nil| 3237052399 ("" (LEMMA "both_sides_expt_gt1_le_aux") (("" (SKOSIMP) (("" (INST -1 "gt1x!1" "n!1" "m!1") (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posreal_expt| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|both_sides_expt_gt1_le_aux| FORMULA-DECL NIL |exponentiation| NIL)) NIL)) (|both_sides_expt_lt1_ge_aux| 0 (|both_sides_expt_lt1_ge_aux-1| |nil| 3237052399 ("" (LEMMA "both_sides_expt_lt1_le_aux") (("" (SKOSIMP) (("" (INST -1 "lt1x!1" "n!1" "m!1") (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posreal_expt| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (< CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|both_sides_expt_lt1_le_aux| FORMULA-DECL NIL |exponentiation| NIL)) NIL)) (|expt_of_mult| 0 (|expt_of_mult-1| |nil| 3237052399 ("" (INDUCT "n") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP*) (("2" (EXPAND "expt" +) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL)) (|expt_of_div| 0 (|expt_of_div-1| |nil| 3237052399 ("" (INDUCT "n") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP*) (("2" (EXPAND "expt" +) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|nzreal_expt| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL)) (|expt_of_inv| 0 (|expt_of_inv-1| |nil| 3237052399 ("" (INDUCT "n") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP*) (("2" (EXPAND "expt" +) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|nzreal_expt| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL)) (|expt_of_abs| 0 (|expt_of_abs-1| |nil| 3237052399 ("" (INDUCT "n") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP*) (("2" (EXPAND "expt" +) (("2" (INST?) (("2" (ASSERT) (("2" (REPLACE -1 :HIDE? T) (("2" (GRIND) (("1" (USE "neg_times_lt") (("1" (ASSERT) NIL NIL)) NIL) ("2" (USE "pos_times_lt") (("2" (ASSERT) NIL NIL)) NIL) ("3" (USE "pos_times_lt") (("3" (ASSERT) NIL NIL)) NIL) ("4" (USE "neg_times_lt") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|pos_times_lt| FORMULA-DECL NIL |real_props| NIL) (|neg_times_lt| FORMULA-DECL NIL |real_props| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnreal_expt| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL)) (|abs_of_expt_inv| 0 (|abs_of_expt_inv-1| |nil| 3237052399 ("" (INDUCT "n") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP*) (("2" (EXPAND "expt" +) (("2" (INST?) (("2" (ASSERT) (("2" (LEMMA "div_times") (("2" (INST -1 "abs(n0x!1)" "expt(abs(n0x!1), j!1)" "1" "1") (("2" (REPLACE -1 :DIR RL) (("2" (REPLACE -2 :DIR RL) (("2" (HIDE -1 -2) (("2" (GRIND) (("1" (LEMMA "quotient_neg_lt") (("1" (INST-CP -1 "n0x!1 * expt(n0x!1, j!1)") (("1" (INST -1 "expt(n0x!1, j!1)") (("1" (ASSERT) (("1" (HIDE -3 -5) (("1" (LEMMA "negreal_times_negreal_is_posreal") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "quotient_neg_lt") (("2" (INST-CP -1 "expt(n0x!1, j!1)") (("2" (INST -1 "n0x!1 * expt(n0x!1, j!1)") (("2" (ASSERT) (("2" (HIDE -2 3) (("2" (LEMMA "nnreal_times_nnreal_is_nnreal") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "quotient_neg_lt") (("3" (INST-CP -1 "expt(n0x!1, j!1)") (("3" (INST -1 "n0x!1 * expt(n0x!1, j!1)") (("3" (ASSERT) (("3" (HIDE 3 4) (("3" (LEMMA "posreal_mult_closed") (("3" (INST -1 "-n0x!1" "expt(n0x!1, j!1)") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (LEMMA "quotient_neg_lt") (("4" (INST-CP -1 "expt(n0x!1, j!1)") (("4" (INST -1 "n0x!1 * expt(n0x!1, j!1)") (("4" (ASSERT) (("4" (HIDE -2 2) (("4" (LEMMA "posreal_mult_closed") (("4" (INST -1 "n0x!1" "-expt(n0x!1, j!1)") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|div_times| FORMULA-DECL NIL |real_props| NIL) (|odd_times_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posreal_mult_closed| FORMULA-DECL NIL |real_axioms| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnreal_times_nnreal_is_nnreal| JUDGEMENT-TCC NIL |real_types| NIL) (|quotient_neg_lt| FORMULA-DECL NIL |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|negreal_times_negreal_is_posreal| JUDGEMENT-TCC NIL |real_types| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|nonzero_abs_is_pos| APPLICATION-JUDGEMENT "{y: posreal | y >= x}" |real_defs| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|posreal_expt| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|nzreal_expt| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL)) (|expt_x0_TCC1| 0 (|expt_x0_TCC1-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((/= CONST-DECL "boolean" |notequal| NIL)) NIL (|expt_x0| SUBTYPE "0" "{i: integers.int | booleans.OR(exponentiation.x /= 0, reals.>=(i, 0))}"))) (|expt_x0| 0 (|expt_x0-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|expt| DEF-DECL "real" |exponentiation| NIL) (^ CONST-DECL "real" |exponentiation| NIL)) NIL)) (|expt_x1_TCC1| 0 (|expt_x1_TCC1-1| |nil| 3237052399 ("" (TCC :DEFS !) NIL NIL) ((/= CONST-DECL "boolean" |notequal| NIL)) NIL (|expt_x1| SUBTYPE "1" "{i: integers.int | booleans.OR(exponentiation.x /= 0, reals.>=(i, 0))}"))) (|expt_x1| 0 (|expt_x1-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|expt| DEF-DECL "real" |exponentiation| NIL) (^ CONST-DECL "real" |exponentiation| NIL)) NIL)) (|expt_x2_TCC1| 0 (|expt_x2_TCC1-1| |nil| 3307950059 ("" (SUBTYPE-TCC) NIL NIL) ((/= CONST-DECL "boolean" |notequal| NIL)) SHOSTAK (|expt_x2| SUBTYPE "2" "{i: integers.int | booleans.OR(exponentiation.x /= 0, reals.>=(i, 0))}"))) (|expt_x2| 0 (|expt_x2-1| |nil| 3307951594 ("" (GRIND) NIL NIL) ((|expt| DEF-DECL "real" |exponentiation| NIL) (^ CONST-DECL "real" |exponentiation| NIL)) SHOSTAK)) (|expt_x3_TCC1| 0 (|expt_x3_TCC1-1| |nil| 3307950060 ("" (SUBTYPE-TCC) NIL NIL) ((/= CONST-DECL "boolean" |notequal| NIL)) SHOSTAK (|expt_x3| SUBTYPE "3" "{i: integers.int | booleans.OR(exponentiation.x /= 0, reals.>=(i, 0))}"))) (|expt_x3| 0 (|expt_x3-1| |nil| 3307951600 ("" (GRIND) NIL NIL) ((|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL)) SHOSTAK)) (|expt_x4_TCC1| 0 (|expt_x4_TCC1-1| |nil| 3307950060 ("" (SUBTYPE-TCC) NIL NIL) ((/= CONST-DECL "boolean" |notequal| NIL)) SHOSTAK (|expt_x4| SUBTYPE "4" "{i: integers.int | booleans.OR(exponentiation.x /= 0, reals.>=(i, 0))}"))) (|expt_x4| 0 (|expt_x4-1| |nil| 3307951604 ("" (GRIND) NIL NIL) ((|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL)) SHOSTAK)) (|expt_1i| 0 (|expt_1i-1| |nil| 3237052399 ("" (SKOSIMP*) (("" (EXPAND "^") (("" (LIFT-IF) (("" (PROP) (("1" (REWRITE "expt_1n_aux") NIL NIL) ("2" (REWRITE "expt_1n_aux") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((^ CONST-DECL "real" |exponentiation| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|expt_1n_aux| FORMULA-DECL NIL |exponentiation| NIL) (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL)) (|expt_eq_0_TCC1| 0 (|expt_eq_0_TCC1-1| |nil| 3307950060 ("" (SUBTYPE-TCC) NIL NIL) ((/= CONST-DECL "boolean" |notequal| NIL)) SHOSTAK (|expt_eq_0| SUBTYPE "exponentiation.pn" "{i: integers.int | booleans.OR(exponentiation.x /= 0, reals.>=(i, 0))}"))) (|expt_eq_0| 0 (|expt_eq_0-1| |nil| 3307951654 ("" (INDUCT "pn") (("1" (SKOSIMP*) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (CASE "j!1 = 0") (("1" (REPLACE -1) (("1" (ASSERT) (("1" (EXPAND "^") (("1" (EXPAND "expt") (("1" (EXPAND "expt") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (CASE-REPLACE "x!1 ^ (1 + j!1) = x!1*x!1^j!1") (("1" (HIDE -1) (("1" (INST?) (("1" (GROUND) (("1" (REWRITE "nonzero_times1") NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|nonzero_times1| FORMULA-DECL NIL |real_props| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK)) (|expt_plus_TCC1| 0 (|expt_plus_TCC1-1| |nil| 3237052399 ("" (TCC :DEFS !) NIL NIL) NIL NIL (|expt_plus| SUBTYPE "((number_fields.+)(exponentiation.i, exponentiation.j))" "{i: integers.int | booleans.OR(exponentiation.n0x /= 0, reals.>=(i, 0))}"))) (|expt_plus| 0 (|expt_plus-2| "" 3505097701 ("" (SKOSIMP*) (("" (EXPAND "^") (("" (LIFT-IF) (("" (LIFT-IF) (("" (LIFT-IF) (("" (PROP) (("1" (REWRITE "expt_plus_aux") NIL NIL) ("2" (LEMMA "expt_minus_aux") (("2" (INST -1 "i!1" "-j!1" "n0x!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (ASSERT) (("3" (ASSERT) (("3" (LEMMA "expt_minus_aux") (("3" (INST -1 "j!1" "-i!1" "n0x!1") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (LIFT-IF) (("4" (PROP) (("1" (ASSERT) (("1" (LEMMA "cross_mult") (("1" (INST -1 "expt(n0x!1, -(i!1 + j!1))" "expt(n0x!1, -j!1)" "1" "expt(n0x!1, i!1)") (("1" (FLATTEN) (("1" (HIDE -1) (("1" (SPLIT) (("1" (ASSERT) NIL NIL) ("2" (HIDE 3) (("2" (LEMMA "expt_plus_aux") (("2" (INST -1 "i!1" "-(i!1 + j!1)" "n0x!1") (("2" (REPLACE -1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (LIFT-IF) (("2" (GROUND) (("1" (LEMMA "cross_mult") (("1" (INST -1 "expt(n0x!1, -(i!1 + j!1))" "expt(n0x!1, -i!1)" "1" "expt(n0x!1, j!1)") (("1" (FLATTEN) (("1" (HIDE -1) (("1" (REPLACE 1) (("1" (LEMMA "expt_plus_aux") (("1" (INST -1 "j!1" "-(i!1 + j!1)" "n0x!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (CASE "expt(n0x!1, -(i!1 + j!1)) = expt(n0x!1, -i!1) * expt(n0x!1, -j!1)") (("1" (ASSERT) NIL NIL) ("2" (HIDE 3) (("2" (LEMMA "expt_plus_aux") (("2" (INST -1 "-i!1" "-j!1" "n0x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((^ CONST-DECL "real" |exponentiation| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|expt_plus_aux| FORMULA-DECL NIL |exponentiation| NIL) NIL (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) NIL (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nzreal_expt| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|expt_minus_aux| FORMULA-DECL NIL |exponentiation| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|cross_mult| FORMULA-DECL NIL |real_props| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)) SHOSTAK) (|expt_plus-1| |nil| 3237052399 ("" (SKOSIMP*) (("" (EXPAND "^") (("" (LIFT-IF) (("" (LIFT-IF) (("" (LIFT-IF) (("" (PROP) (("1" (REWRITE "expt_plus_aux") NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (LEMMA "expt_minus_aux") (("3" (INST -1 "j!1" "-i!1" "n0x!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (LEMMA "cross_mult") (("4" (INST -1 "expt(n0x!1, -(i!1 + j!1))" "expt(n0x!1, -i!1)" "1" "expt(n0x!1, j!1)") (("1" (FLATTEN) (("1" (HIDE -1) (("1" (REPLACE 2) (("1" (LEMMA "expt_plus_aux") (("1" (INST -1 "j!1" "-(i!1 + j!1)" "n0x!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL) ("5" (LEMMA "expt_minus_aux") (("5" (INST -1 "i!1" "-j!1" "n0x!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("6" (ASSERT) (("6" (LEMMA "cross_mult") (("6" (INST -1 "expt(n0x!1, -(i!1 + j!1))" "expt(n0x!1, -j!1)" "1" "expt(n0x!1, i!1)") (("6" (FLATTEN) (("6" (HIDE -1) (("6" (SPLIT) (("1" (ASSERT) NIL NIL) ("2" (HIDE 3) (("2" (LEMMA "expt_plus_aux") (("2" (INST -1 "i!1" "-(i!1 + j!1)" "n0x!1") (("2" (REPLACE -1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("7" (ASSERT) NIL NIL) ("8" (CASE "expt(n0x!1, -(i!1 + j!1)) = expt(n0x!1, -i!1) * expt(n0x!1, -j!1)") (("1" (ASSERT) (("1" (REPLACE -1) (("1" (LEMMA "div_times") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (LEMMA "expt_plus_aux") (("2" (INST -1 "-i!1" "-j!1" "n0x!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL) ("4" (ASSERT) NIL NIL) ("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL)) (|expt_times_TCC1| 0 (|expt_times_TCC1-1| |nil| 3237052399 ("" (TCC :DEFS !) NIL NIL) NIL NIL (|expt_times| SUBTYPE "(number_fields.*(exponentiation.i, exponentiation.j))" "{i: integers.int | booleans.OR(exponentiation.n0x /= 0, reals.>=(i, 0))}"))) (|expt_times| 0 (|expt_times-3| "" 3505098188 ("" (SKOSIMP*) (("" (EXPAND "^") (("" (LIFT-IF) (("" (LIFT-IF) (("" (PROP) (("1" (REWRITE "expt_times_aux") NIL NIL) ("2" (ASSERT) (("2" (REWRITE "pos_times_ge") (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "pos_times_ge") (("3" (INST?) (("3" (ASSERT) (("3" (GRIND) (("3" (LEMMA "expt_1n_aux") (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (LEMMA "expt_divide_aux") (("4" (INST -1 "-i!1" "-j!1" "n0x!1") (("1" (REPLACE -1 :DIR RL) (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL) ("5" (LIFT-IF) (("5" (GROUND) (("1" (LEMMA "pos_times_ge") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (LEMMA "expt_divide_aux") (("2" (INST -1 "-i!1" "j!1" "n0x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (CASE "expt(n0x!1, -(i!1 * j!1)) = expt(expt(n0x!1, i!1), -j!1)") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (LEMMA "expt_times_aux") (("2" (INST -1 "i!1" "-j!1" "n0x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (REWRITE "pos_times_ge") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((^ CONST-DECL "real" |exponentiation| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|expt_divide_aux| FORMULA-DECL NIL |exponentiation| NIL) NIL NIL (|expt_1n_aux| FORMULA-DECL NIL |exponentiation| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|nzreal_expt| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|pos_times_ge| FORMULA-DECL NIL |real_props| NIL) (|expt_times_aux| FORMULA-DECL NIL |exponentiation| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) SHOSTAK) (|expt_times-2| "Needed a :flush? t for some reason" 3299952478 ("" (SKOSIMP*) (("" (EXPAND "^") (("" (LIFT-IF) (("" (LIFT-IF) (("" (PROP) (("1" (REWRITE "expt_times_aux") NIL NIL) ("2" (ASSERT) (("2" (REWRITE "pos_times_ge") NIL NIL)) NIL) ("3" (REWRITE "pos_times_ge") (("3" (ASSERT) (("3" (GRIND) NIL NIL)) NIL)) NIL) ("4" (LEMMA "expt_divide_aux") (("4" (INST -1 "-i!1" "j!1" "n0x!1") (("1" (ASSERT) (("1" (REPLACE -1) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("5" (LEMMA "pos_times_ge") (("5" (INST?) (("5" (ASSERT) (("5" (GRIND) (("5" (LEMMA "expt_1n_aux") (("5" (INST?) (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (ASSERT) (("2" (ASSERT :FLUSH? T) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (CASE "expt(n0x!1, -(i!1 * j!1)) = expt(expt(n0x!1, i!1), -j!1)") (("1" (ASSERT) NIL NIL) ("2" (HIDE 3) (("2" (LEMMA "expt_times_aux") (("2" (INST -1 "i!1" "-j!1" "n0x!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL) ("4" (PROPAX) NIL NIL) ("5" (ASSERT) NIL NIL)) NIL) ("7" (LEMMA "expt_divide_aux") (("7" (INST -1 "-i!1" "-j!1" "n0x!1") (("1" (REPLACE -1 :DIR RL) (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL) ("8" (LEMMA "pos_times_ge") (("8" (INST?) (("8" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|expt_times-1| |nil| 3237052399 ("" (SKOSIMP*) (("" (EXPAND "^") (("" (LIFT-IF) (("" (LIFT-IF) (("" (PROP) (("1" (REWRITE "expt_times_aux") NIL NIL) ("2" (ASSERT) (("2" (REWRITE "pos_times_ge") NIL NIL)) NIL) ("3" (REWRITE "pos_times_ge") (("3" (ASSERT) (("3" (GRIND) NIL NIL)) NIL)) NIL) ("4" (LEMMA "expt_divide_aux") (("4" (INST -1 "-i!1" "j!1" "n0x!1") (("1" (ASSERT) (("1" (REPLACE -1) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("5" (LEMMA "pos_times_ge") (("5" (INST?) (("5" (ASSERT) (("5" (GRIND) (("5" (REWRITE "expt_1n_aux") (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (CASE "expt(n0x!1, -(i!1 * j!1)) = expt(expt(n0x!1, i!1), -j!1)") (("1" (ASSERT) NIL NIL) ("2" (HIDE 3) (("2" (LEMMA "expt_times_aux") (("2" (INST -1 "i!1" "-j!1" "n0x!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL) ("4" (PROPAX) NIL NIL) ("5" (ASSERT) NIL NIL)) NIL) ("7" (LEMMA "expt_divide_aux") (("7" (INST -1 "-i!1" "-j!1" "n0x!1") (("1" (REPLACE -1 :DIR RL) (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL) ("8" (LEMMA "pos_times_ge") (("8" (INST?) (("8" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL)) (|expt_inverse_TCC1| 0 (|expt_inverse_TCC1-1| |nil| 3237052399 ("" (GRIND) NIL NIL) NIL NIL (|expt_inverse| SUBTYPE "((number_fields.-)(exponentiation.i))" "{i: integers.int | booleans.OR(exponentiation.n0x /= 0, reals.>=(i, 0))}"))) (|expt_inverse| 0 (|expt_inverse-1| |nil| 3237052399 ("" (SKOSIMP*) (("" (EXPAND "^") (("" (LIFT-IF) (("" (LIFT-IF) (("" (PROP) (("1" (GRIND) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL) ("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((^ CONST-DECL "real" |exponentiation| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nzreal_expt| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL)) (|expt_div_TCC1| 0 (|expt_div_TCC1-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|expt_div| SUBTYPE "((number_fields.-)(exponentiation.i, exponentiation.j))" "{i: integers.int | booleans.OR(exponentiation.n0x /= 0, reals.>=(i, 0))}"))) (|expt_div| 0 (|expt_div-1| |nil| 3237052399 ("" (SKOSIMP) (("" (LEMMA "expt_inverse") (("" (INST -1 "j!1" "n0x!1") (("" (LEMMA "expt_plus") (("" (INST -1 "i!1" "-j!1" "n0x!1") (("" (ASSERT) (("" (REPLACE -1) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|expt_inverse| FORMULA-DECL NIL |exponentiation| NIL) (|expt_plus| FORMULA-DECL NIL |exponentiation| NIL) (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL)) (|both_sides_expt1_TCC1| 0 (|both_sides_expt1_TCC1-1| |nil| 3237052399 ("" (TCC :DEFS EXPLICIT) NIL NIL) NIL NIL (|both_sides_expt1| SUBTYPE "exponentiation.n0i" "{i: integers.int | booleans.OR(exponentiation.px /= 0, reals.>=(i, 0))}"))) (|both_sides_expt1| 0 (|both_sides_expt1-1| |nil| 3237052399 ("" (LEMMA "both_sides_expt1_aux") (("" (SKOSIMP) (("" (EXPAND "^") (("" (LIFT-IF) (("" (SPLIT) (("1" (FLATTEN) (("1" (LIFT-IF) (("1" (SPLIT) (("1" (FLATTEN) (("1" (INST -3 "n0i!1 - 1" "n0j!1 - 1" "px!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) (("1" (LEMMA "div_cancel3") (("1" (INST -1 "expt(px!1, -n0j!1)" "1" "expt(px!1, n0i!1)") (("1" (PROP) (("1" (HIDE -1 -3) (("1" (REWRITE "expt_plus_aux" :DIR RL) (("1" (LEMMA "expt_1_aux") (("1" (INST -1 "-n0j!1 + n0i!1 - 1" "px!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1) (("2" (REWRITE "expt_1n_aux") (("2" (REWRITE "expt_1n_aux") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (LIFT-IF) (("2" (PROP) (("1" (LEMMA "div_cancel3") (("1" (INST -1 "expt(px!1, -n0i!1)" "1" "expt(px!1, n0j!1)") (("1" (PROP) (("1" (HIDE -1 -3) (("1" (REWRITE "expt_plus_aux" :DIR RL) (("1" (LEMMA "expt_1_aux") (("1" (INST -1 "n0j!1 - n0i!1 - 1" "px!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "expt" 1) (("2" (ASSERT) NIL NIL)) NIL) ("3" (REPLACE -1) (("3" (REWRITE "expt_1n_aux") (("3" (REWRITE "expt_1n_aux") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (REWRITE "cross_mult") (("4" (INST -2 "-n0j!1-1" "-n0i!1-1" "px!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL) ("5" (REPLACE -1) (("5" (PROPAX) NIL NIL)) NIL) ("6" (REPLACE -1) (("6" (REWRITE "expt_1n_aux") (("6" (REWRITE "expt_1n_aux") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|cross_mult| FORMULA-DECL NIL |real_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) NIL NIL (|nzint| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posreal_expt| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|expt_1_aux| FORMULA-DECL NIL |exponentiation| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|expt_plus_aux| FORMULA-DECL NIL |exponentiation| NIL) (|div_cancel3| FORMULA-DECL NIL |real_props| NIL) (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL) (|expt_1n_aux| FORMULA-DECL NIL |exponentiation| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|both_sides_expt1_aux| FORMULA-DECL NIL |exponentiation| NIL)) NIL)) (|both_sides_expt2| 0 (|both_sides_expt2-1| |nil| 3237052399 ("" (SKOSIMP) (("" (EXPAND "^") (("" (LEMMA "both_sides_expt2_aux") (("" (LIFT-IF) (("" (PROP) (("1" (INST?) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (INST?) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL) ("3" (INST -2 "-n0i!1" "px!1" "py!1") (("1" (ASSERT) (("1" (REWRITE "cross_mult") NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("4" (INST -2 "-n0i!1" "px!1" "py!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((^ CONST-DECL "real" |exponentiation| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) NIL (|nzint| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|posreal_expt| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|both_sides_expt2_aux| FORMULA-DECL NIL |exponentiation| NIL)) NIL)) (|pos_expt_gt_TCC1| 0 (|pos_expt_gt_TCC1-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|pos_expt_gt| SUBTYPE "exponentiation.n" "{i: integers.int | booleans.OR(exponentiation.b /= 0, reals.>=(i, 0))}"))) (|pos_expt_gt| 0 (|pos_expt_gt-1| |nil| 3237052399 ("" (INDUCT "n") (("1" (SKOSIMP) (("1" (REWRITE "expt_x0") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (REWRITE "expt_plus") (("2" (REWRITE "expt_x1") (("2" (INST?) (("2" (CASE "FORALL (a, b, c, d: nat): a < c & b < d => a + b < c * d") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE -1 2) (("2" (INDUCT "c") (("1" (ASSERT) NIL NIL) ("2" (SKOSIMP*) (("2" (ASSERT) (("2" (CASE "a!1 = 0") (("1" (ASSERT) NIL NIL) ("2" (INST -1 "a!1-1" "b!2" "d!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|expt_x1| FORMULA-DECL NIL |exponentiation| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) NIL (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|expt_plus| FORMULA-DECL NIL |exponentiation| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|expt_x0| FORMULA-DECL NIL |exponentiation| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL)) (|expt_ge1| 0 (|expt_ge1-1| |nil| 3237052399 ("" (INDUCT-AND-REWRITE "n" 1 "expt_plus" "expt_x0" "expt_x1") (("" (LEMMA "ge_times_ge_pos") (("" (INST?) (("" (INST - "1" "1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|ge_times_ge_pos| FORMULA-DECL NIL |real_props| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|expt_x1| FORMULA-DECL NIL |exponentiation| NIL) (|expt_plus| FORMULA-DECL NIL |exponentiation| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL) (|expt_x0| FORMULA-DECL NIL |exponentiation| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)) NIL)) (|both_sides_expt_pos_lt_TCC1| 0 (|both_sides_expt_pos_lt_TCC1-1| |nil| 3237052399 ("" (TCC :DEFS EXPLICIT) NIL NIL) NIL NIL (|both_sides_expt_pos_lt| SUBTYPE "exponentiation.pm" "{i: integers.int | booleans.OR(exponentiation.px /= 0, reals.>=(i, 0))}"))) (|both_sides_expt_pos_lt| 0 (|both_sides_expt_pos_lt-1| |nil| 3237052399 ("" (SKOSIMP) (("" (EXPAND "^") (("" (LEMMA "both_sides_expt_pos_lt_aux") (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((^ CONST-DECL "real" |exponentiation| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posreal_expt| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|both_sides_expt_pos_lt_aux| FORMULA-DECL NIL |exponentiation| NIL)) NIL)) (|both_sides_expt_gt1_lt_TCC1| 0 (|both_sides_expt_gt1_lt_TCC1-1| |nil| 3237052399 ("" (TCC :DEFS EXPLICIT) NIL NIL) NIL NIL (|both_sides_expt_gt1_lt| SUBTYPE "exponentiation.i" "{i: integers.int | booleans.OR(exponentiation.gt1x /= 0, reals.>=(i, 0))}"))) (|both_sides_expt_gt1_lt| 0 (|both_sides_expt_gt1_lt-2| "" 3299962553 ("" (SKOSIMP*) (("" (GROUND) (("1" (CASE "j!1<=i!1") (("1" (CASE "gt1x!1 ^ j!1 <= gt1x!1 ^ i!1") (("1" (ASSERT) NIL NIL) ("2" (HIDE -2 2) (("2" (CASE "forall (n:nat): gt1x!1^j!1<=gt1x!1^(j!1+n)") (("1" (INST - "i!1-j!1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE -1 2) (("2" (INDUCT "n") (("1" (ASSERT) NIL NIL) ("2" (SKOSIMP*) (("2" (LEMMA "expt_plus") (("2" (INST -1 "1" "j!1 + j!2" "gt1x!1") (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (REWRITE "expt_x1") (("2" (LEMMA "le_times_le_pos") (("2" (INST - "1" "gt1x!1 ^ j!1" "gt1x!1 ^ (j!1 + j!2)" "gt1x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (CASE "forall (n:nat): gt1x!1^i!1<gt1x!1^(1+i!1+n)") (("1" (INST - "j!1-(i!1+1)") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (ASSERT :FLUSH? T) NIL NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (INDUCT "n") (("1" (ASSERT) (("1" (REWRITE "expt_plus") (("1" (REWRITE "expt_x1") (("1" (LEMMA "both_sides_times_pos_lt1") (("1" (INST - "gt1x!1 ^ i!1" "1" "gt1x!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (LEMMA "expt_plus") (("2" (INST - "1" "(1 + i!1 + j!2)" "gt1x!1") (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (REWRITE "expt_x1") (("2" (LEMMA "lt_times_lt_pos1") (("2" (INST - "gt1x!1^i!1" "1" "gt1x!1^(1+i!1+j!2)" "gt1x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posreal_exp| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (>= CONST-DECL "bool" |reals| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|expt_plus| FORMULA-DECL NIL |exponentiation| NIL) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|expt_x1| FORMULA-DECL NIL |exponentiation| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|le_times_le_pos| FORMULA-DECL NIL |real_props| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|lt_times_lt_pos1| FORMULA-DECL NIL |real_props| NIL) (|even_minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|both_sides_times_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (< CONST-DECL "bool" |reals| NIL)) SHOSTAK) (|both_sides_expt_gt1_lt-1| |nil| 3237052399 ("" (SKOSIMP*) (("" (GROUND) (("1" (CASE "j!1<=i!1") (("1" (CASE "gt1x!1 ^ j!1 <= gt1x!1 ^ i!1") (("1" (ASSERT) NIL NIL) ("2" (HIDE -2 2) (("2" (CASE "forall (n:nat): gt1x!1^j!1<=gt1x!1^(j!1+n)") (("1" (INST - "i!1-j!1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE -1 2) (("2" (INDUCT "n") (("1" (ASSERT) NIL NIL) ("2" (SKOSIMP*) (("2" (LEMMA "expt_plus") (("2" (INST -1 "1" "j!1 + j!2" "gt1x!1") (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (REWRITE "expt_x1") (("2" (LEMMA "le_times_le_pos") (("2" (INST - "1" "gt1x!1 ^ j!1" "gt1x!1 ^ (j!1 + j!2)" "gt1x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (CASE "forall (n:nat): gt1x!1^i!1<gt1x!1^(1+i!1+n)") (("1" (INST - "j!1-(i!1+1)") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE -1 2) (("2" (INDUCT "n") (("1" (ASSERT) (("1" (REWRITE "expt_plus") (("1" (REWRITE "expt_x1") (("1" (LEMMA "both_sides_times_pos_lt1") (("1" (INST - "gt1x!1 ^ i!1" "1" "gt1x!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (LEMMA "expt_plus") (("2" (INST - "1" "(1 + i!1 + j!2)" "gt1x!1") (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (REWRITE "expt_x1") (("2" (LEMMA "lt_times_lt_pos1") (("2" (INST - "gt1x!1^i!1" "1" "gt1x!1^(1+i!1+j!2)" "gt1x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL)) (|both_sides_expt_lt1_lt_TCC1| 0 (|both_sides_expt_lt1_lt_TCC1-1| |nil| 3237052399 ("" (TCC :DEFS EXPLICIT) NIL NIL) NIL NIL (|both_sides_expt_lt1_lt| SUBTYPE "exponentiation.i" "{i: integers.int | booleans.OR(exponentiation.lt1x /= 0, reals.>=(i, 0))}"))) (|both_sides_expt_lt1_lt| 0 (|both_sides_expt_lt1_lt-2| "" 3299962626 ("" (SKOSIMP*) (("" (GROUND) (("1" (CASE "FORALL (n:nat): lt1x!1^(i!1+n) <= lt1x!1^i!1") (("1" (INST -1 "j!1-i!1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE -1 2) (("2" (INDUCT "n") (("1" (ASSERT) NIL NIL) ("2" (SKOSIMP*) (("2" (LEMMA "expt_plus") (("2" (INST - "1" "i!1 + j!2" "lt1x!1") (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (REWRITE "expt_x1") (("2" (LEMMA "le_times_le_pos") (("2" (INST - "lt1x!1" "lt1x!1^(i!1+j!2)" "lt1x!1^i!1" "1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "FORALL (n:nat): lt1x!1^(j!1+n+1) < lt1x!1^j!1") (("1" (INST -1 "i!1 -j!1 -1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (ASSERT :FLUSH? T) NIL NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (INDUCT "n") (("1" (ASSERT) (("1" (REWRITE "expt_plus") (("1" (REWRITE "expt_x1") (("1" (LEMMA "both_sides_times_pos_lt1") (("1" (INST -1 "lt1x!1 ^ j!1" "lt1x!1" "1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (LEMMA "expt_plus") (("2" (INST -1 "1" "1 + j!1 + j!2" "lt1x!1") (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (REWRITE "expt_x1") (("2" (LEMMA "lt_times_lt_pos1") (("2" (INST -1 "lt1x!1 ^ (j!1 + j!2 + 1)" "lt1x!1" "lt1x!1 ^ j!1" "1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posreal_exp| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|le_times_le_pos| FORMULA-DECL NIL |real_props| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|expt_x1| FORMULA-DECL NIL |exponentiation| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|expt_plus| FORMULA-DECL NIL |exponentiation| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (< CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|lt_times_lt_pos1| FORMULA-DECL NIL |real_props| NIL) (|even_minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|both_sides_times_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) SHOSTAK) (|both_sides_expt_lt1_lt-1| |nil| 3237052399 ("" (SKOSIMP*) (("" (GROUND) (("1" (CASE "FORALL (n:nat): lt1x!1^(i!1+n) <= lt1x!1^i!1") (("1" (INST -1 "j!1-i!1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE -1 2) (("2" (INDUCT "n") (("1" (ASSERT) NIL NIL) ("2" (SKOSIMP*) (("2" (LEMMA "expt_plus") (("2" (INST - "1" "i!1 + j!2" "lt1x!1") (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (REWRITE "expt_x1") (("2" (LEMMA "le_times_le_pos") (("2" (INST - "lt1x!1" "lt1x!1^(i!1+j!2)" "lt1x!1^i!1" "1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "FORALL (n:nat): lt1x!1^(j!1+n+1) < lt1x!1^j!1") (("1" (INST -1 "i!1 -j!1 -1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE -1 2) (("2" (INDUCT "n") (("1" (ASSERT) (("1" (REWRITE "expt_plus") (("1" (REWRITE "expt_x1") (("1" (LEMMA "both_sides_times_pos_lt1") (("1" (INST -1 "lt1x!1 ^ j!1" "lt1x!1" "1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (LEMMA "expt_plus") (("2" (INST -1 "1" "1 + j!1 + j!2" "lt1x!1") (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (REWRITE "expt_x1") (("2" (LEMMA "lt_times_lt_pos1") (("2" (INST -1 "lt1x!1 ^ (j!1 + j!2 + 1)" "lt1x!1" "lt1x!1 ^ j!1" "1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL)) (|both_sides_expt_pos_le| 0 (|both_sides_expt_pos_le-1| |nil| 3237052399 ("" (SKOSIMP) (("" (EXPAND "^") (("" (LEMMA "both_sides_expt_pos_le_aux") (("" (INST?) (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((^ CONST-DECL "real" |exponentiation| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posreal_expt| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|both_sides_expt_pos_le_aux| FORMULA-DECL NIL |exponentiation| NIL)) NIL)) (|both_sides_expt_gt1_le| 0 (|both_sides_expt_gt1_le-1| |nil| 3237052399 ("" (SKOSIMP*) (("" (CASE "i!1 = j!1") (("1" (ASSERT) NIL NIL) ("2" (LEMMA "both_sides_expt_gt1_lt") (("2" (INST -1 "gt1x!1" "j!1" "i!1") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|posreal_exp| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|both_sides_expt_gt1_lt| FORMULA-DECL NIL |exponentiation| NIL)) NIL)) (|both_sides_expt_lt1_le| 0 (|both_sides_expt_lt1_le-1| |nil| 3237052399 ("" (SKOSIMP*) (("" (LEMMA "both_sides_expt_lt1_lt") (("" (INST -1 "j!1" "i!1" "lt1x!1") (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ((|both_sides_expt_lt1_lt| FORMULA-DECL NIL |exponentiation| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posreal_exp| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL)) (|both_sides_expt_pos_gt| 0 (|both_sides_expt_pos_gt-1| |nil| 3237052399 ("" (SKOSIMP) (("" (EXPAND "^") (("" (LEMMA "both_sides_expt_pos_gt_aux") (("" (INST?) (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((^ CONST-DECL "real" |exponentiation| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posreal_expt| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|both_sides_expt_pos_gt_aux| FORMULA-DECL NIL |exponentiation| NIL)) NIL)) (|both_sides_expt_gt1_gt| 0 (|both_sides_expt_gt1_gt-1| |nil| 3237052399 ("" (SKOSIMP*) (("" (LEMMA "both_sides_expt_gt1_lt") (("" (INST -1 "gt1x!1" "j!1" "i!1") (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ((|both_sides_expt_gt1_lt| FORMULA-DECL NIL |exponentiation| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posreal_exp| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL)) (|both_sides_expt_lt1_gt| 0 (|both_sides_expt_lt1_gt-1| |nil| 3237052399 ("" (SKOSIMP*) (("" (LEMMA "both_sides_expt_lt1_lt") (("" (INST -1 "j!1" "i!1" "lt1x!1") (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ((|both_sides_expt_lt1_lt| FORMULA-DECL NIL |exponentiation| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posreal_exp| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL)) (|both_sides_expt_pos_ge| 0 (|both_sides_expt_pos_ge-1| |nil| 3237052399 ("" (SKOSIMP) (("" (EXPAND "^") (("" (LEMMA "both_sides_expt_pos_ge_aux") (("" (INST?) (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((^ CONST-DECL "real" |exponentiation| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|posreal_expt| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|both_sides_expt_pos_ge_aux| FORMULA-DECL NIL |exponentiation| NIL)) NIL)) (|both_sides_expt_gt1_ge| 0 (|both_sides_expt_gt1_ge-1| |nil| 3237052399 ("" (SKOSIMP*) (("" (LEMMA "both_sides_expt_gt1_le") (("" (INST -1 "gt1x!1" "j!1" "i!1") (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ((|both_sides_expt_gt1_le| FORMULA-DECL NIL |exponentiation| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posreal_exp| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL)) (|both_sides_expt_lt1_ge| 0 (|both_sides_expt_lt1_ge-1| |nil| 3237052399 ("" (SKOSIMP*) (("" (LEMMA "both_sides_expt_lt1_le") (("" (INST -1 "j!1" "i!1" "lt1x!1") (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ((|both_sides_expt_lt1_le| FORMULA-DECL NIL |exponentiation| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posreal_exp| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL)) (|expt_gt1_pos_TCC1| 0 (|expt_gt1_pos_TCC1-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|expt_gt1_pos| SUBTYPE "exponentiation.pm" "{i: integers.int | booleans.OR(exponentiation.gt1x /= 0, reals.>=(i, 0))}"))) (|expt_gt1_pos| 0 (|expt_gt1_pos-1| |nil| 3237052399 ("" (INDUCT "pm") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (SKOSIMP*) (("3" (SPLIT) (("1" (REWRITE "expt_plus") (("1" (REWRITE "expt_x1") (("1" (INST?) (("1" (LEMMA "both_sides_times_pos_ge1") (("1" (INST -1 "gt1x!1" "gt1x!1 ^ j!1" "1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "^") (("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|expt_plus| FORMULA-DECL NIL |exponentiation| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|posreal_exp| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|both_sides_times_pos_ge1| FORMULA-DECL NIL |real_props| NIL) (|expt_x1| FORMULA-DECL NIL |exponentiation| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL)) (|expt_gt1_neg_TCC1| 0 (|expt_gt1_neg_TCC1-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|expt_gt1_neg| SUBTYPE "((number_fields.-)(exponentiation.pm))" "{i: integers.int | booleans.OR(exponentiation.gt1x /= 0, reals.>=(i, 0))}"))) (|expt_gt1_neg| 0 (|expt_gt1_neg-1| |nil| 3237052399 ("" (SKOSIMP) (("" (CASE "gt1x!1^(-pm!1) * gt1x!1^pm!1 < gt1x!1^pm!1") (("1" (LEMMA "both_sides_times_pos_lt1") (("1" (INST -1 "gt1x!1 ^ pm!1" "gt1x!1 ^ (-pm!1)" "1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (REWRITE "expt_plus" :DIR RL) (("2" (HIDE 2) (("2" (LEMMA "expt_gt1_pos") (("2" (INST -1 "gt1x!1" "pm!1") (("2" (ASSERT) (("2" (EXPAND "^" 1 1) (("2" (EXPAND "expt") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (>= CONST-DECL "bool" |reals| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posreal_exp| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|both_sides_times_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|expt_gt1_pos| FORMULA-DECL NIL |exponentiation| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|expt_plus| FORMULA-DECL NIL |exponentiation| NIL)) NIL)) (|expt_gt1_nonpos_TCC1| 0 (|expt_gt1_nonpos_TCC1-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|expt_gt1_nonpos| SUBTYPE "((number_fields.-)(exponentiation.m))" "{i: integers.int | booleans.OR(exponentiation.gt1x /= 0, reals.>=(i, 0))}"))) (|expt_gt1_nonpos| 0 (|expt_gt1_nonpos-1| |nil| 3237052399 ("" (SKOSIMP) (("" (CASE "m!1 = 0") (("1" (GRIND) NIL NIL) ("2" (LEMMA "expt_gt1_neg") (("2" (INST -1 "gt1x!1" "m!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posreal_expt| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posreal_exp| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) NIL (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|expt_gt1_neg| FORMULA-DECL NIL |exponentiation| NIL)) NIL)) (|mult_expt_TCC1| 0 (|mult_expt_TCC1-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|mult_expt| SUBTYPE "exponentiation.i" "{i: integers.int | booleans.OR((number_fields.*(exponentiation.n0x, exponentiation.n0y)) /= 0, reals.>=(i, 0))}"))) (|mult_expt| 0 (|mult_expt-1| |nil| 3237052399 ("" (SKOSIMP) (("" (EXPAND "^") (("" (LIFT-IF) (("" (LEMMA "expt_of_mult") (("" (PROP) (("1" (INST?) NIL NIL) ("2" (INST?) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((^ CONST-DECL "real" |exponentiation| NIL) (|expt_of_mult| FORMULA-DECL NIL |exponentiation| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|nzreal_expt| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) NIL) NIL)) (|div_expt_TCC1| 0 (|div_expt_TCC1-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|div_expt| SUBTYPE "exponentiation.i" "{i: integers.int | booleans.OR((number_fields./(exponentiation.n0x, exponentiation.n0y)) /= 0, reals.>=(i, 0))}"))) (|div_expt| 0 (|div_expt-1| |nil| 3237052399 ("" (SKOSIMP) (("" (EXPAND "^") (("" (LEMMA "expt_of_div") (("" (LIFT-IF) (("" (PROP) (("1" (INST?) NIL NIL) ("2" (INST?) (("1" (ASSERT) (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((^ CONST-DECL "real" |exponentiation| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|nzreal_expt| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) NIL (|expt_of_div| FORMULA-DECL NIL |exponentiation| NIL)) NIL)) (|inv_expt| 0 (|inv_expt-1| |nil| 3237052399 ("" (SKOSIMP) (("" (EXPAND "^") (("" (LIFT-IF) (("" (LEMMA "expt_of_inv") (("" (PROP) (("1" (INST?) NIL NIL) ("2" (INST?) (("1" (ASSERT) (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((^ CONST-DECL "real" |exponentiation| NIL) (|expt_of_inv| FORMULA-DECL NIL |exponentiation| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|nzreal_expt| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) NIL) NIL)) (|abs_expt_TCC1| 0 (|abs_expt_TCC1-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nonzero_abs_is_pos| APPLICATION-JUDGEMENT "{y: posreal | y >= x}" |real_defs| NIL)) NIL (|abs_expt| SUBTYPE "exponentiation.i" "{i: integers.int | booleans.OR(real_defs.abs(exponentiation.n0x) /= 0, reals.>=(i, 0))}"))) (|abs_expt| 0 (|abs_expt-1| |nil| 3237052399 ("" (SKOSIMP) (("" (EXPAND "^") (("" (LIFT-IF) (("" (LEMMA "expt_of_abs") (("" (PROP) (("1" (INSTANTIATE -2 ("i!1" "n0x!1")) (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL) ("2" (INST?) (("1" (LEMMA "abs_div") (("1" (INST -1 "expt(n0x!1, -i!1)" "1") (("1" (REPLACE -1) (("1" (EXPAND "abs" 2 2) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nzreal_expt| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|expt_of_abs| FORMULA-DECL NIL |exponentiation| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|nonzero_abs_is_pos| APPLICATION-JUDGEMENT "{y: posreal | y >= x}" |real_defs| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}" |real_defs| NIL) (|nzint_abs_is_pos| APPLICATION-JUDGEMENT "{j: posint | j >= i}" |real_defs| NIL) (|nzrat_abs_is_pos| APPLICATION-JUDGEMENT "{r: posrat | r >= q}" |real_defs| NIL) (|posreal_expt| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|abs_div| FORMULA-DECL NIL |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) NIL (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL)) NIL)) (|abs_hat_nat_TCC1| 0 (|abs_hat_nat_TCC1-1| |nil| 3307950061 ("" (SUBTYPE-TCC) NIL NIL) ((/= CONST-DECL "boolean" |notequal| NIL)) SHOSTAK (|abs_hat_nat| SUBTYPE "exponentiation.n" "{i: integers.int | booleans.OR(real_defs.abs(exponentiation.x) /= 0, reals.>=(i, 0))}"))) (|abs_hat_nat_TCC2| 0 (|abs_hat_nat_TCC2-1| |nil| 3307950061 ("" (SUBTYPE-TCC) NIL NIL) ((/= CONST-DECL "boolean" |notequal| NIL)) SHOSTAK (|abs_hat_nat| SUBTYPE "exponentiation.n" "{i: integers.int | booleans.OR(exponentiation.x /= 0, reals.>=(i, 0))}"))) (|abs_hat_nat| 0 (|abs_hat_nat-1| |nil| 3307952457 ("" (INDUCT "n") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP*) (("2" (EXPAND "^") (("2" (EXPAND "expt" +) (("2" (REWRITE "abs_mult") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|nnreal_expt| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (|abs_mult| FORMULA-DECL NIL |real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK)) (|expt_minus1_abs| 0 (|expt_minus1_abs-1| |nil| 3307952835 ("" (SKOSIMP*) (("" (CASE "i!1<0") (("1" (LEMMA "expt_inverse" ("n0x" "-1" "i" "-i!1")) (("1" (REPLACE -1) (("1" (REWRITE "abs_div" 1) (("1" (REWRITE "abs_hat_nat" 1 :DIR RL) (("1" (EXPAND "abs" 1) (("1" (REWRITE "expt_1i") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "abs_hat_nat" 2 :DIR RL) (("2" (EXPAND "abs") (("2" (REWRITE "expt_1i" 2) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nzrat_div_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|abs_hat_nat| FORMULA-DECL NIL |exponentiation| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|expt_1i| FORMULA-DECL NIL |exponentiation| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}" |real_defs| NIL) (|nzint_abs_is_pos| APPLICATION-JUDGEMENT "{j: posint | j >= i}" |real_defs| NIL) (|nzrat_abs_is_pos| APPLICATION-JUDGEMENT "{r: posrat | r >= q}" |real_defs| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (>= CONST-DECL "bool" |reals| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|abs_div| FORMULA-DECL NIL |real_props| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|expt_inverse| FORMULA-DECL NIL |exponentiation| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|rat_exp| APPLICATION-JUDGEMENT "rat" |exponentiation| NIL)) SHOSTAK)) (|even_m1_pow| 0 (|even_m1_pow-1| |nil| 3307952866 ("" (SKOSIMP*) (("" (EXPAND "even?") (("" (SKOSIMP*) (("" (REPLACE -1) (("" (LEMMA "expt_times" ("n0x" "-1" "i" "2" "j" "j!1")) (("" (REPLACE -1) (("" (EXPAND "^" 1 1) (("" (EXPAND "expt") (("" (EXPAND "expt") (("" (EXPAND "expt") (("" (REWRITE "expt_1i") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|even?| CONST-DECL "bool" |integers| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|expt_1i| FORMULA-DECL NIL |exponentiation| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|expt_times| FORMULA-DECL NIL |exponentiation| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK)) (|not_even_m1_pow| 0 (|not_even_m1_pow-1| |nil| 3307952902 ("" (SKOSIMP*) (("" (REWRITE "even_or_odd") (("" (EXPAND "odd?") (("" (SKOSIMP*) (("" (REPLACE -1) (("" (LEMMA "expt_plus" ("n0x" "-1" "i" "1" "j" "2*j!1")) (("" (REPLACE -1) (("" (LEMMA "expt_times" ("n0x" "-1" "i" "2" "j" "j!1")) (("" (REPLACE -1) (("" (EXPAND "^" 1 2) (("" (EXPAND "expt") (("" (EXPAND "expt") (("" (EXPAND "expt") (("" (REWRITE "expt_x1") (("" (REWRITE "expt_1i") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|even_or_odd| FORMULA-DECL NIL |naturalnumbers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|expt_plus| FORMULA-DECL NIL |exponentiation| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|expt_times| FORMULA-DECL NIL |exponentiation| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|expt_x1| FORMULA-DECL NIL |exponentiation| NIL) (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|odd_times_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nzrat_times_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|expt_1i| FORMULA-DECL NIL |exponentiation| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|rat_exp| APPLICATION-JUDGEMENT "rat" |exponentiation| NIL) (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|int_exp| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|odd?| CONST-DECL "bool" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)) SHOSTAK)) (|expt_lt1_bound1| 0 (|expt_lt1_bound1-1| |nil| 3237052399 ("" (INDUCT-AND-SIMPLIFY "n") (("" (USE "both_sides_times_pos_le2" ("pz" "lt1x!1")) (("" (ASSERT) NIL NIL)) NIL)) NIL) ((|both_sides_times_pos_le2| FORMULA-DECL NIL |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posreal_expt| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)) NIL)) (|expt_lt1_bound2| 0 (|expt_lt1_bound2-1| |nil| 3237052399 ("" (SKOLEM!) (("" (USE "expt_lt1_bound1") (("" (USE "expt_1_aux") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|expt_lt1_bound1| FORMULA-DECL NIL |exponentiation| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (< CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posreal_expt| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|expt_1_aux| FORMULA-DECL NIL |exponentiation| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL)) (|expt_gt1_bound1| 0 (|expt_gt1_bound1-1| |nil| 3237052399 ("" (SKOLEM 1 ("a!1" _)) (("" (INDUCT-AND-SIMPLIFY "n") (("" (LEMMA "both_sides_times_pos_le2") (("" (INST -1 "expt(a!1, j!1)" "1" "a!1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (<= CONST-DECL "bool" |reals| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posreal_expt| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|both_sides_times_pos_le2| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|expt_gt1_bound2| 0 (|expt_gt1_bound2-1| |nil| 3237052399 ("" (SKOLEM!) (("" (USE "expt_gt1_bound1" ("n" "pn!1 - 1")) (("" (EXPAND "expt" +) (("" (LEMMA "both_sides_times_pos_le1") (("" (ASSERT) (("" (INST -1 "gt1x!1" "1" "expt(gt1x!1, pn!1-1)") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|expt_gt1_bound1| FORMULA-DECL NIL |exponentiation| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|posreal_expt| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|both_sides_times_pos_le1| FORMULA-DECL NIL |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL)) NIL)) (|large_expt| 0 (|large_expt-1| |nil| 3237052399 ("" (SKOSIMP) (("" (ASSERT) (("" (AUTO-REWRITE-THEORY "sets[real]") (("" (LEMMA "real_complete" ("S" "{x:real | EXISTS (n : nat) : x = expt(px!1, n)}")) (("1" (HIDE 1) (("1" (SPLIT -1) (("1" (SKOSIMP*) (("1" (EXPAND "least_upper_bound?") (("1" (FLATTEN) (("1" (INST -2 "y!1/px!1") (("1" (CASE "y!1 > 0") (("1" (GROUND) (("1" (LEMMA "both_sides_div_pos_le2" ("px" "1" "py" "px!1" "pz" "y!1")) (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "upper_bound?") (("2" (SKOSIMP*) (("2" (INST - "s!1*px!1") (("1" (REWRITE "div_mult_pos_le2") NIL NIL) ("2" (TYPEPRED "s!1") (("2" (SKOSIMP*) (("2" (INST 1 "n!1+1") (("2" (EXPAND "expt" +) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (DELETE -2) (("2" (EXPAND "upper_bound?") (("2" (INST - "1") (("1" (ASSERT) NIL NIL) ("2" (INST 1 "0") (("2" (EXPAND "expt") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL 1) (("2" (SKOLEM!) (("2" (INST 2 "py!1") (("2" (EXPAND "upper_bound?") (("2" (SKOSIMP*) (("2" (TYPEPRED "s!1") (("2" (SKOSIMP*) (("2" (INST 1 "n!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST -1 "1") (("2" (INST 1 "0") (("2" (EXPAND "expt") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posreal_expt| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|real_complete| FORMULA-DECL NIL |bounded_real_defs| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) NIL (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|both_sides_div_pos_le2| FORMULA-DECL NIL |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|div_mult_pos_le2| FORMULA-DECL NIL |real_props| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) NIL NIL (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) NIL) NIL)) (|small_expt| 0 (|small_expt-1| |nil| 3237052399 ("" (SKOSIMP*) (("" (LEMMA "large_expt" ("px" "1/px!1")) (("" (REWRITE "div_mult_pos_lt2") (("" (ASSERT) (("" (INST -1 "1/py!1") (("" (SKOLEM!) (("" (INST 1 "n!1") (("" (REWRITE "expt_of_inv") (("" (REWRITE "both_sides_div_pos_lt2") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|large_expt| FORMULA-DECL NIL |exponentiation| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|expt_of_inv| FORMULA-DECL NIL |exponentiation| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|posreal_expt| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|both_sides_div_pos_lt2| FORMULA-DECL NIL |real_props| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|div_mult_pos_lt2| FORMULA-DECL NIL |real_props| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL)) (|exponent_adjust_TCC1| 0 (|exponent_adjust_TCC1-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|exponent_adjust| SUBTYPE "exponentiation.i" "{i: integers.int | booleans.OR(exponentiation.b /= 0, reals.>=(i, 0))}"))) (|exponent_adjust_TCC2| 0 (|exponent_adjust_TCC2-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|exponent_adjust| SUBTYPE "((number_fields.-)(exponentiation.i, exponentiation.pm))" "{i: integers.int | booleans.OR(exponentiation.b /= 0, reals.>=(i, 0))}"))) (|exponent_adjust_TCC3| 0 (|exponent_adjust_TCC3-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|exponent_adjust| SUBTYPE "((number_fields.+)(exponentiation.i, 1))" "{i: integers.int | booleans.OR(exponentiation.b /= 0, reals.>=(i, 0))}"))) (|exponent_adjust| 0 (|exponent_adjust-1| |nil| 3237052399 ("" (SKOSIMP*) (("" (LEMMA "both_sides_expt_gt1_lt") (("" (INST - "b!1" "i!1 - pm!1" "i!1") (("" (GROUND) (("" (REWRITE "expt_plus") (("" (REWRITE "expt_x1") (("" (LEMMA "both_sides_times_pos_le1") (("" (INST - "b!1 ^ i!1" "2" "b!1") (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|both_sides_expt_gt1_lt| FORMULA-DECL NIL |exponentiation| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|nnrat_plus_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|expt_x1| FORMULA-DECL NIL |exponentiation| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|both_sides_times_pos_le1| FORMULA-DECL NIL |real_props| NIL) (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|expt_plus| FORMULA-DECL NIL |exponentiation| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL)) (|exp_of_exists| 0 (|exp_of_exists-1| |nil| 3237052399 ("" (SKOSIMP*) (("" (LEMMA "lub_int") (("" (CASE "py!1<1") (("1" (INST - "{i|b!1^i<=py!1}" "-1") (("1" (PROP) (("1" (EXPAND "least_upper_bound?") (("1" (SKOSIMP*) (("1" (HIDE -2) (("1" (INST + "j!1") (("1" (ASSERT) (("1" (EXPAND "upper_bound?") (("1" (INST - "j!1+1") (("1" (ASSERT) NIL NIL) ("2" (EXPAND "extend") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "upper_bound?") (("2" (SKOLEM-TYPEPRED) (("2" (EXPAND "extend") (("2" (CASE "s!1>=0") (("1" (LEMMA "expt_ge1") (("1" (INST?) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (PROP) NIL NIL)) NIL)) NIL)) NIL) ("2" (PROP) (("2" (ASSERT) (("2" (CASE "EXISTS (x:int): 0 > x & x > -1") (("1" (SKOSIMP) (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST 1 "s!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "nonempty_exists") (("2" (LEMMA "axiom_of_archimedes") (("2" (INST - "1/py!1") (("2" (SKOSIMP*) (("2" (INST + "-i!1") (("2" (REWRITE "expt_inverse") (("2" (REWRITE "div_mult_pos_le1") (("2" (LEMMA "pos_expt_gt") (("2" (INST?) (("1" (REWRITE "div_mult_pos_lt1") (("1" (LEMMA "both_sides_times_pos_lt2") (("1" (INST - "py!1" "i!1" "b!1^i!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "axiom_of_archimedes") (("2" (INST?) (("2" (SKOSIMP*) (("2" (INST - "{i|b!1^i<=py!1}" "i!1") (("1" (PROP) (("1" (EXPAND "least_upper_bound?") (("1" (SKOSIMP*) (("1" (HIDE -2) (("1" (INST + "j!1") (("1" (ASSERT) (("1" (EXPAND "upper_bound?") (("1" (INST - "j!1+1") (("1" (ASSERT) NIL NIL) ("2" (EXPAND "extend") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "upper_bound?") (("2" (SKOLEM-TYPEPRED) (("2" (EXPAND "extend") (("2" (PROP) (("2" (LEMMA "pos_expt_gt") (("2" (INST?) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "nonempty_exists") (("2" (INST + "0") (("2" (REWRITE "expt_x0") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|lub_int| FORMULA-DECL NIL |integer_props| NIL) (|expt_x0| FORMULA-DECL NIL |exponentiation| NIL) (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL) NIL NIL NIL NIL (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|expt_ge1| FORMULA-DECL NIL |exponentiation| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnrat_exp| APPLICATION-JUDGEMENT "nnrat" |exponentiation| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) NIL (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) NIL (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|extend| CONST-DECL "R" |extend| NIL) (FALSE CONST-DECL "bool" |booleans| NIL) NIL (|axiom_of_archimedes| FORMULA-DECL NIL |real_props| NIL) (|expt_inverse| FORMULA-DECL NIL |exponentiation| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|pos_expt_gt| FORMULA-DECL NIL |exponentiation| NIL) (|div_mult_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|both_sides_times_pos_lt2| FORMULA-DECL NIL |real_props| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|div_mult_pos_le1| FORMULA-DECL NIL |real_props| NIL) NIL (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nonempty_exists| FORMULA-DECL NIL |sets_lemmas| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL)))(|euclidean_division| (|mod_TCC1| 0 (|mod_TCC1-1| |nil| 3237052399 ("" (SKOLEM-TYPEPRED) (("" (INST 1 "0") NIL NIL)) NIL) ((|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (> CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL (|mod| EXISTENCE "" "{i | reals.<(euclidean_division.i, euclidean_division.b)}"))) (|euclid_nat| 0 (|euclid_nat-1| |nil| 3237052399 ("" (SKOLEM 1 (_ "b!1")) (("" (INDUCT "a") (("1" (INST + "0" "0") (("1" (ASSERT) NIL NIL)) NIL) ("2" (SKOSIMP*) (("2" (CASE "r!1 = b!1-1") (("1" (INST + "q!1+1" "0") (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) (("2" (INST + "q!1" "r!1+1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|mod| NONEMPTY-TYPE-EQ-DECL NIL |euclidean_division| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) NIL)) (|euclid_int| 0 (|euclid_int-1| |nil| 3237052399 ("" (SKOLEM!) (("" (CASE "n!1 >= 0") (("1" (USE "euclid_nat" ("a" "n!1")) (("1" (SKOLEM!) (("1" (INST?) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (USE "euclid_nat" ("a" "- n!1")) (("2" (SKOLEM!) (("2" (CASE "r!1 = 0") (("1" (INST + "-q!1" "0") (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST + "- q!1 - 1" "b!1 - r!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|mod| NONEMPTY-TYPE-EQ-DECL NIL |euclidean_division| NIL) (< CONST-DECL "bool" |reals| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|euclid_nat| FORMULA-DECL NIL |euclidean_division| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) NIL NIL (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL)) (|unique_quotient| 0 (|unique_quotient-2| "" 3299962695 ("" (SKOSIMP) (("" (ASSERT) (("" (CASE "q1!1 > q2!1") (("1" (CASE "b!1 * (q1!1 - q2!1) = r2!1 - r1!1") (("1" (CASE "b!1 * (q1!1 - q2!1) >= b!1") (("1" (ASSERT) NIL NIL) ("2" (LEMMA "both_sides_times_pos_ge2") (("2" (INST -1 "b!1" "q1!1 - q2!1" "1") (("2" (ASSERT) (("2" (ASSERT :FLUSH? T) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (CASE "b!1 * (q2!1 - q1!1) = r1!1 - r2!1") (("1" (CASE "b!1 * (q2!1 - q1!1) >= b!1") (("1" (ASSERT) NIL NIL) ("2" (LEMMA "both_sides_times_pos_ge2") (("2" (INST -1 "b!1" "q2!1 - q1!1" "1") (("2" (ASSERT) (("2" (ASSERT :FLUSH? T) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|mod| NONEMPTY-TYPE-EQ-DECL NIL |euclidean_division| NIL) (|both_sides_times_pos_ge2| FORMULA-DECL NIL |real_props| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (> CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK) (|unique_quotient-1| |nil| 3237052399 ("" (SKOSIMP) (("" (ASSERT) (("" (CASE "q1!1 > q2!1") (("1" (CASE "b!1 * (q1!1 - q2!1) = r2!1 - r1!1") (("1" (CASE "b!1 * (q1!1 - q2!1) >= b!1") (("1" (ASSERT) NIL NIL) ("2" (LEMMA "both_sides_times_pos_ge2") (("2" (INST -1 "b!1" "q1!1 - q2!1" "1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (CASE "b!1 * (q2!1 - q1!1) = r1!1 - r2!1") (("1" (CASE "b!1 * (q2!1 - q1!1) >= b!1") (("1" (ASSERT) NIL NIL) ("2" (LEMMA "both_sides_times_pos_ge2") (("2" (INST -1 "b!1" "q2!1 - q1!1" "1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL)) (|unique_remainder| 0 (|unique_remainder-1| |nil| 3237052399 ("" (LEMMA "unique_quotient") (("" (SKOSIMP) (("" (INST?) (("" (ASSERT) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|mod| NONEMPTY-TYPE-EQ-DECL NIL |euclidean_division| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|unique_quotient| FORMULA-DECL NIL |euclidean_division| NIL)) NIL)) (|unique_division| 0 (|unique_division-1| |nil| 3237052399 ("" (LEMMA "unique_quotient") (("" (LEMMA "unique_remainder") (("" (SKOSIMP) (("" (INST?) (("" (ASSERT) (("" (INST -2 "b!1" "q1!1" "q2!1" "r1!1" "r2!1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|unique_remainder| FORMULA-DECL NIL |euclidean_division| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|mod| NONEMPTY-TYPE-EQ-DECL NIL |euclidean_division| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|unique_quotient| FORMULA-DECL NIL |euclidean_division| NIL)) NIL)))(|divides| (|mult_divides1| 0 (|mult_divides1-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) NIL NIL (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|mult_divides1| SUBTYPE "number_fields.*(divides.n, divides.m)" "(divides.divides(divides.n))"))) (|mult_divides2| 0 (|mult_divides2-1| |nil| 3237052399 ("" (SKOSIMP) (("" (GRIND :IF-MATCH NIL) (("" (INST 1 "n!1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) (NIL NIL (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL (|mult_divides2| SUBTYPE "number_fields.*(divides.n, divides.m)" "(divides.divides(divides.m))"))) (|divides_sum| 0 (|divides_sum-1| |nil| 3237052399 ("" (SKOSIMP) (("" (EXPAND "divides") (("" (SKOSIMP) (("" (SKOSIMP) (("" (INST 1 "x!2 + x!3") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL)) (|divides_diff| 0 (|divides_diff-1| |nil| 3237052399 ("" (SKOSIMP) (("" (EXPAND "divides") (("" (SKOSIMP*) (("" (INST 1 "x!2 - x!3") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) (NIL (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL)) (|divides_opposite| 0 (|divides_opposite-1| |nil| 3237052399 ("" (SKOSIMP*) (("" (PROP) (("1" (EXPAND "divides") (("1" (SKOSIMP*) (("1" (INST 1 "-x!2") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "divides") (("2" (SKOSIMP*) (("2" (INST 1 "-x!2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) NIL) NIL)) (|opposite_divides| 0 (|opposite_divides-1| |nil| 3237052399 ("" (SKOSIMP*) (("" (EXPAND "divides") (("" (PROP) (("1" (SKOSIMP*) (("1" (INST 1 "-x!2") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST 1 "-x!2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) NIL (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL)) (|divides_prod1| 0 (|divides_prod1-1| |nil| 3237052399 ("" (SKOSIMP*) (("" (EXPAND "divides") (("" (SKOSIMP*) (("" (INST 1 "x!2 * m!1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) (NIL (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL)) (|divides_prod2| 0 (|divides_prod2-1| |nil| 3237052399 ("" (SKOSIMP*) (("" (EXPAND "divides") (("" (SKOSIMP*) (("" (INST 1 "x!2 * m!1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) (NIL (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL)) (|divides_prod_elim1| 0 (|divides_prod_elim1-1| |nil| 3237052399 ("" (SKOSIMP*) (("" (EXPAND "divides") (("" (PROP) (("1" (SKOSIMP*) (("1" (INST 1 "x!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST 1 "x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) NIL (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL)) (|divides_prod_elim2| 0 (|divides_prod_elim2-1| |nil| 3237052399 ("" (SKOSIMP*) (("" (LEMMA "divides_prod_elim1") (("" (INST -1 "m!1" "n!1" "nz!1") (("" (REPLACE -1) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|divides_prod_elim1| FORMULA-DECL NIL |divides| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nzint| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL)) (|divides_reflexive| 0 (|divides_reflexive-1| |nil| 3237052399 ("" (SKOSIMP*) (("" (EXPAND "divides") (("" (INST 1 "1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) (NIL (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL)) (|divides_transitive| 0 (|divides_transitive-1| |nil| 3237052399 ("" (SKOSIMP*) (("" (EXPAND "divides") (("" (SKOSIMP*) (("" (INST 1 "x!1 * x!2") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) (NIL (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL)) (|product_one| 0 (|product_one-2| "" 3299962800 ("" (SKOSIMP) (("" (SPLIT) (("1" (FLATTEN) (("1" (LEMMA "eq1_gt") (("1" (LEMMA "pos_times_lt") (("1" (INST -1 "x!1" "y!1") (("1" (ASSERT) (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (CASE "x!1 > 1") (("1" (INST -4 "x!1" "y!1") (("1" (ASSERT) (("1" (ASSERT :FLUSH? T) NIL NIL)) NIL)) NIL) ("2" (CASE "y!1 > 1") (("1" (INST -4 "y!1" "x!1") (("1" (ASSERT) (("1" (ASSERT :FLUSH? T) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (ASSERT :FLUSH? T) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CASE "x!1 < -1") (("1" (INST -4 "-x!1" "-y!1") (("1" (ASSERT) (("1" (ASSERT :FLUSH? T) NIL NIL)) NIL)) NIL) ("2" (CASE "y!1 < -1") (("1" (INST -4 "-y!1" "-x!1") (("1" (ASSERT) (("1" (ASSERT :FLUSH? T) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (ASSERT :FLUSH? T) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL) ((|eq1_gt| FORMULA-DECL NIL |real_props| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|pos_times_lt| FORMULA-DECL NIL |real_props| NIL)) SHOSTAK) (|product_one-1| |nil| 3237052399 ("" (SKOSIMP) (("" (SPLIT) (("1" (FLATTEN) (("1" (LEMMA "eq1_gt") (("1" (LEMMA "pos_times_lt") (("1" (INST -1 "x!1" "y!1") (("1" (ASSERT) (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (CASE "x!1 > 1") (("1" (INST -4 "x!1" "y!1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (CASE "y!1 > 1") (("1" (INST -4 "y!1" "x!1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CASE "x!1 < -1") (("1" (INST -4 "-x!1" "-y!1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (CASE "y!1 < -1") (("1" (INST -4 "-y!1" "-x!1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL) NIL NIL)) (|mutual_divisors| 0 (|mutual_divisors-1| |nil| 3237052399 ("" (EXPAND "divides") (("" (SKOSIMP*) (("" (CASE "n!1 = 0") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (LEMMA "both_sides_times1" ("n0z" "n!1" "x" "x!1 * x!2" "y" "1")) (("2" (GROUND) (("2" (REWRITE "product_one") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|product_one| FORMULA-DECL NIL |divides| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|both_sides_times1| FORMULA-DECL NIL |real_props| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) NIL) NIL)) (|mutual_divisors_nat| 0 (|mutual_divisors_nat-1| |nil| 3237052399 ("" (SKOSIMP) (("" (FORWARD-CHAIN "mutual_divisors") (("" (ASSERT) NIL NIL)) NIL)) NIL) ((|mutual_divisors| FORMULA-DECL NIL |divides| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL)) (|one_divides| 0 (|one_divides-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) NIL) NIL)) (|divides_zero| 0 (|divides_zero-1| |nil| 3237052399 ("" (GRIND :IF-MATCH ALL) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) NIL) NIL)) (|zero_div_zero| 0 (|zero_div_zero-1| |nil| 3237052399 ("" (GRIND :IF-MATCH ALL) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) NIL) NIL)) (|divisors_of_one| 0 (|divisors_of_one-1| |nil| 3237052399 ("" (AUTO-REWRITE "one_divides" "opposite_divides") (("" (REDUCE) (("1" (EXPAND "divides") (("1" (SKOLEM!) (("1" (USE "product_one") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "divides") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|one_divides| FORMULA-DECL NIL |divides| NIL) (|opposite_divides| FORMULA-DECL NIL |divides| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|product_one| FORMULA-DECL NIL |divides| NIL) NIL) NIL)) (|one_div_one| 0 (|one_div_one-1| |nil| 3237052399 ("" (SKOLEM!) (("" (REWRITE "divisors_of_one") NIL NIL)) NIL) ((|divisors_of_one| FORMULA-DECL NIL |divides| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)) NIL)) (|divisor_smaller| 0 (|divisor_smaller-2| "" 3299962906 ("" (EXPAND "divides") (("" (SKOSIMP*) (("" (ASSERT) (("" (USE "pos_times_lt") (("" (GROUND) (("" (USE "both_sides_times_pos_le1" ("pz" "p!1" "x" "1" "y" "x!1")) (("" (ASSERT) (("" (ASSERT :FLUSH? T) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|pos_times_lt| FORMULA-DECL NIL |real_props| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|both_sides_times_pos_le1| FORMULA-DECL NIL |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) NIL) SHOSTAK) (|divisor_smaller-1| |nil| 3237052399 ("" (EXPAND "divides") (("" (SKOSIMP*) (("" (ASSERT) (("" (USE "pos_times_lt") (("" (GROUND) (("" (USE "both_sides_times_pos_le1" ("pz" "p!1" "x" "1" "y" "x!1")) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL)) (|divides_next| 0 (|divides_next-1| |nil| 3252309122 ("" (SKOLEM!) (("" (REWRITE "divisors_of_one" :DIR RL) (("" (EXPAND "divides") (("" (PROP) (("1" (SKOLEM!) (("1" (INST + "x!1 - 1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKOLEM!) (("2" (INST + "x!1 + 1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|divisors_of_one| FORMULA-DECL NIL |divides| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) NIL) SHOSTAK)) (|divides_plus_1| 0 (|divides_plus_1-1| |nil| 3252309151 ("" (SKOSIMP) (("" (LEMMA "divides_diff") (("" (INST - "nz!1" "nz!1 + 1" "p1!1") (("" (ASSERT) (("" (REWRITE "divisors_of_one") NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|divides_diff| FORMULA-DECL NIL |divides| NIL) (|divisors_of_one| FORMULA-DECL NIL |divides| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nzint| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK)))(|modulo_arithmetic| (|nrem_TCC1| 0 (|nrem_TCC1-1| |nil| 3717230987 ("" (INST 1 "lambda (i: int, p: posnat): choose! (r: mod(p)): exists q: i = r + p * q") (("" (SKEEP) (("" (EXPAND "nonempty?") (("" (EXPAND "empty?") (("" (EXPAND "member") (("" (LEMMA "euclid_int") (("" (INST -1 "p" "i") (("" (SKEEP) (("" (INST -2 "r") (("" (INST 1 "q") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|empty?| CONST-DECL "bool" |sets| NIL) (|euclid_int| FORMULA-DECL NIL |euclidean_division| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|mod| NONEMPTY-TYPE-EQ-DECL NIL |euclidean_division| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|choose| CONST-DECL "(p)" |sets| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) SHOSTAK (|nrem| EXISTENCE "" "[d: [int, posnat] -> {r: euclidean_division.mod(d`2) | EXISTS q: d`1 = (number_fields.+)(r, number_fields.*(d`2, modulo_arithmetic.q))}]"))) (|rem_TCC1| 0 (|rem_TCC1-1| |nil| 3237052399 ("" (INST 1 "lambda (b: posnat): lambda (x: int): choose! (r: mod(b)): exists q: x = r + b * q") (("" (LEMMA "euclid_int") (("" (SKEEP) (("" (EXPAND "nonempty?") (("" (EXPAND "empty?") (("" (EXPAND "member") (("" (INST -1 "b" "x") (("" (SKEEP) (("" (INST -2 "r") (("" (INST 1 "q") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|euclid_int| FORMULA-DECL NIL |euclidean_division| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|mod| NONEMPTY-TYPE-EQ-DECL NIL |euclidean_division| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|choose| CONST-DECL "(p)" |sets| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|rem| EXISTENCE "" "[b: posnat -> [x: int -> {r: euclidean_division.mod(b) | EXISTS q: x = (number_fields.+)(r, number_fields.*(b, modulo_arithmetic.q))}]]"))) (|rem_def| 0 (|rem_def-1| |nil| 3237052399 ("" (SKOLEM!) (("" (CASE "EXISTS q: x!1 = b!1 * q + rem(b!1)(x!1)") (("1" (GROUND) (("1" (SKOSIMP*) (("1" (USE "unique_remainder") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (DELETE 2) (("2" (TYPEPRED "rem(b!1)(x!1)") (("2" (SKOSIMP) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|mod| NONEMPTY-TYPE-EQ-DECL NIL |euclidean_division| NIL) (|rem| CONST-DECL "{r: mod(b) | EXISTS q: x = b * q + r}" |modulo_arithmetic| NIL) (|unique_remainder| FORMULA-DECL NIL |euclidean_division| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL)) (|rem_def2| 0 (|rem_def2-1| |nil| 3237052399 ("" (SKOLEM!) (("" (REWRITE "rem_def") (("" (EXPAND "divides") (("" (GROUND) (("1" (SKOLEM!) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKOLEM!) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|rem_def| FORMULA-DECL NIL |modulo_arithmetic| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|mod| NONEMPTY-TYPE-EQ-DECL NIL |euclidean_division| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) NIL (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL)) (|rem_def3| 0 (|rem_def3-1| |nil| 3237052399 ("" (SKOLEM!) (("" (REWRITE "rem_def2") (("" (GROUND) (("1" (REWRITE "divides_opposite" :DIR RL) NIL NIL) ("2" (REWRITE "divides_opposite" :DIR RL) NIL NIL)) NIL)) NIL)) NIL) ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|rem_def2| FORMULA-DECL NIL |modulo_arithmetic| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|mod| NONEMPTY-TYPE-EQ-DECL NIL |euclidean_division| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|divides_opposite| FORMULA-DECL NIL |divides| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL)) (|rem_nrem0| 0 (|rem_nrem0-1| |nil| 3728617532 ("" (APPLY-EXTENSIONALITY :HIDE? T) (("" (APPLY-EXTENSIONALITY :HIDE? T) (("" (TYPEPRED "rem(x!1)(x!2)") (("" (SKEEP) (("" (TYPEPRED "nrem(x!2, x!1)") (("" (SKEEP) (("" (NAME-REPLACE "nr" "nrem(x!2, x!1)") (("" (NAME-REPLACE "r" "rem(x!1)(x!2)") (("" (LEMMA "unique_remainder") (("" (INST -1 "x!1" "q!1" "q" "nr" "r") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|unique_remainder| FORMULA-DECL NIL |euclidean_division| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|rem| CONST-DECL "{r: mod(b) | EXISTS q: x = b * q + r}" |modulo_arithmetic| NIL) (|nrem| CONST-DECL "{r: mod(b) | EXISTS q: x = b * q + r}" |modulo_arithmetic| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|mod| NONEMPTY-TYPE-EQ-DECL NIL |euclidean_division| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)) SHOSTAK)) (|rem_nrem| 0 (|rem_nrem-1| |nil| 3728764938 ("" (SKEEP) (("" (USE "rem_nrem0") (("" (ASSERT) (("" (REPLACE -1) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|rem_nrem0| FORMULA-DECL NIL |modulo_arithmetic| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) SHOSTAK)) (|rem_mod| 0 (|rem_mod-1| |nil| 3237052399 ("" (AUTO-REWRITE "divides_zero") (("" (SKOLEM!) (("" (REWRITE "rem_def2") NIL NIL)) NIL)) NIL) ((|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|divides_zero| FORMULA-DECL NIL |divides| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|mod| NONEMPTY-TYPE-EQ-DECL NIL |euclidean_division| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|rem_def2| FORMULA-DECL NIL |modulo_arithmetic| NIL)) NIL)) (|rem_mod2| 0 (|rem_mod2-1| |nil| 3237052399 ("" (SKOSIMP) (("" (ASSERT) (("" (REWRITE "rem_mod") NIL NIL)) NIL)) NIL) ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|mod| NONEMPTY-TYPE-EQ-DECL NIL |euclidean_division| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|rem_mod| FORMULA-DECL NIL |modulo_arithmetic| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL)) (|rem_zero| 0 (|rem_zero-1| |nil| 3237052399 ("" (AUTO-REWRITE "divides_zero" "rem_def2") (("" (SKOLEM!) (("" (ASSERT) NIL NIL)) NIL)) NIL) ((|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|divides_zero| FORMULA-DECL NIL |divides| NIL) (|rem_def2| FORMULA-DECL NIL |modulo_arithmetic| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL)) (|rem_self| 0 (|rem_self-1| |nil| 3237052399 ("" (AUTO-REWRITE "divides_reflexive" "rem_def2") (("" (SKOLEM!) (("" (ASSERT) NIL NIL)) NIL)) NIL) ((|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|rem_def2| FORMULA-DECL NIL |modulo_arithmetic| NIL) (|divides_reflexive| FORMULA-DECL NIL |divides| NIL)) NIL)) (|rem_multiple1| 0 (|rem_multiple1-1| |nil| 3237052399 ("" (AUTO-REWRITE "divides_prod1" "divides_prod2" "divides_reflexive" "rem_def2") (("" (SKOLEM!) (("" (ASSERT) NIL NIL)) NIL)) NIL) ((|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|divides_reflexive| FORMULA-DECL NIL |divides| NIL) (|divides_prod1| FORMULA-DECL NIL |divides| NIL) (|rem_def2| FORMULA-DECL NIL |modulo_arithmetic| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL)) (|rem_multiple2| 0 (|rem_multiple2-1| |nil| 3237052399 ("" (AUTO-REWRITE "divides_prod1" "divides_prod2" "divides_reflexive" "rem_def2") (("" (SKOLEM!) (("" (ASSERT) NIL NIL)) NIL)) NIL) ((|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|divides_reflexive| FORMULA-DECL NIL |divides| NIL) (|divides_prod2| FORMULA-DECL NIL |divides| NIL) (|rem_def2| FORMULA-DECL NIL |modulo_arithmetic| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL)) (|rem_one| 0 (|rem_one-1| |nil| 3237052399 ("" (SKOSIMP) (("" (REWRITE "rem_def") (("" (INST + "0") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|rem_def| FORMULA-DECL NIL |modulo_arithmetic| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|mod| NONEMPTY-TYPE-EQ-DECL NIL |euclidean_division| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL)) (|rem_minus_one| 0 (|rem_minus_one-1| |nil| 3237052399 ("" (SKOLEM!) (("" (REWRITE "rem_def") (("" (INST + "-1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|rem_def| FORMULA-DECL NIL |modulo_arithmetic| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|mod| NONEMPTY-TYPE-EQ-DECL NIL |euclidean_division| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nzint_times_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL)) (|same_remainder| 0 (|same_remainder-1| |nil| 3237052399 ("" (SKOLEM!) (("" (NAME-REPLACE "r!1" "rem(b!1)(y!1)" :HIDE? NIL) (("" (REWRITE "rem_def2") (("" (REWRITE "rem_def2") (("" (GROUND) (("1" (USE "divides_diff" ("n" "x!1 - r!1" "m" "y!1 - r!1")) (("1" (ASSERT) NIL NIL)) NIL) ("2" (USE "divides_sum" ("n" "x!1 - y!1" "m" "y!1 - r!1")) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|mod| NONEMPTY-TYPE-EQ-DECL NIL |euclidean_division| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|rem| CONST-DECL "{r: mod(b) | EXISTS q: x = b * q + r}" |modulo_arithmetic| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|divides_sum| FORMULA-DECL NIL |divides| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|divides_diff| FORMULA-DECL NIL |divides| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|rem_def2| FORMULA-DECL NIL |modulo_arithmetic| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL)) (|rem_rem| 0 (|rem_rem-1| |nil| 3237052399 ("" (SKOLEM!) (("" (REWRITE "same_remainder") (("" (NAME-REPLACE "r!1" "rem(b!1)(x!1)" :HIDE? NIL) (("" (REWRITE "rem_def3") NIL NIL)) NIL)) NIL)) NIL) ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|same_remainder| FORMULA-DECL NIL |modulo_arithmetic| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|mod| NONEMPTY-TYPE-EQ-DECL NIL |euclidean_division| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|rem| CONST-DECL "{r: mod(b) | EXISTS q: x = b * q + r}" |modulo_arithmetic| NIL) (|rem_def3| FORMULA-DECL NIL |modulo_arithmetic| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL)) (|rem_sum| 0 (|rem_sum-1| |nil| 3237052399 ("" (AUTO-REWRITE "same_remainder") (("" (SKOSIMP) (("" (ASSERT) (("" (USE "divides_sum" ("n" "x!1 - y!1" "m" "z!1 - t!1")) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|divides_sum| FORMULA-DECL NIL |divides| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|same_remainder| FORMULA-DECL NIL |modulo_arithmetic| NIL)) NIL)) (|rem_sum1| 0 (|rem_sum1-1| |nil| 3237052399 ("" (SKOLEM!) (("" (REWRITE "same_remainder") (("" (REWRITE "rem_def3" :DIR RL) NIL NIL)) NIL)) NIL) ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|same_remainder| FORMULA-DECL NIL |modulo_arithmetic| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|mod| NONEMPTY-TYPE-EQ-DECL NIL |euclidean_division| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|rem| CONST-DECL "{r: mod(b) | EXISTS q: x = b * q + r}" |modulo_arithmetic| NIL) (|rem_def3| FORMULA-DECL NIL |modulo_arithmetic| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL)) (|rem_sum2| 0 (|rem_sum2-1| |nil| 3237052399 ("" (SKOLEM!) (("" (USE "rem_sum1" ("x" "y!1" "y" "x!1")) (("" (ASSERT) NIL NIL)) NIL)) NIL) ((|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|rem_sum1| FORMULA-DECL NIL |modulo_arithmetic| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL)) (|rem_diff| 0 (|rem_diff-1| |nil| 3237052399 ("" (AUTO-REWRITE "same_remainder") (("" (SKOSIMP) (("" (ASSERT) (("" (USE "divides_diff" ("n" "x!1 - y!1" "m" "z!1 - t!1")) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|divides_diff| FORMULA-DECL NIL |divides| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|same_remainder| FORMULA-DECL NIL |modulo_arithmetic| NIL)) NIL)) (|rem_diff1| 0 (|rem_diff1-1| |nil| 3237052399 ("" (SKOLEM!) (("" (REWRITE "same_remainder") (("" (REWRITE "rem_def3" :DIR RL) NIL NIL)) NIL)) NIL) ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|same_remainder| FORMULA-DECL NIL |modulo_arithmetic| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|mod| NONEMPTY-TYPE-EQ-DECL NIL |euclidean_division| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|rem| CONST-DECL "{r: mod(b) | EXISTS q: x = b * q + r}" |modulo_arithmetic| NIL) (|rem_def3| FORMULA-DECL NIL |modulo_arithmetic| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL)) (|rem_diff2| 0 (|rem_diff2-1| |nil| 3237052399 ("" (SKOLEM!) (("" (REWRITE "same_remainder") (("" (REWRITE "rem_def2" :DIR RL) NIL NIL)) NIL)) NIL) ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|same_remainder| FORMULA-DECL NIL |modulo_arithmetic| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|mod| NONEMPTY-TYPE-EQ-DECL NIL |euclidean_division| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|rem| CONST-DECL "{r: mod(b) | EXISTS q: x = b * q + r}" |modulo_arithmetic| NIL) (|rem_def2| FORMULA-DECL NIL |modulo_arithmetic| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL)) (|rem_prod1| 0 (|rem_prod1-1| |nil| 3237052399 ("" (SKOLEM!) (("" (REWRITE "same_remainder") (("" (USE "divides_prod1" ("n" "rem(b!1)(x!1) - x!1" "m" "y!1")) (("" (ASSERT) (("" (REWRITE "rem_def3" :DIR RL) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|same_remainder| FORMULA-DECL NIL |modulo_arithmetic| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|mod| NONEMPTY-TYPE-EQ-DECL NIL |euclidean_division| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|rem| CONST-DECL "{r: mod(b) | EXISTS q: x = b * q + r}" |modulo_arithmetic| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|rem_def3| FORMULA-DECL NIL |modulo_arithmetic| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|divides_prod1| FORMULA-DECL NIL |divides| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL)) (|rem_prod2| 0 (|rem_prod2-1| |nil| 3237052399 ("" (SKOLEM!) (("" (USE "rem_prod1" ("x" "y!1" "y" "x!1")) (("" (ASSERT) NIL NIL)) NIL)) NIL) ((|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|rem_prod1| FORMULA-DECL NIL |modulo_arithmetic| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL)) (|rem_prod| 0 (|rem_prod-1| |nil| 3237052399 ("" (SKOSIMP) (("" (AUTO-REWRITE "rem_prod1" "rem_prod2") (("" (CASE "rem(b!1)(rem(b!1)(x!1) * rem(b!1)(z!1)) = rem(b!1)(y!1 * t!1)") (("1" (ASSERT) NIL NIL) ("2" (REPLACE*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|rem_prod2| FORMULA-DECL NIL |modulo_arithmetic| NIL) (|rem_prod1| FORMULA-DECL NIL |modulo_arithmetic| NIL) (|rem| CONST-DECL "{r: mod(b) | EXISTS q: x = b * q + r}" |modulo_arithmetic| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|mod| NONEMPTY-TYPE-EQ-DECL NIL |euclidean_division| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL)) (|rem_expt| 0 (|rem_expt-1| |nil| 3237052399 ("" (SKOLEM 1 ("b!1" _ "x!1" "y!1")) (("" (INDUCT-AND-SIMPLIFY "n" :EXCLUDE "rem" :REWRITES ("rem_prod")) NIL NIL)) NIL) ((|rem_prod| FORMULA-DECL NIL |modulo_arithmetic| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|int_expt| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|rem| CONST-DECL "{r: mod(b) | EXISTS q: x = b * q + r}" |modulo_arithmetic| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|mod| NONEMPTY-TYPE-EQ-DECL NIL |euclidean_division| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (< CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL)) (|rem_expt1| 0 (|rem_expt1-1| |nil| 3237052399 ("" (SKOLEM!) (("" (REWRITE "rem_expt") (("" (REWRITE "rem_rem") NIL NIL)) NIL)) NIL) ((|nat_expt| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (|int_expt| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|rem_expt| FORMULA-DECL NIL |modulo_arithmetic| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|mod| NONEMPTY-TYPE-EQ-DECL NIL |euclidean_division| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|rem| CONST-DECL "{r: mod(b) | EXISTS q: x = b * q + r}" |modulo_arithmetic| NIL) (|rem_rem| FORMULA-DECL NIL |modulo_arithmetic| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL)) (|rem_sum_elim1| 0 (|rem_sum_elim1-1| |nil| 3237052399 ("" (AUTO-REWRITE "same_remainder") (("" (SKOLEM!) (("" (ASSERT) NIL NIL)) NIL)) NIL) ((|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|same_remainder| FORMULA-DECL NIL |modulo_arithmetic| NIL)) NIL)) (|rem_sum_elim2| 0 (|rem_sum_elim2-1| |nil| 3237052399 ("" (AUTO-REWRITE "same_remainder") (("" (SKOLEM!) (("" (ASSERT) NIL NIL)) NIL)) NIL) ((|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|same_remainder| FORMULA-DECL NIL |modulo_arithmetic| NIL)) NIL)) (|rem_diff_elim1| 0 (|rem_diff_elim1-1| |nil| 3237052399 ("" (AUTO-REWRITE "same_remainder") (("" (SKOLEM!) (("" (ASSERT) (("" (PROP) (("1" (REWRITE "divides_opposite" :DIR RL) (("1" (ASSERT) NIL NIL)) NIL) ("2" (REWRITE "divides_opposite" :DIR RL) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|divides_opposite| FORMULA-DECL NIL |divides| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|same_remainder| FORMULA-DECL NIL |modulo_arithmetic| NIL)) NIL)) (|rem_diff_elim2| 0 (|rem_diff_elim2-1| |nil| 3237052399 ("" (AUTO-REWRITE "same_remainder") (("" (SKOLEM!) (("" (ASSERT) NIL NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|same_remainder| FORMULA-DECL NIL |modulo_arithmetic| NIL)) NIL)) (|rem_opposite_elim| 0 (|rem_opposite_elim-1| |nil| 3237052399 ("" (AUTO-REWRITE "same_remainder") (("" (SKOLEM!) (("" (ASSERT) (("" (REWRITE "divides_opposite" :DIR RL) (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|divides_opposite| FORMULA-DECL NIL |divides| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|same_remainder| FORMULA-DECL NIL |modulo_arithmetic| NIL)) NIL)) (|ndiv_TCC1| 0 (|ndiv_TCC1-1| |nil| 3237052399 ("" (INST 1 "lambda (i: int, p: posnat): choose! (q: int): i = rem(p)(i) + p * q") (("" (SKEEP) (("" (EXPAND "nonempty?") (("" (EXPAND "empty?") (("" (EXPAND "member") (("" (LEMMA "euclid_int") (("" (INST -1 "p" "i") (("" (SKEEP) (("" (INST -2 "q") (("" (LEMMA "rem_def") (("" (INST -1 "p" "i" "r") (("" (ASSERT) (("" (INST 1 "q") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|empty?| CONST-DECL "bool" |sets| NIL) (|euclid_int| FORMULA-DECL NIL |euclidean_division| NIL) (|rem_def| FORMULA-DECL NIL |modulo_arithmetic| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|mod| NONEMPTY-TYPE-EQ-DECL NIL |euclidean_division| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|rem| CONST-DECL "{r: mod(b) | EXISTS q: x = b * q + r}" |modulo_arithmetic| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|choose| CONST-DECL "(p)" |sets| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|ndiv| EXISTENCE "" "[d: [int, posnat] -> {q: integers.int | d`1 = (number_fields.+)(modulo_arithmetic.rem(d`2)(d`1), number_fields.*(d`2, q))}]"))) (|ndiv_lt| 0 (|ndiv_lt-1| |nil| 3237052399 ("" (SKOSIMP*) (("" (TYPEPRED "ndiv(x!1, b!1)") (("" (CASE-REPLACE "x!1 - rem(b!1)(x!1) = b!1 * ndiv(x!1, b!1)") (("1" (HIDE -2) (("1" (CASE "x!1/b!1 - rem(b!1)(x!1)/b!1 = ndiv(x!1, b!1)") (("1" (HIDE -2) (("1" (REPLACE -1 * RL) (("1" (HIDE -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "both_sides_div1") (("2" (INST -1 "b!1" "x!1 - rem(b!1)(x!1)" "b!1 * ndiv(x!1, b!1)") (("2" (CASE-REPLACE "b!1 * ndiv(x!1, b!1) / b!1 = ndiv(x!1, b!1)") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|mod| NONEMPTY-TYPE-EQ-DECL NIL |euclidean_division| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|rem| CONST-DECL "{r: mod(b) | EXISTS q: x = b * q + r}" |modulo_arithmetic| NIL) (|ndiv| CONST-DECL "{q: int | x = b * q + rem(b)(x)}" |modulo_arithmetic| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|both_sides_div1| FORMULA-DECL NIL |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL)) (|ndiv_TCC2| 0 (|ndiv_TCC2-1| |nil| 3237052399 ("" (SKOSIMP*) (("" (LEMMA "ndiv_lt") (("" (INST?) (("" (CASE "n!1/b!1 <= n!1") (("1" (ASSERT) (("1" (HIDE -1) (("1" (TYPEPRED "ndiv(n!1, b!1)") (("1" (CASE "n!1 < rem(b!1)(n!1)") (("1" (LEMMA "rem_mod2") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (CASE "b!1 * ndiv(n!1, b!1) >= 0") (("1" (LEMMA "both_sides_times_pos_ge1") (("1" (INST -1 "b!1" "ndiv(n!1, b!1)" "0") (("1" (REPLACE -1 2 RL T) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE 2) (("2" (HIDE -1) (("2" (LEMMA "le_div_le_pos") (("2" (INST -1 "n!1" "1" "b!1" "n!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|ndiv_lt| FORMULA-DECL NIL |modulo_arithmetic| NIL) (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|rem_mod2| FORMULA-DECL NIL |modulo_arithmetic| NIL) (|both_sides_times_pos_ge1| FORMULA-DECL NIL |real_props| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (< CONST-DECL "bool" |reals| NIL) (|mod| NONEMPTY-TYPE-EQ-DECL NIL |euclidean_division| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|rem| CONST-DECL "{r: mod(b) | EXISTS q: x = b * q + r}" |modulo_arithmetic| NIL) (|ndiv| CONST-DECL "{q: int | x = b * q + rem(b)(x)}" |modulo_arithmetic| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|le_div_le_pos| FORMULA-DECL NIL |real_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|ndiv_| SUBTYPE "modulo_arithmetic.ndiv(modulo_arithmetic.n, modulo_arithmetic.b)" "upto(modulo_arithmetic.n)"))) (|rem_floor| 0 (|rem_floor-1| |nil| 3252309244 ("" (SKOLEM!) (("" (LEMMA "rem_def" ("b" "b!1" "x" "x!1" "r" "x!1 - b!1 * floor(x!1 / b!1)")) (("1" (ASSERT) (("1" (INST + "floor(x!1 / b!1)") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "floor(x!1 / b!1)") (("2" (SPLIT) (("1" (BOTH-SIDES "*" "b!1" -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (BOTH-SIDES "*" "b!1" -2) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|rem_def| FORMULA-DECL NIL |modulo_arithmetic| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|mod| NONEMPTY-TYPE-EQ-DECL NIL |euclidean_division| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|floor| CONST-DECL "{i | i <= x & x < i + 1}" |floor_ceil| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|div_cancel2| FORMULA-DECL NIL |real_props| NIL) (|div_mult_pos_le2| FORMULA-DECL NIL |real_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|div_mult_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) SHOSTAK)) (|rem_base| 0 (|rem_base-3| "" 3471680077 ("" (SKOLEM!) (("" (EXPAND "divides") (("" (PROP) (("1" (TYPEPRED "rem(b!1)(x!1)") (("1" (TYPEPRED "rem(b!1 + n!1)(x!1 + i!1)") (("1" (SKOSIMP*) (("1" (INST + "q!1 - floor(x!1 / b!1)") (("1" (BOTH-SIDES "+" "n!1 * floor(x!1 / b!1)") (("1" (ASSERT) (("1" (LEMMA "commutative_mult") (("1" (INST - "floor(x!1 / b!1)" "n!1") (("1" (REPLACE -1) (("1" (ASSERT) (("1" (LEMMA "rem_floor") (("1" (INST - "b!1" "x!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOLEM!) (("2" (LEMMA "rem_def2") (("2" (INST - "b!1 + n!1" "i!1 + x!1" "rem(b!1)(x!1)") (("1" (ASSERT) (("1" (EXPAND "divides") (("1" (LEMMA "rem_floor") (("1" (INST - "b!1" "x!1") (("1" (INST + "x!2 + floor(x!1 / b!1)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL (|rem_def2| FORMULA-DECL NIL |modulo_arithmetic| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|mod| NONEMPTY-TYPE-EQ-DECL NIL |euclidean_division| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|rem| CONST-DECL "{r: mod(b) | EXISTS q: x = b * q + r}" |modulo_arithmetic| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|commutative_mult| FORMULA-DECL NIL |number_fields| NIL) (|rem_floor| FORMULA-DECL NIL |modulo_arithmetic| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|floor| CONST-DECL "{i | i <= x & x < i + 1}" |floor_ceil| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) SHOSTAK) (|rem_base-2| "" 3458163989 ("" (SKOLEM!) (("" (EXPAND "divides") (("" (PROP) (("1" (TYPEPRED "rem(b!1)(x!1)") (("1" (TYPEPRED "rem(b!1 + n!1)(x!1 + i!1)") (("1" (SKOSIMP*) (("1" (INST + "q!1 - floor(x!1 / b!1)") (("1" (BOTH-SIDES "+" "n!1 * floor(x!1 / b!1)") (("1" (ASSERT) (("1" (LEMMA "commutative_mult") (("1" (INST - "floor(x!1 / b!1)" "n!1") (("1" (REPLACE -1) (("1" (ASSERT) (("1" (LEMMA "rem_floor") (("1" (INST - "b!1" "x!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOLEM!) (("2" (LEMMA "rem_def2") (("2" (INST - "i!1 + x!1" "b!1 + n!1" "rem(b!1)(x!1)") (("1" (ASSERT) (("1" (EXPAND "divides") (("1" (LEMMA "rem_floor") (("1" (INST - "b!1" "x!1") (("1" (INST + "x!2 + floor(x!1 / b!1)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|rem_base-1| |nil| 3252309295 ("" (SKOLEM!) (("" (EXPAND "divides") (("" (PROP) (("1" (TYPEPRED "rem(b!1)(x!1)") (("1" (TYPEPRED "rem(b!1 + n!1)(x!1 + i!1)") (("1" (SKOSIMP*) (("1" (INST + "q!1 - floor(x!1 / b!1)") (("1" (BOTH-SIDES "+" "n!1 * floor(x!1 / b!1)") (("1" (ASSERT) (("1" (LEMMA "commutative_mult") (("1" (INST - "floor(x!1 / b!1)" "n!1") (("1" (REPLACE -1) (("1" (ASSERT) (("1" (LEMMA "rem_floor") (("1" (INST - "b!1" "x!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOLEM!) (("2" (LEMMA "rem_def2") (("2" (INST - "b!1 + n!1" "i!1 + x!1" "rem(b!1)(x!1)") (("1" (ASSERT) (("1" (EXPAND "divides") (("1" (LEMMA "rem_floor") (("1" (INST - "b!1" "x!1") (("1" (INST + "x!2 + floor(x!1 / b!1)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|rem_sum_floor| 0 (|rem_sum_floor-1| |nil| 3252309346 ("" (SKOLEM!) (("" (USE "rem_def") (("1" (ASSERT) (("1" (INST + "floor(x!1 / b!1) + floor((rem(b!1)(x!1) + i!1) / b!1)") (("1" (ASSERT) (("1" (USE "commutative_mult") (("1" (REPLACE -1) (("1" (USE "rem_floor") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "floor((rem(b!1)(x!1) + i!1) / b!1)") (("2" (SPLIT) (("1" (BOTH-SIDES "*" "b!1" -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (BOTH-SIDES "*" "b!1" -2) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) NIL (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|floor| CONST-DECL "{i | i <= x & x < i + 1}" |floor_ceil| NIL) (<= CONST-DECL "bool" |reals| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) NIL NIL (|rem| CONST-DECL "{r: mod(b) | EXISTS q: x = b * q + r}" |modulo_arithmetic| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|mod| NONEMPTY-TYPE-EQ-DECL NIL |euclidean_division| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (>= CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|rem_def| FORMULA-DECL NIL |modulo_arithmetic| NIL) (|commutative_mult| FORMULA-DECL NIL |number_fields| NIL) (|rem_floor| FORMULA-DECL NIL |modulo_arithmetic| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|div_cancel2| FORMULA-DECL NIL |real_props| NIL) (|div_mult_pos_le2| FORMULA-DECL NIL |real_props| NIL) (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|div_mult_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) SHOSTAK)) (|rem_sum_assoc| 0 (|rem_sum_assoc-1| |nil| 3252309412 ("" (SKOLEM!) (("" (TYPEPRED "rem(b!1)(x!1 + n!1)") (("" (TYPEPRED "rem(b!1)(x!1)") (("" (SKOSIMP*) (("" (GROUND) (("" (USE "rem_def2") (("" (ASSERT) (("" (USE "rem_floor") (("" (BOTH-SIDES "-" "rem(b!1)(x!1)" -1) (("" (ASSERT) (("" (REPLACE -1) (("" (EXPAND "divides") (("" (INST + "floor(x!1 / b!1)") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|mod| NONEMPTY-TYPE-EQ-DECL NIL |euclidean_division| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|rem| CONST-DECL "{r: mod(b) | EXISTS q: x = b * q + r}" |modulo_arithmetic| NIL) (|rem_def2| FORMULA-DECL NIL |modulo_arithmetic| NIL) (|rem_floor| FORMULA-DECL NIL |modulo_arithmetic| NIL) NIL (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|floor| CONST-DECL "{i | i <= x & x < i + 1}" |floor_ceil| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) SHOSTAK)) (|rem_add_one| 0 (|rem_add_one-2| "" 3458164037 ("" (SKOLEM!) (("" (USE "rem_sum_assoc") (("" (SMASH) (("" (LEMMA "rem_def") (("" (INST - "b!1" "x!1" "b!1 - 1") (("" (ASSERT) (("" (SKOLEM!) (("" (REPLACE -1 3) (("" (ASSERT) (("" (LEMMA "rem_multiple1") (("" (INST - "b!1" "q!1 + 1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|rem_sum_assoc| FORMULA-DECL NIL |modulo_arithmetic| NIL) (|rem_def| FORMULA-DECL NIL |modulo_arithmetic| NIL) (|rem_multiple1| FORMULA-DECL NIL |modulo_arithmetic| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|mod| NONEMPTY-TYPE-EQ-DECL NIL |euclidean_division| NIL) (< CONST-DECL "bool" |reals| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) SHOSTAK) (|rem_add_one-1| |nil| 3252309454 ("" (SKOLEM!) (("" (USE "rem_sum_assoc") (("" (SMASH) (("" (LEMMA "rem_def") (("" (INST - "b!1" "x!1" "b!1 - 1") (("" (ASSERT) (("" (SKOLEM!) (("" (REPLACE -1 3) (("" (ASSERT) (("" (LEMMA "rem_multiple1") (("" (INST - "b!1" "q!1 + 1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|rem_wrap| 0 (|rem_wrap-1| |nil| 3252309504 ("" (SKOLEM!) (("" (PROP) (("1" (USE "rem_sum_floor") (("1" (ASSERT) (("1" (LEMMA "floor_val") (("1" (INST - "rem(b!1)(x!1) + n!1" "b!1" "1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (USE "rem_sum_assoc") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|nonneg_floor_is_nat| APPLICATION-JUDGEMENT "nat" |floor_ceil| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|mod| NONEMPTY-TYPE-EQ-DECL NIL |euclidean_division| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|rem| CONST-DECL "{r: mod(b) | EXISTS q: x = b * q + r}" |modulo_arithmetic| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nonzero_integer| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|odd_plus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|floor_val| FORMULA-DECL NIL |floor_ceil| NIL) (|rem_sum_floor| FORMULA-DECL NIL |modulo_arithmetic| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|rem_sum_assoc| FORMULA-DECL NIL |modulo_arithmetic| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) SHOSTAK)) (|rem_wrap_eq| 0 (|rem_wrap_eq-1| |nil| 3252309534 ("" (SKOLEM!) (("" (USE "rem_wrap") (("" (LEMMA "same_remainder") (("" (INST - "b!1" "n!1 + x!1" "x!1") (("" (SMASH) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|rem_wrap| FORMULA-DECL NIL |modulo_arithmetic| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|same_remainder| FORMULA-DECL NIL |modulo_arithmetic| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) SHOSTAK)))(|subrange_inductions| (|subrange_induction_TCC1| 0 (|subrange_induction_TCC1-1| |nil| 3237052399 ("" (ASSERT) (("" (TYPEPRED "j") (("" (ASSERT) NIL NIL)) NIL)) NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|i| FORMAL-CONST-DECL "int" |subrange_inductions| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|j| FORMAL-CONST-DECL "upfrom(i)" |subrange_inductions| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL (|subrange_induction| SUBTYPE "subrange_inductions.i" "subrange(subrange_inductions.i, subrange_inductions.j)"))) (|subrange_induction_TCC2| 0 (|subrange_induction_TCC2-1| |nil| 3237052399 ("" (TCC :DEFS !) NIL NIL) ((|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|subrange| TYPE-EQ-DECL NIL |integers| NIL) (|j| FORMAL-CONST-DECL "upfrom(i)" |subrange_inductions| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|i| FORMAL-CONST-DECL "int" |subrange_inductions| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL (|subrange_induction| SUBTYPE "(number_fields.+)(subrange_inductions.k, 1)" "subrange(subrange_inductions.i, subrange_inductions.j)"))) (|subrange_induction| 0 (|subrange_induction-1| |nil| 3237052399 ("" (LEMMA "nat_induction") (("" (SKOSIMP*) (("" (INST -1 "lambda (n:nat): n <= j - i IMPLIES p!1(n+i)") (("1" (PROP) (("1" (INST -1 "k!1 - i") (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (SKOSIMP*) (("3" (INST -4 "j!1 + i") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) NIL (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|i| FORMAL-CONST-DECL "int" |subrange_inductions| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|j| FORMAL-CONST-DECL "upfrom(i)" |subrange_inductions| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|subrange| TYPE-EQ-DECL NIL |integers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)) NIL)) (|SUBRANGE_induction| 0 (|SUBRANGE_induction-1| |nil| 3237052399 ("" (SKOSIMP) (("" (SKOSIMP) (("" (LEMMA "NAT_induction") (("" (INST -1 "lambda (n:nat): n <= j - i IMPLIES p!1(n+i)") (("1" (SPLIT) (("1" (INST -2 "k!1") (("1" (ASSERT) (("1" (SKOSIMP) (("1" (INST -1 "m!1-i") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (INST -3 "j!1+i") (("1" (ASSERT) (("1" (SKOSIMP) (("1" (INST -1 "m!1-i") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|subrange| TYPE-EQ-DECL NIL |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|j| FORMAL-CONST-DECL "upfrom(i)" |subrange_inductions| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|i| FORMAL-CONST-DECL "int" |subrange_inductions| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (<= CONST-DECL "bool" |reals| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|NAT_induction| FORMULA-DECL NIL |naturalnumbers| NIL)) NIL)))(|bounded_int_inductions| (|upfrom_induction_TCC1| 0 (|upfrom_induction_TCC1-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL (|upfrom_induction| SUBTYPE "bounded_int_inductions.m" "upfrom(bounded_int_inductions.m)"))) (|upfrom_induction_TCC2| 0 (|upfrom_induction_TCC2-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|upfrom_induction| SUBTYPE "(number_fields.+)(bounded_int_inductions.jf, 1)" "upfrom(bounded_int_inductions.m)"))) (|upfrom_induction| 0 (|upfrom_induction-2| "" 3299963135 ("" (LEMMA "nat_induction") (("" (SKOSIMP*) (("" (INST -1 "lambda (n:nat): (exists (i:int): (m <= i and n = i - m)) IMPLIES pf!1(n+m)") (("" (PROP) (("1" (INST -1 "jf!1-m") (("1" (ASSERT) (("1" (ASSERT :FLUSH? T) (("1" (ASSERT :QUANT-SIMP? T) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (SPLIT) (("1" (INST -5 "j!1+m") (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST 1 "j!1+m") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|m| FORMAL-CONST-DECL "int" |bounded_int_inductions| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)) SHOSTAK) (|upfrom_induction-1| |nil| 3237052399 ("" (LEMMA "nat_induction") (("" (SKOSIMP*) (("" (INST -1 "lambda (n:nat): (exists (i:int): (m <= i and n = i - m)) IMPLIES pf!1(n+m)") (("" (PROP) (("1" (INST -1 "jf!1-m") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE -1) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (SPLIT) (("1" (INST -5 "j!1+m") (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST 1 "j!1+m") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL)) (|UPFROM_induction| 0 (|UPFROM_induction-2| "" 3299963189 ("" (SKOSIMP*) (("" (LEMMA "NAT_induction") (("" (INST -1 "lambda (n:nat): (exists (i:int): (m <= i and n = i - m)) IMPLIES pf!1(n+m)") (("" (PROP) (("1" (INST -1 "jf!1-m") (("1" (SPLIT) (("1" (ASSERT) NIL NIL) ("2" (INST 1 "jf!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST -4 "j!1+m") (("2" (ASSERT) (("2" (SKOSIMP*) (("2" (INST -1 "kf!1-m") (("2" (ASSERT :QUANT-SIMP? T) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|NAT_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|m| FORMAL-CONST-DECL "int" |bounded_int_inductions| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK) (|UPFROM_induction-1| |nil| 3237052399 ("" (SKOSIMP*) (("" (LEMMA "NAT_induction") (("" (INST -1 "lambda (n:nat): (exists (i:int): (m <= i and n = i - m)) IMPLIES pf!1(n+m)") (("" (PROP) (("1" (INST -1 "jf!1-m") (("1" (SPLIT) (("1" (ASSERT) NIL NIL) ("2" (INST 1 "jf!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST -4 "j!1+m") (("2" (ASSERT) (("2" (SKOSIMP*) (("2" (INST -1 "kf!1-m") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL)) (|above_induction_TCC1| 0 (|above_induction_TCC1-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|above_induction| SUBTYPE "(number_fields.+)(bounded_int_inductions.m, 1)" "above(bounded_int_inductions.m)"))) (|above_induction_TCC2| 0 (|above_induction_TCC2-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|above_induction| SUBTYPE "(number_fields.+)(bounded_int_inductions.ja, 1)" "above(bounded_int_inductions.m)"))) (|above_induction| 0 (|above_induction-2| "" 3299963282 ("" (SKOSIMP*) (("" (LEMMA "nat_induction") (("" (INST -1 "lambda (n:nat): (exists (i:int): (m < i and n = i - m)) IMPLIES pa!1(n+m)") (("1" (PROP) (("1" (INST -1 "ja!1-m") (("1" (ASSERT) (("1" (ASSERT :QUANT-SIMP? T) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (SPLIT) (("1" (INST -5 "j!1+m") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (INST 1 "j!1+m") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (|m| FORMAL-CONST-DECL "int" |bounded_int_inductions| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (> CONST-DECL "bool" |reals| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK) (|above_induction-1| |nil| 3237052399 ("" (SKOSIMP*) (("" (LEMMA "nat_induction") (("" (INST -1 "lambda (n:nat): (exists (i:int): (m < i and n = i - m)) IMPLIES pa!1(n+m)") (("1" (PROP) (("1" (INST -1 "ja!1-m") (("1" (ASSERT) NIL NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (SPLIT) (("1" (INST -5 "j!1+m") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (INST 1 "j!1+m") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL)) (|ABOVE_induction| 0 (|ABOVE_induction-2| "" 3299963342 ("" (SKOSIMP*) (("" (LEMMA "NAT_induction") (("" (INST -1 "lambda (n:nat): (exists (i:int): (m < i and n = i - m)) IMPLIES pa!1(n+m)") (("1" (PROP) (("1" (INST -1 "ja!1-m") (("1" (SPLIT) (("1" (ASSERT) NIL NIL) ("2" (INST 1 "ja!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST -4 "j!1+m") (("1" (ASSERT) (("1" (SKOSIMP*) (("1" (INST -1 "ka!1-m") (("1" (ASSERT :QUANT-SIMP? T) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|NAT_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (|m| FORMAL-CONST-DECL "int" |bounded_int_inductions| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (> CONST-DECL "bool" |reals| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK) (|ABOVE_induction-1| |nil| 3237052399 ("" (SKOSIMP*) (("" (LEMMA "NAT_induction") (("" (INST -1 "lambda (n:nat): (exists (i:int): (m < i and n = i - m)) IMPLIES pa!1(n+m)") (("1" (PROP) (("1" (INST -1 "ja!1-m") (("1" (SPLIT) (("1" (ASSERT) NIL NIL) ("2" (INST 1 "ja!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST -4 "j!1+m") (("1" (ASSERT) (("1" (SKOSIMP*) (("1" (INST -1 "ka!1-m") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL)))(|bounded_nat_inductions| (|upto_induction_TCC1| 0 (|upto_induction_TCC1-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL (|upto_induction| SUBTYPE "0" "upto(bounded_nat_inductions.m)"))) (|upto_induction_TCC2| 0 (|upto_induction_TCC2-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|m| FORMAL-CONST-DECL "nat" |bounded_nat_inductions| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL (|upto_induction| SUBTYPE "(number_fields.+)(bounded_nat_inductions.jt, 1)" "upto(bounded_nat_inductions.m)"))) (|upto_induction| 0 (|upto_induction-1| |nil| 3237052399 ("" (SKOSIMP*) (("" (LEMMA "nat_induction") (("" (INST -1 "lambda (n:nat): n <= m IMPLIES pt!1(n)") (("" (PROP) (("1" (INST -1 "jt!1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST -4 "j!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) NIL (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|m| FORMAL-CONST-DECL "nat" |bounded_nat_inductions| NIL) (<= CONST-DECL "bool" |reals| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL)) (|UPTO_induction| 0 (|UPTO_induction-1| |nil| 3237052399 ("" (SKOSIMP*) (("" (LEMMA "NAT_induction") (("" (INST -1 "lambda (n:nat): n <= m IMPLIES pt!1(n)") (("" (PROP) (("1" (INST -1 "jt!1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST -3 "j!1") (("2" (ASSERT) (("2" (SKOSIMP*) (("2" (INST -1 "kt!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|NAT_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|m| FORMAL-CONST-DECL "nat" |bounded_nat_inductions| NIL) (<= CONST-DECL "bool" |reals| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL)) (|below_induction_TCC1| 0 (|below_induction_TCC1-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL (|below_induction| SUBTYPE "0" "below(bounded_nat_inductions.m)"))) (|below_induction_TCC2| 0 (|below_induction_TCC2-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|m| FORMAL-CONST-DECL "nat" |bounded_nat_inductions| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (< CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL (|below_induction| SUBTYPE "(number_fields.+)(bounded_nat_inductions.jb, 1)" "below(bounded_nat_inductions.m)"))) (|below_induction| 0 (|below_induction-1| |nil| 3237052399 ("" (SKOSIMP*) (("" (LEMMA "nat_induction") (("" (INST -1 "lambda (n:nat): n < m IMPLIES pb!1(n)") (("" (PROP) (("1" (INST -2 "jb!1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL) ("4" (SKOSIMP*) (("4" (INST -4 "j!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) NIL (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|m| FORMAL-CONST-DECL "nat" |bounded_nat_inductions| NIL) (< CONST-DECL "bool" |reals| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL)) (|BELOW_induction| 0 (|BELOW_induction-1| |nil| 3237052399 ("" (SKOSIMP*) (("" (LEMMA "NAT_induction") (("" (INST -1 "lambda (n:nat): n < m IMPLIES pb!1(n)") (("" (PROP) (("1" (INST -1 "jb!1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST -3 "j!1") (("2" (ASSERT) (("2" (SKOSIMP*) (("2" (INST -1 "kb!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|NAT_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|m| FORMAL-CONST-DECL "nat" |bounded_nat_inductions| NIL) (< CONST-DECL "bool" |reals| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL)))(|subrange_type|)(|int_types|)(|nat_types|)(|exp2| (|exp2_TCC1| 0 (|exp2_TCC1-1| |nil| 3242699046 ("" (SKOSIMP) (("" (ASSERT) NIL NIL)) NIL) ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) SHOSTAK (|exp2| SUBTYPE "(number_fields.-)(exp2.n, 1)" "nat"))) (|exp2_TCC2| 0 (|exp2_TCC2-1| |nil| 3242699046 ("" (SKOSIMP) (("" (ASSERT) NIL NIL)) NIL) ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) SHOSTAK (|exp2| TERMINATION "exp2.exp2((number_fields.-)(exp2.n, 1))" "NIL"))) (|exp2_TCC3| 0 (|exp2_TCC3-1| |nil| 3242699046 ("" (INDUCT-AND-SIMPLIFY "n") NIL NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) SHOSTAK (|exp2_| SUBTYPE "exp2.exp2(exp2.n)" "above(exp2.n)"))) (|exp2_def| 0 (|exp2_def-1| |nil| 3242701800 ("" (INDUCT-AND-SIMPLIFY "n") NIL NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) SHOSTAK)) (|exp2_pos| 0 (|exp2_pos-1| |nil| 3242701810 ("" (INDUCT-AND-SIMPLIFY "n") NIL NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) SHOSTAK)) (|exp2_n| 0 (|exp2_n-1| |nil| 3242701817 ("" (INDUCT-AND-SIMPLIFY "n") NIL NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) SHOSTAK)) (|exp2_sum| 0 (|exp2_sum-1| |nil| 3242701824 ("" (INDUCT-AND-SIMPLIFY "n") NIL NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) SHOSTAK)) (|exp2_minus_TCC1| 0 (|exp2_minus_TCC1-1| |nil| 3242699046 ("" (SKOSIMP) (("" (ASSERT) NIL NIL)) NIL) ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) SHOSTAK (|exp2_minus| SUBTYPE "(number_fields.-)(exp2.n, exp2.k)" "nat"))) (|exp2_minus| 0 (|exp2_minus-1| |nil| 3242701829 ("" (INDUCT "n") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP) (("2" (INDUCT-AND-SIMPLIFY "k") NIL NIL)) NIL)) NIL) ((|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|upto_induction| FORMULA-DECL NIL |bounded_nat_inductions| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK)) (|exp2_strictpos| 0 (|exp2_strictpos-1| |nil| 3242701904 ("" (INDUCT-AND-SIMPLIFY "n") NIL NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) SHOSTAK)) (|exp2_lt| 0 (|exp2_lt-1| |nil| 3242701912 ("" (INDUCT "m") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP) (("2" (INDUCT-AND-SIMPLIFY "n") NIL NIL)) NIL)) NIL) ((|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (< CONST-DECL "bool" |reals| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK)) (|exp_prop| 0 (|exp_prop-1| |nil| 3242701951 ("" (SKOSIMP*) (("" (REWRITE "exp2_sum") (("" (LEMMA "both_sides_times_pos_le1") (("" (INST -1 "exp2(m!1)" "x1!1" "exp2(n!1)-1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|exp2_sum| FORMULA-DECL NIL |exp2| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|both_sides_times_pos_le1| FORMULA-DECL NIL |real_props| NIL)) SHOSTAK)) (|log2_TCC1| 0 (|log2_TCC1-1| |nil| 3835419863 ("" (SKEEP) (("" (USE "ndiv_lt") (("" (ASSERT) NIL NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|ndiv_lt| FORMULA-DECL NIL |modulo_arithmetic| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "upto(n)" |modulo_arithmetic| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)) SHOSTAK (|log2| TERMINATION "exp2.log2(modulo_arithmetic.ndiv(exp2.n, 2))" "NIL"))))(|integertypes| (|uint16_TCC1| 0 (|uint16_TCC1-1| |nil| 3750736729 ("" (SUBTYPE-TCC) NIL NIL) ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) NIL (|uint16| SUBTYPE "(number_fields.-)(exp2.exp2(16), 1)" "nat"))) (|uint32_TCC1| 0 (|uint32_TCC1-1| |nil| 3750736729 ("" (SUBTYPE-TCC) NIL NIL) ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) NIL (|uint32| SUBTYPE "(number_fields.-)(exp2.exp2(32), 1)" "nat"))) (|uint64_TCC1| 0 (|uint64_TCC1-1| |nil| 3750736729 ("" (SUBTYPE-TCC) NIL NIL) ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) NIL (|uint64| SUBTYPE "(number_fields.-)(exp2.exp2(64), 1)" "nat"))) (|max8_TCC1| 0 (|max8_TCC1-1| |nil| 3750736729 ("" (GRIND) NIL NIL) ((|exp2| DEF-DECL "posnat" |exp2| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL (|max8| SUBTYPE "255" "uint8"))) (|max16_TCC1| 0 (|max16_TCC1-1| |nil| 3750736729 ("" (GRIND) NIL NIL) ((|exp2| DEF-DECL "posnat" |exp2| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL (|max16| SUBTYPE "65535" "uint16"))) (|max32_TCC1| 0 (|max32_TCC1-1| |nil| 3750736729 ("" (GRIND) NIL NIL) ((|exp2| DEF-DECL "posnat" |exp2| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL (|max32| SUBTYPE "4294967295" "uint32"))) (|max64_TCC1| 0 (|max64_TCC1-1| |nil| 3750736729 ("" (GRIND) NIL NIL) ((|exp2| DEF-DECL "posnat" |exp2| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL (|max64| SUBTYPE "(number_fields.+)((number_fields.*(9223372036854775807, 2)), 1)" "uint64"))) (|mini8_TCC1| 0 (|mini8_TCC1-1| |nil| 3844186117 ("" (GRIND) NIL NIL) ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL)) SHOSTAK (|mini8| SUBTYPE "(number_fields.-)(exp2.exp2(7))" "int8"))) (|mini16_TCC1| 0 (|mini16_TCC1-1| |nil| 3844186133 ("" (GRIND) NIL NIL) ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL)) SHOSTAK (|mini16| SUBTYPE "(number_fields.-)(exp2.exp2(15))" "int16"))) (|mini32_TCC1| 0 (|mini32_TCC1-1| |nil| 3844186141 ("" (GRIND) NIL NIL) ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL)) SHOSTAK (|mini32| SUBTYPE "(number_fields.-)(exp2.exp2(31))" "int32"))) (|mini64_TCC1| 0 (|mini64_TCC1-1| |nil| 3844186149 ("" (GRIND) NIL NIL) ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL)) SHOSTAK (|mini64| SUBTYPE "(number_fields.-)(exp2.exp2(63))" "int64"))) (|maxi8_TCC1| 0 (|maxi8_TCC1-1| |nil| 3867803483 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) SHOSTAK (|maxi8| SUBTYPE "(number_fields.-)(exp2.exp2(7), 1)" "int8"))) (|maxi16_TCC1| 0 (|maxi16_TCC1-1| |nil| 3867803483 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) SHOSTAK (|maxi16| SUBTYPE "(number_fields.-)(exp2.exp2(15), 1)" "int16"))) (|maxi32_TCC1| 0 (|maxi32_TCC1-1| |nil| 3867803483 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) SHOSTAK (|maxi32| SUBTYPE "(number_fields.-)(exp2.exp2(31), 1)" "int32"))) (|maxi64_TCC1| 0 (|maxi64_TCC1-1| |nil| 3867803483 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) SHOSTAK (|maxi64| SUBTYPE "(number_fields.-)(exp2.exp2(63), 1)" "int64"))) (|maxindex_TCC1| 0 (|maxindex_TCC1-1| |nil| 3835419865 ("" (GRIND) NIL NIL) ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL)) SHOSTAK (|maxindex| SUBTYPE "(number_fields.-)(exp2.exp2(28), 1)" "uint32"))) (|subtype_u8_u16| 0 (|subtype_u8_u16-1| |nil| 3867803483 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL)) SHOSTAK (|subtype_u8_u16| SUBTYPE "integertypes.x" "uint16"))) (|subtype_u8_i16| 0 (|subtype_u8_i16-1| |nil| 3867803483 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL)) SHOSTAK (|subtype_u8_i16| SUBTYPE "integertypes.x" "int16"))) (|subtype_u16_u32| 0 (|subtype_u16_u32-1| |nil| 3867803483 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|uint16| TYPE-EQ-DECL NIL |integertypes| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) SHOSTAK (|subtype_u16_u32| SUBTYPE "integertypes.x" "uint32"))) (|subtype_u16_i32| 0 (|subtype_u16_i32-1| |nil| 3867803483 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|uint16| TYPE-EQ-DECL NIL |integertypes| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) SHOSTAK (|subtype_u16_i32| SUBTYPE "integertypes.x" "int32"))) (|subtype_u32_u64| 0 (|subtype_u32_u64-1| |nil| 3867803483 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) SHOSTAK (|subtype_u32_u64| SUBTYPE "integertypes.x" "uint64"))) (|subtype_u32_i64| 0 (|subtype_u32_i64-1| |nil| 3867803483 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) SHOSTAK (|subtype_u32_i64| SUBTYPE "integertypes.x" "int64"))) (|plus_u8_u8| 0 (|plus_u8_u8-1| |nil| 3867803483 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL)) SHOSTAK (|plus_u8_u8| SUBTYPE "(number_fields.+)(integertypes.ux8, integertypes.uy8)" "uint16"))) (|plus_u16_u16| 0 (|plus_u16_u16-1| |nil| 3867803483 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|uint16| TYPE-EQ-DECL NIL |integertypes| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) SHOSTAK (|plus_u16_u16| SUBTYPE "(number_fields.+)(integertypes.ux16, integertypes.uy16)" "uint32"))) (|plus_u32_u32| 0 (|plus_u32_u32-1| |nil| 3867803483 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) SHOSTAK (|plus_u32_u32| SUBTYPE "(number_fields.+)(integertypes.ux32, integertypes.uy32)" "uint64"))) (|plus_u8_i8| 0 (|plus_u8_i8-1| |nil| 3867803484 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL) (<= CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|int8| TYPE-EQ-DECL NIL |integertypes| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) SHOSTAK (|plus_u8_i8| SUBTYPE "(number_fields.+)(integertypes.ux8, integertypes.y8)" "int16"))) (|plus_i8_u8| 0 (|plus_i8_u8-1| |nil| 3867803484 ("" (JUDGEMENT-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL) (<= CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|int8| TYPE-EQ-DECL NIL |integertypes| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|plus_u8_i8| APPLICATION-JUDGEMENT "int16" |integertypes| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) SHOSTAK (|plus_i8_u8| SUBTYPE "(number_fields.+)(integertypes.x8, integertypes.uy8)" "int16"))) (|plus_u16_i16| 0 (|plus_u16_i16-1| |nil| 3867803484 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|uint16| TYPE-EQ-DECL NIL |integertypes| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|int16| TYPE-EQ-DECL NIL |integertypes| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) SHOSTAK (|plus_u16_i16| SUBTYPE "(number_fields.+)(integertypes.ux16, integertypes.y16)" "int32"))) (|plus_i16_u16| 0 (|plus_i16_u16-1| |nil| 3867803484 ("" (JUDGEMENT-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|uint16| TYPE-EQ-DECL NIL |integertypes| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|int16| TYPE-EQ-DECL NIL |integertypes| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|plus_u16_i16| APPLICATION-JUDGEMENT "int32" |integertypes| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) SHOSTAK (|plus_i16_u16| SUBTYPE "(number_fields.+)(integertypes.x16, integertypes.uy16)" "int32"))) (|plus_u32_i32| 0 (|plus_u32_i32-1| |nil| 3867803485 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|int32| TYPE-EQ-DECL NIL |integertypes| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) SHOSTAK (|plus_u32_i32| SUBTYPE "(number_fields.+)(integertypes.ux32, integertypes.y32)" "int64"))) (|plus_i32_u32| 0 (|plus_i32_u32-1| |nil| 3867803485 ("" (JUDGEMENT-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|int32| TYPE-EQ-DECL NIL |integertypes| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|plus_u32_i32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) SHOSTAK (|plus_i32_u32| SUBTYPE "(number_fields.+)(integertypes.x32, integertypes.uy32)" "int64"))) (|u8plus_TCC1| 0 (|u8plus_TCC1-1| |nil| 3750736729 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|max8| CONST-DECL "uint8" |integertypes| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|u8plus| SUBTYPE "(number_fields.-)(integertypes.max8, integertypes.ux8)" "uint8"))) (|u8plus_TCC2| 0 (|u8plus_TCC2-1| |nil| 3750736729 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|plus_u8_u8| APPLICATION-JUDGEMENT "uint16" |integertypes| NIL) (|max8| CONST-DECL "uint8" |integertypes| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL)) NIL (|u8plus| SUBTYPE "(number_fields.+)(integertypes.ux8, integertypes.uy8)" "uint8"))) (|u8plus_TCC3| 0 (|u8plus_TCC3-1| |nil| 3750736729 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|max8| CONST-DECL "uint8" |integertypes| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|u8plus| SUBTYPE "(number_fields.-)((number_fields.-)(integertypes.uy8, integertypes.gap), 1)" "uint8"))) (|u16plus_TCC1| 0 (|u16plus_TCC1-1| |nil| 3750736729 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|uint16| TYPE-EQ-DECL NIL |integertypes| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|max16| CONST-DECL "uint16" |integertypes| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|u16plus| SUBTYPE "(number_fields.-)(integertypes.max16, integertypes.ux16)" "uint16"))) (|u16plus_TCC2| 0 (|u16plus_TCC2-1| |nil| 3750736729 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|uint16| TYPE-EQ-DECL NIL |integertypes| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|plus_u16_u16| APPLICATION-JUDGEMENT "uint32" |integertypes| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|max16| CONST-DECL "uint16" |integertypes| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) NIL (|u16plus| SUBTYPE "(number_fields.+)(integertypes.ux16, integertypes.uy16)" "uint16"))) (|u16plus_TCC3| 0 (|u16plus_TCC3-1| |nil| 3750736729 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|uint16| TYPE-EQ-DECL NIL |integertypes| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|max16| CONST-DECL "uint16" |integertypes| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|u16plus| SUBTYPE "(number_fields.-)((number_fields.-)(integertypes.uy16, integertypes.gap), 1)" "uint16"))) (|u32plus_TCC1| 0 (|u32plus_TCC1-1| |nil| 3750736729 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|max32| CONST-DECL "uint32" |integertypes| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|u32plus| SUBTYPE "(number_fields.-)(integertypes.max32, integertypes.ux32)" "uint32"))) (|u32plus_TCC2| 0 (|u32plus_TCC2-1| |nil| 3750736729 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|max32| CONST-DECL "uint32" |integertypes| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) NIL (|u32plus| SUBTYPE "(number_fields.+)(integertypes.ux32, integertypes.uy32)" "uint32"))) (|u32plus_TCC3| 0 (|u32plus_TCC3-1| |nil| 3750736729 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|max32| CONST-DECL "uint32" |integertypes| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|u32plus| SUBTYPE "(number_fields.-)((number_fields.-)(integertypes.uy32, integertypes.gap), 1)" "uint32"))) (|u64plus_TCC1| 0 (|u64plus_TCC1-1| |nil| 3750736730 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|max64| CONST-DECL "uint64" |integertypes| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|u64plus| SUBTYPE "(number_fields.-)(integertypes.max64, integertypes.ux64)" "uint64"))) (|u64plus_TCC2| 0 (|u64plus_TCC2-1| |nil| 3750736730 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|max64| CONST-DECL "uint64" |integertypes| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) NIL (|u64plus| SUBTYPE "(number_fields.+)(integertypes.ux64, integertypes.uy64)" "uint64"))) (|u64plus_TCC3| 0 (|u64plus_TCC3-1| |nil| 3750736730 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|max64| CONST-DECL "uint64" |integertypes| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|u64plus| SUBTYPE "(number_fields.-)((number_fields.-)(integertypes.uy64, integertypes.gap), 1)" "uint64"))) (|minus_u8_u8| 0 (|minus_u8_u8-1| |nil| 3867803490 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL)) SHOSTAK (|minus_u8_u8| SUBTYPE "(number_fields.-)(integertypes.ux8, integertypes.uy8)" "int16"))) (|minus_u16_u16| 0 (|minus_u16_u16-1| |nil| 3867803491 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|uint16| TYPE-EQ-DECL NIL |integertypes| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) SHOSTAK (|minus_u16_u16| SUBTYPE "(number_fields.-)(integertypes.ux16, integertypes.uy16)" "int32"))) (|minus_u32_u32| 0 (|minus_u32_u32-1| |nil| 3867803491 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) SHOSTAK (|minus_u32_u32| SUBTYPE "(number_fields.-)(integertypes.ux32, integertypes.uy32)" "int64"))) (|minus_u8_i8| 0 (|minus_u8_i8-1| |nil| 3867803492 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL) (<= CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|int8| TYPE-EQ-DECL NIL |integertypes| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) SHOSTAK (|minus_u8_i8| SUBTYPE "(number_fields.-)(integertypes.ux8, integertypes.y8)" "int16"))) (|minus_i8_u8| 0 (|minus_i8_u8-1| |nil| 3867803492 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL) (<= CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|int8| TYPE-EQ-DECL NIL |integertypes| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) SHOSTAK (|minus_i8_u8| SUBTYPE "(number_fields.-)(integertypes.x8, integertypes.uy8)" "int16"))) (|minus_u16_i16| 0 (|minus_u16_i16-1| |nil| 3867803493 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|uint16| TYPE-EQ-DECL NIL |integertypes| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|int16| TYPE-EQ-DECL NIL |integertypes| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) SHOSTAK (|minus_u16_i16| SUBTYPE "(number_fields.-)(integertypes.ux16, integertypes.y16)" "int32"))) (|minus_i16_u16| 0 (|minus_i16_u16-1| |nil| 3867803493 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|uint16| TYPE-EQ-DECL NIL |integertypes| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|int16| TYPE-EQ-DECL NIL |integertypes| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) SHOSTAK (|minus_i16_u16| SUBTYPE "(number_fields.-)(integertypes.x16, integertypes.uy16)" "int32"))) (|minus_u32_i32| 0 (|minus_u32_i32-1| |nil| 3867803494 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|int32| TYPE-EQ-DECL NIL |integertypes| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) SHOSTAK (|minus_u32_i32| SUBTYPE "(number_fields.-)(integertypes.ux32, integertypes.y32)" "int64"))) (|minus_i32_u32| 0 (|minus_i32_u32-1| |nil| 3867803494 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|int32| TYPE-EQ-DECL NIL |integertypes| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) SHOSTAK (|minus_i32_u32| SUBTYPE "(number_fields.-)(integertypes.x32, integertypes.uy32)" "int64"))) (|u8minus_TCC1| 0 (|u8minus_TCC1-1| |nil| 3750736730 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|minus_i16_u16| APPLICATION-JUDGEMENT "int32" |integertypes| NIL) (|minus_i32_u32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL) (|minus_u8_u8| APPLICATION-JUDGEMENT "int16" |integertypes| NIL)) NIL (|u8minus| SUBTYPE "(number_fields.-)(integertypes.ux8, integertypes.uy8)" "uint8"))) (|u8minus_TCC2| 0 (|u8minus_TCC2-1| |nil| 3750736730 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|max8| CONST-DECL "uint8" |integertypes| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) NIL (|u8minus| SUBTYPE "(number_fields.+)((number_fields.+)((number_fields.-)(integertypes.max8, integertypes.uy8), integertypes.ux8), 1)" "uint8"))) (|u16minus_TCC1| 0 (|u16minus_TCC1-1| |nil| 3750736730 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|uint16| TYPE-EQ-DECL NIL |integertypes| NIL) (|minus_u16_u16| APPLICATION-JUDGEMENT "int32" |integertypes| NIL) (|minus_i32_u32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) NIL (|u16minus| SUBTYPE "(number_fields.-)(integertypes.ux16, integertypes.uy16)" "uint16"))) (|u16minus_TCC2| 0 (|u16minus_TCC2-1| |nil| 3750736730 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|uint16| TYPE-EQ-DECL NIL |integertypes| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|max16| CONST-DECL "uint16" |integertypes| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) NIL (|u16minus| SUBTYPE "(number_fields.+)((number_fields.+)((number_fields.-)(integertypes.max16, integertypes.uy16), integertypes.ux16), 1)" "uint16"))) (|u32minus_TCC1| 0 (|u32minus_TCC1-1| |nil| 3750736730 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|minus_u32_u32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) NIL (|u32minus| SUBTYPE "(number_fields.-)(integertypes.ux32, integertypes.uy32)" "uint32"))) (|u32minus_TCC2| 0 (|u32minus_TCC2-1| |nil| 3750736730 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|max32| CONST-DECL "uint32" |integertypes| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) NIL (|u32minus| SUBTYPE "(number_fields.+)((number_fields.+)((number_fields.-)(integertypes.max32, integertypes.uy32), integertypes.ux32), 1)" "uint32"))) (|u64minus_TCC1| 0 (|u64minus_TCC1-1| |nil| 3750736730 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) NIL (|u64minus| SUBTYPE "(number_fields.-)(integertypes.ux64, integertypes.uy64)" "uint64"))) (|u64minus_TCC2| 0 (|u64minus_TCC2-1| |nil| 3750736730 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|max64| CONST-DECL "uint64" |integertypes| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) NIL (|u64minus| SUBTYPE "(number_fields.+)((number_fields.+)((number_fields.-)(integertypes.max64, integertypes.uy64), integertypes.ux64), 1)" "uint64"))) (|u8pow2_TCC1| 0 (|u8pow2_TCC1-1| |nil| 3751239140 ("" (SKEEP) (("" (REWRITE "exp2_lt") NIL NIL)) NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|exp2_lt| FORMULA-DECL NIL |exp2| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)) NIL (|u8pow2| SUBTYPE "exp2.exp2(integertypes.n)" "uint8"))) (|u16pow2_TCC1| 0 (|u16pow2_TCC1-1| |nil| 3751239140 ("" (SKEEP) (("" (LEMMA "exp2_lt") (("" (INST - 16 "n") (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ((|exp2_lt| FORMULA-DECL NIL |exp2| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL (|u16pow2| SUBTYPE "exp2.exp2(integertypes.n)" "uint16"))) (|u32pow2_TCC1| 0 (|u32pow2_TCC1-1| |nil| 3751239140 ("" (SKEEP) (("" (LEMMA "exp2_lt") (("" (INST - 32 "n") (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ((|exp2_lt| FORMULA-DECL NIL |exp2| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL (|u32pow2| SUBTYPE "exp2.exp2(integertypes.n)" "uint32"))) (|u64pow2_TCC1| 0 (|u64pow2_TCC1-1| |nil| 3751239140 ("" (SKEEP) (("" (LEMMA "exp2_lt") (("" (INST - 64 "n") (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ((|exp2_lt| FORMULA-DECL NIL |exp2| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL (|u64pow2| SUBTYPE "exp2.exp2(integertypes.n)" "uint64"))) (|u8lshift_TCC1| 0 (|u8lshift_TCC1-1| |nil| 3751239140 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|u8lshift| SUBTYPE "(number_fields.-)(8, integertypes.n)" "nat"))) (|u8lshift_TCC2| 0 (|u8lshift_TCC2-1| |nil| 3751239140 ("" (SKEEP) (("" (REPLACE -1 :HIDE? T) (("" (TYPEPRED "nrem(ux8, exp2(8 - n))") (("" (SKEEP) (("" (LEMMA "both_sides_times_pos_lt1") (("" (INST - "exp2(n)" "nrem(ux8, exp2(8 - n))" "exp2(8 - n)") (("" (GROUND) (("" (LEMMA "exp2_sum") (("" (INST - "8 - n" "n") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|exp2_sum| FORMULA-DECL NIL |exp2| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|both_sides_times_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|nrem| CONST-DECL "{r: mod(b) | EXISTS q: x = b * q + r}" |modulo_arithmetic| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|mod| NONEMPTY-TYPE-EQ-DECL NIL |euclidean_division| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (< CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|u8lshift| SUBTYPE "number_fields.*(integertypes.x, exp2.exp2(integertypes.n))" "uint8"))) (|u8lshift_bound| 0 (|u8lshift_bound-1| |nil| 3844186167 ("" (GRIND) (("" (TYPEPRED "nrem(ux8!1, exp2(8 - n!1))") (("" (NAME-REPLACE "n" "nrem(ux8!1, exp2(8 - n!1))") (("" (USE "exp2_sum" ("n" "8  - n!1" "m" "n!1")) (("" (LEMMA "both_sides_times_pos_ge1" ("x" "exp2(8 - n!1)" "y" "n + 1" "pz" "exp2(n!1)")) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nrem| CONST-DECL "{r: mod(b) | EXISTS q: x = b * q + r}" |modulo_arithmetic| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|mod| NONEMPTY-TYPE-EQ-DECL NIL |euclidean_division| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|exp2_sum| FORMULA-DECL NIL |exp2| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|both_sides_times_pos_ge1| FORMULA-DECL NIL |real_props| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|u8lshift| CONST-DECL "uint8" |integertypes| NIL)) SHOSTAK (|u8lshift_bound| SUBTYPE "integertypes.u8lshift(integertypes.ux8, integertypes.n)" "upto((number_fields.-)(exp2.exp2(8), exp2.exp2(integertypes.n)))"))) (|u16lshift_TCC1| 0 (|u16lshift_TCC1-1| |nil| 3751239140 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|u16lshift| SUBTYPE "(number_fields.-)(16, integertypes.n)" "nat"))) (|u16lshift_TCC2| 0 (|u16lshift_TCC2-1| |nil| 3751239140 ("" (SKEEP) (("" (REPLACE -1 :HIDE? T) (("" (TYPEPRED "nrem(ux16, exp2(16 - n))") (("" (SKEEP) (("" (LEMMA "both_sides_times_pos_lt1") (("" (INST - "exp2(n)" "nrem(ux16, exp2(16 - n))" "exp2(16 - n)") (("" (GROUND) (("" (LEMMA "exp2_sum") (("" (INST - "16 - n" "n") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|exp2_sum| FORMULA-DECL NIL |exp2| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|both_sides_times_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|uint16| TYPE-EQ-DECL NIL |integertypes| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nrem| CONST-DECL "{r: mod(b) | EXISTS q: x = b * q + r}" |modulo_arithmetic| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|mod| NONEMPTY-TYPE-EQ-DECL NIL |euclidean_division| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (< CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|u16lshift| SUBTYPE "number_fields.*(integertypes.x, exp2.exp2(integertypes.n))" "uint16"))) (|u32lshift_TCC1| 0 (|u32lshift_TCC1-1| |nil| 3751239140 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|u32lshift| SUBTYPE "(number_fields.-)(32, integertypes.n)" "nat"))) (|u32lshift_TCC2| 0 (|u32lshift_TCC2-1| |nil| 3751239140 ("" (SKEEP) (("" (TYPEPRED "nrem(ux32, exp2(32 - n))") (("" (SKEEP) (("" (LEMMA "both_sides_times_pos_lt1") (("" (INST - "exp2(n)" "nrem(ux32, exp2(32 - n))" "exp2(32 - n)") (("" (LEMMA "exp2_sum") (("" (INST - "32 - n" "n") (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|mod| NONEMPTY-TYPE-EQ-DECL NIL |euclidean_division| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nrem| CONST-DECL "{r: mod(b) | EXISTS q: x = b * q + r}" |modulo_arithmetic| NIL) (<= CONST-DECL "bool" |reals| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|both_sides_times_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|exp2_sum| FORMULA-DECL NIL |exp2| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|u32lshift| SUBTYPE "number_fields.*(integertypes.x, exp2.exp2(integertypes.n))" "uint32"))) (|u64lshift_TCC1| 0 (|u64lshift_TCC1-1| |nil| 3751239140 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|u64lshift| SUBTYPE "(number_fields.-)(64, integertypes.n)" "nat"))) (|u64lshift_TCC2| 0 (|u64lshift_TCC2-1| |nil| 3751239140 ("" (SKEEP) (("" (TYPEPRED "nrem(ux64, exp2(64 - n))") (("" (SKEEP) (("" (LEMMA "both_sides_times_pos_lt1") (("" (INST - "exp2(n)" "nrem(ux64, exp2(64 - n))" "exp2(64 - n)") (("" (LEMMA "exp2_sum") (("" (INST - "64 - n" "n") (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|mod| NONEMPTY-TYPE-EQ-DECL NIL |euclidean_division| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nrem| CONST-DECL "{r: mod(b) | EXISTS q: x = b * q + r}" |modulo_arithmetic| NIL) (<= CONST-DECL "bool" |reals| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|both_sides_times_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|exp2_sum| FORMULA-DECL NIL |exp2| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|u64lshift| SUBTYPE "number_fields.*(integertypes.x, exp2.exp2(integertypes.n))" "uint64"))) (|u8rshift_TCC1| 0 (|u8rshift_TCC1-1| |nil| 3751239140 ("" (SUBTYPE-TCC) NIL NIL) ((|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL) (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (< CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "upto(n)" |modulo_arithmetic| NIL)) NIL (|u8rshift| SUBTYPE "modulo_arithmetic.ndiv(integertypes.ux8, exp2.exp2(integertypes.n))" "uint8"))) (|u8rshift_bound_TCC1| 0 (|u8rshift_bound_TCC1-1| |nil| 3844224706 ("" (GRIND) NIL NIL) NIL SHOSTAK (|u8rshift_bound_| SUBTYPE "(number_fields.-)(8, integertypes.n)" "nat"))) (|u8rshift_bound| 0 (|u8rshift_bound-1| |nil| 3844224714 ("" (GRIND :EXCLUDE "exp2") (("" (NAME-REPLACE "nd" "ndiv(ux8!1,  exp2(n!1))") (("" (TYPEPRED "nd") (("" (LEMMA "both_sides_times_pos_ge1" ("x" "nd" "y" "exp2(8 - n!1)" "pz" "exp2(n!1)")) (("" (LEMMA "exp2_sum" ("n" "8 - n!1" "m" "n!1")) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|mod| NONEMPTY-TYPE-EQ-DECL NIL |euclidean_division| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|rem| CONST-DECL "{r: mod(b) | EXISTS q: x = b * q + r}" |modulo_arithmetic| NIL) (|ndiv| CONST-DECL "{q: int | x = b * q + rem(b)(x)}" |modulo_arithmetic| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|both_sides_times_pos_ge1| FORMULA-DECL NIL |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|exp2_sum| FORMULA-DECL NIL |exp2| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "upto(n)" |modulo_arithmetic| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|u8rshift| CONST-DECL "uint8" |integertypes| NIL)) SHOSTAK (|u8rshift_bound| SUBTYPE "integertypes.u8rshift(integertypes.ux8, integertypes.n)" "below(exp2.exp2((number_fields.-)(8, integertypes.n)))"))) (|u16rshift_TCC1| 0 (|u16rshift_TCC1-1| |nil| 3751239140 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|uint16| TYPE-EQ-DECL NIL |integertypes| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "upto(n)" |modulo_arithmetic| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) NIL (|u16rshift| SUBTYPE "modulo_arithmetic.ndiv(integertypes.ux16, exp2.exp2(integertypes.n))" "uint16"))) (|u16rshift_bound| 0 (|u16rshift_bound-1| |nil| 3844274828 ("" (GRIND :EXCLUDE "exp2") (("" (NAME-REPLACE "nd" "ndiv(ux16!1,  exp2(n!1))") (("" (TYPEPRED "nd") (("" (LEMMA "both_sides_times_pos_ge1" ("x" "nd" "y" "exp2(16 - n!1)" "pz" "exp2(n!1)")) (("" (LEMMA "exp2_sum" ("n" "16 - n!1" "m" "n!1")) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (< CONST-DECL "bool" |reals| NIL) (|mod| NONEMPTY-TYPE-EQ-DECL NIL |euclidean_division| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|rem| CONST-DECL "{r: mod(b) | EXISTS q: x = b * q + r}" |modulo_arithmetic| NIL) (|ndiv| CONST-DECL "{q: int | x = b * q + rem(b)(x)}" |modulo_arithmetic| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|both_sides_times_pos_ge1| FORMULA-DECL NIL |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|exp2_sum| FORMULA-DECL NIL |exp2| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "upto(n)" |modulo_arithmetic| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|uint16| TYPE-EQ-DECL NIL |integertypes| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|u16rshift| CONST-DECL "uint16" |integertypes| NIL)) SHOSTAK (|u16rshift_bound| SUBTYPE "integertypes.u16rshift(integertypes.ux16, integertypes.n)" "below(exp2.exp2((number_fields.-)(16, integertypes.n)))"))) (|u32rshift_TCC1| 0 (|u32rshift_TCC1-1| |nil| 3751239140 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "upto(n)" |modulo_arithmetic| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) NIL (|u32rshift| SUBTYPE "modulo_arithmetic.ndiv(integertypes.ux32, exp2.exp2(integertypes.n))" "uint32"))) (|u32rshift_bound| 0 (|u32rshift_bound-1| |nil| 3844274872 ("" (GRIND :EXCLUDE "exp2") (("" (NAME-REPLACE "nd" "ndiv(ux32!1,  exp2(n!1))") (("" (TYPEPRED "nd") (("" (LEMMA "both_sides_times_pos_ge1" ("x" "nd" "y" "exp2(32 - n!1)" "pz" "exp2(n!1)")) (("" (LEMMA "exp2_sum" ("n" "32 - n!1" "m" "n!1")) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (< CONST-DECL "bool" |reals| NIL) (|mod| NONEMPTY-TYPE-EQ-DECL NIL |euclidean_division| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|rem| CONST-DECL "{r: mod(b) | EXISTS q: x = b * q + r}" |modulo_arithmetic| NIL) (|ndiv| CONST-DECL "{q: int | x = b * q + rem(b)(x)}" |modulo_arithmetic| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|both_sides_times_pos_ge1| FORMULA-DECL NIL |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|exp2_sum| FORMULA-DECL NIL |exp2| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "upto(n)" |modulo_arithmetic| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|u32rshift| CONST-DECL "uint32" |integertypes| NIL)) SHOSTAK (|u32rshift_bound| SUBTYPE "integertypes.u32rshift(integertypes.ux32, integertypes.n)" "below(exp2.exp2((number_fields.-)(32, integertypes.n)))"))) (|u64rshift_TCC1| 0 (|u64rshift_TCC1-1| |nil| 3751239140 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "upto(n)" |modulo_arithmetic| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) NIL (|u64rshift| SUBTYPE "modulo_arithmetic.ndiv(integertypes.ux64, exp2.exp2(integertypes.n))" "uint64"))) (|u64rshift_bound| 0 (|u64rshift_bound-1| |nil| 3844274893 ("" (GRIND :EXCLUDE "exp2") (("" (NAME-REPLACE "nd" "ndiv(ux64!1,  exp2(n!1))") (("" (TYPEPRED "nd") (("" (LEMMA "both_sides_times_pos_ge1" ("x" "nd" "y" "exp2(64 - n!1)" "pz" "exp2(n!1)")) (("" (LEMMA "exp2_sum" ("n" "64 - n!1" "m" "n!1")) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (< CONST-DECL "bool" |reals| NIL) (|mod| NONEMPTY-TYPE-EQ-DECL NIL |euclidean_division| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|rem| CONST-DECL "{r: mod(b) | EXISTS q: x = b * q + r}" |modulo_arithmetic| NIL) (|ndiv| CONST-DECL "{q: int | x = b * q + rem(b)(x)}" |modulo_arithmetic| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|both_sides_times_pos_ge1| FORMULA-DECL NIL |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|exp2_sum| FORMULA-DECL NIL |exp2| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "upto(n)" |modulo_arithmetic| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|u64rshift| CONST-DECL "uint64" |integertypes| NIL)) SHOSTAK (|u64rshift_bound| SUBTYPE "integertypes.u64rshift(integertypes.ux64, integertypes.n)" "below(exp2.exp2((number_fields.-)(64, integertypes.n)))"))) (|times_u8_u8| 0 (|times_u8_u8-1| |nil| 3867803514 ("" (SKEEP :PREDS? T) (("" (LEMMA "exp2_sum") (("" (INST -1 "8" "8") (("" (ASSERT) (("" (REPLACE -1 :HIDE? T) (("" (LEMMA "lt_times_lt_pos1") (("" (CASE-REPLACE "ux8 = 0") (("1" (ASSERT) NIL NIL) ("2" (INST -1 "uy8" "ux8" "exp2(8)" "exp2(8)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|exp2_sum| FORMULA-DECL NIL |exp2| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|lt_times_lt_pos1| FORMULA-DECL NIL |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (< CONST-DECL "bool" |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK (|times_u8_u8| SUBTYPE "number_fields.*(integertypes.ux8, integertypes.uy8)" "uint16"))) (|times_u16_u16| 0 (|times_u16_u16-1| |nil| 3867803514 ("" (SKEEP :PREDS? T) (("" (LEMMA "exp2_sum") (("" (INST -1 "16" "16") (("" (ASSERT) (("" (REPLACE -1 :HIDE? T) (("" (LEMMA "lt_times_lt_pos1") (("" (CASE-REPLACE "ux16 = 0") (("1" (ASSERT) NIL NIL) ("2" (INST -1 "uy16" "ux16" "exp2(16)" "exp2(16)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|exp2_sum| FORMULA-DECL NIL |exp2| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|lt_times_lt_pos1| FORMULA-DECL NIL |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|uint16| TYPE-EQ-DECL NIL |integertypes| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (<= CONST-DECL "bool" |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) SHOSTAK (|times_u16_u16| SUBTYPE "number_fields.*(integertypes.ux16, integertypes.uy16)" "uint32"))) (|times_u32_u32| 0 (|times_u32_u32-1| |nil| 3867803515 ("" (SKEEP :PREDS? T) (("" (LEMMA "exp2_sum") (("" (INST -1 "32" "32") (("" (ASSERT) (("" (REPLACE -1 :HIDE? T) (("" (LEMMA "lt_times_lt_pos1") (("" (CASE-REPLACE "ux32 = 0") (("1" (ASSERT) NIL NIL) ("2" (INST -1 "uy32" "ux32" "exp2(32)" "exp2(32)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|exp2_sum| FORMULA-DECL NIL |exp2| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|lt_times_lt_pos1| FORMULA-DECL NIL |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (<= CONST-DECL "bool" |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) SHOSTAK (|times_u32_u32| SUBTYPE "number_fields.*(integertypes.ux32, integertypes.uy32)" "uint64"))) (|times_u8_i8| 0 (|times_u8_i8-1| |nil| 3867803516 ("" (SKEEP :PREDS? T) (("" (SPLIT 1) (("1" (CASE "0 <= y8") (("1" (ASSERT) (("1" (LEMMA "pos_times_le") (("1" (INST -1 "ux8" "y8") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE "ux8 * -y8 <= exp2(15)") (("1" (ASSERT) NIL NIL) ("2" (HIDE 3) (("2" (LEMMA "exp2_sum") (("2" (INST -1 "7" "8") (("2" (ASSERT) (("2" (REPLACE -1 :HIDE? T) (("2" (LEMMA "le_times_le_pos") (("2" (INST -1 "ux8" "-y8" "exp2(7)" "exp2(8)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "exp2_sum") (("2" (INST -1 "7" "8") (("2" (ASSERT) (("2" (REPLACE -1 :HIDE? T) (("2" (CASE "0 <= y8") (("1" (LEMMA "lt_times_lt_pos2") (("1" (INST -1 "ux8" "y8" "exp2(7)" "exp2(8)") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (LEMMA "neg_times_le") (("2" (INST -1 "ux8" "y8") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|exp2_sum| FORMULA-DECL NIL |exp2| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|le_times_le_pos| FORMULA-DECL NIL |real_props| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL) (|pos_times_le| FORMULA-DECL NIL |real_props| NIL) (|int8| TYPE-EQ-DECL NIL |integertypes| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|neg_times_le| FORMULA-DECL NIL |real_props| NIL) (|lt_times_lt_pos2| FORMULA-DECL NIL |real_props| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) NIL (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) SHOSTAK (|times_u8_i8| SUBTYPE "number_fields.*(integertypes.ux8, integertypes.y8)" "int16"))) (|times_i8_u8| 0 (|times_i8_u8-1| |nil| 3867803516 ("" (SKEEP :PREDS? T) (("" (CASE "-x8 <= exp2(7)") (("1" (HIDE -3) (("1" (CASE "0 <= x8") (("1" (ASSERT) (("1" (LEMMA "pos_times_le") (("1" (INST -1 "x8" "uy8") (("1" (ASSERT) (("1" (LEMMA "exp2_sum") (("1" (INST -1 "8" "7") (("1" (ASSERT) (("1" (REPLACE -1 :HIDE? T) (("1" (LEMMA "lt_times_lt_pos2") (("1" (INST -1 "x8" "uy8" "exp2(8)" "exp2(7)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (LEMMA "exp2_sum") (("2" (INST -1 "8" "7") (("2" (ASSERT) (("2" (REPLACE -1 :HIDE? T) (("2" (LEMMA "lt_times_lt_pos2") (("2" (INST -1 "uy8" "-x8" "exp2(7)" "exp2(8)") (("2" (ASSERT) (("2" (LEMMA "neg_times_le") (("2" (INST -1 "x8" "uy8") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|int8| TYPE-EQ-DECL NIL |integertypes| NIL) (|pos_times_le| FORMULA-DECL NIL |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|lt_times_lt_pos2| FORMULA-DECL NIL |real_props| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|exp2_sum| FORMULA-DECL NIL |exp2| NIL) (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL) (< CONST-DECL "bool" |reals| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|neg_times_le| FORMULA-DECL NIL |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) SHOSTAK (|times_i8_u8| SUBTYPE "number_fields.*(integertypes.x8, integertypes.uy8)" "int16"))) (|times_u16_i16| 0 (|times_u16_i16-1| |nil| 3867803517 ("" (SKEEP :PREDS? T) (("" (CASE "-y16 <= exp2(15)") (("1" (HIDE -3) (("1" (LEMMA "exp2_sum") (("1" (INST -1 "15" "16") (("1" (ASSERT) (("1" (REPLACE -1 :HIDE? T) (("1" (CASE "0 <= y16") (("1" (ASSERT) (("1" (LEMMA "pos_times_le") (("1" (INST -1 "ux16" "y16") (("1" (ASSERT) (("1" (LEMMA "lt_times_lt_pos2") (("1" (INST -1 "y16" "ux16" "exp2(16)" "exp2(15)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "neg_times_le") (("2" (INST -1 "y16" "ux16") (("2" (ASSERT) (("2" (LEMMA "le_times_le_pos") (("2" (INST -1 "-y16" "ux16" "exp2(16)" "exp2(15)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|int16| TYPE-EQ-DECL NIL |integertypes| NIL) (|exp2_sum| FORMULA-DECL NIL |exp2| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|pos_times_le| FORMULA-DECL NIL |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|lt_times_lt_pos2| FORMULA-DECL NIL |real_props| NIL) (|uint16| TYPE-EQ-DECL NIL |integertypes| NIL) (|le_times_le_pos| FORMULA-DECL NIL |real_props| NIL) (|neg_times_le| FORMULA-DECL NIL |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) SHOSTAK (|times_u16_i16| SUBTYPE "number_fields.*(integertypes.ux16, integertypes.y16)" "int32"))) (|times_i16_u16| 0 (|times_i16_u16-1| |nil| 3867803518 ("" (SKEEP :PREDS? T) (("" (LEMMA "exp2_sum") (("" (INST -1 "16" "15") (("" (ASSERT) (("" (REPLACE -1 :HIDE? T) (("" (CASE "0 <= x16") (("1" (ASSERT) (("1" (LEMMA "lt_times_lt_pos2") (("1" (INST -1 "x16" "uy16" "exp2(16)" "exp2(15)") (("1" (ASSERT) (("1" (LEMMA "pos_times_le") (("1" (INST -1 "x16" "uy16") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (CASE "-x16 <= exp2(15)") (("1" (HIDE -3) (("1" (LEMMA "lt_times_lt_pos2") (("1" (INST -1 "uy16" "-x16" "exp2(15)" "exp2(16)") (("1" (ASSERT) (("1" (LEMMA "neg_times_le") (("1" (INST -1 "x16" "uy16") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|exp2_sum| FORMULA-DECL NIL |exp2| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int16| TYPE-EQ-DECL NIL |integertypes| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|lt_times_lt_pos2| FORMULA-DECL NIL |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|pos_times_le| FORMULA-DECL NIL |real_props| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|uint16| TYPE-EQ-DECL NIL |integertypes| NIL) NIL (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|neg_times_le| FORMULA-DECL NIL |real_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) SHOSTAK (|times_i16_u16| SUBTYPE "number_fields.*(integertypes.x16, integertypes.uy16)" "int32"))) (|times_u32_i32| 0 (|times_u32_i32-1| |nil| 3867803518 ("" (SKEEP :PREDS? T) (("" (CASE "-y32 <= exp2(31)") (("1" (HIDE -3) (("1" (LEMMA "exp2_sum") (("1" (INST -1 "31" "32") (("1" (ASSERT) (("1" (REPLACE -1 :HIDE? T) (("1" (CASE "0 <= y32") (("1" (ASSERT) (("1" (LEMMA "pos_times_le") (("1" (INST -1 "ux32" "y32") (("1" (ASSERT) (("1" (LEMMA "lt_times_lt_pos2") (("1" (INST -1 "y32" "ux32" "exp2(32)" "exp2(31)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "neg_times_le") (("2" (INST -1 "y32" "ux32") (("2" (ASSERT) (("2" (LEMMA "le_times_le_pos") (("2" (INST -1 "-y32" "ux32" "exp2(32)" "exp2(31)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|int32| TYPE-EQ-DECL NIL |integertypes| NIL) (|exp2_sum| FORMULA-DECL NIL |exp2| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|pos_times_le| FORMULA-DECL NIL |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|lt_times_lt_pos2| FORMULA-DECL NIL |real_props| NIL) (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL) (|le_times_le_pos| FORMULA-DECL NIL |real_props| NIL) (|neg_times_le| FORMULA-DECL NIL |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) SHOSTAK (|times_u32_i32| SUBTYPE "number_fields.*(integertypes.ux32, integertypes.y32)" "int64"))) (|times_i32_u32| 0 (|times_i32_u32-1| |nil| 3867803519 ("" (SKEEP :PREDS? T) (("" (LEMMA "exp2_sum") (("" (INST -1 "32" "31") (("" (ASSERT) (("" (REPLACE -1 :HIDE? T) (("" (CASE "0 <= x32") (("1" (ASSERT) (("1" (LEMMA "lt_times_lt_pos2") (("1" (INST -1 "x32" "uy32" "exp2(32)" "exp2(31)") (("1" (ASSERT) (("1" (LEMMA "pos_times_le") (("1" (INST -1 "x32" "uy32") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (CASE "-x32 <= exp2(31)") (("1" (HIDE -3) (("1" (LEMMA "lt_times_lt_pos2") (("1" (INST -1 "uy32" "-x32" "exp2(31)" "exp2(32)") (("1" (ASSERT) (("1" (LEMMA "neg_times_le") (("1" (INST -1 "x32" "uy32") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|exp2_sum| FORMULA-DECL NIL |exp2| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int32| TYPE-EQ-DECL NIL |integertypes| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|lt_times_lt_pos2| FORMULA-DECL NIL |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|pos_times_le| FORMULA-DECL NIL |real_props| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL) NIL (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|neg_times_le| FORMULA-DECL NIL |real_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) SHOSTAK (|times_i32_u32| SUBTYPE "number_fields.*(integertypes.x32, integertypes.uy32)" "int64"))) (|u16times_TCC1| 0 (|u16times_TCC1-1| |nil| 3751239140 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|uint16| TYPE-EQ-DECL NIL |integertypes| NIL) (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|times_u16_u16| APPLICATION-JUDGEMENT "uint32" |integertypes| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) NIL (|u16times| SUBTYPE "modulo_arithmetic.nrem(integertypes.ux32, exp2.exp2(16))" "uint16"))) (|u32times_TCC1| 0 (|u32times_TCC1-1| |nil| 3751239140 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL) (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|times_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) NIL (|u32times| SUBTYPE "modulo_arithmetic.nrem(integertypes.ux64, exp2.exp2(32))" "uint32"))) (|u64times_TCC1| 0 (|u64times_TCC1-1| |nil| 3751239140 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) NIL (|u64times| SUBTYPE "modulo_arithmetic.nrem(number_fields.*(integertypes.ux64, integertypes.uy64), exp2.exp2(64))" "uint64"))) (|div_u8_u8_TCC1| 0 (|div_u8_u8_TCC1-1| |nil| 3867803523 ("" (SUBTYPE-TCC) NIL NIL) NIL SHOSTAK (|div_u8_u8_| SUBTYPE "integertypes.nzu8" "posnat"))) (|div_u8_u8| 0 (|div_u8_u8-1| |nil| 3867803524 ("" (JUDGEMENT-TCC) NIL NIL) ((|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (< CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (NIL APPLICATION-JUDGEMENT "upto(n)" |modulo_arithmetic| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) SHOSTAK (|div_u8_u8| SUBTYPE "modulo_arithmetic.ndiv(integertypes.ux8, integertypes.nzu8)" "uint8"))) (|div_u16_u16_TCC1| 0 (|div_u16_u16_TCC1-1| |nil| 3867803525 ("" (SUBTYPE-TCC) NIL NIL) ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) SHOSTAK (|div_u16_u16_| SUBTYPE "integertypes.nzu16" "posnat"))) (|div_u16_u16| 0 (|div_u16_u16-1| |nil| 3867803525 ("" (JUDGEMENT-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|uint16| TYPE-EQ-DECL NIL |integertypes| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "upto(n)" |modulo_arithmetic| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) SHOSTAK (|div_u16_u16| SUBTYPE "modulo_arithmetic.ndiv(integertypes.ux16, integertypes.nzu16)" "uint16"))) (|div_u32_u32_TCC1| 0 (|div_u32_u32_TCC1-1| |nil| 3867803526 ("" (SUBTYPE-TCC) NIL NIL) ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) SHOSTAK (|div_u32_u32_| SUBTYPE "integertypes.nzu32" "posnat"))) (|div_u32_u32| 0 (|div_u32_u32-1| |nil| 3867803527 ("" (JUDGEMENT-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "upto(n)" |modulo_arithmetic| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) SHOSTAK (|div_u32_u32| SUBTYPE "modulo_arithmetic.ndiv(integertypes.ux32, integertypes.nzu32)" "uint32"))) (|div_u64_u64_TCC1| 0 (|div_u64_u64_TCC1-1| |nil| 3867803528 ("" (SUBTYPE-TCC) NIL NIL) ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) SHOSTAK (|div_u64_u64_| SUBTYPE "integertypes.nzu64" "posnat"))) (|div_u64_u64| 0 (|div_u64_u64-1| |nil| 3867803529 ("" (JUDGEMENT-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "upto(n)" |modulo_arithmetic| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) SHOSTAK (|div_u64_u64| SUBTYPE "modulo_arithmetic.ndiv(integertypes.ux64, integertypes.nzu64)" "uint64"))) (|u8rem_TCC1| 0 (|u8rem_TCC1-1| |nil| 3757612809 ("" (SUBTYPE-TCC) NIL NIL) ((|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (< CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL (|u8rem| SUBTYPE "modulo_arithmetic.nrem(integertypes.ux8, integertypes.uy8)" "uint8"))) (|u16rem_TCC1| 0 (|u16rem_TCC1-1| |nil| 3757612809 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|uint16| TYPE-EQ-DECL NIL |integertypes| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) NIL (|u16rem| SUBTYPE "modulo_arithmetic.nrem(integertypes.ux16, integertypes.uy16)" "uint16"))) (|u32rem_TCC1| 0 (|u32rem_TCC1-1| |nil| 3757612809 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) NIL (|u32rem| SUBTYPE "modulo_arithmetic.nrem(integertypes.ux32, integertypes.uy32)" "uint32"))) (|u64rem_TCC1| 0 (|u64rem_TCC1-1| |nil| 3757612809 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) NIL (|u64rem| SUBTYPE "modulo_arithmetic.nrem(integertypes.ux64, integertypes.uy64)" "uint64"))) (|u8max_TCC1| 0 (|u8max_TCC1-1| |nil| 3835419869 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL)) SHOSTAK (|u8max| SUBTYPE "real_defs.max(integertypes.ux8, integertypes.uy8)" "uint8"))) (|u16max_TCC1| 0 (|u16max_TCC1-1| |nil| 3835419869 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|uint16| TYPE-EQ-DECL NIL |integertypes| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) SHOSTAK (|u16max| SUBTYPE "real_defs.max(integertypes.ux16, integertypes.uy16)" "uint16"))) (|u32max_TCC1| 0 (|u32max_TCC1-1| |nil| 3835419870 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) SHOSTAK (|u32max| SUBTYPE "real_defs.max(integertypes.ux32, integertypes.uy32)" "uint32"))) (|u64max_TCC1| 0 (|u64max_TCC1-1| |nil| 3835419870 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) SHOSTAK (|u64max| SUBTYPE "real_defs.max(integertypes.ux64, integertypes.uy64)" "uint64"))) (|i8max_TCC1| 0 (|i8max_TCC1-1| |nil| 3835419870 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|int8| TYPE-EQ-DECL NIL |integertypes| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) SHOSTAK (|i8max| SUBTYPE "real_defs.max(integertypes.x8, integertypes.y8)" "int8"))) (|i16max_TCC1| 0 (|i16max_TCC1-1| |nil| 3835419870 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|int16| TYPE-EQ-DECL NIL |integertypes| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) SHOSTAK (|i16max| SUBTYPE "real_defs.max(integertypes.x16, integertypes.y16)" "int16"))) (|i32max_TCC1| 0 (|i32max_TCC1-1| |nil| 3835419870 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|int32| TYPE-EQ-DECL NIL |integertypes| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) SHOSTAK (|i32max| SUBTYPE "real_defs.max(integertypes.x32, integertypes.y32)" "int32"))) (|i64max_TCC1| 0 (|i64max_TCC1-1| |nil| 3835419870 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|int64| TYPE-EQ-DECL NIL |integertypes| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) SHOSTAK (|i64max| SUBTYPE "real_defs.max(integertypes.x64, integertypes.y64)" "int64"))) (|u8min_TCC1| 0 (|u8min_TCC1-1| |nil| 3867803541 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) SHOSTAK (|u8min| SUBTYPE "real_defs.min(integertypes.ux8, integertypes.uy8)" "uint8"))) (|u16min_TCC1| 0 (|u16min_TCC1-1| |nil| 3867803541 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|uint16| TYPE-EQ-DECL NIL |integertypes| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) SHOSTAK (|u16min| SUBTYPE "real_defs.min(integertypes.ux16, integertypes.uy16)" "uint16"))) (|u32min_TCC1| 0 (|u32min_TCC1-1| |nil| 3867803542 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) SHOSTAK (|u32min| SUBTYPE "real_defs.min(integertypes.ux32, integertypes.uy32)" "uint32"))) (|u64min_TCC1| 0 (|u64min_TCC1-1| |nil| 3867803543 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) SHOSTAK (|u64min| SUBTYPE "real_defs.min(integertypes.ux64, integertypes.uy64)" "uint64"))) (|i8min_TCC1| 0 (|i8min_TCC1-1| |nil| 3867803544 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|int8| TYPE-EQ-DECL NIL |integertypes| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) SHOSTAK (|i8min| SUBTYPE "real_defs.min(integertypes.x8, integertypes.y8)" "int8"))) (|i16min_TCC1| 0 (|i16min_TCC1-1| |nil| 3867803545 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|int16| TYPE-EQ-DECL NIL |integertypes| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) SHOSTAK (|i16min| SUBTYPE "real_defs.min(integertypes.x16, integertypes.y16)" "int16"))) (|i32min_TCC1| 0 (|i32min_TCC1-1| |nil| 3867803546 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|int32| TYPE-EQ-DECL NIL |integertypes| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) SHOSTAK (|i32min| SUBTYPE "real_defs.min(integertypes.x32, integertypes.y32)" "int32"))) (|i64min_TCC1| 0 (|i64min_TCC1-1| |nil| 3867803547 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|int64| TYPE-EQ-DECL NIL |integertypes| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) SHOSTAK (|i64min| SUBTYPE "real_defs.min(integertypes.x64, integertypes.y64)" "int64"))) (|u8ceiling_TCC1| 0 (|u8ceiling_TCC1-1| |nil| 3844275086 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL) (|max8| CONST-DECL "uint8" |integertypes| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL)) SHOSTAK (|u8ceiling| SUBTYPE "floor_ceil.ceiling(integertypes.x)" "uint8"))) (|u16ceiling_TCC1| 0 (|u16ceiling_TCC1-1| |nil| 3844275092 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|uint16| TYPE-EQ-DECL NIL |integertypes| NIL) (|max16| CONST-DECL "uint16" |integertypes| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL)) SHOSTAK (|u16ceiling| SUBTYPE "floor_ceil.ceiling(integertypes.x)" "uint16"))) (|u32ceiling_TCC1| 0 (|u32ceiling_TCC1-1| |nil| 3844275097 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL) (|max32| CONST-DECL "uint32" |integertypes| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL)) SHOSTAK (|u32ceiling| SUBTYPE "floor_ceil.ceiling(integertypes.x)" "uint32"))) (|u64ceiling_TCC1| 0 (|u64ceiling_TCC1-1| |nil| 3844275103 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL) (|max64| CONST-DECL "uint64" |integertypes| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL)) SHOSTAK (|u64ceiling| SUBTYPE "floor_ceil.ceiling(integertypes.x)" "uint64"))) (|u8floor_TCC1| 0 (|u8floor_TCC1-1| |nil| 3844275108 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL) (|max8| CONST-DECL "uint8" |integertypes| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL)) SHOSTAK (|u8floor| SUBTYPE "floor_ceil.floor(integertypes.x)" "uint8"))) (|u16floor_TCC1| 0 (|u16floor_TCC1-1| |nil| 3844275112 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|uint16| TYPE-EQ-DECL NIL |integertypes| NIL) (|max16| CONST-DECL "uint16" |integertypes| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL)) SHOSTAK (|u16floor| SUBTYPE "floor_ceil.floor(integertypes.x)" "uint16"))) (|u32floor_TCC1| 0 (|u32floor_TCC1-1| |nil| 3844275117 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL) (|max32| CONST-DECL "uint32" |integertypes| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL)) SHOSTAK (|u32floor| SUBTYPE "floor_ceil.floor(integertypes.x)" "uint32"))) (|u64floor_TCC1| 0 (|u64floor_TCC1-1| |nil| 3844275122 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL) (|max64| CONST-DECL "uint64" |integertypes| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL)) SHOSTAK (|u64floor| SUBTYPE "floor_ceil.floor(integertypes.x)" "uint64"))) (|i8ceiling_TCC1| 0 (|i8ceiling_TCC1-1| |nil| 3844275165 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|int8| TYPE-EQ-DECL NIL |integertypes| NIL) (|mini8| CONST-DECL "int8" |integertypes| NIL) (|maxi8| CONST-DECL "int8" |integertypes| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL)) SHOSTAK (|i8ceiling| SUBTYPE "floor_ceil.ceiling(integertypes.x)" "int8"))) (|i16ceiling_TCC1| 0 (|i16ceiling_TCC1-1| |nil| 3844275172 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|int16| TYPE-EQ-DECL NIL |integertypes| NIL) (|mini16| CONST-DECL "int16" |integertypes| NIL) (|maxi16| CONST-DECL "int16" |integertypes| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL)) SHOSTAK (|i16ceiling| SUBTYPE "floor_ceil.ceiling(integertypes.x)" "int16"))) (|i32ceiling_TCC1| 0 (|i32ceiling_TCC1-1| |nil| 3844275177 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|int32| TYPE-EQ-DECL NIL |integertypes| NIL) (|mini32| CONST-DECL "int32" |integertypes| NIL) (|maxi32| CONST-DECL "int32" |integertypes| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL)) SHOSTAK (|i32ceiling| SUBTYPE "floor_ceil.ceiling(integertypes.x)" "int32"))) (|i64ceiling_TCC1| 0 (|i64ceiling_TCC1-1| |nil| 3844275182 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|int64| TYPE-EQ-DECL NIL |integertypes| NIL) (|mini64| CONST-DECL "int64" |integertypes| NIL) (|maxi64| CONST-DECL "int64" |integertypes| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL)) SHOSTAK (|i64ceiling| SUBTYPE "floor_ceil.ceiling(integertypes.x)" "int64"))) (|i8floor_TCC1| 0 (|i8floor_TCC1-1| |nil| 3844275205 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|int8| TYPE-EQ-DECL NIL |integertypes| NIL) (|mini8| CONST-DECL "int8" |integertypes| NIL) (|maxi8| CONST-DECL "int8" |integertypes| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL)) SHOSTAK (|i8floor| SUBTYPE "floor_ceil.floor(integertypes.x)" "int8"))) (|i16floor_TCC1| 0 (|i16floor_TCC1-1| |nil| 3844275209 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|int16| TYPE-EQ-DECL NIL |integertypes| NIL) (|mini16| CONST-DECL "int16" |integertypes| NIL) (|maxi16| CONST-DECL "int16" |integertypes| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL)) SHOSTAK (|i16floor| SUBTYPE "floor_ceil.floor(integertypes.x)" "int16"))) (|i32floor_TCC1| 0 (|i32floor_TCC1-1| |nil| 3844275215 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|int32| TYPE-EQ-DECL NIL |integertypes| NIL) (|mini32| CONST-DECL "int32" |integertypes| NIL) (|maxi32| CONST-DECL "int32" |integertypes| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL)) SHOSTAK (|i32floor| SUBTYPE "floor_ceil.floor(integertypes.x)" "int32"))) (|i64floor_TCC1| 0 (|i64floor_TCC1-1| |nil| 3844275221 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|int64| TYPE-EQ-DECL NIL |integertypes| NIL) (|mini64| CONST-DECL "int64" |integertypes| NIL) (|maxi64| CONST-DECL "int64" |integertypes| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL)) SHOSTAK (|i64floor| SUBTYPE "floor_ceil.floor(integertypes.x)" "int64"))))(|nat_fun_props| (|injection_n_to_m| 0 (|injection_n_to_m-2| "" 3505098781 ("" (INDUCT "n") (("1" (ASSERT) NIL NIL) ("2" (SKOSIMP*) (("2" (TYPEPRED "f!1(0)") (("2" (ASSERT) (("2" (HIDE -1) (("2" (INST -1 "m!1 - 1") (("2" (ASSERT) (("2" (DELETE 2) (("2" (INST 1 "LAMBDA (x : below[j!1]) : IF f!1(x) = m!1 - 1 THEN f!1(j!1) ELSE f!1(x) ENDIF") (("1" (EXPAND "injective?") (("1" (SKOSIMP) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (INST-CP -2 "x1!1" "j!1") (("1" (INST-CP -2 "x2!1" "j!1") (("1" (INST -2 "x1!1" "x2!1") (("1" (ASSERT) (("1" (ASSERT) (("1" (LIFT-IF) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP) (("3" (EXPAND "injective?") (("3" (INST -2 "x!1" "j!1") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) NIL (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) NIL NIL (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK) (|injection_n_to_m-1| |nil| 3242964223 ("" (INDUCT "n") (("1" (ASSERT) NIL NIL) ("2" (SKOSIMP*) (("2" (TYPEPRED "f!1(0)") (("2" (ASSERT) (("2" (HIDE -1) (("2" (INST -1 "m!1 - 1") (("2" (ASSERT) (("2" (DELETE 2) (("2" (INST 1 "LAMBDA (x : below[j!1]) : IF f!1(x) = m!1 - 1 THEN f!1(j!1) ELSE f!1(x) ENDIF") (("1" (EXPAND "injective?") (("1" (SKOSIMP) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (INST-CP -2 "x1!1" "j!1") (("1" (INST-CP -2 "x2!1" "j!1") (("1" (INST -2 "x1!1" "x2!1") (("1" (ASSERT) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP) (("3" (EXPAND "injective?") (("3" (INST -2 "x!1" "j!1") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|injection_n_to_m_var| 0 (|injection_n_to_m_var-1| |nil| 3243223197 ("" (SKOLEM!) (("" (GROUND) (("1" (REWRITE "injection_n_to_m") NIL NIL) ("2" (INST + "lambda (i: below(n!1)): i") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|injection_n_to_m| FORMULA-DECL NIL |nat_fun_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL)) SHOSTAK)) (|surjection_n_to_m| 0 (|surjection_n_to_m-1| |nil| 3242964294 ("" (SKOSIMP*) (("" (REWRITE "injection_n_to_m") (("" (EXPAND "surjective?") (("" (INST -1 "0") (("" (SKOSIMP) (("" (ASSERT) (("" (INST 1 "inverse(f!1)") (("1" (REWRITE "inj_inv") (("1" (INST 1 "x!1") NIL NIL)) NIL) ("2" (INST 1 "x!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|injection_n_to_m| FORMULA-DECL NIL |nat_fun_props| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|inj_inv| FORMULA-DECL NIL |function_inverse| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) NIL (|inverse| CONST-DECL "D" |function_inverse| NIL) (|surjective?| CONST-DECL "bool" |functions| NIL)) SHOSTAK)) (|surjection_n_to_m_var| 0 (|surjection_n_to_m_var-1| |nil| 3243223295 ("" (SKOLEM!) (("" (APPLY (THEN (SPLIT) (FLATTEN))) (("1" (FORWARD-CHAIN "surjection_n_to_m") (("1" (ASSERT) (("1" (SKOSIMP) (("1" (TYPEPRED "f!1(0)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST + "lambda (i: below(n!1)): IF i < m!1 THEN i ELSE 0 ENDIF") (("1" (GRIND) NIL NIL) ("2" (REDUCE) NIL NIL)) NIL)) NIL)) NIL) ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|surjection_n_to_m| FORMULA-DECL NIL |nat_fun_props| NIL) (|surjective?| CONST-DECL "bool" |functions| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) NIL (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL) SHOSTAK)) (|bijection_n_to_m| 0 (|bijection_n_to_m-1| |nil| 3242964328 ("" (SKOLEM!) (("" (PROP) (("1" (EXPAND "bijective?") (("1" (SKOSIMP) (("1" (LEMMA "injection_n_to_m" ("n" "n!1" "m" "m!1")) (("1" (LEMMA "surjection_n_to_m" ("n" "n!1" "m" "m!1")) (("1" (SPLIT) (("1" (ASSERT) (("1" (INST?) NIL NIL)) NIL) ("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "LAMBDA (x : below[n!1]) : x") (("1" (GRIND) NIL NIL) ("2" (SKOLEM!) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|surjection_n_to_m| FORMULA-DECL NIL |nat_fun_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|injection_n_to_m| FORMULA-DECL NIL |nat_fun_props| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|surjective?| CONST-DECL "bool" |functions| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) NIL (|below| TYPE-EQ-DECL NIL |nat_types| NIL) NIL) SHOSTAK)) (|injection_n_to_m2| 0 (|injection_n_to_m2-1| |nil| 3243223324 ("" (SKOLEM!) (("" (GROUND) (("1" (LEMMA "injection_n_to_m" ("n" "n!1+1" "m" "m!1+1")) (("1" (ASSERT) (("1" (SKOLEM!) (("1" (INST + "lambda (i : below(1 + n!1)) : f!1(i)") (("1" (GRIND :IF-MATCH NIL) (("1" (INST? :WHERE +) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKOLEM!) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST + "lambda (i : upto(n!1)): i") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) NIL NIL (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) NIL (< CONST-DECL "bool" |reals| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|injection_n_to_m| FORMULA-DECL NIL |nat_fun_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) SHOSTAK)) (|surjection_n_to_m2| 0 (|surjection_n_to_m2-1| |nil| 3243223349 ("" (SKOLEM!) (("" (GROUND) (("1" (LEMMA "surjection_n_to_m" ("n" "n!1+1" "m" "m!1+1")) (("1" (ASSERT) (("1" (SKOLEM!) (("1" (INST + "lambda (i: below(1 + n!1)): f!1(i)") (("1" (GRIND :IF-MATCH NIL) (("1" (INST? -) (("1" (SKOLEM!) (("1" (INST?) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOLEM!) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST + "lambda (i : upto(n!1)): IF i <= m!1 THEN i ELSE 0 ENDIF") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) NIL NIL (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) NIL (< CONST-DECL "bool" |reals| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|surjective?| CONST-DECL "bool" |functions| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|surjection_n_to_m| FORMULA-DECL NIL |nat_fun_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL)) SHOSTAK)) (|bijection_n_to_m2| 0 (|bijection_n_to_m2-1| |nil| 3243223474 ("" (SKOLEM!) (("" (GROUND) (("1" (EXPAND "bijective?") (("1" (SKOSIMP) (("1" (LEMMA "injection_n_to_m2" ("n" "n!1" "m" "m!1")) (("1" (LEMMA "surjection_n_to_m2" ("n" "n!1" "m" "m!1")) (("1" (GROUND) (("1" (INST?) NIL NIL) ("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST + "lambda (i : upto(n!1)): i") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|surjection_n_to_m2| FORMULA-DECL NIL |nat_fun_props| NIL) (<= CONST-DECL "bool" |reals| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|injection_n_to_m2| FORMULA-DECL NIL |nat_fun_props| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|surjective?| CONST-DECL "bool" |functions| NIL) (|injective?| CONST-DECL "bool" |functions| NIL)) SHOSTAK)) (|surj_equiv_inj| 0 (|surj_equiv_inj-1| |nil| 3243223495 ("" (SKOLEM!) (("" (CASE "n!1 = 0") (("1" (GRIND) NIL NIL) ("2" (GROUND) (("1" (USE "surjection_n_to_m" ("n" "n!1 - 1" "m" "n!1")) (("1" (ASSERT) (("1" (EXPAND* "surjective?" "injective?") (("1" (SKOSIMP) (("1" (INST + "lambda (i : below(n!1 - 1)): IF i < x1!1 THEN f!1(i) ELSE f!1(i+1) ENDIF") (("1" (ASSERT) (("1" (SKOLEM!) (("1" (INST - "y!1") (("1" (SKOLEM!) (("1" (CASE "x!1 = x1!1") (("1" (INST + "IF x2!1 < x!1 THEN x2!1 ELSE x2!1-1 ENDIF") (("1" (SMASH) NIL NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL)) NIL) ("2" (INST + "IF x!1 < x1!1 THEN x!1 ELSE x!1 - 1 ENDIF") (("1" (SMASH) NIL NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "injection_n_to_m" ("n" "n!1" "m" "n!1-1")) (("2" (ASSERT) (("2" (EXPAND* "injective?" "surjective?") (("2" (SKOLEM!) (("2" (INST + "lambda (i : below(n!1)) : IF f!1(i) = n!1 - 1 THEN y!1 ELSE f!1(i) ENDIF") (("1" (ASSERT) (("1" (SKOSIMP) (("1" (INST? - :WHERE +) (("1" (SMASH) (("1" (INST + "x2!1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP) (("3" (INST? +) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (|surjective?| CONST-DECL "bool" |functions| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|injection_n_to_m| FORMULA-DECL NIL |nat_fun_props| NIL) NIL NIL (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|surjection_n_to_m| FORMULA-DECL NIL |nat_fun_props| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) NIL NIL NIL NIL (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) SHOSTAK)) (|inj_equiv_bij| 0 (|inj_equiv_bij-1| |nil| 3243223527 ("" (SKOLEM!) (("" (EXPAND "bijective?") (("" (GROUND) (("" (REWRITE "surj_equiv_inj") NIL NIL)) NIL)) NIL)) NIL) ((|bijective?| CONST-DECL "bool" |functions| NIL) (|surj_equiv_inj| FORMULA-DECL NIL |nat_fun_props| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)) SHOSTAK)) (|surj_equiv_bij| 0 (|surj_equiv_bij-1| |nil| 3243223548 ("" (SKOLEM!) (("" (EXPAND "bijective?") (("" (GROUND) (("" (REWRITE "surj_equiv_inj") NIL NIL)) NIL)) NIL)) NIL) ((|bijective?| CONST-DECL "bool" |functions| NIL) (|surj_equiv_inj| FORMULA-DECL NIL |nat_fun_props| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)) SHOSTAK)) (|surj_equiv_inj2| 0 (|surj_equiv_inj2-1| |nil| 3243223572 ("" (SKOLEM!) (("" (LEMMA "surj_equiv_inj" ("n" "n!1+1" "f" "lambda (i : below(n!1 + 1)): f!1(i)")) (("1" (EXPAND* "surjective?" "injective?") (("1" (REDUCE :IF-MATCH NIL) (("1" (INST? -4 :WHERE +) (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST? -2) (("2" (SKOLEM!) (("2" (INST? +) NIL NIL)) NIL)) NIL) ("3" (INST - "y!1") (("3" (SKOLEM!) (("3" (INST + "x!1") NIL NIL)) NIL)) NIL) ("4" (INST? - :WHERE +) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOLEM!) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|surj_equiv_inj| FORMULA-DECL NIL |nat_fun_props| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|surjective?| CONST-DECL "bool" |functions| NIL) (|injective?| CONST-DECL "bool" |functions| NIL)) SHOSTAK)) (|inj_equiv_bij2| 0 (|inj_equiv_bij2-1| |nil| 3243223596 ("" (SKOLEM!) (("" (EXPAND "bijective?") (("" (GROUND) (("" (REWRITE "surj_equiv_inj2") NIL NIL)) NIL)) NIL)) NIL) ((|bijective?| CONST-DECL "bool" |functions| NIL) (|surj_equiv_inj2| FORMULA-DECL NIL |nat_fun_props| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)) SHOSTAK)) (|surj_equiv_bij2| 0 (|surj_equiv_bij2-1| |nil| 3243223623 ("" (SKOLEM!) (("" (EXPAND "bijective?") (("" (GROUND) (("" (REWRITE "surj_equiv_inj2") NIL NIL)) NIL)) NIL)) NIL) ((|bijective?| CONST-DECL "bool" |functions| NIL) (|surj_equiv_inj2| FORMULA-DECL NIL |nat_fun_props| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)) SHOSTAK)))(|finite_sets| (|finite_set_TCC1| 0 (|finite_set_TCC1-1| |nil| 3243832506 ("" (EXPAND "is_finite") (("" (INST 1 "0" "LAMBDA (s: (emptyset[T])): 0") (("1" (EXPAND "injective?") (("1" (SKOLEM-TYPEPRED) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (FALSE CONST-DECL "bool" |booleans| NIL) (|emptyset| CONST-DECL "set" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL)) SHOSTAK (|finite_set| SUBTYPE "sets[finite_sets.T].emptyset" "finite_set"))) (|is_finite_surj| 0 (|is_finite_surj-1| |nil| 3243836561 ("" (SKOSIMP*) (("" (PROP) (("1" (SKOSIMP) (("1" (GRIND :IF-MATCH NIL) (("1" (INST 1 "N!1" "lambda (x: (s!1)): epsilon! (n: below[N!1]): x = f!1(n)") (("1" (SKOSIMP) (("1" (USE "epsilon_ax[below[N!1]]" :IF-MATCH ALL) (("1" (PROP) (("1" (GRIND) NIL NIL) ("2" (INST -2 "x1!1") (("2" (SKOSIMP) (("2" (INST 1 "x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (INST -2 "x2!1") (("3" (SKOSIMP) (("3" (INST 1 "x!1") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (INST -1 "x1!1") (("4" (SKOSIMP) (("4" (INST 1 "x!1") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -1 "x1!1") (("2" (SKOSIMP) (("2" (INST 1 "x!1") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "empty?(s!1)") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "empty?(s!1)") (("1" (EXPAND "empty?") (("1" (INST 1 "0" "lambda (n: below[0]): epsilon! (x: (s!1)): true") (("1" (HIDE -2) (("1" (GRIND :IF-MATCH NIL) (("1" (INST -2 "y!1") NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (EXPAND "is_finite") (("2" (SKOSIMP) (("2" (GRIND :IF-MATCH NIL) (("2" (INST 1 "N!1" "lambda (n : below[N!1]): epsilon!(x : (s!1)) : n = f!1(x)") (("1" (SKOLEM-TYPEPRED) (("1" (INST 1 "f!1(y!1)") (("1" (USE "epsilon_ax[(s!1)]") (("1" (PROP) (("1" (INST -4 "y!1" "epsilon(LAMBDA (x: (s!1)): f!1(y!1) = f!1(x))") (("1" (ASSERT) NIL NIL) ("2" (INST 1 "y!1") NIL NIL)) NIL) ("2" (INST 1 "y!1") NIL NIL)) NIL) ("2" (INST 1 "y!1") NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (INST 1 "x!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|surjective?| CONST-DECL "bool" |functions| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|epsilon_ax| FORMULA-DECL NIL |epsilons| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) NIL (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) NIL (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|epsilon| CONST-DECL "T" |epsilons| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) NIL (FALSE CONST-DECL "bool" |booleans| NIL)) NIL)) (|finite_subset| 0 (|finite_subset-3| "" 3658945030 ("" (GRIND :IF-MATCH NIL) (("" (INST 1 "N!1" "lambda (x: (s!1)): f!1(x)") (("1" (SKOSIMP) (("1" (INST? -2) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKOLEM-TYPEPRED) (("2" (INST? -4) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL)) SHOSTAK) (|finite_subset-2| "" 3590856476 ("" (GRIND :IF-MATCH NIL) (("" (INST 1 "N!1" "lambda (x: (s!1)): f!1(x)") (("1" (SKOSIMP) (("1" (INST? -3) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKOLEM-TYPEPRED) (("2" (INST? -5) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|finite_subset-1| |nil| 3243836755 ("" (GRIND :IF-MATCH NIL) (("" (INST 1 "N!1" "lambda (x: (s!1)): f!1(x)") (("1" (SKOSIMP) (("1" (INST?) (("1" (ASSERT) NIL NIL) ("2" (TYPEPRED "x2!1") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (TYPEPRED "x1!1") (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOLEM-TYPEPRED) (("2" (INST? -4) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|finite_intersection| 0 (|finite_intersection-1| |nil| 3243836807 ("" (GRIND :IF-MATCH NIL) (("" (INST 1 "N!1" "lambda (x: (intersection(A!1, B!1))): f!1(x)") (("1" (SKOLEM-TYPEPRED) (("1" (INST?) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ((< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|intersection| CONST-DECL "set" |sets| NIL) NIL NIL (|member| CONST-DECL "bool" |sets| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|injective?| CONST-DECL "bool" |functions| NIL)) SHOSTAK)) (|finite_add| 0 (|finite_add-3| "" 3658945447 ("" (GRIND :IF-MATCH NIL) (("" (INST 1 "N!1 + 1" "lambda (x: (add(x!1, A!1))): if x = x!1 then N!1 else f!1(x) endif") (("1" (GRIND :IF-MATCH NIL) (("1" (INST -4 "x1!1" "x2!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (GRIND :IF-MATCH NIL) NIL NIL) ("3" (GRIND :IF-MATCH NIL) NIL NIL)) NIL)) NIL) ((IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (< CONST-DECL "bool" |reals| NIL) NIL (|below| TYPE-EQ-DECL NIL |nat_types| NIL) NIL (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|add| CONST-DECL "(nonempty?)" |sets| NIL) NIL NIL (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|injective?| CONST-DECL "bool" |functions| NIL)) SHOSTAK) (|finite_add-2| "" 3590856602 ("" (GRIND :IF-MATCH NIL) (("" (INST 1 "N!1 + 1" "lambda (x: (add(x!1, A!1))): if x = x!1 then N!1 else f!1(x) endif") (("1" (GRIND :IF-MATCH NIL) (("1" (INST -5 "x1!1" "x2!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (GRIND :IF-MATCH NIL) NIL NIL) ("3" (GRIND :IF-MATCH NIL) NIL NIL)) NIL)) NIL) NIL SHOSTAK) (|finite_add-1| |nil| 3243836836 ("" (GRIND :IF-MATCH NIL) (("" (INST 1 "N!1 + 1" "lambda (x: (add(x!1, A!1))): if x = x!1 then N!1 else f!1(x) endif") (("1" (GRIND :IF-MATCH NIL) (("1" (INST -4 "x1!1" "x2!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (GRIND :IF-MATCH NIL) NIL NIL) ("3" (GRIND :IF-MATCH NIL) NIL NIL)) NIL)) NIL) NIL SHOSTAK)) (|nonempty_finite_is_nonempty| 0 (|nonempty_finite_is_nonempty-1| |nil| 3243832507 ("" (GRIND) NIL NIL) ((|nonempty?| CONST-DECL "bool" |sets| NIL)) SHOSTAK (|nonempty_finite_is_nonempty| SUBTYPE "finite_sets.x" "(sets[finite_sets.T].nonempty?)"))) (|finite_singleton| 0 (|finite_singleton-1| |nil| 3243832507 ("" (SKOSIMP) (("" (EXPAND "is_finite") (("" (INST 1 "1" "LAMBDA (x: (singleton[T](x!1))): 0") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|singleton| CONST-DECL "(singleton?)" |sets| NIL) (|singleton?| CONST-DECL "bool" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK (|finite_singleton| SUBTYPE "sets[finite_sets.T].singleton(finite_sets.x)" "finite_set"))) (|finite_union| 0 (|finite_union-1| |nil| 3243832507 ("" (SKOLEM-TYPEPRED) (("" (EXPAND "is_finite") (("" (SKOSIMP) (("" (SKOSIMP) (("" (INST 1 "N!1 + N!2" "LAMBDA (x : (union(A!1, B!1))) : IF A!1(x) THEN f!1(x) ELSE N!1 + f!2(x) ENDIF") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP) (("2" (ASSERT) NIL NIL)) NIL) ("3" (DELETE -) (("3" (GRIND) NIL NIL)) NIL) ("4" (SKOSIMP) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (|member| CONST-DECL "bool" |sets| NIL) NIL NIL (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|union| CONST-DECL "set" |sets| NIL) NIL NIL (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) NIL (|below| TYPE-EQ-DECL NIL |nat_types| NIL) NIL (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) NIL NIL (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) SHOSTAK (|finite_union| SUBTYPE "sets[finite_sets.T].union(finite_sets.A, finite_sets.B)" "finite_set"))) (|finite_intersection1| 0 (|finite_intersection1-3| |nil| 3243834683 ("" (SKOLEM-TYPEPRED) (("" (EXPAND "is_finite") (("" (SKOSIMP) (("" (INST 1 "N!1" "lambda (x: (intersection[T](s!1, A!1))): f!1(x)") (("1" (EXPAND "injective?") (("1" (SKOLEM-TYPEPRED) (("1" (EXPAND "intersection") (("1" (EXPAND "member") (("1" (FLATTEN) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOLEM-TYPEPRED) (("2" (EXPAND "intersection") (("2" (EXPAND "member") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) NIL NIL (|intersection| CONST-DECL "set" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL (|finite_intersection1| SUBTYPE "sets[finite_sets.T].intersection(finite_sets.s, finite_sets.A)" "finite_set")) (|finite_intersection1-2| |nil| 3243834664 ("" (SKOLEM-TYPEPRED) (("" (EXPAND "is_finite") (("" (SKOSIMP) (("" (INST 1 "N!1" "lambda (x: (intersection[T](S!1, A!1))): f!1(x)") (("1" (EXPAND "injective?") (("1" (SKOLEM-TYPEPRED) (("1" (EXPAND "intersection") (("1" (EXPAND "member") (("1" (FLATTEN) (("1" (INST?) (("1" (ASSERT) NIL))))))))))))) ("2" (SKOLEM-TYPEPRED) (("2" (EXPAND "intersection") (("2" (EXPAND "member") (("2" (ASSERT) NIL)))))))))))))) NIL) NIL NIL (|finite_intersection1| SUBTYPE "sets[finite_sets.T].intersection(finite_sets.s, finite_sets.A)" "finite_set")) (|finite_intersection1-1| |nil| 3243832507 ("" (POSTPONE) NIL NIL) NIL SHOSTAK (|finite_intersection1| SUBTYPE "sets[finite_sets.T].intersection(finite_sets.s, finite_sets.A)" "finite_set"))) (|finite_intersection2| 0 (|finite_intersection2-1| |nil| 3243832507 ("" (SKOLEM-TYPEPRED) (("" (EXPAND "is_finite") (("" (SKOSIMP) (("" (INST 1 "N!1" "lambda (x: (intersection[T](A!1, s!1))): f!1(x)") (("1" (EXPAND "injective?") (("1" (SKOSIMP) (("1" (INST?) (("1" (ASSERT) NIL NIL) ("2" (TYPEPRED "x2!1") (("2" (EXPAND "intersection") (("2" (EXPAND "member") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "x1!1") (("3" (EXPAND "intersection") (("3" (EXPAND "member") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOLEM-TYPEPRED) (("2" (EXPAND "intersection") (("2" (EXPAND "member") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) NIL NIL (|intersection| CONST-DECL "set" |sets| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) SHOSTAK (|finite_intersection2| SUBTYPE "sets[finite_sets.T].intersection(finite_sets.A, finite_sets.s)" "finite_set"))) (|finite_difference| 0 (|finite_difference-1| |nil| 3243832507 ("" (SKOLEM-TYPEPRED) (("" (EXPAND "is_finite") (("" (SKOSIMP) (("" (INST 1 "N!1" "lambda (x :(difference[T](A!1, s!1))): f!1(x)") (("1" (EXPAND "injective?") (("1" (SKOSIMP) (("1" (INST?) (("1" (ASSERT) NIL NIL) ("2" (TYPEPRED "x2!1") (("2" (EXPAND "difference") (("2" (EXPAND "member") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "x1!1") (("3" (EXPAND "difference") (("3" (EXPAND "member") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOLEM-TYPEPRED) (("2" (EXPAND "difference") (("2" (EXPAND "member") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) NIL NIL (|difference| CONST-DECL "set" |sets| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) SHOSTAK (|finite_difference| SUBTYPE "sets[finite_sets.T].difference(finite_sets.A, finite_sets.s)" "finite_set"))) (|nonempty_finite_union1| 0 (|nonempty_finite_union1-1| |nil| 3243832507 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|non_empty_finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) NIL NIL (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|union| CONST-DECL "set" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|nonempty_union1| APPLICATION-JUDGEMENT "(nonempty?)" |sets| NIL) (|finite_union| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL)) SHOSTAK (|nonempty_finite_union1| SUBTYPE "sets[finite_sets.T].union(finite_sets.NA, finite_sets.B)" "non_empty_finite_set"))) (|nonempty_finite_union2| 0 (|nonempty_finite_union2-1| |nil| 3243832507 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|non_empty_finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) NIL NIL (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|union| CONST-DECL "set" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|nonempty_union2| APPLICATION-JUDGEMENT "(nonempty?)" |sets| NIL) (|finite_union| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL)) SHOSTAK (|nonempty_finite_union2| SUBTYPE "sets[finite_sets.T].union(finite_sets.A, finite_sets.NB)" "non_empty_finite_set"))) (|nonempty_add_finite| 0 (|nonempty_add_finite-2| "" 3505098916 ("" (SKOLEM-TYPEPRED) (("" (EXPAND "is_finite") (("" (SKOSIMP) (("" (SPLIT) (("1" (INST 1 "N!1+1" "lambda (x: (add[T](x!1, A!1))): if x = x!1 then N!1 else f!1(x) endif") (("1" (EXPAND "injective?") (("1" (SKOLEM-TYPEPRED) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) (("3" (LIFT-IF) (("3" (ASSERT) (("3" (PROP) (("3" (ASSERT) (("3" (INST -4 "x1!1" "x2!1") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOLEM-TYPEPRED) (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (SKOLEM-TYPEPRED) (("3" (FLATTEN) (("3" (ASSERT) (("3" (EXPAND "add") (("3" (EXPAND "member") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "empty?") (("2" (INST -1 "x!1") (("2" (EXPAND "member") (("2" (EXPAND "add") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|member| CONST-DECL "bool" |sets| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|add| CONST-DECL "(nonempty?)" |sets| NIL) NIL NIL (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) NIL (|below| TYPE-EQ-DECL NIL |nat_types| NIL) NIL (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) SHOSTAK (|nonempty_add_finite| SUBTYPE "sets[finite_sets.T].add(finite_sets.x, finite_sets.A)" "non_empty_finite_set")) (|nonempty_add_finite-1| |nil| 3243832507 ("" (SKOLEM-TYPEPRED) (("" (EXPAND "is_finite") (("" (SKOSIMP) (("" (SPLIT) (("1" (INST 1 "N!1+1" "lambda (x: (add[T](x!1, A!1))): if x = x!1 then N!1 else f!1(x) endif") (("1" (EXPAND "injective?") (("1" (SKOLEM-TYPEPRED) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL) ("4" (INST -4 "x1!1" "x2!1") (("1" (ASSERT) NIL NIL) ("2" (EXPAND "add") (("2" (ASSERT) (("2" (EXPAND "member") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "add") (("3" (EXPAND "member") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOLEM-TYPEPRED) (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (SKOLEM-TYPEPRED) (("3" (FLATTEN) (("3" (ASSERT) (("3" (EXPAND "add") (("3" (EXPAND "member") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "empty?") (("2" (INST -1 "x!1") (("2" (EXPAND "member") (("2" (EXPAND "add") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|nonempty_add_finite| SUBTYPE "sets[finite_sets.T].add(finite_sets.x, finite_sets.A)" "non_empty_finite_set"))) (|finite_remove| 0 (|finite_remove-1| |nil| 3243832507 ("" (SKOLEM-TYPEPRED) (("" (EXPAND "is_finite") (("" (SKOSIMP) (("" (INST 1 "N!1" "lambda (x: (remove[T](x!1, A!1))): f!1(x)") (("1" (EXPAND "injective?") (("1" (SKOLEM-TYPEPRED) (("1" (INST?) (("1" (EXPAND "remove") (("1" (EXPAND "member") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "remove") (("2" (EXPAND "member") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOLEM-TYPEPRED) (("2" (EXPAND "remove") (("2" (EXPAND "member") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) NIL NIL (|remove| CONST-DECL "set" |sets| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) SHOSTAK (|finite_remove| SUBTYPE "sets[finite_sets.T].remove(finite_sets.x, finite_sets.A)" "finite_set"))) (|finite_rest| 0 (|finite_rest-1| |nil| 3243832507 ("" (SKOLEM-TYPEPRED) (("" (EXPAND "is_finite") (("" (SKOSIMP) (("" (INST 1 "N!1" "lambda (x: (rest[T](A!1))): f!1(x)") (("1" (EXPAND "injective?") (("1" (SKOLEM-TYPEPRED) (("1" (INST?) (("1" (EXPAND "rest") (("1" (ASSERT) (("1" (HIDE -1) (("1" (PROP) (("1" (EXPAND "empty?") (("1" (SKOSIMP) (("1" (EXPAND "member") (("1" (EXPAND "remove") (("1" (EXPAND "member") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "rest") (("2" (ASSERT) (("2" (HIDE -2) (("2" (PROP) (("2" (EXPAND "remove") (("2" (EXPAND "member") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOLEM-TYPEPRED) (("2" (EXPAND "rest") (("2" (ASSERT) (("2" (PROP) (("2" (EXPAND "remove") (("2" (EXPAND "member") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) NIL (|rest| CONST-DECL "set" |sets| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|remove| CONST-DECL "set" |sets| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) SHOSTAK (|finite_rest| SUBTYPE "sets[finite_sets.T].rest(finite_sets.A)" "finite_set"))) (|finite_emptyset| 0 (|finite_emptyset-1| |nil| 3243832507 ("" (EXPAND "is_finite") (("" (INST 1 "0" "LAMBDA (x:(emptyset[T])): 0") (("1" (EXPAND "injective?") (("1" (SKOLEM-TYPEPRED) (("1" (EXPAND "emptyset") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOLEM-TYPEPRED) (("2" (EXPAND "emptyset") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (FALSE CONST-DECL "bool" |booleans| NIL) (|emptyset| CONST-DECL "set" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL)) SHOSTAK (|finite_emptyset| SUBTYPE "sets[finite_sets.T].emptyset" "finite_set"))) (|nonempty_singleton_finite| 0 (|nonempty_singleton_finite-1| |nil| 3243832507 ("" (SUBTYPE-TCC) NIL NIL) ((T FORMAL-TYPE-DECL NIL |finite_sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|singleton| CONST-DECL "(singleton?)" |sets| NIL) (|finite_singleton| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL)) SHOSTAK (|nonempty_singleton_finite| SUBTYPE "sets[finite_sets.T].singleton(finite_sets.x)" "non_empty_finite_set"))) (|finite_full| 0 (|finite_full-1| |nil| 3243836878 ("" (GRIND :IF-MATCH NIL) (("1" (INST 1 "N!1" "g!1") (("1" (GRIND) NIL NIL)) NIL) ("2" (INST 1 "N!1" "f!1") (("2" (GRIND) NIL NIL)) NIL)) NIL) ((T FORMAL-TYPE-DECL NIL |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|fullset| CONST-DECL "set" |sets| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|is_finite_type| CONST-DECL "bool" |finite_sets| NIL) (|injective?| CONST-DECL "bool" |functions| NIL)) SHOSTAK)) (|finite_type_set| 0 (|finite_type_set-1| |nil| 3243836911 ("" (GRIND :IF-MATCH NIL) (("" (INST 1 "N!1" "g!1") (("" (GRIND) NIL NIL)) NIL)) NIL) ((T FORMAL-TYPE-DECL NIL |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|is_finite_type| CONST-DECL "bool" |finite_sets| NIL) (|injective?| CONST-DECL "bool" |functions| NIL)) SHOSTAK)) (|finite_complement| 0 (|finite_complement-3| "" 3658945515 ("" (GRIND :IF-MATCH NIL) (("" (INST 1 "N!1" "g!1") (("" (GRIND :IF-MATCH NIL) (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((T FORMAL-TYPE-DECL NIL |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|complement| CONST-DECL "set" |sets| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|is_finite_type| CONST-DECL "bool" |finite_sets| NIL) (|injective?| CONST-DECL "bool" |functions| NIL)) SHOSTAK) (|finite_complement-2| "" 3590856663 ("" (GRIND :IF-MATCH NIL) (("" (INST 1 "N!1" "g!1") (("" (GRIND :IF-MATCH NIL) (("" (INST? -3) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|finite_complement-1| |nil| 3243836931 ("" (GRIND :IF-MATCH NIL) (("" (INST 1 "N!1" "g!1") (("" (GRIND :IF-MATCH NIL) (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|inj_set_TCC1| 0 (|inj_set_TCC1-1| |nil| 3243832508 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL)) SHOSTAK (|inj_set| SUBTYPE "{n | EXISTS (f: [(finite_sets.S) -> nat_types[finite_sets.n].below]): functions[(finite_sets.S), below[n]].injective?(f)}" "(sets[nat].nonempty?)"))) (|inj_Card| 0 (|inj_Card-1| |nil| 3243836968 ("" (SKOSIMP) (("" (EXPAND "Card") (("" (REWRITE "min_def") (("" (EXPAND "minimum?") (("" (FLATTEN) (("" (EXPAND "inj_set") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|Card| CONST-DECL "nat" |finite_sets| NIL) (|minimum?| CONST-DECL "bool" |min_nat| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|inj_set| CONST-DECL "(nonempty?[nat])" |finite_sets| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|min_def| FORMULA-DECL NIL |min_nat| NIL)) SHOSTAK)) (|reduce_inj_TCC1| 0 (|reduce_inj_TCC1-1| |nil| 3243832508 ("" (SUBTYPE-TCC) NIL NIL) ((|injective?| CONST-DECL "bool" |functions| NIL) (|surjective?| CONST-DECL "bool" |functions| NIL)) SHOSTAK (|reduce_inj| SUBTYPE "(number_fields.-)(finite_sets.p, 1)" "nat"))) (|reduce_inj| 0 (|reduce_inj-2| "" 3505099065 ("" (SKOSIMP) (("" (GRIND :IF-MATCH NIL) (("" (INST 2 "LAMBDA (x : (S!1)) : IF f!1(x) = p!1 - 1 THEN y!1 ELSE f!1(x) ENDIF") (("1" (SKOSIMP) (("1" (INST -2 "x1!1" "x2!1") (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (PROP) (("1" (INST 2 "x2!1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST 3 "x1!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP) (("3" (INST 2 "x!1") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|injective?| CONST-DECL "bool" |functions| NIL) (|surjective?| CONST-DECL "bool" |functions| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (< CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) NIL (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) NIL NIL (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) NIL (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK) (|reduce_inj-1| |nil| 3243836998 ("" (SKOSIMP) (("" (GRIND :IF-MATCH NIL) (("" (INST 2 "LAMBDA (x : (S!1)) : IF f!1(x) = p!1 - 1 THEN y!1 ELSE f!1(x) ENDIF") (("1" (SKOSIMP) (("1" (INST -2 "x1!1" "x2!1") (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (PROP) (("1" (INST?) NIL NIL) ("2" (INST 3 "x2!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP) (("3" (INST 2 "x!1") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|Card_injection| 0 (|Card_injection-1| |nil| 3243837042 ("" (SKOSIMP*) (("" (EXPAND "Card") (("" (TYPEPRED "min(inj_set(S!1))") (("" (INST?) (("" (ASSERT) (("" (EXPAND "inj_set") (("" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|Card| CONST-DECL "nat" |finite_sets| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|min| CONST-DECL "{a | S(a) AND (FORALL x: S(x) IMPLIES a <= x)}" |min_nat| NIL) (<= CONST-DECL "bool" |reals| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|inj_set| CONST-DECL "(nonempty?[nat])" |finite_sets| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) SHOSTAK)) (|Card_surjection| 0 (|Card_surjection-1| |nil| 3243837068 ("" (SKOSIMP*) (("" (NAME "CS" "Card(S!1)") (("" (REPLACE -1) (("" (FORWARD-CHAIN "inj_Card") (("" (SKOLEM!) (("" (REWRITE "injection_n_to_m") (("" (COPY -3) (("" (EXPAND "surjective?" -1) (("" (INST -1 "0") (("" (SKOSIMP*) (("" (INST 1 "f!2 o inverse(f!1)") (("1" (HIDE -3 2) (("1" (FORWARD-CHAIN "inj_inv[(S!1),below[n!1]]") (("1" (HIDE -4) (("1" (GRIND :IF-MATCH NIL :EXCLUDE INVERSE) (("1" (INST -6 "epsilon! (x: (S!1)): f!1(x) = x1!1" "epsilon! (x: (S!1)): f!1(x) = x2!1") (("1" (INST -3 "x1!1" "x2!1") (("1" (ASSERT) (("1" (EXPAND "inverse") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "x!1") NIL NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "x!1") NIL NIL)) NIL)) NIL) ("2" (INST 1 "x!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|Card| CONST-DECL "nat" |finite_sets| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|inj_Card| FORMULA-DECL NIL |finite_sets| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|injection_n_to_m| FORMULA-DECL NIL |nat_fun_props| NIL) (|surjective?| CONST-DECL "bool" |functions| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|epsilon| CONST-DECL "T" |epsilons| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (|inj_inv| FORMULA-DECL NIL |function_inverse| NIL) (|inverse| CONST-DECL "D" |function_inverse| NIL) (O CONST-DECL "T3" |function_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) NIL (TRUE CONST-DECL "bool" |booleans| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) SHOSTAK)) (|Card_bijection| 0 (|Card_bijection-1| |nil| 3243837106 ("" (SKOLEM!) (("" (PROP) (("1" (FORWARD-CHAIN "inj_Card") (("1" (SKOLEM!) (("1" (INST?) (("1" (EXPAND "bijective?") (("1" (ASSERT) (("1" (CASE "n!1 = 0") (("1" (DELETE -2 -3) (("1" (GRIND) NIL NIL)) NIL) ("2" (ASSERT) (("2" (FORWARD-CHAIN "reduce_inj") (("2" (FORWARD-CHAIN "Card_injection") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "bijective?") (("2" (SKOSIMP) (("2" (LEMMA "Card_injection" ("S" "S!1" "n" "n!1")) (("2" (SPLIT) (("1" (LEMMA "Card_surjection" ("S" "S!1" "n" "n!1")) (("1" (GROUND) (("1" (INST?) NIL NIL)) NIL)) NIL) ("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|bijective?| CONST-DECL "bool" |functions| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|surjective?| CONST-DECL "bool" |functions| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|reduce_inj| FORMULA-DECL NIL |finite_sets| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|Card_injection| FORMULA-DECL NIL |finite_sets| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets| NIL) (|inj_Card| FORMULA-DECL NIL |finite_sets| NIL) (|Card_surjection| FORMULA-DECL NIL |finite_sets| NIL)) SHOSTAK)) (|Card_disj_union| 0 (|Card_disj_union-1| |nil| 3243837140 ("" (SKOSIMP) (("" (NAME-REPLACE "N1" "Card(S!1)" :HIDE? NIL) (("" (NAME-REPLACE "N2" "Card(S2!1)" :HIDE? NIL) (("" (AUTO-REWRITE "Card_bijection") (("" (DO-REWRITE) (("" (SKOSIMP*) (("" (INST 1 "LAMBDA (x : (union(S!1, S2!1))) : IF S!1(x) THEN f!2(x) ELSE N1 + f!1(x) ENDIF") (("1" (EXPAND "bijective?") (("1" (PROP) (("1" (DELETE -2 -4) (("1" (GRIND) NIL NIL)) NIL) ("2" (DELETE -1 -3) (("2" (GRIND :IF-MATCH NIL) (("2" (INST -3 "y!1") (("1" (SKOLEM!) (("1" (INST? 1) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (INST -2 "y!1 - N1") (("2" (SKOLEM!) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (ASSERT) NIL NIL)) NIL) ("3" (DELETE -1 -2) (("3" (GRIND) NIL NIL)) NIL) ("4" (SKOSIMP) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|Card| CONST-DECL "nat" |finite_sets| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) NIL (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|surjective?| CONST-DECL "bool" |functions| NIL) NIL NIL (|injective?| CONST-DECL "bool" |functions| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|intersection| CONST-DECL "set" |sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|disjoint?| CONST-DECL "bool" |sets| NIL) (|finite_intersection2| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) NIL (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|union| CONST-DECL "set" |sets| NIL) NIL NIL (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) NIL (|below| TYPE-EQ-DECL NIL |nat_types| NIL) NIL (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) NIL (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|finite_union| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL) (|Card_bijection| FORMULA-DECL NIL |finite_sets| NIL)) SHOSTAK)) (|card_TCC1| 0 (|card_TCC1-1| |nil| 3243832508 ("" (INST 1 "(LAMBDA S: Card(S))") NIL NIL) ((|Card| CONST-DECL "nat" |finite_sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)) SHOSTAK (|card| EXISTENCE "" "[S: finite_set -> {n: naturalnumbers.nat | n = finite_sets.Card(S)}]"))) (|card_def| 0 (|card_def-1| |nil| 3243837211 ("" (SKOSIMP*) (("" (ASSERT) NIL NIL)) NIL) NIL SHOSTAK)) (|card_emptyset| 0 (|card_emptyset-1| |nil| 3242964880 ("" (REWRITE "card_def") (("" (REWRITE "Card_bijection") (("" (INST 1 "LAMBDA (x : {x: T | FALSE}) : 0") (("1" (EXPAND "bijective?") (("1" (PROP) (("1" (EXPAND "injective?") (("1" (SKOSIMP*) (("1" (TYPEPRED "x1!1") (("1" (EXPAND "emptyset") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "surjective?") (("2" (SKOSIMP*) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (EXPAND "emptyset") (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (SKOSIMP*) NIL NIL)) NIL)) NIL)) NIL) ((|Card_bijection| FORMULA-DECL NIL |finite_sets| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|surjective?| CONST-DECL "bool" |functions| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (FALSE CONST-DECL "bool" |booleans| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL) (|card_def| FORMULA-DECL NIL |finite_sets| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|emptyset| CONST-DECL "set" |sets| NIL)) SHOSTAK)) (|empty_card| 0 (|empty_card-1| |nil| 3242964945 ("" (SKOLEM!) (("" (PROP) (("1" (REWRITE "emptyset_is_empty?[T]") (("1" (REPLACE -1) (("1" (USE "card_emptyset") NIL NIL)) NIL)) NIL) ("2" (REWRITE "card_def") (("2" (REWRITE "Card_bijection") (("2" (SKOLEM!) (("2" (DELETE -) (("2" (GRIND) (("2" (TYPEPRED "f!1(x!1)") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|card_emptyset| FORMULA-DECL NIL |finite_sets| NIL) (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|emptyset_is_empty?| FORMULA-DECL NIL |sets_lemmas| NIL) (|Card_bijection| FORMULA-DECL NIL |finite_sets| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|card_def| FORMULA-DECL NIL |finite_sets| NIL)) SHOSTAK)) (|card_empty?| 0 (|card_empty?-1| |nil| 3242964970 ("" (SKOSIMP*) (("" (REWRITE "empty_card") NIL NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|empty_card| FORMULA-DECL NIL |finite_sets| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)) SHOSTAK)) (|card_is_0| 0 (|card_is_0-1| |nil| 3242964987 ("" (SKOSIMP*) (("" (REWRITE "card_empty?") (("" (REWRITE "emptyset_is_empty?") NIL NIL)) NIL)) NIL) ((|card_empty?| FORMULA-DECL NIL |finite_sets| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL) (|emptyset_is_empty?| FORMULA-DECL NIL |sets_lemmas| NIL)) SHOSTAK)) (|nonempty_card| 0 (|nonempty_card-1| |nil| 3242965012 ("" (SKOSIMP) (("" (EXPAND "nonempty?") (("" (REWRITE "empty_card") (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ((|nonempty?| CONST-DECL "bool" |sets| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets| NIL) (|empty_card| FORMULA-DECL NIL |finite_sets| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK)) (|card_singleton| 0 (|card_singleton-1| |nil| 3242965037 ("" (SKOSIMP*) (("" (REWRITE "card_def") (("" (REWRITE "Card_bijection") (("" (INST 1 "LAMBDA (y : (singleton(x!1))) : 0") (("" (GRIND) (("" (INST 1 "x!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|singleton| CONST-DECL "(singleton?)" |sets| NIL) (|singleton?| CONST-DECL "bool" |sets| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets| NIL) (|card_def| FORMULA-DECL NIL |finite_sets| NIL) (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set" |finite_sets| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (|surjective?| CONST-DECL "bool" |functions| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|Card_bijection| FORMULA-DECL NIL |finite_sets| NIL)) SHOSTAK)) (|card_one| 0 (|card_one-1| |nil| 3242965057 ("" (SKOSIMP*) (("" (REWRITE "card_def") (("" (PROP) (("1" (REWRITE "Card_bijection") (("1" (SKOLEM!) (("1" (GRIND :IF-MATCH NIL) (("1" (INST -2 "0") (("1" (SKOLEM!) (("1" (INST? 1) (("1" (APPLY-EXTENSIONALITY :HIDE? T) (("1" (IFF) (("1" (GROUND) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOLEM!) (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (REWRITE "card_def" :DIR RL) (("2" (REWRITE "card_singleton") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|card_def| FORMULA-DECL NIL |finite_sets| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|card_singleton| FORMULA-DECL NIL |finite_sets| NIL) (|Card_bijection| FORMULA-DECL NIL |finite_sets| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (|surjective?| CONST-DECL "bool" |functions| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|singleton| CONST-DECL "(singleton?)" |sets| NIL) (|singleton?| CONST-DECL "bool" |sets| NIL) (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set" |finite_sets| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK)) (|card_disj_union| 0 (|card_disj_union-1| |nil| 3242965085 ("" (SKOSIMP*) (("" (REWRITE "card_def") (("" (REWRITE "card_def") (("" (REWRITE "card_def") (("" (REWRITE "Card_disj_union") NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|union| CONST-DECL "set" |sets| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets| NIL) (|card_def| FORMULA-DECL NIL |finite_sets| NIL) (|finite_union| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL) (|Card_disj_union| FORMULA-DECL NIL |finite_sets| NIL)) SHOSTAK)) (|card_diff_subset| 0 (|card_diff_subset-1| |nil| 3242965107 ("" (SKOSIMP) (("" (FORWARD-CHAIN "union_diff_subset") (("" (LEMMA "card_disj_union") (("" (INST?) (("" (ASSERT) (("" (REWRITE "difference_disjoint") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|union_diff_subset| FORMULA-DECL NIL |sets_lemmas| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets| NIL) (|finite_difference| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL) (|difference| CONST-DECL "set" |sets| NIL) (|difference_disjoint| FORMULA-DECL NIL |sets_lemmas| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |sets_lemmas| NIL) (|finite_union| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL) (|card_disj_union| FORMULA-DECL NIL |finite_sets| NIL)) SHOSTAK)) (|card_subset| 0 (|card_subset-1| |nil| 3242965128 ("" (SKOSIMP) (("" (FORWARD-CHAIN "card_diff_subset") (("" (ASSERT) NIL NIL)) NIL)) NIL) ((|card_diff_subset| FORMULA-DECL NIL |finite_sets| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |sets_lemmas| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|finite_difference| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL)) SHOSTAK)) (|card_plus| 0 (|card_plus-1| |nil| 3242965147 ("" (AUTO-REWRITE "union_subset1[T]" "intersection_subset1[T]") (("" (SKOLEM!) (("" (LEMMA "card_diff_subset") (("" (INST-CP -1 "A!1" "union(A!1, B!1)") (("" (REWRITE "diff_union_inter[T]") (("" (INST? -1) (("" (GROUND) (("" (REWRITE "intersection_commutative" 1) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((T FORMAL-TYPE-DECL NIL |finite_sets| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|union| CONST-DECL "set" |sets| NIL) (|finite_union| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL) (|intersection| CONST-DECL "set" |sets| NIL) (|intersection_commutative| FORMULA-DECL NIL |sets_lemmas| NIL) (|intersection_subset1| FORMULA-DECL NIL |sets_lemmas| NIL) (|union_subset1| FORMULA-DECL NIL |sets_lemmas| NIL) (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |sets_lemmas| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|diff_union_inter| FORMULA-DECL NIL |sets_lemmas| NIL) (|finite_intersection2| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL) (|finite_difference| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL) (|card_diff_subset| FORMULA-DECL NIL |finite_sets| NIL)) SHOSTAK)) (|card_union| 0 (|card_union-1| |nil| 3242965170 ("" (SKOSIMP*) (("" (LEMMA "card_plus") (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|card_plus| FORMULA-DECL NIL |finite_sets| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|finite_union| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL) (|finite_intersection2| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets| NIL)) SHOSTAK)) (|card_add| 0 (|card_add-2| "" 3750013914 ("" (SKOSIMP*) (("" (LIFT-IF) (("" (PROP) (("1" (REWRITE "member_add") (("1" (ASSERT) NIL NIL) ("2" (EXPAND "member") (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (REWRITE "add_as_union") (("2" (REWRITE "card_disj_union") (("1" (REWRITE "card_singleton") (("1" (ASSERT) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|add_as_union| FORMULA-DECL NIL |sets_lemmas| NIL) (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set" |finite_sets| NIL) (|nonempty_finite_union2| APPLICATION-JUDGEMENT "non_empty_finite_set" |finite_sets| NIL) (|finite_intersection2| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL) (|disjoint?| CONST-DECL "bool" |sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|intersection| CONST-DECL "set" |sets| NIL) (|card_singleton| FORMULA-DECL NIL |finite_sets| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|singleton| CONST-DECL "(singleton?)" |sets| NIL) (|singleton?| CONST-DECL "bool" |sets| NIL) (|card_disj_union| FORMULA-DECL NIL |finite_sets| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|member_add| FORMULA-DECL NIL |sets_lemmas| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nonempty_add_finite| APPLICATION-JUDGEMENT "non_empty_finite_set" |finite_sets| NIL) (|member| CONST-DECL "bool" |sets| NIL)) SHOSTAK) (|card_add-1| |nil| 3242965190 ("" (SKOSIMP*) (("" (LIFT-IF) (("" (PROP) (("1" (REWRITE "member_add") (("1" (ASSERT) NIL NIL) ("2" (EXPAND "member") (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (REWRITE "add_as_union") (("2" (REWRITE "singleton" :DIR RL) (("2" (REWRITE "union_commutative") (("2" (REWRITE "card_disj_union") (("1" (REWRITE "card_singleton") (("1" (ASSERT) (("1" (EXPAND "singleton") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "singleton_disjoint") (("2" (EXPAND "member") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|card_add_gt0| 0 (|card_add_gt0-1| |nil| 3299963376 ("" (SKOSIMP) (("" (REWRITE "card_add") (("" (LIFT-IF) (("" (PROP) (("1" (USE "nonempty_card") (("1" (ASSERT) (("1" (EXPAND "nonempty?") (("1" (EXPAND "empty?") (("1" (INST -1 "x!1") (("1" (EXPAND "member") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|card_add| FORMULA-DECL NIL |finite_sets| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|nonempty_card| FORMULA-DECL NIL |finite_sets| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) SHOSTAK)) (|card_remove| 0 (|card_remove-1| |nil| 3242965278 ("" (SKOLEM!) (("" (LIFT-IF) (("" (PROP) (("1" (REWRITE "remove_as_difference") (("1" (REWRITE "card_diff_subset") (("1" (REWRITE "card_singleton") NIL NIL) ("2" (LEMMA "singleton_subset[T]") (("2" (INST?) (("2" (EXPAND "member") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "member_remove") (("1" (ASSERT) NIL NIL) ("2" (EXPAND "member") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|member_remove| FORMULA-DECL NIL |sets_lemmas| NIL) (|finite_remove| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL) (|remove_as_difference| FORMULA-DECL NIL |sets_lemmas| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets| NIL) (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set" |finite_sets| NIL) (|finite_difference| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL) (|singleton_subset| FORMULA-DECL NIL |sets_lemmas| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|card_singleton| FORMULA-DECL NIL |finite_sets| NIL) (|singleton| CONST-DECL "(singleton?)" |sets| NIL) (|singleton?| CONST-DECL "bool" |sets| NIL) (|card_diff_subset| FORMULA-DECL NIL |finite_sets| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |sets_lemmas| NIL)) SHOSTAK)) (|card_rest| 0 (|card_rest-1| |nil| 3242965301 ("" (SKOSIMP) (("" (EXPAND "rest") (("" (REWRITE "card_remove") (("1" (LEMMA "choose_member[T]") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "nonempty?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|rest| CONST-DECL "set" |sets| NIL) (|choose_member| FORMULA-DECL NIL |sets_lemmas| NIL) (|choose| CONST-DECL "(p)" |sets| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets| NIL) (|card_remove| FORMULA-DECL NIL |finite_sets| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|finite_remove| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK)) (|same_card_subset| 0 (|same_card_subset-1| |nil| 3242965321 ("" (SKOSIMP) (("" (CASE "EXISTS x : member(x, B!1) AND subset?(A!1, remove(x, B!1))") (("1" (SKOSIMP) (("1" (EXPAND "member") (("1" (FORWARD-CHAIN "card_subset") (("1" (REWRITE "card_remove") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (APPLY-EXTENSIONALITY :HIDE? T) (("2" (GRIND :EXCLUDE "Card" :IF-MATCH NIL) (("1" (INST? -) (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST? +) (("2" (ASSERT) (("2" (SKOSIMP) (("2" (ASSERT) (("2" (INST - "x!2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|finite_remove| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|remove| CONST-DECL "set" |sets| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|card_remove| FORMULA-DECL NIL |finite_sets| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |sets_lemmas| NIL) (|card_subset| FORMULA-DECL NIL |finite_sets| NIL) (/= CONST-DECL "boolean" |notequal| NIL)) SHOSTAK)) (|smaller_card_subset| 0 (|smaller_card_subset-1| |nil| 3242965352 ("" (SKOSIMP) (("" (FORWARD-CHAIN "card_subset") (("" (CASE-REPLACE "A!1 = B!1") (("1" (ASSERT) NIL NIL) ("2" (APPLY-EXTENSIONALITY :HIDE? T) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|card_subset| FORMULA-DECL NIL |finite_sets| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |sets_lemmas| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)) SHOSTAK)) (|card_strict_subset| 0 (|card_strict_subset-1| |nil| 3458163415 ("" (SKOSIMP) (("" (EXPAND "strict_subset?") (("" (FLATTEN) (("" (USE "same_card_subset") (("" (ASSERT) (("" (USE "card_subset") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|strict_subset?| CONST-DECL "bool" |sets| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|same_card_subset| FORMULA-DECL NIL |finite_sets| NIL) (|card_subset| FORMULA-DECL NIL |finite_sets| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |sets_lemmas| NIL)) SHOSTAK)) (|card_1_has_1| 0 (|card_1_has_1-1| |nil| 3242965373 ("" (SKOSIMP*) (("" (USE "card_empty?") (("" (IFF) (("" (FLATTEN) (("" (ASSERT) (("" (EXPAND "empty?") (("" (SKOSIMP*) (("" (EXPAND "member") (("" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|card_empty?| FORMULA-DECL NIL |finite_sets| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) SHOSTAK)) (|card_2_has_2| 0 (|card_2_has_2-1| |nil| 3242965395 ("" (SKOSIMP*) (("" (LEMMA "card_1_has_1") (("" (INST?) (("" (ASSERT) (("" (SKOSIMP*) (("" (LEMMA "card_1_has_1") (("" (INST -1 "remove(x!1,S!1)") (("" (REWRITE "card_remove") (("" (LIFT-IF) (("" (ASSERT) (("" (SKOSIMP*) (("" (EXPAND "remove") (("" (EXPAND "member") (("" (FLATTEN) (("" (INST 2 "x!1" "x!2") (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|card_1_has_1| FORMULA-DECL NIL |finite_sets| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|card_remove| FORMULA-DECL NIL |finite_sets| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|finite_remove| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL) (|remove| CONST-DECL "set" |sets| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets| NIL)) SHOSTAK)) (|card_intersection_le| 0 (|card_intersection_le-1| |nil| 3242965417 ("" (SKOSIMP*) (("" (CASE "subset?(intersection(A!1, B!1),A!1) AND
                    subset?(intersection(A!1, B!1),B!1)") (("1" (FLATTEN) (("1" (LEMMA "card_subset") (("1" (SPLIT 1) (("1" (INST -1 "intersection(A!1, B!1)" "A!1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST -1 "intersection(A!1, B!1)" "B!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "subset?") (("2" (EXPAND "intersection") (("2" (EXPAND "member") (("2" (SPLIT 1) (("1" (SKOSIMP*) NIL NIL) ("2" (SKOSIMP*) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|finite_intersection2| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|intersection| CONST-DECL "set" |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|card_subset| FORMULA-DECL NIL |finite_sets| NIL) (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |sets_lemmas| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|member| CONST-DECL "bool" |sets| NIL)) SHOSTAK)) (|card_bij| 0 (|card_bij-1| |nil| 3242965441 ("" (SKOSIMP*) (("" (REWRITE "card_def") (("" (REWRITE "Card_bijection") NIL NIL)) NIL)) NIL) ((|card_def| FORMULA-DECL NIL |finite_sets| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|Card_bijection| FORMULA-DECL NIL |finite_sets| NIL)) SHOSTAK)) (|card_bij_inv| 0 (|card_bij_inv-3| "" 3658946169 ("" (SKOSIMP*) (("" (LEMMA "card_bij[T]") (("" (INST?) (("" (SPLIT 1) (("1" (FLATTEN) (("1" (ASSERT) (("1" (SKOLEM-TYPEPRED) (("1" (LEMMA "bij_inv_is_bij_alt[(S!1), below[N!1]]") (("1" (INST?) (("1" (LEMMA "bijective_inverse_exists[(S!1), below[N!1]]") (("1" (INST?) (("1" (EXPAND "exists1") (("1" (FLATTEN) (("1" (SKOLEM-TYPEPRED) (("1" (INST -3 "x!1") (("1" (INST 1 "x!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (HIDE -2) (("2" (SKOLEM-TYPEPRED) (("2" (LEMMA "bijective_inverse_exists[below[N!1], (S!1)]") (("2" (LEMMA "bij_inv_is_bij_alt[below[N!1], (S!1)]") (("2" (INST? -2) (("2" (EXPAND "exists1") (("2" (FLATTEN) (("2" (SKOLEM-TYPEPRED) (("2" (INST? -) (("2" (INST? -) (("2" (INST 2 "x!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|card_bij| FORMULA-DECL NIL |finite_sets| NIL) (|bij_inv_is_bij_alt| FORMULA-DECL NIL |function_inverse_def| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|bijective_inverse_exists| FORMULA-DECL NIL |function_inverse_def| NIL) (|exists1| CONST-DECL "bool" |exists1| NIL) (|inverse?| CONST-DECL "bool" |function_inverse_def| NIL) NIL NIL NIL (|bijective?| CONST-DECL "bool" |functions| NIL) NIL NIL NIL (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK) (|card_bij_inv-2| "" 3590857335 ("" (SKOSIMP*) (("" (LEMMA "card_bij[T]") (("" (INST?) (("" (SPLIT 1) (("1" (FLATTEN) (("1" (ASSERT) (("1" (SKOLEM-TYPEPRED) (("1" (LEMMA "bij_inv_is_bij_alt[(S!1), below[N!1]]") (("1" (INST?) (("1" (LEMMA "bijective_inverse_exists[(S!1), below[N!1]]") (("1" (INST?) (("1" (EXPAND "exists1") (("1" (FLATTEN) (("1" (SKOLEM-TYPEPRED) (("1" (INST -4 "x!1") (("1" (INST 1 "x!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (HIDE -2) (("2" (SKOLEM-TYPEPRED) (("2" (LEMMA "bijective_inverse_exists[below[N!1], (S!1)]") (("2" (LEMMA "bij_inv_is_bij_alt[below[N!1], (S!1)]") (("2" (INST? -2) (("2" (EXPAND "exists1") (("2" (FLATTEN) (("2" (SKOLEM-TYPEPRED) (("2" (INST? -2) (("2" (INST? -2) (("2" (INST 2 "x!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|card_bij_inv-1| |nil| 3307953160 ("" (SKOSIMP*) (("" (LEMMA "card_bij[T]") (("" (INST?) (("" (CASE-REPLACE "N!1 = 0") (("1" (GROUND) (("1" (INST 1 "LAMBDA (n: below[N!1]): epsilon(S!1)") (("1" (EXPAND "bijective?") (("1" (EXPAND "injective?") (("1" (EXPAND "surjective?") (("1" (SPLIT 1) (("1" (SKOLEM-TYPEPRED) NIL NIL) ("2" (SKOLEM-TYPEPRED) (("2" (REWRITE "card_empty?") (("2" (HIDE -2) (("2" (EXPAND "empty?") (("2" (EXPAND "member") (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOLEM-TYPEPRED) NIL NIL) ("3" (SKOLEM-TYPEPRED) NIL NIL)) NIL) ("2" (SKOLEM-TYPEPRED) (("2" (EXPAND "bijective?") (("2" (FLATTEN) (("2" (EXPAND "surjective?") (("2" (REWRITE "card_empty?") (("2" (EXPAND "empty?" 1) (("2" (EXPAND "member") (("2" (SKOSIMP) (("2" (INST -2 "x!1") (("2" (SKOLEM-TYPEPRED) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) (("1" (HIDE -2) (("1" (SKOSIMP) (("1" (INST + "inverse(f!1)") (("1" (LEMMA "bijective_inverse_is_bijective[(S!1),below(N!1)]") (("1" (INST?) NIL NIL) ("2" (ASSERT) (("2" (USE "nonempty_card") (("2" (ASSERT) (("2" (EXPAND "nonempty?") (("2" (EXPAND "empty?") (("2" (SKOSIMP*) (("2" (EXPAND "member") (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "nonempty_card") (("2" (ASSERT) (("2" (EXPAND "nonempty?") (("2" (EXPAND "empty?") (("2" (EXPAND "member") (("2" (SKOSIMP*) (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (SKOSIMP*) (("2" (INST + "inverse(f!1)") (("1" (LEMMA "bijective_inverse_is_bijective[below(N!1),(S!1)]") (("1" (INST?) NIL NIL) ("2" (EXPAND "bijective?") (("2" (FLATTEN) (("2" (EXPAND "surjective?") (("2" (INST -2 "choose(S!1)") (("1" (SKOSIMP*) (("1" (INST + "x!1") NIL NIL)) NIL) ("2" (EXPAND "nonempty?") (("2" (EXPAND "empty?") (("2" (EXPAND "member") (("2" (INST 1 "0") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "0") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|bij_exists| 0 (|bij_exists-1| |nil| 3242965457 ("" (SKOSIMP*) (("" (LEMMA "card_bij") (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|card_bij| FORMULA-DECL NIL |finite_sets| NIL) (|card| CONST-DECL "{n: nat | n = Card(S)}" |finite_sets| NIL) (|Card| CONST-DECL "nat" |finite_sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK)) (|bij_TCC1| 0 (|bij_TCC1-3| "" 3658946502 ("" (INST + "(LAMBDA (S: finite_set):
       		 choose({f: [(S) -> below(card(S))] |
                                   bijective?(f)}))") (("" (LEMMA "bij_exists[T]") (("" (SKOSIMP*) (("" (INST?) (("" (SKOSIMP*) (("" (EXPAND "nonempty?") (("" (EXPAND "empty?") (("" (EXPAND "member") (("" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|bij_exists| FORMULA-DECL NIL |finite_sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|choose| CONST-DECL "(p)" |sets| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|card| CONST-DECL "{n: nat | n = Card(S)}" |finite_sets| NIL) (|Card| CONST-DECL "nat" |finite_sets| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)) SHOSTAK (|bij| EXISTENCE "" "[S: finite_set -> {f: [(S) -> naturalnumbers.below(finite_sets.card(S))] | functions[(S), below(finite_sets.card(S))].bijective?(f)}]")) (|bij_TCC1-2| |nil| 3510413559 ("" (LEMMA "bij_exists[T]") (("" (INST + "(LAMBDA (S: finite_set):
     		 choose({f: [(S) -> below(card[T](S))] |
                                 bijective?(f)}))") (("" (SKOSIMP*) (("" (INST?) (("" (SKOSIMP*) (("" (EXPAND "nonempty?") (("" (EXPAND "empty?") (("" (EXPAND "member") (("" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|bij| EXISTENCE "" "[S: finite_set -> {f: [(S) -> naturalnumbers.below(finite_sets.card(S))] | functions[(S), below(finite_sets.card(S))].bijective?(f)}]")) (|bij_TCC1-1| |nil| 3510413341 ("" (EXISTENCE-TCC) NIL NIL) NIL NIL (|bij| EXISTENCE "" "[S: finite_set -> {f: [(S) -> naturalnumbers.below(finite_sets.card(S))] | functions[(S), below(finite_sets.card(S))].bijective?(f)}]"))) (|ibij_TCC1| 0 (|ibij_TCC1-1| |nil| 3510413341 ("" (EXISTENCE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|non_empty_finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|injective?| CONST-DECL "bool" |functions| NIL)) NIL (|ibij| EXISTENCE "" "(finite_sets.S)"))) (|bij_ibij| 0 (|bij_ibij-1| |nil| 3510413649 ("" (SKOSIMP*) (("" (EXPAND "ibij") (("" (LEMMA "comp_inverse_right[(S!1),below(card(S!1))]") (("1" (INST?) NIL NIL) ("2" (TYPEPRED "S!1") (("2" (EXPAND "empty?") (("2" (SKOSIMP*) (("2" (EXPAND "member") (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|ibij| CONST-DECL "{f: [below(card(S)) -> (S)] | bijective?(f)}" |finite_sets| NIL) NIL NIL (|member| CONST-DECL "bool" |sets| NIL) (|bij| CONST-DECL "{f: [(S) -> below(card(S))] | bijective?(f)}" |finite_sets| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|card| CONST-DECL "{n: nat | n = Card(S)}" |finite_sets| NIL) (|Card| CONST-DECL "nat" |finite_sets| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|non_empty_finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets| NIL) (|comp_inverse_right| FORMULA-DECL NIL |function_inverse| NIL)) NIL)) (|ibij_bij| 0 (|ibij_bij-1| |nil| 3510413669 ("" (SKOSIMP*) (("" (ASSERT) (("" (EXPAND "ibij") (("" (ASSERT) (("" (LEMMA "bijective_inverse[(S!1),below(card(S!1))]") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|unique_bijective_inverse| APPLICATION-JUDGEMENT "{x: D | f(x) = y}" |function_inverse| NIL) (|bijective_inverse_is_bijective| APPLICATION-JUDGEMENT "(bijective?[R, D])" |function_inverse| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|bij| CONST-DECL "{f: [(S) -> below(card(S))] | bijective?(f)}" |finite_sets| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|card| CONST-DECL "{n: nat | n = Card(S)}" |finite_sets| NIL) (|Card| CONST-DECL "nat" |finite_sets| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|non_empty_finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets| NIL) (|bijective_inverse| FORMULA-DECL NIL |function_inverse| NIL) (|ibij| CONST-DECL "{f: [below(card(S)) -> (S)] | bijective?(f)}" |finite_sets| NIL)) NIL)) (|is_finite_exists_N| 0 (|is_finite_exists_N-1| |nil| 3510413692 ("" (SKOSIMP*) (("" (LEMMA "is_finite_surj[T]") (("" (INST?) (("" (ASSERT) (("" (HIDE 2) (("" (INST + "N!1" "(LAMBDA (n: below(N!1)): g!1(n))") (("1" (EXPAND "surjective?") (("1" (SKOSIMP*) (("1" (TYPEPRED "y!1") (("1" (SKOSIMP*) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|is_finite_surj| FORMULA-DECL NIL |finite_sets| NIL) NIL (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) NIL (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|surjective?| CONST-DECL "bool" |functions| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets| NIL)) NIL)) (|finite_pred| 0 (|finite_pred-1| |nil| 3307981117 ("" (EXPAND "fullset") (("" (EXPAND "is_finite") (("" (SKOSIMP*) (("" (INST 1 "N!1" "(LAMBDA (x: {x: T | P!1(x)}): f!1(x))") (("" (EXPAND "injective?") (("" (SKOSIMP*) (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (|fullset| CONST-DECL "set" |sets| NIL)) SHOSTAK)) (|finite_pred2| 0 (|finite_pred2-1| |nil| 3307981300 ("" (GRIND) NIL NIL) ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL)) SHOSTAK)) (|card_implies_TCC1| 0 (|card_implies_TCC1-3| "" 3805154630 ("" (GRIND :IF-MATCH NIL) (("" (INST 1 "N!1" "lambda (x: {x: T | P1!1(x)}): f!1(x)") (("" (SKEEP :PREDS? T) (("" (INST? -5) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((T FORMAL-TYPE-DECL NIL |finite_sets| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|fullset| CONST-DECL "set" |sets| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|injective?| CONST-DECL "bool" |functions| NIL)) SHOSTAK (|card_implies| SUBTYPE "{x: finite_sets.T | finite_sets.P1(x)}" "finite_set")) (|card_implies_TCC1-2| "" 3658947486 ("" (GRIND :IF-MATCH NIL) (("" (INST 1 "N!1" "lambda (x: {x: T | P1!1(x)}): f!1(x)") (("" (SKEEP :PREDS? T) (("" (INST? -) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|card_implies| SUBTYPE "{x: finite_sets.T | finite_sets.P1(x)}" "finite_set")) (|card_implies_TCC1-1| |nil| 3307950062 ("" (SKOSIMP) (("" (REWRITE "finite_pred") NIL NIL)) NIL) NIL SHOSTAK (|card_implies| SUBTYPE "{x: finite_sets.T | finite_sets.P1(x)}" "finite_set"))) (|card_implies_TCC2| 0 (|card_implies_TCC2-3| "" 3805154657 ("" (GRIND :IF-MATCH NIL) (("" (INST 1 "N!1" "lambda (x: {x: T | P2!1(x)}): f!1(x)") (("" (SKEEP :PREDS? T) (("" (INST? -5) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((T FORMAL-TYPE-DECL NIL |finite_sets| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|fullset| CONST-DECL "set" |sets| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|injective?| CONST-DECL "bool" |functions| NIL)) SHOSTAK (|card_implies| SUBTYPE "{x: finite_sets.T | finite_sets.P2(x)}" "finite_set")) (|card_implies_TCC2-2| "" 3658947422 ("" (GRIND :IF-MATCH NIL) (("" (INST 1 "N!1" "lambda (x: {x: T | P2!1(x)}): f!1(x)") (("" (SKEEP :PREDS? T) (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|card_implies| SUBTYPE "{x: finite_sets.T | finite_sets.P2(x)}" "finite_set")) (|card_implies_TCC2-1| |nil| 3307950062 ("" (SKOSIMP) (("" (REWRITE "finite_pred") NIL NIL)) NIL) NIL SHOSTAK (|card_implies| SUBTYPE "{x: finite_sets.T | finite_sets.P2(x)}" "finite_set"))) (|card_implies| 0 (|card_implies-2| "" 3658948213 ("" (SKEEP :PREDS? T) (("" (USE "card_subset") (("1" (ASSERT) (("1" (EXPAND "subset?") (("1" (EXPAND "member") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "is_finite") (("2" (SKEEP :PREDS? T) (("2" (INST 1 "N" "lambda (x: {x: T | P2(x)}): f(x)") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "is_finite") (("3" (SKEEP :PREDS? T) (("3" (INST 1 "N" "lambda (x: {x: T | P1(x)}): f(x)") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|card_subset| FORMULA-DECL NIL |finite_sets| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) NIL NIL (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |sets_lemmas| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|fullset| CONST-DECL "set" |sets| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK) (|card_implies-1| |nil| 3307981157 ("" (SKOSIMP*) (("" (CASE "subset?({x: T | P1!1(x)},{x: T | P2!1(x)})") (("1" (LEMMA "card_subset[T]") (("1" (INST?) (("1" (ASSERT) NIL NIL) ("2" (HIDE -1 -3 2) (("2" (REWRITE "finite_pred") NIL NIL)) NIL) ("3" (REWRITE "finite_pred") NIL NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (EXPAND "subset?") (("2" (EXPAND "member") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|finite_induction| 0 (|finite_induction-1| |nil| 3307981389 ("" (GRIND) NIL NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|injective?| CONST-DECL "bool" |functions| NIL)) SHOSTAK)))(|restrict_set_props| (|restrict_finite| 0 (|restrict_finite-1| |nil| 3249347110 ("" (SKOSIMP) (("" (EXPAND "is_finite") (("" (SKOLEM!) (("" (INST + "N!1" "LAMBDA (x: (restrict[T, S, bool](a!1))): f!1(x)") (("1" (EXPAND "injective?") (("1" (SKOSIMP :PREDS? T) (("1" (EXPAND "restrict") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOLEM-TYPEPRED) (("2" (EXPAND "restrict") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) NIL (|set| TYPE-EQ-DECL NIL |sets| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (S FORMAL-SUBTYPE-DECL NIL |restrict_set_props| NIL) (|S_pred| CONST-DECL "[T -> boolean]" |restrict_set_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |restrict_set_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|injective?| CONST-DECL "bool" |functions| NIL)) NIL)) (|finite_restrict| 0 (|finite_restrict-1| |nil| 3249347110 ("" (SKOLEM!) (("" (USE "restrict_finite") (("" (ASSERT) NIL NIL)) NIL)) NIL) ((|restrict_finite| FORMULA-DECL NIL |restrict_set_props| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |restrict_set_props| NIL)) NIL (|finite_restrict| SUBTYPE "restrict[restrict_set_props.T, S, bool].restrict(restrict_set_props.a)" "finite_set[S]"))) (|empty_restrict| 0 (|empty_restrict-1| |nil| 3249347110 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |restrict_set_props| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (S FORMAL-SUBTYPE-DECL NIL |restrict_set_props| NIL) (|S_pred| CONST-DECL "[T -> boolean]" |restrict_set_props| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL)) NIL (|empty_restrict| SUBTYPE "restrict[restrict_set_props.T, S, bool].restrict(restrict_set_props.a)" "(sets[S].empty?)"))) (|card_restrict| 0 (|card_restrict-2| "Fix for 3.2" 3307984009 ("" (SKOLEM!) (("" (CASE "empty?(restrict[T, S, bool](a!1))") (("1" (REWRITE "empty_card[S]") (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND* "empty?" "member") (("2" (SKOLEM!) (("2" (USE "injection_n_to_m_var") (("2" (USE "card_bij[S]") (("2" (LEMMA "card_bij[T]" ("N" "card(a!1)" "S" "a!1")) (("2" (ASSERT) (("2" (SKOSIMP*) (("2" (USE "bij_inv_is_bij[(restrict[T, S, bool](a!1)), below[card(restrict[T, S, bool](a!1))]]") (("1" (ASSERT) (("1" (INST + "LAMBDA (x: below(card(restrict[T, S, bool](a!1)))): f!1(inverse(f!2)(x))") (("1" (EXPAND "bijective?" (-1 -2)) (("1" (EXPAND "injective?") (("1" (SKOSIMP) (("1" (INST - "x1!1" "x2!1") (("1" (INST - "inverse(f!2)(x1!1)" "inverse(f!2)(x2!1)") (("1" (ASSERT) NIL NIL) ("2" (TYPEPRED "inverse[(restrict[T, S, bool](a!1)), below[card(restrict[T, S, bool](a!1))]](f!2)(x2!1)") (("1" (EXPAND "restrict") (("1" (INST + "x!1") NIL NIL)) NIL) ("2" (INST + "x!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOLEM!) (("2" (TYPEPRED "inverse[(restrict[T, S, bool](a!1)), below[card(restrict[T, S, bool](a!1))]](f!2)(x!2)") (("1" (EXPAND "restrict") (("1" (PROPAX) NIL NIL)) NIL) ("2" (INST + "x!1") NIL NIL)) NIL)) NIL) ("3" (SKOLEM!) (("3" (INST + "x!1") NIL NIL)) NIL)) NIL)) NIL) ("2" (INST + "x!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|finite_restrict| APPLICATION-JUDGEMENT "finite_set[S]" |restrict_set_props| NIL) (T FORMAL-TYPE-DECL NIL |restrict_set_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|S_pred| CONST-DECL "[T -> boolean]" |restrict_set_props| NIL) (S FORMAL-SUBTYPE-DECL NIL |restrict_set_props| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|empty_card| FORMULA-DECL NIL |finite_sets| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|card_bij| FORMULA-DECL NIL |finite_sets| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|bij_inv_is_bij| FORMULA-DECL NIL |function_inverse| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) NIL NIL (|inverse| CONST-DECL "D" |function_inverse| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|injection_n_to_m_var| FORMULA-DECL NIL |nat_fun_props| NIL) (|card| CONST-DECL "{n: nat | n = Card(S)}" |finite_sets| NIL) (|Card| CONST-DECL "nat" |finite_sets| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|member| CONST-DECL "bool" |sets| NIL)) SHOSTAK) (|card_restrict-1| |nil| 3249390068 ("" (SKOLEM!) (("" (CASE "empty?(restrict[T, S, bool](a!1))") (("1" (REWRITE "empty_card[S]") (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND* "empty?" "member") (("2" (SKOLEM!) (("2" (USE "injection_n_to_m_var") (("2" (USE "card_bij[S]") (("2" (LEMMA "card_bij[T]" ("N" "card(a!1)" "S" "a!1")) (("2" (ASSERT) (("2" (SKOSIMP*) (("2" (USE "bij_inv_is_bij[(restrict[T, S, bool](a!1)), below[card(restrict[T, S, bool](a!1))]]") (("1" (ASSERT) (("1" (INST + "LAMBDA (x: below(card(restrict[T, S, bool](a!1)))): f!1(inverse(f!2)(x))") (("1" (EXPAND "bijective?" (-1 -2)) (("1" (EXPAND "injective?") (("1" (SKOSIMP) (("1" (INST - "x1!1" "x2!1") (("1" (INST - "inverse(f!2)(x1!1)" "inverse(f!2)(x2!1)") (("1" (ASSERT) NIL NIL) ("2" (TYPEPRED "inverse[(restrict[T, S, bool](a!1)), below[card(restrict[T, S, bool](a!1))]](f!2)(x2!1)") (("1" (EXPAND "restrict") (("1" (PROPAX) NIL NIL)) NIL) ("2" (INST + "x!1") NIL NIL)) NIL) ("3" (TYPEPRED "inverse[(restrict[T, S, bool](a!1)), below[card(restrict[T, S, bool](a!1))]](f!2)(x1!1)") (("1" (EXPAND "restrict") (("1" (PROPAX) NIL NIL)) NIL) ("2" (INST + "x!1") NIL NIL)) NIL) ("4" (INST + "x!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOLEM!) (("2" (TYPEPRED "inverse[(restrict[T, S, bool](a!1)), below[card(restrict[T, S, bool](a!1))]](f!2)(x!2)") (("1" (EXPAND "restrict") (("1" (PROPAX) NIL NIL)) NIL) ("2" (INST + "x!1") NIL NIL)) NIL)) NIL) ("3" (SKOLEM!) (("3" (INST + "x!1") NIL NIL)) NIL)) NIL)) NIL) ("2" (INST + "x!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)))(|extend_set_props| (|finite_extension| 0 (|finite_extension-1| |nil| 3249327215 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (T FORMAL-TYPE-DECL NIL |extend_set_props| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|S_pred| CONST-DECL "[T -> boolean]" |extend_set_props| NIL) (S FORMAL-SUBTYPE-DECL NIL |extend_set_props| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) NIL (FALSE CONST-DECL "bool" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|extend| CONST-DECL "R" |extend| NIL)) NIL)) (|finite_extend| 0 (|finite_extend-1| |nil| 3249327215 ("" (LEMMA "finite_extension") (("" (SKOLEM-TYPEPRED) (("" (INST?) (("" (PROP) NIL NIL)) NIL)) NIL)) NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |extend_set_props| NIL) (|S_pred| CONST-DECL "[T -> boolean]" |extend_set_props| NIL) (S FORMAL-SUBTYPE-DECL NIL |extend_set_props| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|finite_extension| FORMULA-DECL NIL |extend_set_props| NIL)) NIL (|finite_extend| SUBTYPE "extend[extend_set_props.T, S, bool, booleans.FALSE].extend(extend_set_props.a)" "finite_set[T]"))) (|empty_extend| 0 (|empty_extend-1| |nil| 3249327215 ("" (SKOLEM-TYPEPRED) (("" (EXPAND* "empty?" "member" "extend") (("" (SKOLEM!) (("" (PROP) (("" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|extend| CONST-DECL "R" |extend| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (S FORMAL-SUBTYPE-DECL NIL |extend_set_props| NIL) (|S_pred| CONST-DECL "[T -> boolean]" |extend_set_props| NIL) (T FORMAL-TYPE-DECL NIL |extend_set_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL (|empty_extend| SUBTYPE "extend[extend_set_props.T, S, bool, booleans.FALSE].extend(extend_set_props.a)" "(sets[extend_set_props.T].empty?)"))) (|nonempty_extend| 0 (|nonempty_extend-1| |nil| 3249327215 ("" (SKOLEM-TYPEPRED) (("" (EXPAND* "nonempty?" "empty?" "member" "extend") (("" (SKOLEM-TYPEPRED) (("" (INST?) (("" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|extend| CONST-DECL "R" |extend| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (S FORMAL-SUBTYPE-DECL NIL |extend_set_props| NIL) (|S_pred| CONST-DECL "[T -> boolean]" |extend_set_props| NIL) (T FORMAL-TYPE-DECL NIL |extend_set_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL (|nonempty_extend| SUBTYPE "extend[extend_set_props.T, S, bool, booleans.FALSE].extend(extend_set_props.a)" "(sets[extend_set_props.T].nonempty?)"))) (|singleton_extend| 0 (|singleton_extend-1| |nil| 3249327215 ("" (SKOLEM-TYPEPRED) (("" (EXPAND* "extend" "singleton?") (("" (SKOLEM!) (("" (INST + "x!1") (("" (SKOLEM-TYPEPRED) (("" (ASSERT) (("" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|extend| CONST-DECL "R" |extend| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (FALSE CONST-DECL "bool" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|singleton?| CONST-DECL "bool" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (S FORMAL-SUBTYPE-DECL NIL |extend_set_props| NIL) (|S_pred| CONST-DECL "[T -> boolean]" |extend_set_props| NIL) (T FORMAL-TYPE-DECL NIL |extend_set_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL (|singleton_extend| SUBTYPE "extend[extend_set_props.T, S, bool, booleans.FALSE].extend(extend_set_props.a)" "(sets[extend_set_props.T].singleton?)"))) (|card_extend| 0 (|card_extend-1| |nil| 3249389673 ("" (SKOLEM!) (("" (USE "bij_exists[S]") (("" (USE "card_bij[T]") (("" (ASSERT) (("" (SKOLEM!) (("" (INST + "f!1") (("1" (EXPAND* "bijective?" "injective?" "surjective?") (("1" (PROP) (("1" (SKOSIMP :PREDS? T) (("1" (EXPAND "extend") (("1" (PROP) (("1" (ASSERT) (("1" (INST - "x1!1" "x2!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOLEM!) (("2" (INST -2 "y!1") (("2" (SKOLEM!) (("2" (INST + "x!1") (("2" (EXPAND "extend") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "extend") (("2" (SKOLEM!) (("2" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|bij_exists| FORMULA-DECL NIL |finite_sets| NIL) (T FORMAL-TYPE-DECL NIL |extend_set_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|S_pred| CONST-DECL "[T -> boolean]" |extend_set_props| NIL) (S FORMAL-SUBTYPE-DECL NIL |extend_set_props| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|finite_extend| APPLICATION-JUDGEMENT "finite_set[T]" |extend_set_props| NIL) NIL (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) NIL (|bijective?| CONST-DECL "bool" |functions| NIL) (|surjective?| CONST-DECL "bool" |functions| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (|card_bij| FORMULA-DECL NIL |finite_sets| NIL) (|extend| CONST-DECL "R" |extend| NIL) (FALSE CONST-DECL "bool" |booleans| NIL) (|card| CONST-DECL "{n: nat | n = Card(S)}" |finite_sets| NIL) (|Card| CONST-DECL "nat" |finite_sets| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK)) (|empty?_extend| 0 (|empty?_extend-1| |nil| 3362459601 ("" (GRIND-WITH-EXT) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |extend_set_props| NIL) (|S_pred| CONST-DECL "[T -> boolean]" |extend_set_props| NIL) (S FORMAL-SUBTYPE-DECL NIL |extend_set_props| NIL) (|extend| CONST-DECL "R" |extend| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL)) SHOSTAK)) (|nonempty?_extend| 0 (|nonempty?_extend-1| |nil| 3362459616 ("" (GRIND-WITH-EXT) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |extend_set_props| NIL) (|S_pred| CONST-DECL "[T -> boolean]" |extend_set_props| NIL) (S FORMAL-SUBTYPE-DECL NIL |extend_set_props| NIL) (|extend| CONST-DECL "R" |extend| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL)) SHOSTAK)) (|singleton?_extend| 0 (|singleton?_extend-1| |nil| 3362459622 ("" (GRIND-WITH-EXT :POLARITY? T) (("1" (INST? 1) (("1" (SKOSIMP) (("1" (INST?) NIL NIL)) NIL)) NIL) ("2" (INST? 1) (("2" (SKOLEM-TYPEPRED) (("2" (INST?) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (FALSE CONST-DECL "bool" |booleans| NIL) (|extend| CONST-DECL "R" |extend| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |extend_set_props| NIL) (|S_pred| CONST-DECL "[T -> boolean]" |extend_set_props| NIL) (S FORMAL-SUBTYPE-DECL NIL |extend_set_props| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|singleton?| CONST-DECL "bool" |sets| NIL)) SHOSTAK)) (|subset_extend| 0 (|subset_extend-1| |nil| 3362459879 ("" (GRIND-WITH-EXT) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |extend_set_props| NIL) (|S_pred| CONST-DECL "[T -> boolean]" |extend_set_props| NIL) (S FORMAL-SUBTYPE-DECL NIL |extend_set_props| NIL) (|extend| CONST-DECL "R" |extend| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|subset?| CONST-DECL "bool" |sets| NIL)) SHOSTAK)) (|union_extend| 0 (|union_extend-1| |nil| 3362459887 ("" (GRIND-WITH-EXT) NIL NIL) ((|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|union| CONST-DECL "set" |sets| NIL) (|S_pred| CONST-DECL "[T -> boolean]" |extend_set_props| NIL) (S FORMAL-SUBTYPE-DECL NIL |extend_set_props| NIL) (FALSE CONST-DECL "bool" |booleans| NIL) (|extend| CONST-DECL "R" |extend| NIL) (|member| CONST-DECL "bool" |sets| NIL) (T FORMAL-TYPE-DECL NIL |extend_set_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) SHOSTAK)) (|intersection_extend| 0 (|intersection_extend-1| |nil| 3362459893 ("" (GRIND-WITH-EXT) NIL NIL) ((|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|intersection| CONST-DECL "set" |sets| NIL) (|S_pred| CONST-DECL "[T -> boolean]" |extend_set_props| NIL) (S FORMAL-SUBTYPE-DECL NIL |extend_set_props| NIL) (FALSE CONST-DECL "bool" |booleans| NIL) (|extend| CONST-DECL "R" |extend| NIL) (|member| CONST-DECL "bool" |sets| NIL) (T FORMAL-TYPE-DECL NIL |extend_set_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) SHOSTAK)) (|difference_extend| 0 (|difference_extend-1| |nil| 3362459902 ("" (GRIND-WITH-EXT) NIL NIL) ((|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|difference| CONST-DECL "set" |sets| NIL) (|S_pred| CONST-DECL "[T -> boolean]" |extend_set_props| NIL) (S FORMAL-SUBTYPE-DECL NIL |extend_set_props| NIL) (FALSE CONST-DECL "bool" |booleans| NIL) (|extend| CONST-DECL "R" |extend| NIL) (|member| CONST-DECL "bool" |sets| NIL) (T FORMAL-TYPE-DECL NIL |extend_set_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) SHOSTAK)) (|add_extend| 0 (|add_extend-1| |nil| 3362459907 ("" (GRIND-WITH-EXT) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |extend_set_props| NIL) (|S_pred| CONST-DECL "[T -> boolean]" |extend_set_props| NIL) (S FORMAL-SUBTYPE-DECL NIL |extend_set_props| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|nonempty_extend| APPLICATION-JUDGEMENT "(nonempty?[T])" |extend_set_props| NIL) (|extend| CONST-DECL "R" |extend| NIL) (FALSE CONST-DECL "bool" |booleans| NIL) (|add| CONST-DECL "(nonempty?)" |sets| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL)) SHOSTAK)) (|remove_extend| 0 (|remove_extend-1| |nil| 3362459912 ("" (GRIND-WITH-EXT) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |extend_set_props| NIL) (|S_pred| CONST-DECL "[T -> boolean]" |extend_set_props| NIL) (S FORMAL-SUBTYPE-DECL NIL |extend_set_props| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|remove| CONST-DECL "set" |sets| NIL) (FALSE CONST-DECL "bool" |booleans| NIL) (|extend| CONST-DECL "R" |extend| NIL) (|member| CONST-DECL "bool" |sets| NIL) (/= CONST-DECL "boolean" |notequal| NIL)) SHOSTAK)))(|function_image_aux| (|finite_image| 0 (|finite_image-1| |nil| 3249929301 ("" (SKOLEM-TYPEPRED) (("" (EXPAND* "image" "is_finite") (("" (SKOLEM!) (("" (INST + "N!1" "LAMBDA (z: ({y: R | EXISTS (x: (S!1)): y = f!1(x)})): f!2(choose({d: (S!1) | f!1(d) = z}))") (("1" (EXPAND "injective?") (("1" (SKOSIMP* :PREDS? T) (("1" (INST - "choose({d: (S!1) | f!1(d) = x1!1})" "choose({d: (S!1) | f!1(d) = x2!1})") (("1" (ASSERT) NIL NIL) ("2" (EXPAND* "nonempty?" "empty?" "member") (("2" (INST - "x!2") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (EXPAND* "nonempty?" "empty?" "member") (("3" (INST - "x!1") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND* "nonempty?" "empty?" "member") (("2" (SKOSIMP* :PREDS? T) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|choose| CONST-DECL "(p)" |sets| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) NIL (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) NIL (R FORMAL-TYPE-DECL NIL |function_image_aux| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) NIL NIL (|injective?| CONST-DECL "bool" |functions| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (D FORMAL-TYPE-DECL NIL |function_image_aux| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) SHOSTAK (|finite_image| SUBTYPE "function_image[function_image_aux.D, function_image_aux.R].image(function_image_aux.f, function_image_aux.S)" "finite_set[R]"))) (|card_image| 0 (|card_image-2| |nil| 3250016405 ("" (SKOLEM!) (("" (USE "injection_n_to_m_var") (("" (USE "card_bij[R]") (("" (LEMMA "card_bij[D]" ("N" "card(S!1)" "S" "S!1")) (("" (ASSERT) (("" (CASE "EXISTS (f: [(image(f!1, S!1)) -> (S!1)]): injective?(f)") (("1" (SKOSIMP*) (("1" (LEMMA "composition_injective[below(card(image(f!1, S!1))), (image(f!1, S!1)), (S!1)]") (("1" (INST - "LAMBDA (x: below[card(image(f!1, S!1))]): choose({r: (image(f!1, S!1)) | f!4(r) = x})" "f!2") (("1" (LEMMA "composition_injective[below(card(image(f!1, S!1))), (S!1), below(card(S!1))]") (("1" (INST - "f!2 o (LAMBDA (x: below[card(image(f!1, S!1))]): choose({r: (image(f!1, S!1)) | f!4(r) = x}))" "f!3") (("1" (INST + "f!3 o (f!2 o (LAMBDA (x: below[card(image(f!1, S!1))]): choose({r: (image(f!1, S!1)) | f!4(r) = x})))") (("1" (EXPAND "bijective?" -5) (("1" (SKOSIMP) (("1" (EXPAND* "nonempty?" "empty?" "member" "surjective?") (("1" (INST -7 "x!1") (("1" (SKOLEM!) (("1" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "bijective?" -3) (("2" (FLATTEN) NIL NIL)) NIL) ("3" (EXPAND "bijective?" -4) (("3" (SKOSIMP) (("3" (EXPAND* "nonempty?" "empty?" "member" "surjective?") (("3" (INST -6 "x!1") (("3" (SKOLEM!) (("3" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "injective?" 1) (("2" (SKOSIMP :PREDS? T) (("2" (TYPEPRED "choose[(image(f!1, S!1))]({r: (image[D, R](f!1, S!1)) | f!4(r) = x1!1})") (("1" (TYPEPRED "choose[(image(f!1, S!1))]({r: (image[D, R](f!1, S!1)) | f!4(r) = x2!1})") (("1" (EXPAND "image" (-1 -3)) (("1" (SKOSIMP*) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "bijective?" -8) (("2" (FLATTEN) (("2" (EXPAND* "nonempty?" "empty?" "member" "surjective?") (("2" (INST -10 "x2!1") (("2" (SKOLEM!) (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "bijective?" -6) (("2" (FLATTEN) (("2" (EXPAND* "nonempty?" "empty?" "member" "surjective?") (("2" (INST -8 "x1!1") (("2" (SKOLEM!) (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "bijective?" -3) (("3" (SKOSIMP) (("3" (EXPAND* "nonempty?" "empty?" "member" "surjective?") (("3" (INST -5 "x!1") (("3" (SKOLEM!) (("3" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST + "LAMBDA (r: (image(f!1, S!1))): choose({d: (S!1) | f!1(d) = r})") (("1" (EXPAND "injective?" 1) (("1" (SKOSIMP :PREDS? T) (("1" (EXPAND "image" -) (("1" (SKOSIMP*) (("1" (TYPEPRED "choose({d: (S!1) | f!1(d) = x1!1})") (("1" (TYPEPRED "choose({d: (S!1) | f!1(d) = x2!1})") (("1" (ASSERT) (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND* "nonempty?" "empty?" "member") (("2" (INST - "x!2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND* "nonempty?" "empty?" "member") (("2" (INST - "x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOLEM-TYPEPRED) (("2" (EXPAND* "image" "nonempty?" "empty?" "member") (("2" (SKOLEM!) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|injection_n_to_m_var| FORMULA-DECL NIL |nat_fun_props| NIL) NIL (R FORMAL-TYPE-DECL NIL |function_image_aux| NIL) (|card| CONST-DECL "{n: nat | n = Card(S)}" |finite_sets| NIL) (|Card| CONST-DECL "nat" |finite_sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (D FORMAL-TYPE-DECL NIL |function_image_aux| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|finite_image| APPLICATION-JUDGEMENT "finite_set[R]" |function_image_aux| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|composition_injective| JUDGEMENT-TCC NIL |function_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|surjective?| CONST-DECL "bool" |functions| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) NIL (O CONST-DECL "T3" |function_props| NIL) (|choose| CONST-DECL "(p)" |sets| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) NIL NIL NIL NIL (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|card_bij| FORMULA-DECL NIL |finite_sets| NIL)) NIL)) (|card_injective_image| 0 (|card_injective_image-1| |nil| 3250016633 ("" (SKOLEM-TYPEPRED) (("" (USE "card_image") (("" (LEMMA "injection_n_to_m_var") (("" (INST - "card(image(inj!1, S!1))" "card(S!1)") (("" (ASSERT) (("" (CASE "EXISTS (f: [below(card(S!1)) -> (S!1)]): injective?(f)") (("1" (USE "bij_exists[R]") (("1" (EXPAND "bijective?") (("1" (SKOSIMP*) (("1" (LEMMA "composition_injective[below(card(S!1)), (S!1), (image(inj!1, S!1))]") (("1" (INST - "f!2" "restrict[D, (S!1), R](inj!1)") (("1" (USE "composition_injective[below(card(S!1)), (image(inj!1, S!1)), below(card(image(inj!1, S!1)))]") (("1" (INST?) (("1" (SKOLEM!) (("1" (EXPAND* "restrict" "image") (("1" (INST?) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOLEM!) (("2" (EXPAND* "restrict" "image") (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL) ("2" (SPLIT) (("1" (SKOLEM!) (("1" (EXPAND* "restrict" "image") (("1" (INST?) NIL NIL)) NIL)) NIL) ("2" (EXPAND "restrict") (("2" (EXPAND "injective?" (-5 1)) (("2" (SKOSIMP) (("2" (INST - "x1!1" "x2!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "bij_exists[D]") (("2" (SKOLEM!) (("2" (EXPAND "bijective?") (("2" (FLATTEN) (("2" (INST + "LAMBDA (n: below(card(S!1))): choose({d: (S!1) | f!1(d) = n})") (("1" (EXPAND "injective?") (("1" (SKOSIMP :PREDS? T) (("1" (TYPEPRED "choose({d: (S!1) | f!1(d) = x1!1})") (("1" (TYPEPRED "choose({d: (S!1) | f!1(d) = x2!1})") (("1" (ASSERT) NIL NIL) ("2" (EXPAND* "nonempty?" "empty?" "member" "surjective?") (("2" (INST -7 "x2!1") (("2" (SKOLEM!) (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND* "nonempty?" "empty?" "member" "surjective?") (("2" (INST -5 "x1!1") (("2" (SKOLEM!) (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOLEM!) (("2" (EXPAND* "nonempty?" "empty?" "member" "surjective?") (("2" (INST -3 "n!1") (("2" (SKOLEM!) (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|card_image| FORMULA-DECL NIL |function_image_aux| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|Card| CONST-DECL "nat" |finite_sets| NIL) (|card| CONST-DECL "{n: nat | n = Card(S)}" |finite_sets| NIL) NIL (|finite_image| APPLICATION-JUDGEMENT "finite_set[R]" |function_image_aux| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|composition_injective| JUDGEMENT-TCC NIL |function_props| NIL) NIL (O CONST-DECL "T3" |function_props| NIL) NIL (|restrict| CONST-DECL "R" |restrict| NIL) NIL NIL (|restrict_of_inj_is_inj| APPLICATION-JUDGEMENT "(injective?[S, R])" |restrict| NIL) (|bij_exists| FORMULA-DECL NIL |finite_sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|surjective?| CONST-DECL "bool" |functions| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|choose| CONST-DECL "(p)" |sets| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) NIL (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|injection_n_to_m_var| FORMULA-DECL NIL |nat_fun_props| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (R FORMAL-TYPE-DECL NIL |function_image_aux| NIL) (D FORMAL-TYPE-DECL NIL |function_image_aux| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) SHOSTAK)) (|bijective_image_TCC1| 0 (|bijective_image_TCC1-1| |nil| 3249929500 ("" (EXPAND* "fullset" "image") (("" (SKOSIMP*) (("" (INST?) NIL NIL)) NIL)) NIL) ((D FORMAL-TYPE-DECL NIL |function_image_aux| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|fullset| CONST-DECL "set" |sets| NIL) NIL) SHOSTAK (|bijective_image| SUBTYPE "function_image_aux.inj" "[function_image_aux.D -> (function_image[function_image_aux.D, function_image_aux.R].image(function_image_aux.inj, sets[function_image_aux.D].fullset))]"))) (|bijective_image| 0 (|bijective_image-1| |nil| 3249929533 ("" (SKOLEM-TYPEPRED) (("" (EXPAND* "bijective?" "injective?" "surjective?") (("" (SMASH) (("" (SKOLEM-TYPEPRED) (("" (EXPAND* "fullset" "image") (("" (SKOLEM!) (("" (INST?) (("" (INST? +) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|surjective?| CONST-DECL "bool" |functions| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) NIL (|fullset| CONST-DECL "set" |sets| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (R FORMAL-TYPE-DECL NIL |function_image_aux| NIL) (D FORMAL-TYPE-DECL NIL |function_image_aux| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) SHOSTAK)))(|function_iterate| (|iterate_TCC1| 0 (|iterate_TCC1-1| |nil| 3237052399 ("" (TCC :DEFS !) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|iterate| SUBTYPE "(number_fields.-)(function_iterate.n, 1)" "nat"))) (|iterate_TCC2| 0 (|iterate_TCC2-1| |nil| 3237052399 ("" (TCC :DEFS !) NIL NIL) NIL NIL (|iterate| TERMINATION "function_iterate.iterate(function_iterate.f, (number_fields.-)(function_iterate.n, 1))" "NIL"))) (|iterate_add| 0 (|iterate_add-1| |nil| 3237052399 ("" (INDUCT "m") (("1" (SKOSIMP) (("1" (EXPAND "iterate" 1 1) (("1" (EXPAND "o") (("1" (APPLY-EXTENSIONALITY) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (SKOSIMP) (("2" (EXPAND "iterate" 1 1) (("2" (EXPAND "iterate" 1 3) (("2" (INST -1 "f!1" "n!1") (("2" (EXPAND "o") (("2" (APPLY-EXTENSIONALITY) (("2" (REPLACE -1 :DIR RL) (("2" (BETA) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|iterate| DEF-DECL "T" |function_iterate| NIL) (O CONST-DECL "T3" |function_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (T FORMAL-TYPE-DECL NIL |function_iterate| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL)) (|iterate_add_applied| 0 (|iterate_add_applied-1| |nil| 3237052399 ("" (INDUCT-AND-SIMPLIFY "m") NIL NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (T FORMAL-TYPE-DECL NIL |function_iterate| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|iterate| DEF-DECL "T" |function_iterate| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) NIL)) (|iterate_add_one| 0 (|iterate_add_one-1| |nil| 3237052399 ("" (INDUCT-AND-SIMPLIFY "n") NIL NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (T FORMAL-TYPE-DECL NIL |function_iterate| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|iterate| DEF-DECL "T" |function_iterate| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) NIL)) (|iterate_mult| 0 (|iterate_mult-2| "" 3564901423 ("" (INDUCT "m") (("1" (INDUCT "n") (("1" (SKOSIMP) (("1" (EXPAND "iterate") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (SKOSIMP) (("2" (INST?) (("2" (EXPAND "iterate" 1 1) (("2" (APPLY-EXTENSIONALITY) (("2" (REPLACE -1) (("2" (EXPAND "iterate" 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (INDUCT "n" :NAME "NAT_induction") (("2" (SKOSIMP) (("2" (SKOSIMP) (("2" (CASE "j!2 = 0") (("1" (REPLACE -1) (("1" (EXPAND "iterate" 1 1) (("1" (EXPAND "iterate" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "iterate" 2 1) (("2" (EXPAND "iterate" 2 4) (("2" (APPLY-EXTENSIONALITY 2) (("1" (HIDE 3) (("1" (INST-CP -1 "j!2-1") (("1" (ASSERT) (("1" (INST? -2) (("1" (REPLACE -2) (("1" (LEMMA "iterate_add") (("1" (INST -1 "f!1" "1+j!1" "-1 - j!1 + j!1 * j!2 + j!2") (("1" (EXPAND "o") (("1" (CASE "iterate(f!1, 1 + j!1)(iterate(f!1, -1 - j!1 + j!1 * j!2 + j!2)(x!1)) = iterate(f!1, j!1 * j!2 + j!2)(x!1)") (("1" (HIDE -2) (("1" (REPLACE -1) (("1" (EXPAND "iterate" 1 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1 :DIR RL) (("2" (BETA) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (HIDE -1 -2 -3 -4 2) (("3" (CASE "j!1 * j!2 >= j!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (CASE "j!1 = 0") (("1" (ASSERT) NIL NIL) ("2" (LEMMA "div_mult_pos_ge2") (("2" (INST -1 "j!1" "j!2" "j!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3 2) (("2" (CASE "j!1 * j!2 >= j!1") (("1" (ASSERT) NIL NIL) ("2" (LEMMA "div_mult_pos_ge2") (("2" (INST -1 "j!1" "j!2" "j!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|div_mult_pos_ge2| FORMULA-DECL NIL |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (O CONST-DECL "T3" |function_props| NIL) (|iterate_add| FORMULA-DECL NIL |function_iterate| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) NIL (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|NAT_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|iterate| DEF-DECL "T" |function_iterate| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (T FORMAL-TYPE-DECL NIL |function_iterate| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK) (|iterate_mult-1| |nil| 3237052399 ("" (INDUCT "m") (("1" (INDUCT "n") (("1" (SKOSIMP) (("1" (EXPAND "iterate") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (SKOSIMP) (("2" (INST?) (("2" (EXPAND "iterate" 1 1) (("2" (APPLY-EXTENSIONALITY) (("2" (REPLACE -1) (("2" (EXPAND "iterate" 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (INDUCT "n" :NAME "NAT_induction") (("2" (SKOSIMP) (("2" (SKOSIMP) (("2" (CASE "j!2 = 0") (("1" (REPLACE -1) (("1" (EXPAND "iterate" 1 1) (("1" (EXPAND "iterate" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "iterate" 2 1) (("2" (EXPAND "iterate" 2 4) (("2" (APPLY-EXTENSIONALITY 2) (("2" (HIDE 3) (("2" (INST-CP -1 "j!2-1") (("2" (ASSERT) (("2" (INST? -2) (("2" (REPLACE -2) (("2" (LEMMA "iterate_add") (("2" (INST -1 "f!1" "1+j!1" "-1 - j!1 + j!1 * j!2 + j!2") (("1" (EXPAND "o") (("1" (CASE "iterate(f!1, 1 + j!1)(iterate(f!1, -1 - j!1 + j!1 * j!2 + j!2)(x!1)) = iterate(f!1, j!1 * j!2 + j!2)(x!1)") (("1" (HIDE -2) (("1" (REPLACE -1) (("1" (EXPAND "iterate" 1 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1 :DIR RL) (("2" (BETA) (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (HIDE -1 -2 -3 -4 2) (("3" (CASE "j!1 * j!2 >= j!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (CASE "j!1 = 0") (("1" (ASSERT) NIL NIL) ("2" (LEMMA "div_mult_pos_ge2") (("2" (INST -1 "j!1" "j!2" "j!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3 2) (("2" (CASE "j!1 * j!2 >= j!1") (("1" (ASSERT) NIL NIL) ("2" (LEMMA "div_mult_pos_ge2") (("2" (INST -1 "j!1" "j!2" "j!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL)) (|iterate_invariant| 0 (|iterate_invariant-1| |nil| 3237052399 ("" (INDUCT "n") (("1" (SKOSIMP*) (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|iterate| DEF-DECL "T" |function_iterate| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (T FORMAL-TYPE-DECL NIL |function_iterate| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL)))(|sequences| (|insert_TCC1| 0 (|insert_TCC1-1| |nil| 3237052399 ("" (TCC :DEFS !) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|insert| SUBTYPE "(number_fields.-)(sequences.i, 1)" "nat"))) (|insert_delete| 0 (|insert_delete-1| |nil| 3237052399 ("" (SKOLEM 1 ("n!1" "seq!1")) (("" (EXPAND "insert") (("" (APPLY-EXTENSIONALITY 1) (("1" (DELETE 2) (("1" (LIFT-IF) (("1" (SPLIT) (("1" (FLATTEN) (("1" (EXPAND "delete") (("1" (LIFT-IF) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT) (("1" (FLATTEN) (("1" (EXPAND "nth") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "delete") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (APPLY-EXTENSIONALITY 4) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|insert| CONST-DECL "sequence" |sequences| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (T FORMAL-TYPE-DECL NIL |sequences| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) NIL (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nth| CONST-DECL "T" |sequences| NIL) (|delete| CONST-DECL "sequence" |sequences| NIL) (|sequence| TYPE-EQ-DECL NIL |sequences| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL)) (|add_first_rest| 0 (|add_first_rest-1| |nil| 3237052399 ("" (SKOLEM 1 ("seq!1")) (("" (EXPAND "add") (("" (EXPAND "insert") (("" (APPLY-EXTENSIONALITY 1) (("1" (DELETE 2) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "first") (("1" (EXPAND "nth") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "rest") (("2" (EXPAND "suffix") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (APPLY-EXTENSIONALITY 3) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|add| CONST-DECL "sequence" |sequences| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|sequence| TYPE-EQ-DECL NIL |sequences| NIL) (|first| CONST-DECL "T" |sequences| NIL) (|rest| CONST-DECL "sequence" |sequences| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (T FORMAL-TYPE-DECL NIL |sequences| NIL) (|suffix| CONST-DECL "sequence" |sequences| NIL) (|nth| CONST-DECL "T" |sequences| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|insert| CONST-DECL "sequence" |sequences| NIL)) NIL)) (|sequence_induction| 0 (|sequence_induction-1| |nil| 3237052399 ("" (LEMMA "nat_induction") (("" (SKOSIMP) (("" (INST -1 "(lambda (n:nat): p!1(nth(seq!1, n)))") (("" (ASSERT) (("" (SPLIT) (("1" (ASSERT) (("1" (EXPAND "every") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) NIL (|nth| CONST-DECL "T" |sequences| NIL) (|sequence| TYPE-EQ-DECL NIL |sequences| NIL) (T FORMAL-TYPE-DECL NIL |sequences| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)) NIL)))(|seq_functions|)(|finite_sequences| (|empty_seq_TCC1| 0 (|empty_seq_TCC1-1| |nil| 3237052399 ("" (EXISTENCE-TCC) NIL NIL) NIL NIL (|empty_seq| EXISTENCE "" "finite_sequences.T"))) (|oh_TCC1| 0 (|oh_TCC1-1| |nil| 3237052399 ("" (TCC :DEFS !) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (< CONST-DECL "bool" |reals| NIL)) NIL (|oh| SUBTYPE "finite_sequences.n" "below[fs1`length]"))) (|oh_TCC2| 0 (|oh_TCC2-1| |nil| 3237052399 ("" (TCC :DEFS !) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (< CONST-DECL "bool" |reals| NIL)) NIL (|oh| SUBTYPE "(number_fields.-)(finite_sequences.n, finite_sequences.l1)" "below[fs2`length]"))) (|caret_TCC1| 0 (|caret_TCC1-1| |nil| 3237052399 ("" (GRIND :IF-MATCH NIL) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (T FORMAL-TYPE-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|caret| SUBTYPE "finite_sequences.len" "nat"))) (|caret_TCC2| 0 (|caret_TCC2-1| |nil| 3237052399 ("" (TCC :DEFS EXPLICIT) NIL NIL) ((|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|caret| SUBTYPE "(number_fields.+)(finite_sequences.x, finite_sequences.m)" "below[fs`length]"))) (|doublecaret_TCC1| 0 (|doublecaret_TCC1-1| |nil| 3458163332 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (T FORMAL-TYPE-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK (|doublecaret| SUBTYPE "finite_sequences.len" "nat"))) (|doublecaret_TCC2| 0 (|doublecaret_TCC2-1| |nil| 3458163332 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK (|doublecaret| SUBTYPE "(number_fields.+)(finite_sequences.x, finite_sequences.m)" "below[fs`length]"))) (|extract1_TCC1| 0 (|extract1_TCC1-1| |nil| 3237052399 ("" (TCC :DEFS !) NIL NIL) NIL NIL (|extract1| SUBTYPE "0" "below[fs`length]"))) (|o_assoc| 0 (|o_assoc-1| |nil| 3237052399 ("" (SKOSIMP) (("" (EXPAND "o") (("" (APPLY-EXTENSIONALITY) (("1" (HIDE 2) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKOSIMP) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (SKOSIMP) (("4" (ASSERT) NIL NIL)) NIL)) NIL) ("5" (HIDE 2) (("5" (SKOSIMP) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (O CONST-DECL "finseq" |finite_sequences| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (T FORMAL-TYPE-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) NIL NIL NIL (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL)))(|more_finseq| (|prefix?_TCC1| 0 (|prefix?_TCC1-1| |nil| 3458163333 ("" (SUBTYPE-TCC) NIL NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|seq| TYPE-EQ-DECL NIL |more_finseq| NIL) (T FORMAL-TYPE-DECL NIL |more_finseq| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (< CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) SHOSTAK (|prefix?| SUBTYPE "more_finseq.i" "below[ss`length]"))) (|add_TCC1| 0 (|add_TCC1-1| |nil| 3458163333 ("" (SUBTYPE-TCC) NIL NIL) NIL SHOSTAK (|add| SUBTYPE "more_finseq.rr`length" "below[1 + rr`length]"))) (|add_TCC2| 0 (|add_TCC2-1| |nil| 3726081087 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (T FORMAL-TYPE-DECL NIL |more_finseq| NIL) (|seq| TYPE-EQ-DECL NIL |more_finseq| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) SHOSTAK (|add| SUBTYPE "more_finseq.x1" "below[rr`length]"))))(|ordstruct|)(|ordinals| (|lessp_TCC1| 0 (|lessp_TCC1-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|reduce_nat| ADT-DEF-DECL "[ordstruct -> nat]" |ordstruct_adt| NIL) (|size| CONST-DECL "[ordstruct -> nat]" |ordinals| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) NIL (|lessp| TERMINATION "(ordinals.<(ordinals.u, ordinals.z))" "NIL"))) (|lessp_TCC2| 0 (|lessp_TCC2-1| |nil| 3237052399 ("" (SKEEP*) (("" (REPLACE -1) (("" (EXPAND "size") (("" (ASSERT) (("" (EXPAND "reduce_nat" 3 2) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|reduce_nat| ADT-DEF-DECL "[ordstruct -> nat]" |ordstruct_adt| NIL) (|size| CONST-DECL "[ordstruct -> nat]" |ordinals| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL (|lessp| TERMINATION "(ordinals.<(ordinals.v, ordinals.w))" "NIL"))) (|ordinal?_TCC1| 0 (|ordinal?_TCC1-1| |nil| 3743354465 ("" (TERMINATION-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|reduce_nat| ADT-DEF-DECL "[ordstruct -> nat]" |ordstruct_adt| NIL) (|size| CONST-DECL "[ordstruct -> nat]" |ordinals| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) SHOSTAK (|ordinal?| TERMINATION "ordinals.ordinal?(ordinals.u)" "NIL"))) (|ordinal?_TCC2| 0 (|ordinal?_TCC2-2| "" 3802910040 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|reduce_nat| ADT-DEF-DECL "[ordstruct -> nat]" |ordstruct_adt| NIL) (|size| CONST-DECL "[ordstruct -> nat]" |ordinals| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) SHOSTAK (|ordinal?| TERMINATION "ordinals.ordinal?(ordinals.v)" "NIL")) (|ordinal?_TCC2-1| |nil| 3237052399 ("" (SKEEP) (("" (REPLACE -2) (("" (EXPAND "size") (("" (EXPAND "reduce_nat" 1 2) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|ordinal?| TERMINATION "ordinals.ordinal?(ordinals.v)" "NIL"))) (|ordinal_TCC1| 0 (|ordinal_TCC1-1| |nil| 3237052399 ("" (INST 1 "zero") (("" (ASSERT) (("" (EXPAND "ordinal?") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ((|zero| ADT-CONSTRUCTOR-DECL "(zero?)" |ordstruct_adt| NIL) (|zero?| ADT-RECOGNIZER-DECL "[ordstruct -> boolean]" |ordstruct_adt| NIL) (|ordinal?| DEF-DECL "bool" |ordinals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|ordstruct| TYPE-DECL NIL |ordstruct_adt| NIL)) NIL (|ordinal| EXISTENCE "" "{x: ordstruct_adt.ordstruct | ordinals.ordinal?(x)}"))) (|ordinal_irreflexive| 0 (|ordinal_irreflexive-1| |nil| 3237052399 ("" (INDUCT "r") (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "<") (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) (("3" (EXPAND "<" -4) (("3" (SPLIT -4) (("1" (ASSERT) (("1" (EXPAND "ordinal?" -3) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (EXPAND "ordinal?" -4) (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|ordinal| NONEMPTY-TYPE-EQ-DECL NIL |ordinals| NIL) (|ordstruct_induction| FORMULA-DECL NIL |ordstruct_adt| NIL) (< DEF-DECL "bool" |ordinals| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|ordinal?| DEF-DECL "bool" |ordinals| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|ordstruct| TYPE-DECL NIL |ordstruct_adt| NIL)) NIL)) (|ordinal_antisym| 0 (|ordinal_antisym-1| |nil| 3237052399 ("" (INDUCT "r") (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (SKOSIMP*) (("2" (EXPAND "<") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP) (("3" (EXPAND "ordinal?" -3) (("3" (FLATTEN) (("3" (ASSERT) (("3" (INDUCT "s") (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "<" -2) (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (SKOSIMP) (("3" (EXPAND "ordinal?" -3) (("3" (FLATTEN) (("3" (ASSERT) (("3" (EXPAND "<" -6) (("3" (SPLIT -6) (("1" (INST -8 "add2_var!2") (("1" (ASSERT) (("1" (EXPAND "<" -7) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "<" -8) (("2" (ASSERT) (("2" (REPLACE -1) (("2" (LEMMA "ordinal_irreflexive") (("2" (INST -1 "add2_var!2") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (FLATTEN) (("3" (EXPAND "<" -9) (("3" (REPLACE -1) (("3" (REPLACE -2) (("3" (LEMMA "ordinal_irreflexive") (("3" (INST-CP -1 "add2_var!2") (("3" (ASSERT) (("3" (INST -12 "add3_var!2") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonzero?| ADT-RECOGNIZER-DECL "[ordstruct -> boolean]" |ordstruct_adt| NIL) (|add| ADT-CONSTRUCTOR-DECL "[[posnat, ordstruct, ordstruct] -> (nonzero?)]" |ordstruct_adt| NIL) (|ordinal_irreflexive| FORMULA-DECL NIL |ordinals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|ordstruct_induction| FORMULA-DECL NIL |ordstruct_adt| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (< DEF-DECL "bool" |ordinals| NIL) (|ordinal| NONEMPTY-TYPE-EQ-DECL NIL |ordinals| NIL) (|ordinal?| DEF-DECL "bool" |ordinals| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|ordstruct| TYPE-DECL NIL |ordstruct_adt| NIL)) NIL)) (|ordinal_antisymmetric| 0 (|ordinal_antisymmetric-1| |nil| 3237052399 ("" (SKOSIMP) (("" (EXPAND "<=") (("" (SPLIT) (("1" (SPLIT) (("1" (LEMMA "ordinal_antisym") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ((<= CONST-DECL "bool" |ordinals| NIL) (|ordstruct| TYPE-DECL NIL |ordstruct_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|ordinal?| DEF-DECL "bool" |ordinals| NIL) (|ordinal| NONEMPTY-TYPE-EQ-DECL NIL |ordinals| NIL) (|ordinal_antisym| FORMULA-DECL NIL |ordinals| NIL)) NIL)) (|ordinal_transitive| 0 (|ordinal_transitive-1| |nil| 3237052399 ("" (INDUCT "s") (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (SKOSIMP) (("2" (EXPAND "<" -2) (("2" (LIFT-IF -2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP) (("3" (EXPAND "ordinal?" -3) (("3" (FLATTEN) (("3" (ASSERT) (("3" (HIDE -3 -4) (("3" (SKOSIMP) (("3" (EXPAND "<" -4) (("3" (LIFT-IF) (("3" (SPLIT -4) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "<" -5) (("2" (LIFT-IF) (("2" (SPLIT) (("1" (SPLIT) (("1" (FLATTEN) (("1" (EXPAND "<" 2) (("1" (ASSERT) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (EXPAND "<" 3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT) (("1" (ASSERT) (("1" (PROP) (("1" (ASSERT) (("1" (EXPAND "<" 4) (("1" (FLATTEN) (("1" (ASSERT) (("1" (INST -4 "exp(r!1)" "exp(t!1)") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (TYPEPRED "t!1") (("2" (EXPAND "ordinal?" -1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "r!1") (("3" (EXPAND "ordinal?" -1) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "<" 4) (("2" (ASSERT) NIL NIL)) NIL) ("3" (EXPAND "<" 4) (("3" (ASSERT) NIL NIL)) NIL) ("4" (EXPAND "<" 5) (("4" (ASSERT) (("4" (INST -4 "exp(r!1)" "exp(t!1)") (("1" (ASSERT) NIL NIL) ("2" (TYPEPRED "t!1") (("2" (EXPAND "ordinal?" -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (TYPEPRED "r!1") (("3" (EXPAND "ordinal?" -1) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (EXPAND "<" 5) (("5" (ASSERT) NIL NIL)) NIL) ("6" (EXPAND "<" 5) (("6" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (SPLIT -5) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (HIDE -6) (("2" (PROP) (("1" (ASSERT) (("1" (EXPAND "<" 4) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (EXPAND "<" 4) (("2" (ASSERT) NIL NIL)) NIL) ("3" (EXPAND "<" 4) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "<" 3) (("3" (ASSERT) (("3" (HIDE -4) (("3" (SPLIT -4) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (INST -8 "rest(r!1)" "rest(t!1)") (("1" (ASSERT) NIL NIL) ("2" (TYPEPRED "t!1") (("2" (EXPAND "ordinal?" -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (TYPEPRED "r!1") (("3" (EXPAND "ordinal?" -1) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) NIL (|exp| ADT-ACCESSOR-DECL "[(nonzero?) -> ordstruct]" |ordstruct_adt| NIL) (|nonzero?| ADT-RECOGNIZER-DECL "[ordstruct -> boolean]" |ordstruct_adt| NIL) NIL (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|rest| ADT-ACCESSOR-DECL "[(nonzero?) -> ordstruct]" |ordstruct_adt| NIL) (|ordstruct_induction| FORMULA-DECL NIL |ordstruct_adt| NIL) (< DEF-DECL "bool" |ordinals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|ordinal| NONEMPTY-TYPE-EQ-DECL NIL |ordinals| NIL) (|ordinal?| DEF-DECL "bool" |ordinals| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|ordstruct| TYPE-DECL NIL |ordstruct_adt| NIL)) NIL)) (|ordinal_trichotomy| 0 (|ordinal_trichotomy-1| |nil| 3237052399 ("" (INDUCT "r") (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (INDUCT "s") (("1" (ASSERT) NIL NIL) ("2" (SKOSIMP) (("2" (EXPAND "ordinal?" -3) (("2" (FLATTEN) (("2" (ASSERT) (("2" (EXPAND "<" 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP) (("3" (EXPAND "ordinal?" -3) (("3" (FLATTEN) (("3" (ASSERT) (("3" (INDUCT "s") (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "<" 3) (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (SKOSIMP) (("3" (ASSERT) (("3" (EXPAND "ordinal?" -3) (("3" (FLATTEN) (("3" (ASSERT) (("3" (EXPAND "<" 1) (("3" (FLATTEN) (("3" (EXPAND "<" 5) (("3" (FLATTEN) (("3" (INST -6 "add2_var!2") (("3" (ASSERT) (("3" (REPLACE -6) (("3" (ASSERT) (("3" (HIDE -3 -4 1 5) (("3" (HIDE -6 -7) (("3" (INST -5 "add3_var!2") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonzero?| ADT-RECOGNIZER-DECL "[ordstruct -> boolean]" |ordstruct_adt| NIL) (|add| ADT-CONSTRUCTOR-DECL "[[posnat, ordstruct, ordstruct] -> (nonzero?)]" |ordstruct_adt| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|zero| ADT-CONSTRUCTOR-DECL "(zero?)" |ordstruct_adt| NIL) (|zero?| ADT-RECOGNIZER-DECL "[ordstruct -> boolean]" |ordstruct_adt| NIL) (|ordstruct_induction| FORMULA-DECL NIL |ordstruct_adt| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (< DEF-DECL "bool" |ordinals| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|ordinal| NONEMPTY-TYPE-EQ-DECL NIL |ordinals| NIL) (|ordinal?| DEF-DECL "bool" |ordinals| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|ordstruct| TYPE-DECL NIL |ordstruct_adt| NIL)) NIL)) (|well_founded_le| 0 (|well_founded_le-1| |nil| 3237052399 ("" (EXPAND "well_founded?") (("" (LEMMA "ordinal_induction") (("" (SKOSIMP) (("" (SKOSIMP) (("" (INST -1 "LAMBDA (x:ordinal): NOT p!1(x)") (("" (SPLIT) (("1" (INST -1 "y!1") NIL NIL) ("2" (SKOSIMP) (("2" (INST 1 "r!1") (("2" (SKOSIMP) (("2" (INST -1 "x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|ordinal_induction| FORMULA-DECL NIL |ordinals| NIL) NIL NIL (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|ordinal| NONEMPTY-TYPE-EQ-DECL NIL |ordinals| NIL) (|ordinal?| DEF-DECL "bool" |ordinals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|ordstruct| TYPE-DECL NIL |ordstruct_adt| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL)) NIL)))(|lex2| (|lex2_TCC1| 0 (|lex2_TCC1-1| |nil| 3237052399 ("" (SUBTYPE-TCC) (("" (GRIND) NIL NIL)) NIL) ((|ordinal?| DEF-DECL "bool" |ordinals| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)) NIL (|lex2| SUBTYPE "ordstruct_adt.zero" "ordinal"))) (|lex2_TCC2| 0 (|lex2_TCC2-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL (|lex2| SUBTYPE "lex2.n" "posnat"))) (|lex2_TCC3| 0 (|lex2_TCC3-1| |nil| 3237052399 ("" (SUBTYPE-TCC) (("" (GRIND) NIL NIL)) NIL) ((|ordinal?| DEF-DECL "bool" |ordinals| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)) NIL (|lex2| SUBTYPE "ordstruct_adt.add(lex2.n, ordstruct_adt.zero, ordstruct_adt.zero)" "ordinal"))) (|lex2_TCC4| 0 (|lex2_TCC4-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL (|lex2| SUBTYPE "lex2.m" "posnat"))) (|lex2_TCC5| 0 (|lex2_TCC5-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|ordinal?| DEF-DECL "bool" |ordinals| NIL)) NIL (|lex2| SUBTYPE "ordstruct_adt.add(lex2.m, ordstruct_adt.add(1, ordstruct_adt.zero, ordstruct_adt.zero), ordstruct_adt.zero)" "ordinal"))) (|lex2_TCC6| 0 (|lex2_TCC6-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|lex2| SUBTYPE "lex2.m" "posnat"))) (|lex2_TCC7| 0 (|lex2_TCC7-1| |nil| 3237052399 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|lex2| SUBTYPE "lex2.n" "posnat"))) (|lex2_TCC8| 0 (|lex2_TCC8-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (< DEF-DECL "bool" |ordinals| NIL) (|ordinal?| DEF-DECL "bool" |ordinals| NIL)) NIL (|lex2| SUBTYPE "ordstruct_adt.add(lex2.m, ordstruct_adt.add(1, ordstruct_adt.zero, ordstruct_adt.zero), ordstruct_adt.add(lex2.n, ordstruct_adt.zero, ordstruct_adt.zero))" "ordinal"))) (|lex2_lt| 0 (|lex2_lt-1| |nil| 3237052399 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< DEF-DECL "bool" |ordinals| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|lex2| CONST-DECL "ordinal" |lex2| NIL)) NIL)))(|lex3| (|lex3_TCC1| 0 (|lex3_TCC1-1| |nil| 3768751962 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL (|lex3| SUBTYPE "lex3.m" "posnat"))) (|lex3_TCC2| 0 (|lex3_TCC2-1| |nil| 3768751962 ("" (SKEEP) (("" (EXPAND "ordinal?") (("" (GRIND) NIL NIL)) NIL)) NIL) ((|ordinal?| DEF-DECL "bool" |ordinals| NIL) (< DEF-DECL "bool" |ordinals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|lex2| CONST-DECL "ordinal" |lex2| NIL)) NIL (|lex3| SUBTYPE "ordstruct_adt.add(lex3.m, ordstruct_adt.add(2, ordstruct_adt.add(2, ordstruct_adt.zero, ordstruct_adt.zero), ordstruct_adt.zero), lex2.lex2(lex3.n, lex3.p))" "ordinal"))) (|wtf?| 0 (|wtf?-1| |nil| 3768765387 ("" (DECOMPOSE-EQUALITY) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|ordstruct| TYPE-DECL NIL |ordstruct_adt| NIL) (|nonzero?| ADT-RECOGNIZER-DECL "[ordstruct -> boolean]" |ordstruct_adt| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|coef| ADT-ACCESSOR-DECL "[(nonzero?) -> posnat]" |ordstruct_adt| NIL) (|add| ADT-CONSTRUCTOR-DECL "[[posnat, ordstruct, ordstruct] -> (nonzero?)]" |ordstruct_adt| NIL) (|zero?| ADT-RECOGNIZER-DECL "[ordstruct -> boolean]" |ordstruct_adt| NIL) (|zero| ADT-CONSTRUCTOR-DECL "(zero?)" |ordstruct_adt| NIL) (|exp| ADT-ACCESSOR-DECL "[(nonzero?) -> ordstruct]" |ordstruct_adt| NIL) (|rest| ADT-ACCESSOR-DECL "[(nonzero?) -> ordstruct]" |ordstruct_adt| NIL)) SHOSTAK)) (|lex3_lt| 0 (|lex3_lt-1| |nil| 3768752051 ("" (SKEEP) (("" (GRIND-WITH-EXT) (("1" (NAME "A" "add(1, zero, zero)") (("1" (NAME "B" "add(2, add(2, zero, zero), zero)") (("1" (REPLACE -1 * LR) (("1" (REPLACE -2 * LR) (("1" (CASE "1 = 2") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2 3 4 5 6) (("2" (HIDE -7 -5 -4 -3) (("2" (CASE "coef(A) = 1") (("1" (CASE "coef(B) = 2") (("1" (REPLACE -5 -1 LR) (("1" (ASSERT) NIL NIL)) NIL) ("2" (GRIND) (("2" (REPLACE -2 1 RL) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -2 1 RL) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "wtf?") (("2" (PROPAX) NIL NIL)) NIL) ("3" (LEMMA "wtf?") (("3" (PROPAX) NIL NIL)) NIL) ("4" (LEMMA "wtf?") (("4" (PROPAX) NIL NIL)) NIL) ("5" (LEMMA "wtf?") (("5" (PROPAX) NIL NIL)) NIL) ("6" (LEMMA "wtf?") (("6" (PROPAX) NIL NIL)) NIL) ("7" (LEMMA "wtf?") (("7" (PROPAX) NIL NIL)) NIL) ("8" (LEMMA "wtf?") (("8" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ((< DEF-DECL "bool" |ordinals| NIL) (|lex2| CONST-DECL "ordinal" |lex2| NIL) (|lex3| CONST-DECL "ordinal" |lex3| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|coef| ADT-ACCESSOR-DECL "[(nonzero?) -> posnat]" |ordstruct_adt| NIL) (|zero| ADT-CONSTRUCTOR-DECL "(zero?)" |ordstruct_adt| NIL) (|zero?| ADT-RECOGNIZER-DECL "[ordstruct -> boolean]" |ordstruct_adt| NIL) (|add| ADT-CONSTRUCTOR-DECL "[[posnat, ordstruct, ordstruct] -> (nonzero?)]" |ordstruct_adt| NIL) (|nonzero?| ADT-RECOGNIZER-DECL "[ordstruct -> boolean]" |ordstruct_adt| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|ordstruct| TYPE-DECL NIL |ordstruct_adt| NIL) (|wtf?| FORMULA-DECL NIL |lex3| NIL)) SHOSTAK)))(|lex4| (|lex4_TCC1| 0 (|lex4_TCC1-1| |nil| 3768930415 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL (|lex4| SUBTYPE "lex4.m" "posnat"))) (|lex4_TCC2| 0 (|lex4_TCC2-1| |nil| 3768930415 ("" (SKEEP) (("" (EXPAND "lex3") (("" (LIFT-IF) (("" (SPLIT) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|lex3| CONST-DECL "ordinal" |lex3| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|lex2| CONST-DECL "ordinal" |lex2| NIL) (|ordinal?| DEF-DECL "bool" |ordinals| NIL) (< DEF-DECL "bool" |ordinals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL (|lex4| SUBTYPE "ordstruct_adt.add(lex4.m, ordstruct_adt.add(3, ordstruct_adt.add(2, ordstruct_adt.add(1, ordstruct_adt.zero, ordstruct_adt.zero), ordstruct_adt.zero), ordstruct_adt.zero), lex3.lex3(lex4.n, lex4.p, lex4.q))" "ordinal"))) (|wtf?| 0 (|wtf?-1| |nil| 3768930878 ("" (CASE "coef(add(1, zero, zero)) = 1") (("1" (CASE "coef(add(3, add(2, add(1, zero, zero), zero), zero)) = 3") (("1" (REPLACE -3 -2 RL) (("1" (REPLACE -1 -2 LR) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ((|zero| ADT-CONSTRUCTOR-DECL "(zero?)" |ordstruct_adt| NIL) (|zero?| ADT-RECOGNIZER-DECL "[ordstruct -> boolean]" |ordstruct_adt| NIL) (|add| ADT-CONSTRUCTOR-DECL "[[posnat, ordstruct, ordstruct] -> (nonzero?)]" |ordstruct_adt| NIL) (|coef| ADT-ACCESSOR-DECL "[(nonzero?) -> posnat]" |ordstruct_adt| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|nonzero?| ADT-RECOGNIZER-DECL "[ordstruct -> boolean]" |ordstruct_adt| NIL) (|ordstruct| TYPE-DECL NIL |ordstruct_adt| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK)) (|same_coefs| 0 (|same_coefs-1| |nil| 3768931344 ("" (SKEEP) (("" (GRIND) NIL NIL)) NIL) NIL SHOSTAK)) (|lex4_lt| 0 (|lex4_lt-1| |nil| 3768930553 ("" (SKEEP) (("" (GRIND) (("1" (HIDE -1 -2 -3 -4 -5 -7 1 2 3 4 5) (("1" (NAME-REPLACE "B" "add(1, zero, zero)") (("1" (NAME-REPLACE "A" "add(3, add(2, B, zero), zero)") (("1" (CASE "coef(A) = 3") (("1" (CASE "coef(B) = 1") (("1" (REPLACE -3 -2 LR) (("1" (ASSERT) NIL NIL)) NIL) ("2" (GRIND) (("2" (REVEAL -2) (("2" (REPLACE -1 1 RL) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL -1) (("2" (REPLACE -1 1 RL) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "same_coefs") (("2" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(1, zero, zero)") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (LEMMA "same_coefs") (("3" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(1, zero, zero)") (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (LEMMA "same_coefs") (("4" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(1, zero, zero)") (("4" (ASSERT) NIL NIL)) NIL)) NIL) ("5" (LEMMA "same_coefs") (("5" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(1, zero, zero)") (("5" (ASSERT) NIL NIL)) NIL)) NIL) ("6" (LEMMA "same_coefs") (("6" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(1, zero, zero)") (("6" (ASSERT) NIL NIL)) NIL)) NIL) ("7" (LEMMA "same_coefs") (("7" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(1, zero, zero)") (("7" (ASSERT) NIL NIL)) NIL)) NIL) ("8" (LEMMA "same_coefs") (("8" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(1, zero, zero)") (("8" (ASSERT) NIL NIL)) NIL)) NIL) ("9" (LEMMA "same_coefs") (("9" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(1, zero, zero)") (("9" (ASSERT) (("9" (LEMMA "same_coefs") (("9" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(1, zero, zero)") (("9" (ASSERT) (("9" (LEMMA "same_coefs") (("9" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(1, zero, zero)") (("9" (ASSERT) (("9" (LEMMA "same_coefs") (("9" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(1, zero, zero)") (("9" (ASSERT) (("9" (LEMMA "same_coefs") (("9" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(1, zero, zero)") (("9" (ASSERT) (("9" (LEMMA "same_coefs") (("9" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(1, zero, zero)") (("9" (ASSERT) (("9" (LEMMA "same_coefs") (("9" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(1, zero, zero)") (("9" (ASSERT) (("9" (LEMMA "same_coefs") (("9" (ASSERT) (("9" (LEMMA "same_coefs") (("9" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(2, add(2, zero, zero), zero)") (("9" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("10" (LEMMA "same_coefs") (("10" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(2, add(2, zero, zero), zero)") (("10" (ASSERT) NIL NIL)) NIL)) NIL) ("11" (LEMMA "same_coefs") (("11" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(2, add(2, zero, zero), zero)") (("11" (ASSERT) NIL NIL)) NIL)) NIL) ("12" (LEMMA "same_coefs") (("12" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(2, add(2, zero, zero), zero)") (("12" (ASSERT) NIL NIL)) NIL)) NIL) ("13" (LEMMA "same_coefs") (("13" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(2, add(2, zero, zero), zero)") (("13" (ASSERT) (("13" (LEMMA "same_coefs") (("13" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(1, zero, zero)") (("13" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("14" (LEMMA "same_coefs") (("14" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(1, zero, zero)") (("14" (ASSERT) NIL NIL)) NIL)) NIL) ("15" (LEMMA "same_coefs") (("15" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(1, zero, zero)") (("15" (ASSERT) NIL NIL)) NIL)) NIL) ("16" (LEMMA "same_coefs") (("16" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(1, zero, zero)") (("16" (ASSERT) NIL NIL)) NIL)) NIL) ("17" (LEMMA "same_coefs") (("17" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(1, zero, zero)") (("17" (ASSERT) (("17" (LEMMA "same_coefs") (("17" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(1, zero, zero)") (("17" (ASSERT) (("17" (LEMMA "same_coefs") (("17" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(2, add(2, zero, zero), zero)") (("17" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("18" (LEMMA "same_coefs") (("18" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(2, add(2, zero, zero), zero)") (("18" (ASSERT) NIL NIL)) NIL)) NIL) ("19" (LEMMA "same_coefs") (("19" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(2, add(2, zero, zero), zero)") (("19" (ASSERT) NIL NIL)) NIL)) NIL) ("20" (LEMMA "same_coefs") (("20" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(2, add(2, zero, zero), zero)") (("20" (ASSERT) NIL NIL)) NIL)) NIL) ("21" (LEMMA "same_coefs") (("21" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(2, add(2, zero, zero), zero)") (("21" (ASSERT) NIL NIL)) NIL)) NIL) ("22" (LEMMA "same_coefs") (("22" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(2, add(2, zero, zero), zero)") (("22" (ASSERT) (("22" (LEMMA "same_coefs") (("22" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(2, add(2, zero, zero), zero)") (("22" (ASSERT) (("22" (LEMMA "same_coefs") (("22" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(1, zero, zero)") (("22" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("23" (LEMMA "same_coefs") (("23" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(2, add(2, zero, zero), zero)") (("23" (ASSERT) (("23" (LEMMA "same_coefs") (("23" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(1, zero, zero)") (("23" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("24" (LEMMA "same_coefs") (("24" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(2, add(2, zero, zero), zero)") (("24" (ASSERT) NIL NIL)) NIL)) NIL) ("25" (LEMMA "same_coefs") (("25" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(1, zero, zero)") (("25" (ASSERT) (("25" (LEMMA "same_coefs") (("25" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(2, add(2, zero, zero), zero)") (("25" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("26" (LEMMA "same_coefs") (("26" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(1, zero, zero)") (("26" (ASSERT) NIL NIL)) NIL)) NIL) ("27" (LEMMA "same_coefs") (("27" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(2, add(2, zero, zero), zero)") (("27" (ASSERT) NIL NIL)) NIL)) NIL) ("28" (LEMMA "same_coefs") (("28" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(1, zero, zero)") (("28" (ASSERT) NIL NIL)) NIL)) NIL) ("29" (LEMMA "same_coefs") (("29" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(2, add(2, zero, zero), zero)") (("29" (ASSERT) NIL NIL)) NIL)) NIL) ("30" (LEMMA "same_coefs") (("30" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(1, zero, zero)") (("30" (ASSERT) NIL NIL)) NIL)) NIL) ("31" (LEMMA "same_coefs") (("31" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(2, add(2, zero, zero), zero)") (("31" (ASSERT) (("31" (LEMMA "same_coefs") (("31" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(1, zero, zero)") (("31" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("32" (LEMMA "same_coefs") (("32" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(2, add(2, zero, zero), zero)") (("32" (ASSERT) (("32" (LEMMA "same_coefs") (("32" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(1, zero, zero)") (("32" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("33" (LEMMA "same_coefs") (("33" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(2, add(2, zero, zero), zero)") (("33" (ASSERT) NIL NIL)) NIL)) NIL) ("34" (LEMMA "same_coefs") (("34" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(1, zero, zero)") (("34" (ASSERT) (("34" (LEMMA "same_coefs") (("34" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(2, add(2, zero, zero), zero)") (("34" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("35" (LEMMA "same_coefs") (("35" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(1, zero, zero)") (("35" (ASSERT) NIL NIL)) NIL)) NIL) ("36" (LEMMA "same_coefs") (("36" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(2, add(2, zero, zero), zero)") (("36" (ASSERT) NIL NIL)) NIL)) NIL) ("37" (LEMMA "same_coefs") (("37" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(1, zero, zero)") (("37" (ASSERT) NIL NIL)) NIL)) NIL) ("38" (LEMMA "same_coefs") (("38" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(2, add(2, zero, zero), zero)") (("38" (ASSERT) NIL NIL)) NIL)) NIL) ("39" (LEMMA "same_coefs") (("39" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(1, zero, zero)") (("39" (ASSERT) NIL NIL)) NIL)) NIL) ("40" (LEMMA "same_coefs") (("40" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(2, add(2, zero, zero), zero)") (("40" (ASSERT) NIL NIL)) NIL)) NIL) ("41" (LEMMA "same_coefs") (("41" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(1, zero, zero)") (("41" (ASSERT) NIL NIL)) NIL)) NIL) ("42" (LEMMA "same_coefs") (("42" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(2, add(2, zero, zero), zero)") (("42" (ASSERT) (("42" (LEMMA "same_coefs") (("42" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(1, zero, zero)") (("42" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("43" (LEMMA "same_coefs") (("43" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(2, add(2, zero, zero), zero)") (("43" (ASSERT) (("43" (LEMMA "same_coefs") (("43" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(1, zero, zero)") (("43" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("44" (LEMMA "same_coefs") (("44" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(2, add(2, zero, zero), zero)") (("44" (ASSERT) (("44" (LEMMA "same_coefs") (("44" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(1, zero, zero)") (("44" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("45" (LEMMA "same_coefs") (("45" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(2, add(2, zero, zero), zero)") (("45" (ASSERT) NIL NIL)) NIL)) NIL) ("46" (LEMMA "same_coefs") (("46" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(1, zero, zero)") (("46" (ASSERT) (("46" (LEMMA "same_coefs") (("46" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(2, add(2, zero, zero), zero)") (("46" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("47" (LEMMA "same_coefs") (("47" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(1, zero, zero)") (("47" (ASSERT) (("47" (LEMMA "same_coefs") (("47" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(2, add(2, zero, zero), zero)") (("47" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("48" (LEMMA "same_coefs") (("48" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(1, zero, zero)") (("48" (ASSERT) (("48" (LEMMA "same_coefs") (("48" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(2, add(2, zero, zero), zero)") (("48" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("49" (LEMMA "same_coefs") (("49" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(1, zero, zero)") (("49" (ASSERT) (("49" (LEMMA "same_coefs") (("49" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(2, add(2, zero, zero), zero)") (("49" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("50" (LEMMA "same_coefs") (("50" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(1, zero, zero)") (("50" (ASSERT) NIL NIL)) NIL)) NIL) ("51" (LEMMA "same_coefs") (("51" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(2, add(2, zero, zero), zero)") (("51" (ASSERT) NIL NIL)) NIL)) NIL) ("52" (LEMMA "same_coefs") (("52" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(1, zero, zero)") (("52" (ASSERT) (("52" (LEMMA "same_coefs") (("52" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(2, add(2, zero, zero), zero)") (("52" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("53" (LEMMA "same_coefs") (("53" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(1, zero, zero)") (("53" (ASSERT) (("53" (LEMMA "same_coefs") (("53" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(2, add(2, zero, zero), zero)") (("53" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("54" (LEMMA "same_coefs") (("54" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(1, zero, zero)") (("54" (ASSERT) (("54" (LEMMA "same_coefs") (("54" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(2, add(2, zero, zero), zero)") (("54" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("55" (LEMMA "same_coefs") (("55" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(1, zero, zero)") (("55" (ASSERT) NIL NIL)) NIL)) NIL) ("56" (LEMMA "same_coefs") (("56" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(2, add(2, zero, zero), zero)") (("56" (ASSERT) NIL NIL)) NIL)) NIL) ("57" (LEMMA "same_coefs") (("57" (INST -1 "add(3, add(2, add(1, zero, zero), zero), zero)" "add(1, zero, zero)") (("57" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((< DEF-DECL "bool" |ordinals| NIL) (|lex2| CONST-DECL "ordinal" |lex2| NIL) (|lex3| CONST-DECL "ordinal" |lex3| NIL) (|lex4| CONST-DECL "ordinal" |lex4| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|ordstruct| TYPE-DECL NIL |ordstruct_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonzero?| ADT-RECOGNIZER-DECL "[ordstruct -> boolean]" |ordstruct_adt| NIL) (|add| ADT-CONSTRUCTOR-DECL "[[posnat, ordstruct, ordstruct] -> (nonzero?)]" |ordstruct_adt| NIL) (|zero?| ADT-RECOGNIZER-DECL "[ordstruct -> boolean]" |ordstruct_adt| NIL) (|zero| ADT-CONSTRUCTOR-DECL "(zero?)" |ordstruct_adt| NIL) (|coef| ADT-ACCESSOR-DECL "[(nonzero?) -> posnat]" |ordstruct_adt| NIL) (|ordinal?| DEF-DECL "bool" |ordinals| NIL) (|ordinal| NONEMPTY-TYPE-EQ-DECL NIL |ordinals| NIL) (|same_coefs| FORMULA-DECL NIL |lex4| NIL)) SHOSTAK)))(|list|)(|list_props| (|length_TCC1| 0 (|length_TCC1-1| |nil| 3237052399 ("" (TCC :DEFS !) NIL NIL) ((|reduce_nat| ADT-DEF-DECL "[list -> nat]" |list_adt| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL (|length| TERMINATION "list_props.length(list_props.y)" "NIL"))) (|member_TCC1| 0 (|member_TCC1-1| |nil| 3237052399 ("" (TCC :DEFS !) NIL NIL) ((|length| DEF-DECL "nat" |list_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL (|member| TERMINATION "list_props.member(list_props.x, list_props.tl)" "NIL"))) (|member_null| 0 (|member_null-1| |nil| 3237052399 ("" (GRIND :IF-MATCH NIL) NIL NIL) ((|member| DEF-DECL "bool" |list_props| NIL)) NIL)) (|nth_TCC1| 0 (|nth_TCC1-1| |nil| 3237052399 ("" (SKOSIMP) (("" (TYPEPRED "n!1") (("" (EXPAND "length") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (< CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL (|nth| SUBTYPE "list_props.l" "(list_adt[list_props.T].cons?)"))) (|nth_TCC2| 0 (|nth_TCC2-1| |nil| 3237052399 ("" (SKOSIMP) (("" (TYPEPRED "n!1") (("" (EXPAND "length") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (< CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL (|nth| SUBTYPE "list_props.l" "(list_adt[list_props.T].cons?)"))) (|nth_TCC3| 0 (|nth_TCC3-1| |nil| 3237052399 ("" (INDUCT "l") (("1" (SKOSIMP*) (("1" (TYPEPRED "n!1") (("1" (EXPAND "length") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) (("2" (TYPEPRED "n!1") (("2" (EXPAND "length" -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) (("3" (TYPEPRED "n!1") (("3" (EXPAND "length" -1) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |list_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)) NIL (|nth| SUBTYPE "(number_fields.-)(list_props.n, 1)" "below[length(cdr[T](l))]"))) (|nth_TCC4| 0 (|nth_TCC4-1| |nil| 3237052399 ("" (INDUCT "l") (("1" (SKOSIMP*) (("1" (TYPEPRED "n!1") (("1" (EXPAND "length") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (EXPAND "length" 2 2) (("2" (ASSERT) (("2" (EXPAND "<") (("2" (EXPAND "restrict") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (TYPEPRED "n!1") (("3" (EXPAND "length" -1) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)) NIL (|nth| TERMINATION "list_props.nth(list_adt[list_props.T].cdr(list_props.l), (number_fields.-)(list_props.n, 1))" "NIL"))) (|append_TCC1| 0 (|append_TCC1-1| |nil| 3237052399 ("" (TCC :DEFS !) NIL NIL) ((|length| DEF-DECL "nat" |list_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL (|append| TERMINATION "list_props.append(list_props.y, list_props.l2)" "NIL"))) (|append_null| 0 (|append_null-1| |nil| 3237052399 ("" (INDUCT "l") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP) (("2" (EXPAND "append" +) (("2" (REPLACE -1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|list_induction| FORMULA-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |list_props| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)) NIL)) (|append_assoc| 0 (|append_assoc-1| |nil| 3237052399 ("" (INDUCT-AND-SIMPLIFY "l1") NIL NIL) ((|list| TYPE-DECL NIL |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (T FORMAL-TYPE-DECL NIL |list_props| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL)) NIL)) (|reverse_append| 0 (|reverse_append-1| |nil| 3237052399 ("" (INDUCT-AND-SIMPLIFY "l1") (("1" (REWRITE "append_null") NIL NIL) ("2" (REPLACE -1) (("2" (REWRITE "append_assoc" :DIR RL) NIL NIL)) NIL)) NIL) ((|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|append_assoc| FORMULA-DECL NIL |list_props| NIL) (|append_null| FORMULA-DECL NIL |list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|reverse| DEF-DECL "list[T]" |list_props| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (T FORMAL-TYPE-DECL NIL |list_props| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL)) NIL)) (|reverse_reverse| 0 (|reverse_reverse-1| |nil| 3237052399 ("" (INDUCT "l") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP) (("2" (EXPAND "reverse" 1 2) (("2" (REWRITE "reverse_append") (("2" (EXPAND "reverse" 1 1) (("2" (REPLACE -1) (("2" (EXPAND "reverse" 1 1) (("2" (EXPAND "append" 1 2) (("2" (EXPAND "append" 1 1) (("2" (EXPAND "append" 1 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|reverse_append| FORMULA-DECL NIL |list_props| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |list_props| NIL) (|reverse| DEF-DECL "list[T]" |list_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)) NIL)) (|length_append| 0 (|length_append-1| |nil| 3237052399 ("" (INDUCT-AND-SIMPLIFY "l1") NIL NIL) ((|list| TYPE-DECL NIL |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (T FORMAL-TYPE-DECL NIL |list_props| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) NIL)) (|length_reverse| 0 (|length_reverse-1| |nil| 3237052399 ("" (INDUCT-AND-SIMPLIFY "l") (("" (REWRITE "length_append") (("" (ASSERT) NIL NIL)) NIL)) NIL) ((|length_append| FORMULA-DECL NIL |list_props| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|reverse| DEF-DECL "list[T]" |list_props| NIL) (T FORMAL-TYPE-DECL NIL |list_props| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL)) NIL)) (|member_nth| 0 (|member_nth-1| |nil| 3726208660 ("" (INDUCT "l") (("1" (GRIND) NIL NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (EXPAND "member" +) (("2" (EXPAND "nth" +) (("2" (PROP) (("1" (INST 1 "0") (("1" (EXPAND "length") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (INST? -2) (("2" (ASSERT) (("2" (SKEEP) (("2" (INST 1 "i + 1") (("1" (ASSERT) NIL NIL) ("2" (EXPAND "length") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (LIFT-IF) (("3" (PROP) (("3" (INST?) (("3" (ASSERT) (("3" (INST 4 "i - 1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) NIL NIL (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) NIL (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |list_props| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)) SHOSTAK)) (|nth_append_TCC1| 0 (|nth_append_TCC1-1| |nil| 3728604386 ("" (SKEEP :PREDS? T) (("" (USE "length_append") (("" (ASSERT) NIL NIL)) NIL)) NIL) ((|length_append| FORMULA-DECL NIL |list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |list_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL)) SHOSTAK (|nth_append| SUBTYPE "(number_fields.-)(list_props.i, list_props.length(list_props.l1))" "below[length(l2)]"))) (|nth_append| 0 (|nth_append-1| |nil| 3726090057 ("" (INDUCT "l1") (("1" (GRIND) NIL NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (EXPAND "append" 1 1) (("2" (EXPAND "nth" 1 1) (("2" (EXPAND "length" 1) (("2" (EXPAND "nth" 1 2) (("2" (LIFT-IF) (("2" (PROP) (("1" (ASSERT) (("1" (LIFT-IF) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (INST?) (("1" (ASSERT) (("1" (LIFT-IF) (("1" (SPLIT 2) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKEEP :PREDS? T) (("3" (REWRITE "length_append") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|length_append| FORMULA-DECL NIL |list_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) NIL NIL NIL NIL (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |list_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)) SHOSTAK)) (|nth_reverse_TCC1| 0 (|nth_reverse_TCC1-1| |nil| 3737147970 ("" (SKEEP) (("" (REWRITE "length_reverse") (("" (ASSERT) NIL NIL)) NIL)) NIL) ((|length_reverse| FORMULA-DECL NIL |list_props| NIL) (T FORMAL-TYPE-DECL NIL |list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) SHOSTAK (|nth_reverse| SUBTYPE "list_props.i" "below[length(reverse(l1))]"))) (|nth_reverse_TCC2| 0 (|nth_reverse_TCC2-1| |nil| 3737147970 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) SHOSTAK (|nth_reverse| SUBTYPE "(number_fields.-)((number_fields.-)(list_props.length(list_props.l1), list_props.i), 1)" "below[length(l1)]"))) (|nth_reverse| 0 (|nth_reverse-1| |nil| 3743356767 ("" (INDUCT "l1") (("1" (SKEEP :PREDS? T) (("1" (EXPAND "length" -) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP :PREDS? T) (("2" (EXPAND "reverse" 1) (("2" (EXPAND "length" -1) (("2" (EXPAND "length" 1) (("2" (EXPAND "nth" 1 2) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (USE "nth_append") (("1" (REPLACE -1 :HIDE? T) (("1" (REWRITE "length_reverse") (("1" (ASSERT) (("1" (EXPAND "nth" +) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (INST -2 "i") (("1" (USE "nth_append") (("1" (REPLACE -1 :HIDE? T) (("1" (ASSERT) (("1" (LIFT-IF) (("1" (REWRITE "length_reverse") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKEEP) (("3" (REWRITE "length_reverse") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|nth_append| FORMULA-DECL NIL |list_props| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|length_reverse| FORMULA-DECL NIL |list_props| NIL) NIL NIL NIL (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |list_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|reverse| DEF-DECL "list[T]" |list_props| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)) SHOSTAK)) (|list_rep| 0 (|list_rep-1| |nil| 3237052399 ("" (ASSERT) NIL NIL) NIL NIL)) (|every_unc_eq_cur| 0 (|every_unc_eq_cur-1| |nil| 3726081149 ("" (INDUCT-AND-SIMPLIFY "l") NIL NIL) ((|list| TYPE-DECL NIL |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) NIL NIL (T FORMAL-TYPE-DECL NIL |list_props| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL)) SHOSTAK)) (|every_append| 0 (|every_append-1| |nil| 3237052399 ("" (INDUCT-AND-SIMPLIFY "l1") NIL NIL) ((|list| TYPE-DECL NIL |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL (|append| DEF-DECL "list[T]" |list_props| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |list_props| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL)) NIL)) (|every_disjunct1| 0 (|every_disjunct1-1| |nil| 3237052399 ("" (INDUCT-AND-SIMPLIFY "l") NIL NIL) ((|list| TYPE-DECL NIL |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |list_props| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL)) NIL)) (|every_disjunct2| 0 (|every_disjunct2-1| |nil| 3237052399 ("" (INDUCT-AND-SIMPLIFY "l") NIL NIL) ((|list| TYPE-DECL NIL |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |list_props| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL)) NIL)) (|every_conjunct| 0 (|every_conjunct-1| |nil| 3237052399 ("" (INDUCT-AND-SIMPLIFY "l") NIL NIL) ((|list| TYPE-DECL NIL |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |list_props| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL)) NIL)) (|every_conjunct2| 0 (|every_conjunct2-1| |nil| 3563249664 ("" (INDUCT "l") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP) (("2" (SKOSIMP) (("2" (EXPAND "every" 1) (("2" (INST? -1) (("2" (ASSERT) (("2" (EXPAND "every" (-2 -3)) (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|list_induction| FORMULA-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |list_props| NIL) NIL (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)) SHOSTAK)) (|every_member| 0 (|every_member-1| |nil| 3237052399 ("" (INDUCT-AND-SIMPLIFY "l") (("" (REWRITE "every_disjunct2") NIL NIL)) NIL) ((|every_disjunct2| FORMULA-DECL NIL |list_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL (|member| DEF-DECL "bool" |list_props| NIL) (T FORMAL-TYPE-DECL NIL |list_props| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL)) NIL)) (|every_nth| 0 (|every_nth-1| |nil| 3413400046 ("" (INDUCT "l") (("1" (EXPAND "every") (("1" (SKOSIMP*) (("1" (TYPEPRED "i!1") (("1" (EXPAND "length") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (EXPAND "every" 1) (("2" (EXPAND "nth" 1) (("2" (INST?) (("2" (GROUND) (("1" (SKOSIMP*) (("1" (INST - "i!1 - 1") (("1" (ASSERT) NIL NIL) ("2" (GROUND) (("2" (TYPEPRED "i!1") (("2" (EXPAND "length") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST - "0") (("2" (EXPAND "length") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (INST - "0") (("3" (EXPAND "length") (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (SKOSIMP*) (("4" (INST - "i!1 + 1") (("1" (ASSERT) NIL NIL) ("2" (EXPAND "length") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) NIL NIL NIL (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) NIL (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |list_props| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) NIL (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)) SHOSTAK)))(|map_props| (|map_list_composition| 0 (|map_list_composition-1| |nil| 3237052399 ("" (INDUCT "l") (("1" (SKOSIMP) (("1" (EXPAND "map") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (SKOSIMP) (("2" (INST?) (("2" (EXPAND "map" +) (("2" (REPLACE -1) (("2" (EXPAND "o" 1 2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|list_induction| FORMULA-DECL NIL |list_adt| NIL) (T1 FORMAL-TYPE-DECL NIL |map_props| NIL) (O CONST-DECL "T3" |function_props| NIL) NIL (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (T3 FORMAL-TYPE-DECL NIL |map_props| NIL) (T2 FORMAL-TYPE-DECL NIL |map_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)) NIL)) (|map_seq_composition| 0 (|map_seq_composition-1| |nil| 3237052399 ("" (SKOSIMP) (("" (EXPAND "map") (("" (APPLY-EXTENSIONALITY) (("" (HIDE 2) (("" (EXPAND "o") (("" (CASE "nth((LAMBDA (n: nat): f1!1(nth(s!1, n))), x!1) = f1!1(nth(s!1, x!1))") (("1" (REPLACE -1) (("1" (PROPAX) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "nth" 1 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (T3 FORMAL-TYPE-DECL NIL |map_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (O CONST-DECL "T3" |function_props| NIL) (T1 FORMAL-TYPE-DECL NIL |map_props| NIL) (|nth| CONST-DECL "T" |sequences| NIL) (|sequence| TYPE-EQ-DECL NIL |sequences| NIL) (T2 FORMAL-TYPE-DECL NIL |map_props| NIL)) NIL)))(|more_map_props| (|map_length| 0 (|map_length-1| |nil| 3332188055 ("" (INDUCT "l") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP*) (("2" (EXPAND "length" +) (("2" (EXPAND "map" 1) (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|list_induction| FORMULA-DECL NIL |list_adt| NIL) (T1 FORMAL-TYPE-DECL NIL |more_map_props| NIL) NIL (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (T2 FORMAL-TYPE-DECL NIL |more_map_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)) SHOSTAK)) (|map_nth_rw_TCC1| 0 (|map_nth_rw_TCC1-1| |nil| 3425150436 ("" (INDUCT "l") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP*) (("2" (EXPAND "map" 1) (("2" (EXPAND "length" 1) (("2" (TYPEPRED "i!1") (("2" (EXPAND "length" -1) (("2" (INST -2 "f!1" "i!1 - 1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) NIL NIL NIL (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (T1 FORMAL-TYPE-DECL NIL |more_map_props| NIL) NIL (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (T2 FORMAL-TYPE-DECL NIL |more_map_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)) SHOSTAK (|map_nth_rw| SUBTYPE "more_map_props.i" "below[length[T2](map[T1, T2](f)(l))]"))) (|map_nth_rw| 0 (|map_nth_rw-1| |nil| 3413399995 ("" (INDUCT "l") (("1" (SKOSIMP*) (("1" (TYPEPRED "i!1") (("1" (EXPAND "length") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST?) (("2" (INST - "i!1-1") (("1" (EXPAND "map" 1) (("1" (EXPAND "nth" 1) (("1" (LIFT-IF) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (SPLIT) (("1" (ASSERT) (("1" (CASE "i!1=0") (("1" (REPLACE -1) (("1" (EXPAND "map") (("1" (EXPAND "nth") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (TYPEPRED "i!1") (("2" (ASSERT) (("2" (EXPAND "length" -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) (("3" (REWRITE "map_length") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|map_length| FORMULA-DECL NIL |more_map_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) NIL NIL NIL (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (T1 FORMAL-TYPE-DECL NIL |more_map_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T2 FORMAL-TYPE-DECL NIL |more_map_props| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) NIL (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)) SHOSTAK)) (|map_unc_eq_cur| 0 (|map_unc_eq_cur-1| |nil| 3726088287 ("" (INDUCT-AND-SIMPLIFY "l") NIL NIL) ((|list| TYPE-DECL NIL |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T2 FORMAL-TYPE-DECL NIL |more_map_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) NIL NIL (T1 FORMAL-TYPE-DECL NIL |more_map_props| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL)) SHOSTAK)) (|every_map| 0 (|every_map-1| |nil| 3726087213 ("" (INDUCT "l") (("1" (GRIND) NIL NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (EXPAND "every" +) (("2" (LIFT-IF) (("2" (EXPAND "map" 1 1) (("2" (IFF) (("2" (PROP) (("1" (EXPAND "map" -1) (("1" (EXPAND "o" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (EXPAND "map" -2) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (EXPAND "map" +) (("3" (EXPAND "o" -1) (("3" (PROPAX) NIL NIL)) NIL)) NIL) ("4" (EXPAND "map" +) (("4" (INST?) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|list_induction| FORMULA-DECL NIL |list_adt| NIL) (T1 FORMAL-TYPE-DECL NIL |more_map_props| NIL) (O CONST-DECL "T3" |function_props| NIL) NIL NIL (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (T2 FORMAL-TYPE-DECL NIL |more_map_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)) SHOSTAK)) (|map_append| 0 (|map_append-1| |nil| 3728789957 ("" (INDUCT "l1") (("1" (GRIND) NIL NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (EXPAND "append" 1 1) (("2" (EXPAND "map" 1 1) (("2" (EXPAND "map" 1 2) (("2" (EXPAND "append" 1 2) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|list_induction| FORMULA-DECL NIL |list_adt| NIL) (T1 FORMAL-TYPE-DECL NIL |more_map_props| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) NIL (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (T2 FORMAL-TYPE-DECL NIL |more_map_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)) SHOSTAK)))(|filters| (|filter_TCC1| 0 (|filter_TCC1-1| |nil| 3237052399 ("" (TCC :DEFS !) NIL NIL) ((|length| DEF-DECL "nat" |list_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL (|filter| TERMINATION "filters.filter(filters.y, filters.p)" "NIL"))) (|filter_TCC2| 0 (|filter_TCC2-1| |nil| 3237052399 ("" (SKOSIMP) (("" (REPLACE -1) (("" (EXPAND "length" 2 2) (("" (EXPAND "<") (("" (ASSERT) (("" (EXPAND "restrict") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL)) NIL (|filter| TERMINATION "filters.filter(filters.y, filters.p)" "NIL"))))(|list2finseq| (|finseq2list_rec_TCC1| 0 (|finseq2list_rec_TCC1-1| |nil| 3237052399 ("" (TCC :DEFS EXPLICIT) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (T FORMAL-TYPE-DECL NIL |list2finseq| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|finseq2list_rec| SUBTYPE "(number_fields.-)(length(list2finseq.fs), list2finseq.n)" "below[fs`length]"))) (|finseq2list_rec_TCC2| 0 (|finseq2list_rec_TCC2-1| |nil| 3237052399 ("" (TCC :DEFS !) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (T FORMAL-TYPE-DECL NIL |list2finseq| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|finseq2list_rec| SUBTYPE "(number_fields.-)(list2finseq.n, 1)" "{n: naturalnumbers.nat | reals.<=(n, length(list2finseq.fs))}"))) (|finseq2list_rec_TCC3| 0 (|finseq2list_rec_TCC3-1| |nil| 3237052399 ("" (TCC :DEFS !) NIL NIL) NIL NIL (|finseq2list_rec| TERMINATION "list2finseq.finseq2list_rec(list2finseq.fs, (number_fields.-)(list2finseq.n, 1))" "NIL"))) (|finseq2list_TCC1| 0 (|finseq2list_TCC1-1| |nil| 3237052399 ("" (TCC :DEFS EXPLICIT) NIL NIL) NIL NIL (|finseq2list| SUBTYPE "length(list2finseq.fs)" "{n: naturalnumbers.nat | reals.<=(n, length(list2finseq.fs))}"))) (|finseq2list_length_rec| 0 (|finseq2list_length_rec-2| "" 3883178417 ("" (INDUCT "n") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL) NIL SHOSTAK) (|finseq2list_length_rec-1| |nil| 3703275952 ("" (INDUCT N) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|finseq2list_rec| DEF-DECL "list[T]" |list2finseq| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (<= CONST-DECL "bool" |reals| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (T FORMAL-TYPE-DECL NIL |list2finseq| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK)) (|finseq2list_length| 0 (|finseq2list_length-1| |nil| 3726081197 ("" (SKEEP) (("" (EXPAND "finseq2list") (("" (USE "finseq2list_length_rec") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|finseq2list| CONST-DECL "list[T]" |list2finseq| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|finseq2list_length_rec| FORMULA-DECL NIL |list2finseq| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (T FORMAL-TYPE-DECL NIL |list2finseq| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)) SHOSTAK)) (|finseq2list_nth_rec_TCC1| 0 (|finseq2list_nth_rec_TCC1-1| |nil| 3717231008 ("" (INDUCT "n") (("1" (GRIND) NIL NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (EXPAND "finseq2list_rec" +) (("2" (EXPAND "length" 1 1) (("2" (INST -1 "fs" "i - 1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) NIL (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|finseq2list_rec| DEF-DECL "list[T]" |list2finseq| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (<= CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (T FORMAL-TYPE-DECL NIL |list2finseq| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK (|finseq2list_nth_rec| SUBTYPE "list2finseq.i" "below[length[T](finseq2list_rec(fs, n))]"))) (|finseq2list_nth_rec_TCC2| 0 (|finseq2list_nth_rec_TCC2-1| |nil| 3717231008 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL)) SHOSTAK (|finseq2list_nth_rec| SUBTYPE "(number_fields.+)((number_fields.-)(list2finseq.fs`length, list2finseq.n), list2finseq.i)" "below[fs`length]"))) (|finseq2list_nth_rec| 0 (|finseq2list_nth_rec-1| |nil| 3728793728 ("" (INDUCT "n") (("1" (GRIND) NIL NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (EXPAND "finseq2list_rec" 1) (("2" (EXPAND "nth" 1) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (PROP) (("2" (INST -1 "fs" "i - 1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (ASSERT) NIL NIL)) NIL) ("4" (HIDE 2) (("4" (INDUCT "n") (("1" (GRIND) NIL NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (EXPAND "finseq2list_rec" 1) (("2" (EXPAND "length" 1 1) (("2" (INST -1 "fs" "i - 1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) NIL (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (T FORMAL-TYPE-DECL NIL |list2finseq| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|finseq2list_rec| DEF-DECL "list[T]" |list2finseq| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK)) (|finseq2list_nth_TCC1| 0 (|finseq2list_nth_TCC1-1| |nil| 3717231008 ("" (SKEEP) (("" (EXPAND "finseq2list") (("" (LEMMA "finseq2list_nth_rec_TCC1") (("" (INST -1 "fs" _ "fs`length") (("" (TYPEPRED "i") (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|finseq2list| CONST-DECL "list[T]" |list2finseq| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (T FORMAL-TYPE-DECL NIL |list2finseq| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|finseq2list_nth_rec_TCC1| SUBTYPE-TCC NIL |list2finseq| NIL)) SHOSTAK (|finseq2list_nth| SUBTYPE "list2finseq.i" "below[length[T](finseq2list(fs))]"))) (|finseq2list_nth| 0 (|finseq2list_nth-1| |nil| 3728794623 ("" (SKEEP) (("" (EXPAND "finseq2list") (("" (USE "finseq2list_nth_rec") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|finseq2list| CONST-DECL "list[T]" |list2finseq| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|finseq2list_nth_rec| FORMULA-DECL NIL |list2finseq| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (T FORMAL-TYPE-DECL NIL |list2finseq| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) SHOSTAK)) (|list2finseq_finseq2list| 0 (|list2finseq_finseq2list-1| |nil| 3728795134 ("" (SKEEP) (("" (APPLY-EXTENSIONALITY :HIDE? T) (("1" (EXPAND "list2finseq") (("1" (USE "finseq2list_length") NIL NIL)) NIL) ("2" (APPLY-EXTENSIONALITY :HIDE? T) (("2" (EXPAND "list2finseq") (("2" (USE "finseq2list_nth") NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (T FORMAL-TYPE-DECL NIL |list2finseq| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|finseq2list| CONST-DECL "list[T]" |list2finseq| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|finseq2list_length| FORMULA-DECL NIL |list2finseq| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|finseq2list_nth| FORMULA-DECL NIL |list2finseq| NIL) (< CONST-DECL "bool" |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK)) (|list2finseq_inj| 0 (|list2finseq_inj-2| "" 3883178565 ("" (INDUCT "l1") (("1" (SKEEP) (("1" (IFF) (("1" (SPLIT) (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (REPLACE -1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP*) (("2" (IFF) (("2" (SPLIT) (("1" (FLATTEN) (("1" (DECOMPOSE-EQUALITY +) (("1" (CASE-REPLACE "car(l2) = list2finseq(l2)`seq(0)") (("1" (REPLACE -2 :DIR RL) (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)) NIL) ("2" (INST -2 "cdr(l2)") (("2" (REPLACE -2 :DIR RL) (("2" (DELETE -2) (("2" (DECOMPOSE-EQUALITY) (("1" (CASE "cons?(l2)") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (CASE "cons?(l2)") (("1" (DECOMPOSE-EQUALITY) (("1" (EXPAND "list2finseq") (("1" (EXPAND "nth" -) (("1" (FLATTEN) (("1" (GRIND) (("1" (DECOMPOSE-EQUALITY) (("1" (INST -1 "x!1 + 1") (("1" (GRIND) NIL NIL) ("2" (GRIND) (("2" (TYPEPRED "x!1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REPLACE -1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|list2finseq_inj-1| |nil| 3728832271 ("" (INDUCT L1) (("1" (SKEEP) (("1" (IFF) (("1" (SPLIT) (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (REPLACE -1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP*) (("2" (IFF) (("2" (SPLIT) (("1" (FLATTEN) (("1" (DECOMPOSE-EQUALITY +) (("1" (CASE-REPLACE "car(l2) = list2finseq(l2)`seq(0)") (("1" (REPLACE -2 :DIR RL) (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)) NIL) ("2" (INST -2 "cdr(l2)") (("2" (REPLACE -2 :DIR RL) (("2" (DELETE -2) (("2" (DECOMPOSE-EQUALITY) (("1" (CASE "cons?(l2)") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (CASE "cons?(l2)") (("1" (DECOMPOSE-EQUALITY) (("1" (EXPAND LIST2FINSEQ) (("1" (EXPAND NTH -) (("1" (FLATTEN) (("1" (GRIND) (("1" (DECOMPOSE-EQUALITY) (("1" (INST -1 "x!1 + 1") (("1" (GRIND) NIL NIL) ("2" (GRIND) (("2" (TYPEPRED "x!1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REPLACE -1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((TRUE CONST-DECL "bool" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) NIL (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|list_cons_extensionality| FORMULA-DECL NIL |list_adt| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) NIL NIL (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |list2finseq| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)) SHOSTAK)) (|finseq2list_list2finseq| 0 (|finseq2list_list2finseq-1| |nil| 3728842466 ("" (SKEEP) (("" (CASE "list2finseq(finseq2list(list2finseq(l))) = list2finseq(l)") (("1" (REWRITE LIST2FINSEQ_INJ) NIL NIL) ("2" (REWRITE LIST2FINSEQ_FINSEQ2LIST) NIL NIL)) NIL)) NIL) ((|finseq2list| CONST-DECL "list[T]" |list2finseq| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (T FORMAL-TYPE-DECL NIL |list2finseq| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|list2finseq_inj| FORMULA-DECL NIL |list2finseq| NIL) (|list2finseq_finseq2list| FORMULA-DECL NIL |list2finseq| NIL)) SHOSTAK)) (|fseq_lem| 0 (|fseq_lem-1| |nil| 3835459233 ("" (INDUCT "l1") (("1" (INDUCT "l2") (("1" (GRIND) NIL NIL)) NIL) ("2" (SKOSIMP) (("2" (SKOSIMP) (("2" (INST -1 "cdr(l2!1)") (("1" (IFF) (("1" (PROP) (("1" (ASSERT) (("1" (APPLY-EXTENSIONALITY) (("1" (EXPAND "list2finseq" -1) (("1" (FLATTEN) (("1" (DECOMPOSE-EQUALITY -2) (("1" (INST -1 "0") (("1" (EXPAND "nth") (("1" (PROPAX) NIL NIL)) NIL) ("2" (EXPAND "length" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) (("3" (EXPAND "list2finseq" -1) (("3" (EXPAND "list2finseq" 3) (("3" (FLATTEN) (("3" (SPLIT) (("1" (EXPAND "length" -1) (("1" (ASSERT) (("1" (LIFT-IF) (("1" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (APPLY-EXTENSIONALITY) (("1" (DECOMPOSE-EQUALITY -2) (("1" (INST -1 "x!1+1") (("1" (EXPAND "nth" -1) (("1" (PROPAX) NIL NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "length" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (EXPAND "length" -1) (("2" (LIFT-IF) (("2" (SPLIT -1) (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (IFF) (("2" (PROP) (("1" (EXPAND "list2finseq") (("1" (FLATTEN) (("1" (EXPAND "length" -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) NIL (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|list_cons_extensionality| FORMULA-DECL NIL |list_adt| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) NIL NIL (|nth| DEF-DECL "T" |list_props| NIL) (< CONST-DECL "bool" |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |list2finseq| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)) SHOSTAK)) (|cons_lem| 0 (|cons_lem-1| |nil| 3835459706 ("" (GRIND :IF-MATCH NIL) (("1" (DECOMPOSE-EQUALITY -) NIL NIL) ("2" (DECOMPOSE-EQUALITY -) NIL NIL)) NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |list2finseq| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)) SHOSTAK)))(|list2set| (|list2set_TCC1| 0 (|list2set_TCC1-1| |nil| 3237052399 ("" (TCC :DEFS !) NIL NIL) ((|length| DEF-DECL "nat" |list_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL (|list2set| TERMINATION "list2set.list2set(list2set.y)" "NIL"))))(|disjointness| (|pairwise_disjoint?_TCC1| 0 (|pairwise_disjoint?_TCC1-1| |nil| 3237052399 ("" (TERMINATION-TCC) NIL NIL) ((|length| DEF-DECL "nat" |list_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL (|pairwise_disjoint?| TERMINATION "disjointness.pairwise_disjoint?(disjointness.y)" "NIL"))))(|character|)(|strings| (|fseq_lem| 0 (|fseq_lem-1| |nil| 3880428799 ("" (SKEEP) (("" (REWRITE "list2finseq_inj[char]") NIL NIL)) NIL) ((|list2finseq_inj| FORMULA-DECL NIL |list2finseq| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|character| TYPE-DECL NIL |character_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL)) SHOSTAK)) (|cons_lem| 0 (|cons_lem-1| |nil| 3880430440 ("" (SKEEP) (("" (IFF) (("" (GROUND) (("1" (CASE-REPLACE "car(cons(c1, l1)) = car(cons(c2, l2))") (("1" (ASSERT) NIL NIL) ("2" (REPLACE -1) (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (CASE-REPLACE "cdr(cons(c1, l1)) = cdr(cons(c2, l2))") (("1" (ASSERT) NIL NIL) ("2" (REPLACE -1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|character| TYPE-DECL NIL |character_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)) SHOSTAK)) (|char_lem| 0 (|char_lem-1| |nil| 3237052399 ("" (GRIND :IF-MATCH NIL) (("" (APPLY-EXTENSIONALITY :HIDE? T) NIL NIL)) NIL) ((|character_char_extensionality| FORMULA-DECL NIL |character_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|character| TYPE-DECL NIL |character_adt| NIL) (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL)) NIL)))(|gen_strings| (|length_empty| 0 (|length_empty-1| |nil| 3835500565 ("" (GRIND) NIL NIL) ((|empty| CONST-DECL "string" |gen_strings| NIL)) SHOSTAK)) (|length_unit| 0 (|length_unit-1| |nil| 3835500580 ("" (GRIND) NIL NIL) ((|unit| CONST-DECL "string" |gen_strings| NIL)) SHOSTAK)) (|unit_ax_TCC1| 0 (|unit_ax_TCC1-1| |nil| 3820375898 ("" (SKEEP) (("" (REWRITE "length_unit") (("" (ASSERT) NIL NIL)) NIL)) NIL) ((|length_unit| FORMULA-DECL NIL |gen_strings| NIL) (|character| TYPE-DECL NIL |character_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL (|unit_ax| SUBTYPE "0" "below(length(gen_strings.unit(gen_strings.c)))"))) (|unit_ax| 0 (|unit_ax-1| |nil| 3835500600 ("" (GRIND) NIL NIL) ((|unit| CONST-DECL "string" |gen_strings| NIL) (|get| CONST-DECL "char" |gen_strings| NIL)) SHOSTAK)) (|extensionality_TCC1| 0 (|extensionality_TCC1-1| |nil| 3820375898 ("" (SUBTYPE-TCC) NIL NIL) ((|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|string| TYPE-EQ-DECL NIL |strings| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL) (|character| TYPE-DECL NIL |character_adt| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (< CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL (|extensionality| SUBTYPE "gen_strings.i" "below(length(gen_strings.s2))"))) (|extensionality| 0 (|extensionality-1| |nil| 3835500627 ("" (GRIND) (("" (APPLY-EXTENSIONALITY :HIDE? T) (("" (APPLY-EXTENSIONALITY :HIDE? T) NIL NIL)) NIL)) NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|character| TYPE-DECL NIL |character_adt| NIL) (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|string| TYPE-EQ-DECL NIL |strings| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|get| CONST-DECL "char" |gen_strings| NIL)) SHOSTAK)) (|length_concat| 0 (|length_concat-1| |nil| 3835502626 ("" (GRIND) NIL NIL) ((O CONST-DECL "finseq" |finite_sequences| NIL)) SHOSTAK)) (|char_concat_TCC1| 0 (|char_concat_TCC1-1| |nil| 3820376026 ("" (SKEEP :PREDS? T) (("" (REWRITE "length_concat") NIL NIL)) NIL) ((|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|length_concat| FORMULA-DECL NIL |gen_strings| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|character| TYPE-DECL NIL |character_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|string| TYPE-EQ-DECL NIL |strings| NIL)) NIL (|char_concat| SUBTYPE "gen_strings.i" "below(length(finite_sequences[char].o(gen_strings.s1, gen_strings.s2)))"))) (|char_concat_TCC2| 0 (|char_concat_TCC2-1| |nil| 3820376026 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|character| TYPE-DECL NIL |character_adt| NIL) (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|string| TYPE-EQ-DECL NIL |strings| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL (|char_concat| SUBTYPE "(number_fields.-)(gen_strings.i, length(gen_strings.s1))" "below(length(gen_strings.s2))"))) (|char_concat| 0 (|char_concat-1| |nil| 3835502648 ("" (GRIND) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|get| CONST-DECL "char" |gen_strings| NIL) (O CONST-DECL "finseq" |finite_sequences| NIL)) SHOSTAK)) (|strdiff_rec_TCC1| 0 (|strdiff_rec_TCC1-1| |nil| 3835419903 ("" (SUBTYPE-TCC) NIL NIL) ((|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs| NIL)) SHOSTAK (|strdiff_rec| SUBTYPE "(number_fields.-)(real_defs.min(length(gen_strings.s1), length(gen_strings.s2)), gen_strings.i)" "naturalnumber"))) (|strdiff_rec_TCC2| 0 (|strdiff_rec_TCC2-1| |nil| 3835419903 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|character| TYPE-DECL NIL |character_adt| NIL) (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|string| TYPE-EQ-DECL NIL |strings| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) SHOSTAK (|strdiff_rec| SUBTYPE "gen_strings.i" "below(length(gen_strings.s1))"))) (|strdiff_rec_TCC3| 0 (|strdiff_rec_TCC3-1| |nil| 3835419903 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|character| TYPE-DECL NIL |character_adt| NIL) (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|string| TYPE-EQ-DECL NIL |strings| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) SHOSTAK (|strdiff_rec| SUBTYPE "gen_strings.i" "below(length(gen_strings.s2))"))) (|strdiff_rec_TCC4| 0 (|strdiff_rec_TCC4-1| |nil| 3835419903 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|character| TYPE-DECL NIL |character_adt| NIL) (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|string| TYPE-EQ-DECL NIL |strings| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|get| CONST-DECL "char" |gen_strings| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)) SHOSTAK (|strdiff_rec| SUBTYPE "(number_fields.+)(gen_strings.i, 1)" "upto(real_defs.min(length(gen_strings.s1), length(gen_strings.s2)))"))) (|strdiff_rec_TCC5| 0 (|strdiff_rec_TCC5-1| |nil| 3835419903 ("" (TERMINATION-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|character| TYPE-DECL NIL |character_adt| NIL) (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|string| TYPE-EQ-DECL NIL |strings| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|get| CONST-DECL "char" |gen_strings| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)) SHOSTAK (|strdiff_rec| TERMINATION "gen_strings.strdiff_rec(gen_strings.s1, gen_strings.s2, (number_fields.+)(gen_strings.i, 1))" "NIL"))) (|strdiff_TCC1| 0 (|strdiff_TCC1-1| |nil| 3835419903 ("" (SUBTYPE-TCC) NIL NIL) ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) SHOSTAK (|strdiff| SUBTYPE "0" "upto(real_defs.min(length(gen_strings.s1), length(gen_strings.s2)))"))) (|strdiff_eq_TCC1| 0 (|strdiff_eq_TCC1-1| |nil| 3820376026 ("" (SKEEP :PREDS? T) (("" (TYPEPRED "strdiff(s1, s2)") (("" (GRIND) NIL NIL)) NIL)) NIL) ((|strdiff| CONST-DECL "upto(min(length(s1), length(s2)))" |gen_strings| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|string| TYPE-EQ-DECL NIL |strings| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL) (|character| TYPE-DECL NIL |character_adt| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|get| CONST-DECL "char" |gen_strings| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL (|strdiff_eq| SUBTYPE "gen_strings.j" "below(length(gen_strings.s1))"))) (|strdiff_eq_TCC2| 0 (|strdiff_eq_TCC2-1| |nil| 3820376026 ("" (SKEEP :PREDS? T) (("" (TYPEPRED "strdiff(s1, s2)") (("" (GRIND) NIL NIL)) NIL)) NIL) ((|strdiff| CONST-DECL "upto(min(length(s1), length(s2)))" |gen_strings| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|string| TYPE-EQ-DECL NIL |strings| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL) (|character| TYPE-DECL NIL |character_adt| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|get| CONST-DECL "char" |gen_strings| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL (|strdiff_eq| SUBTYPE "gen_strings.j" "below(length(gen_strings.s2))"))) (|strdiff_eq| 0 (|strdiff_eq-1| |nil| 3835469973 ("" (SKEEP :PREDS? T) (("" (CASE "FORALL (i: upto(min(length(s1), length(s2)))):
       i < strdiff_rec(s1, s2, i) => get(s1, i) = get(s2, i)") (("1" (INST?) (("1" (ASSERT) (("1" (EXPAND "strdiff") (("1" (CASE "LET i = strdiff_rec(s1, s2, 0)
      IN FORALL (k: below(i)): strdiff_rec(s1, s2, k) = i") (("1" (ASSERT) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (INDUCT "k") (("2" (SKEEP :PREDS? T) (("2" (EXPAND "strdiff_rec" -3 1) (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (SKEEP) (("2" (EXPAND "strdiff_rec") (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKEEP :PREDS? T) (("3" (TYPEPRED "strdiff_rec(s1, s2, i)") (("3" (GRIND) NIL NIL)) NIL)) NIL) ("4" (GRIND) NIL NIL)) NIL)) NIL) ((|get| CONST-DECL "char" |gen_strings| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|strdiff_rec| DEF-DECL "upto(min(length(s1), length(s2)))" |gen_strings| NIL) (< CONST-DECL "bool" |reals| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|string| TYPE-EQ-DECL NIL |strings| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL) (|character| TYPE-DECL NIL |character_adt| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|below_induction| FORMULA-DECL NIL |bounded_nat_inductions| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|strdiff| CONST-DECL "upto(min(length(s1), length(s2)))" |gen_strings| NIL) NIL NIL NIL (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)) SHOSTAK)) (|strdiff_neq_TCC1| 0 (|strdiff_neq_TCC1-1| |nil| 3820376026 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|character| TYPE-DECL NIL |character_adt| NIL) (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|string| TYPE-EQ-DECL NIL |strings| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|strdiff| CONST-DECL "upto(min(length(s1), length(s2)))" |gen_strings| NIL)) NIL (|strdiff_neq| SUBTYPE "gen_strings.i" "below(length(gen_strings.s1))"))) (|strdiff_neq_TCC2| 0 (|strdiff_neq_TCC2-1| |nil| 3820376026 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|character| TYPE-DECL NIL |character_adt| NIL) (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|string| TYPE-EQ-DECL NIL |strings| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|strdiff| CONST-DECL "upto(min(length(s1), length(s2)))" |gen_strings| NIL)) NIL (|strdiff_neq| SUBTYPE "gen_strings.i" "below(length(gen_strings.s2))"))) (|strdiff_neq| 0 (|strdiff_neq-1| |nil| 3835643325 ("" (SKEEP) (("" (BETA) (("" (NAME-REPLACE "i" "strdiff(s1, s2)") (("" (FLATTEN) (("" (EXPAND "get") (("" (REVEAL -1) (("" (EXPAND "strdiff") (("" (CASE "FORALL (i: upto(min(length(s1), length(s2)))):
       i = strdiff_rec(s1, s2, 0) =>
         i = strdiff_rec(s1, s2, i)") (("1" (INST -1 "i") (("1" (ASSERT) (("1" (EXPAND "strdiff_rec" -1) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (EXPAND "get") (("1" (CASE "FORALL (i: upto(min(length(s1), length(s2)))):
       i <= strdiff_rec(s1, s2, i)") (("1" (INST -1 "i+1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (HIDE-ALL-BUT (-3 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (MEASURE-INDUCT+ "min(length(s1), length(s2)) - i" ("i")) (("2" (EXPAND "strdiff_rec" 1) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (GROUND) (("2" (INST -2 "x!1 + 1") (("1" (ASSERT) NIL NIL) ("2" (HIDE 4) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "i") (("1" (FLATTEN) NIL NIL) ("2" (SKEEP) (("2" (CASE "LET i = strdiff_rec(s1, s2, 0)
      IN FORALL (k: below(i)): strdiff_rec(s1, s2, k) = i") (("1" (LET-NAME-REPLACE) (("1" (GROUND) (("1" (REPLACE -2 :DIR RL) (("1" (INST -3 "jt") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (REPLACE -1 :DIR RL) (("2" (INST -2 "jt") (("2" (ASSERT) (("2" (EXPAND "strdiff_rec" -2) (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (REPLACE -1 :ACTUALS? T) (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-1 1)) (("3" (TYPEPRED "strdiff_rec(s1, s2, 0)") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (BETA) (("2" (INDUCT "k") (("1" (SKEEP :PREDS? T) (("1" (EXPAND "strdiff_rec" -3 1) (("1" (LIFT-IF) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKEEP :PREDS? T) (("2" (TYPEPRED "strdiff_rec(s1, s2, 0)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|strdiff_rec| DEF-DECL "upto(min(length(s1), length(s2)))" |gen_strings| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) NIL (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (< CONST-DECL "bool" |reals| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) NIL NIL NIL (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|upto_induction| FORMULA-DECL NIL |bounded_nat_inductions| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) NIL (|below_induction| FORMULA-DECL NIL |bounded_nat_inductions| NIL) (|get| CONST-DECL "char" |gen_strings| NIL) (|strdiff| CONST-DECL "upto(min(length(s1), length(s2)))" |gen_strings| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|string| TYPE-EQ-DECL NIL |strings| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL) (|character| TYPE-DECL NIL |character_adt| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK)) (|strcmp_TCC1| 0 (|strcmp_TCC1-1| |nil| 3820376026 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|character| TYPE-DECL NIL |character_adt| NIL) (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|string| TYPE-EQ-DECL NIL |strings| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|get| CONST-DECL "char" |gen_strings| NIL) (|strdiff| CONST-DECL "upto(min(length(s1), length(s2)))" |gen_strings| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)) NIL (|strcmp| SUBTYPE "gen_strings.i" "below(length(gen_strings.s1))"))) (|strcmp_TCC2| 0 (|strcmp_TCC2-1| |nil| 3835419903 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|character| TYPE-DECL NIL |character_adt| NIL) (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|string| TYPE-EQ-DECL NIL |strings| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|strdiff| CONST-DECL "upto(min(length(s1), length(s2)))" |gen_strings| NIL) (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs| NIL)) SHOSTAK (|strcmp| SUBTYPE "gen_strings.i" "below(length(gen_strings.s2))"))) (|strcmp_eq| 0 (|strcmp_eq-1| |nil| 3835719256 ("" (SKEEP) (("" (EXPAND "strcmp") (("" (LIFT-IF) (("" (GROUND) (("" (APPLY-EXTENSIONALITY 3 :HIDE? T) (("" (APPLY-EXTENSIONALITY :HIDE? T) (("" (LEMMA "strdiff_eq") (("" (EXPAND "get") (("" (INST?) (("" (ASSERT) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|strcmp| CONST-DECL "subrange(-1, 1)" |gen_strings| NIL) (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|get| CONST-DECL "char" |gen_strings| NIL) NIL NIL NIL (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|strdiff| CONST-DECL "upto(min(length(s1), length(s2)))" |gen_strings| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|strdiff_eq| FORMULA-DECL NIL |gen_strings| NIL) (|string| TYPE-EQ-DECL NIL |strings| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|character| TYPE-DECL NIL |character_adt| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)) SHOSTAK)) (|strcmp_lt| 0 (|strcmp_lt-1| |nil| 3835719717 ("" (SKEEP) (("" (LET-NAME-REPLACE) (("" (EXPAND "strcmp") (("" (LIFT-IF) (("" (ASSERT) (("" (GROUND) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|character| TYPE-DECL NIL |character_adt| NIL) (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|string| TYPE-EQ-DECL NIL |strings| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|strdiff| CONST-DECL "upto(min(length(s1), length(s2)))" |gen_strings| NIL) (|get| CONST-DECL "char" |gen_strings| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|code| ADT-ACCESSOR-DECL "[character -> below[0x110000]]" |character_adt| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) NIL (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|strcmp| CONST-DECL "subrange(-1, 1)" |gen_strings| NIL)) SHOSTAK)) (|strcmp_gt| 0 (|strcmp_gt-1| |nil| 3835720023 ("" (SKEEP) (("" (LET-NAME-REPLACE) (("" (EXPAND "strcmp") (("" (LIFT-IF) (("" (ASSERT) (("" (SPLIT -2) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) (("2" (REPLACE -2 :DIR RL) (("2" (CASE "code(get(s2, i)) = code(get(s1, i))") (("1" (LEMMA "strdiff_neq") (("1" (INST?) (("1" (LET-NAME-REPLACE) (("1" (REPLACE -1 :HIDE? T) (("1" (REPLACE -4 :DIR RL) (("1" (ASSERT) (("1" (LEMMA "character_char_extensionality") (("1" (EXPAND "get" -3) (("1" (INST?) (("1" (EXPAND "get") (("1" (REPLACE -3) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|character| TYPE-DECL NIL |character_adt| NIL) (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|string| TYPE-EQ-DECL NIL |strings| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|strdiff| CONST-DECL "upto(min(length(s1), length(s2)))" |gen_strings| NIL) (|get| CONST-DECL "char" |gen_strings| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|code| ADT-ACCESSOR-DECL "[character -> below[0x110000]]" |character_adt| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) NIL (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|character_char_extensionality| FORMULA-DECL NIL |character_adt| NIL) NIL (/= CONST-DECL "boolean" |notequal| NIL) (|strdiff_neq| FORMULA-DECL NIL |gen_strings| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|strcmp| CONST-DECL "subrange(-1, 1)" |gen_strings| NIL)) SHOSTAK)) (|prefix_TCC1| 0 (|prefix_TCC1-1| |nil| 3835419904 ("" (SUBTYPE-TCC) NIL NIL) NIL SHOSTAK (|prefix| SUBTYPE "gen_strings.j" "below(length(gen_strings.s))"))) (|length_prefix| 0 (|length_prefix-1| |nil| 3835721909 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|character| TYPE-DECL NIL |character_adt| NIL) (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|string| TYPE-EQ-DECL NIL |strings| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|get| CONST-DECL "char" |gen_strings| NIL) (|prefix| CONST-DECL "string" |gen_strings| NIL)) SHOSTAK)) (|prefix_ax_TCC1| 0 (|prefix_ax_TCC1-1| |nil| 3820376026 ("" (SKEEP :PREDS? T) (("" (REWRITE "length_prefix") NIL NIL)) NIL) ((|length_prefix| FORMULA-DECL NIL |gen_strings| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|character| TYPE-DECL NIL |character_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|string| TYPE-EQ-DECL NIL |strings| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)) NIL (|prefix_ax| SUBTYPE "gen_strings.j" "below(length(gen_strings.prefix(gen_strings.s, gen_strings.i)))"))) (|prefix_ax_TCC2| 0 (|prefix_ax_TCC2-1| |nil| 3820376026 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|prefix_ax| SUBTYPE "gen_strings.j" "below(length(gen_strings.s))"))) (|prefix_ax| 0 (|prefix_ax-1| |nil| 3835721931 ("" (GRIND) NIL NIL) ((|get| CONST-DECL "char" |gen_strings| NIL) (|prefix| CONST-DECL "string" |gen_strings| NIL)) SHOSTAK)) (|suffix_TCC1| 0 (|suffix_TCC2-1| |nil| 3835419904 ("" (SUBTYPE-TCC) (("1" (POSTPONE) NIL NIL) ("2" (POSTPONE) NIL NIL)) NIL) NIL SHOSTAK (|suffix| SUBTYPE "(number_fields.-)(length(gen_strings.s), gen_strings.i)" "nat"))) (|suffix_TCC2| 0 (|suffix_TCC1-1| |nil| 3835419904 ("" (SUBTYPE-TCC) NIL NIL) NIL SHOSTAK (|suffix| SUBTYPE "(number_fields.+)(gen_strings.i, gen_strings.j)" "below(length(gen_strings.s))"))) (|length_suffix| 0 (|length_suffix-1| |nil| 3835722960 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|character| TYPE-DECL NIL |character_adt| NIL) (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|string| TYPE-EQ-DECL NIL |strings| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|suffix| CONST-DECL "string" |gen_strings| NIL) (|get| CONST-DECL "char" |gen_strings| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK)) (|suffix_ax_TCC1| 0 (|suffix_ax_TCC1-1| |nil| 3820376026 ("" (SKEEP :PREDS? T) (("" (REWRITE "length_suffix") NIL NIL)) NIL) ((|length_suffix| FORMULA-DECL NIL |gen_strings| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|character| TYPE-DECL NIL |character_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|string| TYPE-EQ-DECL NIL |strings| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|suffix_ax| SUBTYPE "gen_strings.j" "below(length(gen_strings.suffix(gen_strings.s, gen_strings.i)))"))) (|suffix_ax_TCC2| 0 (|suffix_ax_TCC2-1| |nil| 3820376026 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|suffix_ax| SUBTYPE "(number_fields.+)(gen_strings.i, gen_strings.j)" "below(length(gen_strings.s))"))) (|suffix_ax| 0 (|suffix_ax-1| |nil| 3835722986 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|character| TYPE-DECL NIL |character_adt| NIL) (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|string| TYPE-EQ-DECL NIL |strings| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|suffix| CONST-DECL "string" |gen_strings| NIL) (|get| CONST-DECL "char" |gen_strings| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK)) (|substr_TCC1| 0 (|substr_TCC1-1| |nil| 3820376026 ("" (SKEEP :PREDS? T) (("" (REWRITE "length_suffix") (("" (ASSERT) NIL NIL)) NIL)) NIL) ((|length_suffix| FORMULA-DECL NIL |gen_strings| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|character| TYPE-DECL NIL |character_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|string| TYPE-EQ-DECL NIL |strings| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|substr| SUBTYPE "(number_fields.-)(gen_strings.j, gen_strings.i)" "upto(length(gen_strings.suffix(gen_strings.s, gen_strings.i)))"))) (|substr_TCC2| 0 (|substr_TCC2-1| |nil| 3820376919 ("" (SKEEP :PREDS? T) (("" (REWRITE "length_prefix") NIL NIL)) NIL) ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|subrange| TYPE-EQ-DECL NIL |integers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|suffix| CONST-DECL "string" |gen_strings| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|string| TYPE-EQ-DECL NIL |strings| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|character| TYPE-DECL NIL |character_adt| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length_prefix| FORMULA-DECL NIL |gen_strings| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|substr| SUBTYPE "gen_strings.prefix(gen_strings.suffix(gen_strings.s, gen_strings.i), (number_fields.-)(gen_strings.j, gen_strings.i))" "{s1 | length(gen_strings.s1) = (number_fields.-)(gen_strings.j, gen_strings.i)}"))))(|charstrings| (|charstring_bound_TCC1| 0 (|charstring_bound_TCC1-1| |nil| 3867803591 ("" (GRIND) NIL NIL) ((|exp2| DEF-DECL "posnat" |exp2| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) SHOSTAK (|charstring_bound| SUBTYPE "exp2.exp2(28)" "uint32"))) (|null_TCC1| 0 (|null_TCC1-1| |nil| 3867803591 ("" (SUBTYPE-TCC) NIL NIL) ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) SHOSTAK (|null| SUBTYPE "0" "index"))) (|length_null| 0 (|length_null-1| |nil| 3835723054 ("" (GRIND) NIL NIL) ((|null| CONST-DECL "charstring" |charstrings| NIL)) SHOSTAK)) (|addchar_TCC1| 0 (|addchar_TCC1-1| |nil| 3835419904 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) SHOSTAK (|addchar| SUBTYPE "(number_fields.+)(charstrings.s`length, 1)" "index"))) (|addchar_TCC2| 0 (|addchar_TCC2-1| |nil| 3835419904 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|character| TYPE-DECL NIL |character_adt| NIL) (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|index| TYPE-EQ-DECL NIL |integertypes| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|charstring| TYPE-EQ-DECL NIL |charstrings| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK (|addchar| SUBTYPE "charstrings.i" "below(length(charstrings.s))"))) (|unit_TCC1| 0 (|unit_TCC1-1| |nil| 3867803591 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|character| TYPE-DECL NIL |character_adt| NIL) (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK (|unit| SUBTYPE "1" "index"))) (|length_unit| 0 (|length_unit-1| |nil| 3835723070 ("" (GRIND) NIL NIL) ((|unit| CONST-DECL "charstring" |charstrings| NIL)) SHOSTAK)) (|unit_ax_TCC1| 0 (|unit_ax_TCC1-1| |nil| 3835419904 ("" (SUBTYPE-TCC) NIL NIL) ((|unit| CONST-DECL "charstring" |charstrings| NIL)) SHOSTAK (|unit_ax| SUBTYPE "0" "below(length(charstrings.unit(charstrings.c)))"))) (|unit_ax| 0 (|unit_ax-1| |nil| 3835723087 ("" (GRIND) NIL NIL) ((|unit| CONST-DECL "charstring" |charstrings| NIL) (|cget| CONST-DECL "char" |charstrings| NIL)) SHOSTAK)) (|extensionality_TCC1| 0 (|extensionality_TCC1-1| |nil| 3835419904 ("" (SUBTYPE-TCC) NIL NIL) ((|charstring| TYPE-EQ-DECL NIL |charstrings| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|index| TYPE-EQ-DECL NIL |integertypes| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (< CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) SHOSTAK (|extensionality| SUBTYPE "charstrings.i" "below(length(charstrings.s2))"))) (|extensionality| 0 (|extensionality-1| |nil| 3835723198 ("" (GRIND) (("" (APPLY-EXTENSIONALITY :HIDE? T) (("" (APPLY-EXTENSIONALITY :HIDE? T) NIL NIL)) NIL)) NIL) ((|character| TYPE-DECL NIL |character_adt| NIL) (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|index| TYPE-EQ-DECL NIL |integertypes| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|charstring| TYPE-EQ-DECL NIL |charstrings| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|cget| CONST-DECL "char" |charstrings| NIL)) SHOSTAK)) (|mk_charstring_TCC1| 0 (|mk_charstring_TCC1-1| |nil| 3835419904 ("" (SUBTYPE-TCC) NIL NIL) ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK (|mk_charstring| SUBTYPE "charstrings.cs`length" "index"))) (|doubleplus_TCC1| 0 (|doubleplus_TCC1-1| |nil| 3835419904 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK (|doubleplus| SUBTYPE "(number_fields.+)(charstrings.s1`length, charstrings.s2`length)" "below(exp2.exp2(28))"))) (|doubleplus_TCC2| 0 (|doubleplus_TCC2-1| |nil| 3867803591 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) SHOSTAK (|doubleplus| SUBTYPE "charstrings.n" "index"))) (|doubleplus_TCC3| 0 (|doubleplus_TCC2-1| |nil| 3835419904 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|index| TYPE-EQ-DECL NIL |integertypes| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|charstring| TYPE-EQ-DECL NIL |charstrings| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK (|doubleplus| SUBTYPE "(number_fields.-)(charstrings.i, charstrings.s1`length)" "below(length(charstrings.s2))"))) (|length_concat_TCC1| 0 (|length_concat_TCC1-1| |nil| 3835419904 ("" (SUBTYPE-TCC) (("" (POSTPONE) NIL NIL)) NIL) NIL SHOSTAK (|length_concat| SUBTYPE "charstrings.s2" "{s2 | reals.<((number_fields.+)(charstrings.s1`length, charstrings.s2`length), exp2.exp2(28))}"))) (|length_concat| 0 (|length_concat-1| |nil| 3835727461 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|index| TYPE-EQ-DECL NIL |integertypes| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|charstring| TYPE-EQ-DECL NIL |charstrings| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|cget| CONST-DECL "char" |charstrings| NIL) (++ CONST-DECL "charstring" |charstrings| NIL)) SHOSTAK)) (|char_concat_TCC1| 0 (|char_concat_TCC1-1| |nil| 3835419904 ("" (SUBTYPE-TCC) NIL NIL) ((O CONST-DECL "finseq" |finite_sequences| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) SHOSTAK (|char_concat| SUBTYPE "finite_sequences[char].o(charstrings.s1, charstrings.s2)" "charstring"))) (|char_concat_TCC2| 0 (|char_concat_TCC2-1| |nil| 3835419904 ("" (SUBTYPE-TCC) NIL NIL) ((O CONST-DECL "finseq" |finite_sequences| NIL)) SHOSTAK (|char_concat| SUBTYPE "charstrings.i" "below(length(finite_sequences[char].o(charstrings.s1, charstrings.s2)))"))) (|char_concat_TCC3| 0 (|char_concat_TCC3-1| |nil| 3835419904 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|index| TYPE-EQ-DECL NIL |integertypes| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|charstring| TYPE-EQ-DECL NIL |charstrings| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) SHOSTAK (|char_concat| SUBTYPE "(number_fields.-)(charstrings.i, length(charstrings.s1))" "below(length(charstrings.s2))"))) (|char_concat| 0 (|char_concat-1| |nil| 3835727487 ("" (GRIND) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|cget| CONST-DECL "char" |charstrings| NIL) (O CONST-DECL "finseq" |finite_sequences| NIL)) SHOSTAK)) (|strdiff_rec_TCC1| 0 (|strdiff_rec_TCC1-1| |nil| 3835419904 ("" (SUBTYPE-TCC) NIL NIL) ((|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs| NIL)) SHOSTAK (|strdiff_rec| SUBTYPE "(number_fields.-)(real_defs.min(length(charstrings.s1), length(charstrings.s2)), charstrings.i)" "naturalnumber"))) (|strdiff_rec_TCC2| 0 (|strdiff_rec_TCC2-1| |nil| 3835419904 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|index| TYPE-EQ-DECL NIL |integertypes| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|charstring| TYPE-EQ-DECL NIL |charstrings| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) SHOSTAK (|strdiff_rec| SUBTYPE "charstrings.i" "below(length(charstrings.s1))"))) (|strdiff_rec_TCC3| 0 (|strdiff_rec_TCC3-1| |nil| 3835419904 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|index| TYPE-EQ-DECL NIL |integertypes| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|charstring| TYPE-EQ-DECL NIL |charstrings| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) SHOSTAK (|strdiff_rec| SUBTYPE "charstrings.i" "below(length(charstrings.s2))"))) (|strdiff_rec_TCC4| 0 (|strdiff_rec_TCC4-1| |nil| 3835419905 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|index| TYPE-EQ-DECL NIL |integertypes| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|charstring| TYPE-EQ-DECL NIL |charstrings| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|cget| CONST-DECL "char" |charstrings| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)) SHOSTAK (|strdiff_rec| SUBTYPE "(number_fields.+)(charstrings.i, 1)" "upto(real_defs.min(length(charstrings.s1), length(charstrings.s2)))"))) (|strdiff_rec_TCC5| 0 (|strdiff_rec_TCC5-1| |nil| 3835419905 ("" (TERMINATION-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|index| TYPE-EQ-DECL NIL |integertypes| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|charstring| TYPE-EQ-DECL NIL |charstrings| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|cget| CONST-DECL "char" |charstrings| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)) SHOSTAK (|strdiff_rec| TERMINATION "charstrings.strdiff_rec(charstrings.s1, charstrings.s2, (number_fields.+)(charstrings.i, 1))" "NIL"))) (|strdiff_TCC1| 0 (|strdiff_TCC1-1| |nil| 3835419905 ("" (SUBTYPE-TCC) NIL NIL) ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK (|strdiff| SUBTYPE "0" "upto(real_defs.min(length(charstrings.s1), length(charstrings.s2)))"))) (|strdiff_eq_TCC1| 0 (|strdiff_eq_TCC1-1| |nil| 3835419905 ("" (GRIND) (("" (TYPEPRED "strdiff_rec(s1!1, s2!1, 0)") (("" (GRIND) NIL NIL)) NIL)) NIL) ((|strdiff_rec| DEF-DECL "upto(min(length(s1), length(s2)))" |charstrings| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|cget| CONST-DECL "char" |charstrings| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|index| TYPE-EQ-DECL NIL |integertypes| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|charstring| TYPE-EQ-DECL NIL |charstrings| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|strdiff| CONST-DECL "upto(min(length(s1), length(s2)))" |charstrings| NIL)) SHOSTAK (|strdiff_eq| SUBTYPE "charstrings.j" "below(length(charstrings.s1))"))) (|strdiff_eq_TCC2| 0 (|strdiff_eq_TCC2-1| |nil| 3835419905 ("" (GRIND) (("" (TYPEPRED "strdiff_rec(s1!1, s2!1, 0)") (("" (GRIND) NIL NIL)) NIL)) NIL) ((|strdiff_rec| DEF-DECL "upto(min(length(s1), length(s2)))" |charstrings| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|cget| CONST-DECL "char" |charstrings| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|index| TYPE-EQ-DECL NIL |integertypes| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|charstring| TYPE-EQ-DECL NIL |charstrings| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|strdiff| CONST-DECL "upto(min(length(s1), length(s2)))" |charstrings| NIL)) SHOSTAK (|strdiff_eq| SUBTYPE "charstrings.j" "below(length(charstrings.s2))"))) (|strdiff_eq| 0 (|strdiff_eq-1| |nil| 3835727745 ("" (SKEEP :PREDS? T) (("" (CASE "FORALL (i: upto(min(length(s1), length(s2)))):
              i < strdiff_rec(s1, s2, i) => cget(s1, i) = cget(s2, i)") (("1" (INST?) (("1" (ASSERT) (("1" (EXPAND "strdiff") (("1" (CASE "LET i = strdiff_rec(s1, s2, 0)
                 IN FORALL (k: below(i)): strdiff_rec(s1, s2, k) = i") (("1" (ASSERT) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (INDUCT "k") (("2" (SKEEP :PREDS? T) (("2" (EXPAND "strdiff_rec" -3 1) (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (SKEEP) (("2" (EXPAND "strdiff_rec") (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKEEP :PREDS? T) (("3" (TYPEPRED "strdiff_rec(s1, s2, i)") (("3" (GRIND) NIL NIL)) NIL)) NIL) ("4" (GRIND) NIL NIL)) NIL)) NIL) ((|cget| CONST-DECL "char" |charstrings| NIL) (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|character| TYPE-DECL NIL |character_adt| NIL) (|strdiff_rec| DEF-DECL "upto(min(length(s1), length(s2)))" |charstrings| NIL) (< CONST-DECL "bool" |reals| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|charstring| TYPE-EQ-DECL NIL |charstrings| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|index| TYPE-EQ-DECL NIL |integertypes| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|below_induction| FORMULA-DECL NIL |bounded_nat_inductions| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|strdiff| CONST-DECL "upto(min(length(s1), length(s2)))" |charstrings| NIL) NIL NIL NIL (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)) SHOSTAK)) (|strdiff_neq_TCC1| 0 (|strdiff_neq_TCC1-1| |nil| 3835419905 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|index| TYPE-EQ-DECL NIL |integertypes| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|charstring| TYPE-EQ-DECL NIL |charstrings| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|strdiff| CONST-DECL "upto(min(length(s1), length(s2)))" |charstrings| NIL)) SHOSTAK (|strdiff_neq| SUBTYPE "charstrings.i" "below(length(charstrings.s1))"))) (|strdiff_neq_TCC2| 0 (|strdiff_neq_TCC2-1| |nil| 3835419905 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|index| TYPE-EQ-DECL NIL |integertypes| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|charstring| TYPE-EQ-DECL NIL |charstrings| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|strdiff| CONST-DECL "upto(min(length(s1), length(s2)))" |charstrings| NIL)) SHOSTAK (|strdiff_neq| SUBTYPE "charstrings.i" "below(length(charstrings.s2))"))) (|strdiff_neq| 0 (|strdiff_neq-1| |nil| 3835728510 ("" (SKEEP) (("" (BETA) (("" (NAME-REPLACE "i" "strdiff(s1, s2)") (("" (FLATTEN) (("" (EXPAND "cget") (("" (REVEAL -1) (("" (EXPAND "strdiff") (("" (CASE "FORALL (i: upto(min(length(s1), length(s2)))):
              i = strdiff_rec(s1, s2, 0) =>
                i = strdiff_rec(s1, s2, i)") (("1" (INST -1 "i") (("1" (ASSERT) (("1" (EXPAND "strdiff_rec" -1) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (EXPAND "cget") (("1" (CASE "FORALL (i: upto(min(length(s1), length(s2)))):
                i <= strdiff_rec(s1, s2, i)") (("1" (INST -1 "i+1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (HIDE-ALL-BUT (-3 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (MEASURE-INDUCT+ "min(length(s1), length(s2)) - i" ("i")) (("2" (EXPAND "strdiff_rec" 1) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (GROUND) (("2" (INST -2 "x!1 + 1") (("1" (ASSERT) NIL NIL) ("2" (HIDE 4) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "i") (("1" (FLATTEN) NIL NIL) ("2" (SKEEP) (("2" (CASE "LET i = strdiff_rec(s1, s2, 0)
                 IN FORALL (k: below(i)): strdiff_rec(s1, s2, k) = i") (("1" (LET-NAME-REPLACE) (("1" (GROUND) (("1" (REPLACE -2 :DIR RL) (("1" (INST -3 "jt") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (REPLACE -1 :DIR RL) (("2" (INST -2 "jt") (("2" (ASSERT) (("2" (EXPAND "strdiff_rec" -2) (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (REPLACE -1 :ACTUALS? T) (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-1 1)) (("3" (TYPEPRED "strdiff_rec(s1, s2, 0)") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (BETA) (("2" (INDUCT "k") (("1" (SKEEP :PREDS? T) (("1" (EXPAND "strdiff_rec" -3 1) (("1" (LIFT-IF) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKEEP :PREDS? T) (("2" (TYPEPRED "strdiff_rec(s1, s2, 0)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|strdiff_rec| DEF-DECL "upto(min(length(s1), length(s2)))" |charstrings| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) NIL (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (< CONST-DECL "bool" |reals| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) NIL NIL NIL (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|upto_induction| FORMULA-DECL NIL |bounded_nat_inductions| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) NIL (|below_induction| FORMULA-DECL NIL |bounded_nat_inductions| NIL) (|cget| CONST-DECL "char" |charstrings| NIL) (|strdiff| CONST-DECL "upto(min(length(s1), length(s2)))" |charstrings| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|charstring| TYPE-EQ-DECL NIL |charstrings| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|index| TYPE-EQ-DECL NIL |integertypes| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK)) (|strcmp_TCC1| 0 (|strcmp_TCC1-1| |nil| 3835419905 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|index| TYPE-EQ-DECL NIL |integertypes| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|charstring| TYPE-EQ-DECL NIL |charstrings| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|strdiff| CONST-DECL "upto(min(length(s1), length(s2)))" |charstrings| NIL) (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs| NIL)) SHOSTAK (|strcmp| SUBTYPE "charstrings.i" "below(length(charstrings.s1))"))) (|strcmp_TCC2| 0 (|strcmp_TCC2-1| |nil| 3835419906 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|index| TYPE-EQ-DECL NIL |integertypes| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|charstring| TYPE-EQ-DECL NIL |charstrings| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|strdiff| CONST-DECL "upto(min(length(s1), length(s2)))" |charstrings| NIL) (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs| NIL)) SHOSTAK (|strcmp| SUBTYPE "charstrings.i" "below(length(charstrings.s2))"))) (|strcmp_eq| 0 (|strcmp_eq-1| |nil| 3835729150 ("" (SKEEP) (("" (EXPAND "strcmp") (("" (LIFT-IF) (("" (GROUND) (("" (APPLY-EXTENSIONALITY 3 :HIDE? T) (("" (APPLY-EXTENSIONALITY :HIDE? T) (("" (LEMMA "strdiff_eq") (("" (EXPAND "cget") (("" (INST?) (("" (ASSERT) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|strcmp| CONST-DECL "subrange(-1, 1)" |charstrings| NIL) (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|character| TYPE-DECL NIL |character_adt| NIL) (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL) (|cget| CONST-DECL "char" |charstrings| NIL) NIL NIL NIL (|strdiff| CONST-DECL "upto(min(length(s1), length(s2)))" |charstrings| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|strdiff_eq| FORMULA-DECL NIL |charstrings| NIL) (|index| TYPE-EQ-DECL NIL |integertypes| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|charstring| TYPE-EQ-DECL NIL |charstrings| NIL)) SHOSTAK)) (|strcmp_lt| 0 (|strcmp_lt-1| |nil| 3835729751 ("" (SKEEP) (("" (LET-NAME-REPLACE) (("" (EXPAND "strcmp") (("" (LIFT-IF) (("" (ASSERT) (("" (GROUND) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|index| TYPE-EQ-DECL NIL |integertypes| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|charstring| TYPE-EQ-DECL NIL |charstrings| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|strdiff| CONST-DECL "upto(min(length(s1), length(s2)))" |charstrings| NIL) (|cget| CONST-DECL "char" |charstrings| NIL) (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL) (|code| ADT-ACCESSOR-DECL "[character -> below[0x110000]]" |character_adt| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|character| TYPE-DECL NIL |character_adt| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) NIL (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|strcmp| CONST-DECL "subrange(-1, 1)" |charstrings| NIL)) SHOSTAK)) (|strcmp_gt| 0 (|strcmp_gt-1| |nil| 3835730096 ("" (SKEEP) (("" (LET-NAME-REPLACE) (("" (EXPAND "strcmp") (("" (LIFT-IF) (("" (ASSERT) (("" (SPLIT -2) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) (("2" (REPLACE -2 :DIR RL) (("2" (CASE "code(cget(s2, i)) = code(cget(s1, i))") (("1" (LEMMA "strdiff_neq") (("1" (INST?) (("1" (LET-NAME-REPLACE) (("1" (REPLACE -1 :HIDE? T) (("1" (REPLACE -4 :DIR RL) (("1" (ASSERT) (("1" (LEMMA "character_char_extensionality") (("1" (EXPAND "cget" -3) (("1" (INST?) (("1" (EXPAND "cget") (("1" (REPLACE -3) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|index| TYPE-EQ-DECL NIL |integertypes| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|charstring| TYPE-EQ-DECL NIL |charstrings| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|strdiff| CONST-DECL "upto(min(length(s1), length(s2)))" |charstrings| NIL) (|cget| CONST-DECL "char" |charstrings| NIL) (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL) (|code| ADT-ACCESSOR-DECL "[character -> below[0x110000]]" |character_adt| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|character| TYPE-DECL NIL |character_adt| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) NIL (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|character_char_extensionality| FORMULA-DECL NIL |character_adt| NIL) NIL (/= CONST-DECL "boolean" |notequal| NIL) (|strdiff_neq| FORMULA-DECL NIL |charstrings| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|strcmp| CONST-DECL "subrange(-1, 1)" |charstrings| NIL)) SHOSTAK)) (|prefix_TCC1| 0 (|prefix_TCC1-1| |nil| 3835419906 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|index| TYPE-EQ-DECL NIL |integertypes| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|charstring| TYPE-EQ-DECL NIL |charstrings| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK (|prefix| SUBTYPE "charstrings.i" "index"))) (|prefix_TCC2| 0 (|prefix_TCC2-1| |nil| 3835419906 ("" (SUBTYPE-TCC) NIL NIL) NIL SHOSTAK (|prefix| SUBTYPE "charstrings.j" "below(length(charstrings.s))"))) (|length_prefix| 0 (|length_prefix-1| |nil| 3835730303 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|index| TYPE-EQ-DECL NIL |integertypes| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|charstring| TYPE-EQ-DECL NIL |charstrings| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|cget| CONST-DECL "char" |charstrings| NIL) (|prefix| CONST-DECL "charstring" |charstrings| NIL)) SHOSTAK)) (|prefix_ax_TCC1| 0 (|prefix_ax_TCC1-1| |nil| 3835419906 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|index| TYPE-EQ-DECL NIL |integertypes| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|charstring| TYPE-EQ-DECL NIL |charstrings| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|cget| CONST-DECL "char" |charstrings| NIL) (|prefix| CONST-DECL "charstring" |charstrings| NIL)) SHOSTAK (|prefix_ax| SUBTYPE "charstrings.j" "below(length(charstrings.prefix(charstrings.s, charstrings.i)))"))) (|prefix_ax_TCC2| 0 (|prefix_ax_TCC2-1| |nil| 3835419958 ("" (SUBTYPE-TCC) NIL NIL) NIL SHOSTAK (|prefix_ax| SUBTYPE "charstrings.j" "below(length(charstrings.s))"))) (|prefix_ax| 0 (|prefix_ax-1| |nil| 3835730349 ("" (GRIND) NIL NIL) ((|cget| CONST-DECL "char" |charstrings| NIL) (|prefix| CONST-DECL "charstring" |charstrings| NIL)) SHOSTAK)) (|suffix_TCC1| 0 (|suffix_TCC1-1| |nil| 3835419958 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|index| TYPE-EQ-DECL NIL |integertypes| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|charstring| TYPE-EQ-DECL NIL |charstrings| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK (|suffix| SUBTYPE "(number_fields.-)(length(charstrings.s), charstrings.i)" "index"))) (|suffix_TCC2| 0 (|suffix_TCC2-1| |nil| 3835419958 ("" (SUBTYPE-TCC) NIL NIL) NIL SHOSTAK (|suffix| SUBTYPE "(number_fields.+)(charstrings.i, charstrings.j)" "below(length(charstrings.s))"))) (|length_suffix| 0 (|length_suffix-1| |nil| 3835731453 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|index| TYPE-EQ-DECL NIL |integertypes| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|charstring| TYPE-EQ-DECL NIL |charstrings| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|suffix| CONST-DECL "charstring" |charstrings| NIL) (|cget| CONST-DECL "char" |charstrings| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK)) (|suffix_ax_TCC1| 0 (|suffix_ax_TCC1-1| |nil| 3835419958 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|index| TYPE-EQ-DECL NIL |integertypes| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|charstring| TYPE-EQ-DECL NIL |charstrings| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|suffix| CONST-DECL "charstring" |charstrings| NIL) (|cget| CONST-DECL "char" |charstrings| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK (|suffix_ax| SUBTYPE "charstrings.j" "below(length(charstrings.suffix(charstrings.s, charstrings.i)))"))) (|suffix_ax_TCC2| 0 (|suffix_ax_TCC2-1| |nil| 3835419958 ("" (SUBTYPE-TCC) NIL NIL) NIL SHOSTAK (|suffix_ax| SUBTYPE "(number_fields.+)(charstrings.i, charstrings.j)" "below(length(charstrings.s))"))) (|suffix_ax| 0 (|suffix_ax-1| |nil| 3835731593 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|index| TYPE-EQ-DECL NIL |integertypes| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|charstring| TYPE-EQ-DECL NIL |charstrings| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|suffix| CONST-DECL "charstring" |charstrings| NIL) (|cget| CONST-DECL "char" |charstrings| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK)) (|substr_TCC1| 0 (|substr_TCC1-1| |nil| 3835419958 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|index| TYPE-EQ-DECL NIL |integertypes| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|charstring| TYPE-EQ-DECL NIL |charstrings| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|subrange| TYPE-EQ-DECL NIL |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|suffix| CONST-DECL "charstring" |charstrings| NIL) (|cget| CONST-DECL "char" |charstrings| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK (|substr| SUBTYPE "(number_fields.-)(charstrings.j, charstrings.i)" "upto(length(charstrings.suffix(charstrings.s, charstrings.i)))"))) (|substr_TCC2| 0 (|substr_TCC2-1| |nil| 3835419958 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|index| TYPE-EQ-DECL NIL |integertypes| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|charstring| TYPE-EQ-DECL NIL |charstrings| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|subrange| TYPE-EQ-DECL NIL |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|prefix| CONST-DECL "charstring" |charstrings| NIL) (|suffix| CONST-DECL "charstring" |charstrings| NIL) (|cget| CONST-DECL "char" |charstrings| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK (|substr| SUBTYPE "charstrings.prefix(charstrings.suffix(charstrings.s, charstrings.i), (number_fields.-)(charstrings.j, charstrings.i))" "{s1 | length(charstrings.s1) = (number_fields.-)(charstrings.j, charstrings.i)}"))))(|bytestrings| (|byte_TCC1| 0 (|byte_TCC1-1| |nil| 3835419958 ("" (INST 1 "0") NIL NIL) ((|exp2| DEF-DECL "posnat" |exp2| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK (|byte| EXISTENCE "" "{s: naturalnumbers.nat | reals.<(s, exp2.exp2(8))}"))) (|bytestring_bound_TCC1| 0 (|bytestring_bound_TCC1-1| |nil| 3867803597 ("" (GRIND) NIL NIL) ((|exp2| DEF-DECL "posnat" |exp2| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) SHOSTAK (|bytestring_bound| SUBTYPE "exp2.exp2(28)" "uint32"))) (|null_TCC1| 0 (|null_TCC1-1| |nil| 3867803597 ("" (SUBTYPE-TCC) NIL NIL) ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) SHOSTAK (|null| SUBTYPE "0" "index"))) (|length_null| 0 (|length_null-1| |nil| 3835731821 ("" (GRIND) NIL NIL) ((|null| CONST-DECL "bytestring" |bytestrings| NIL)) SHOSTAK)) (|unit_TCC1| 0 (|unit_TCC1-1| |nil| 3867803597 ("" (SUBTYPE-TCC) NIL NIL) ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) SHOSTAK (|unit| SUBTYPE "1" "index"))) (|length_unit| 0 (|length_unit-1| |nil| 3835731831 ("" (GRIND) NIL NIL) ((|unit| CONST-DECL "bytestring" |bytestrings| NIL)) SHOSTAK)) (|unit_ax_TCC1| 0 (|unit_ax_TCC1-1| |nil| 3835419958 ("" (SUBTYPE-TCC) NIL NIL) ((|unit| CONST-DECL "bytestring" |bytestrings| NIL)) SHOSTAK (|unit_ax| SUBTYPE "0" "below(length(bytestrings.unit(bytestrings.b)))"))) (|unit_ax| 0 (|unit_ax-1| |nil| 3835731853 ("" (GRIND) NIL NIL) ((|unit| CONST-DECL "bytestring" |bytestrings| NIL) (|get| CONST-DECL "byte" |bytestrings| NIL)) SHOSTAK)) (|extensionality_TCC1| 0 (|extensionality_TCC1-1| |nil| 3835419958 ("" (SUBTYPE-TCC) NIL NIL) ((|bytestring| TYPE-EQ-DECL NIL |bytestrings| NIL) (|byte| NONEMPTY-TYPE-EQ-DECL NIL |bytestrings| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|index| TYPE-EQ-DECL NIL |integertypes| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (< CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) SHOSTAK (|extensionality| SUBTYPE "bytestrings.i" "below(length(bytestrings.s2))"))) (|extensionality| 0 (|extensionality-1| |nil| 3835731869 ("" (GRIND) (("" (APPLY-EXTENSIONALITY :HIDE? T) (("" (APPLY-EXTENSIONALITY :HIDE? T) NIL NIL)) NIL)) NIL) ((|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|index| TYPE-EQ-DECL NIL |integertypes| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|byte| NONEMPTY-TYPE-EQ-DECL NIL |bytestrings| NIL) (|bytestring| TYPE-EQ-DECL NIL |bytestrings| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|get| CONST-DECL "byte" |bytestrings| NIL)) SHOSTAK)) (|mk_bytestring_TCC1| 0 (|mk_bytestring_TCC1-1| |nil| 3835419959 ("" (SUBTYPE-TCC) NIL NIL) ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK (|mk_bytestring| SUBTYPE "bytestrings.cs`length" "index"))) (|mk_bytestring_TCC2| 0 (|mk_bytestring_TCC2-1| |nil| 3835419959 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|character| TYPE-DECL NIL |character_adt| NIL) (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|string| TYPE-EQ-DECL NIL |strings| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|code| ADT-ACCESSOR-DECL "[character -> below[0x110000]]" |character_adt| NIL) (|bstring| TYPE-EQ-DECL NIL |bytestrings| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|get| CONST-DECL "char" |gen_strings| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL)) SHOSTAK (|mk_bytestring| SUBTYPE "character_adt.code(gen_strings.get(bytestrings.cs, bytestrings.i))" "byte"))) (|doubleplus_TCC1| 0 (|doubleplus_TCC1-1| |nil| 3835419959 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK (|doubleplus| SUBTYPE "(number_fields.+)(bytestrings.s1`length, bytestrings.s2`length)" "below(exp2.exp2(28))"))) (|doubleplus_TCC2| 0 (|doubleplus_TCC2-1| |nil| 3867803597 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) SHOSTAK (|doubleplus| SUBTYPE "bytestrings.n" "index"))) (|doubleplus_TCC3| 0 (|doubleplus_TCC2-1| |nil| 3835419959 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|index| TYPE-EQ-DECL NIL |integertypes| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|byte| NONEMPTY-TYPE-EQ-DECL NIL |bytestrings| NIL) (|bytestring| TYPE-EQ-DECL NIL |bytestrings| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK (|doubleplus| SUBTYPE "(number_fields.-)(bytestrings.i, bytestrings.s1`length)" "below(length(bytestrings.s2))"))) (|length_concat| 0 (|length_concat-1| |nil| 3835732507 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|index| TYPE-EQ-DECL NIL |integertypes| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|byte| NONEMPTY-TYPE-EQ-DECL NIL |bytestrings| NIL) (|bytestring| TYPE-EQ-DECL NIL |bytestrings| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|get| CONST-DECL "byte" |bytestrings| NIL) (++ CONST-DECL "bytestring" |bytestrings| NIL)) SHOSTAK)) (|char_concat_TCC1| 0 (|char_concat_TCC1-1| |nil| 3835419959 ("" (SUBTYPE-TCC) NIL NIL) ((O CONST-DECL "finseq" |finite_sequences| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) SHOSTAK (|char_concat| SUBTYPE "finite_sequences[byte].o(bytestrings.s1, bytestrings.s2)" "bytestring"))) (|char_concat_TCC2| 0 (|char_concat_TCC2-1| |nil| 3835419959 ("" (SUBTYPE-TCC) NIL NIL) ((O CONST-DECL "finseq" |finite_sequences| NIL)) SHOSTAK (|char_concat| SUBTYPE "bytestrings.i" "below(length(finite_sequences[byte].o(bytestrings.s1, bytestrings.s2)))"))) (|char_concat_TCC3| 0 (|char_concat_TCC3-1| |nil| 3835419959 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|index| TYPE-EQ-DECL NIL |integertypes| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|byte| NONEMPTY-TYPE-EQ-DECL NIL |bytestrings| NIL) (|bytestring| TYPE-EQ-DECL NIL |bytestrings| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) SHOSTAK (|char_concat| SUBTYPE "(number_fields.-)(bytestrings.i, length(bytestrings.s1))" "below(length(bytestrings.s2))"))) (|char_concat| 0 (|char_concat-1| |nil| 3835732523 ("" (GRIND) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|get| CONST-DECL "byte" |bytestrings| NIL) (O CONST-DECL "finseq" |finite_sequences| NIL)) SHOSTAK)) (|strdiff_rec_TCC1| 0 (|strdiff_rec_TCC1-1| |nil| 3835419959 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|index| TYPE-EQ-DECL NIL |integertypes| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|byte| NONEMPTY-TYPE-EQ-DECL NIL |bytestrings| NIL) (|bytestring| TYPE-EQ-DECL NIL |bytestrings| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)) SHOSTAK (|strdiff_rec| SUBTYPE "(number_fields.-)(real_defs.min(length(bytestrings.s1), length(bytestrings.s2)), bytestrings.i)" "naturalnumber"))) (|strdiff_rec_TCC2| 0 (|strdiff_rec_TCC2-1| |nil| 3835419959 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|index| TYPE-EQ-DECL NIL |integertypes| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|byte| NONEMPTY-TYPE-EQ-DECL NIL |bytestrings| NIL) (|bytestring| TYPE-EQ-DECL NIL |bytestrings| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) SHOSTAK (|strdiff_rec| SUBTYPE "bytestrings.i" "below(length(bytestrings.s1))"))) (|strdiff_rec_TCC3| 0 (|strdiff_rec_TCC3-1| |nil| 3835419959 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|index| TYPE-EQ-DECL NIL |integertypes| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|byte| NONEMPTY-TYPE-EQ-DECL NIL |bytestrings| NIL) (|bytestring| TYPE-EQ-DECL NIL |bytestrings| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) SHOSTAK (|strdiff_rec| SUBTYPE "bytestrings.i" "below(length(bytestrings.s2))"))) (|strdiff_rec_TCC4| 0 (|strdiff_rec_TCC4-1| |nil| 3835419959 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|index| TYPE-EQ-DECL NIL |integertypes| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|byte| NONEMPTY-TYPE-EQ-DECL NIL |bytestrings| NIL) (|bytestring| TYPE-EQ-DECL NIL |bytestrings| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|get| CONST-DECL "byte" |bytestrings| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK (|strdiff_rec| SUBTYPE "(number_fields.+)(bytestrings.i, 1)" "{i: naturalnumbers.upto(length(bytestrings.s1)) | reals.<=(i, length(bytestrings.s2))}"))) (|strdiff_rec_TCC5| 0 (|strdiff_rec_TCC5-1| |nil| 3835419959 ("" (TERMINATION-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|index| TYPE-EQ-DECL NIL |integertypes| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|byte| NONEMPTY-TYPE-EQ-DECL NIL |bytestrings| NIL) (|bytestring| TYPE-EQ-DECL NIL |bytestrings| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|get| CONST-DECL "byte" |bytestrings| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)) SHOSTAK (|strdiff_rec| TERMINATION "bytestrings.strdiff_rec(bytestrings.s1, bytestrings.s2, (number_fields.+)(bytestrings.i, 1))" "NIL"))) (|strdiff_TCC1| 0 (|strdiff_TCC1-1| |nil| 3835419959 ("" (SUBTYPE-TCC) NIL NIL) ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK (|strdiff| SUBTYPE "0" "{i: naturalnumbers.upto(length(bytestrings.s1)) | reals.<=(i, length(bytestrings.s2))}"))) (|strdiff_eq_TCC1| 0 (|strdiff_eq_TCC1-1| |nil| 3835419959 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|index| TYPE-EQ-DECL NIL |integertypes| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|byte| NONEMPTY-TYPE-EQ-DECL NIL |bytestrings| NIL) (|bytestring| TYPE-EQ-DECL NIL |bytestrings| NIL) (<= CONST-DECL "bool" |reals| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|strdiff| CONST-DECL "{i: upto(length(s1)) | i <= length(s2)}" |bytestrings| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) SHOSTAK (|strdiff_eq| SUBTYPE "bytestrings.j" "below(length(bytestrings.s1))"))) (|strdiff_eq_TCC2| 0 (|strdiff_eq_TCC2-1| |nil| 3835419959 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|index| TYPE-EQ-DECL NIL |integertypes| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|byte| NONEMPTY-TYPE-EQ-DECL NIL |bytestrings| NIL) (|bytestring| TYPE-EQ-DECL NIL |bytestrings| NIL) (<= CONST-DECL "bool" |reals| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|strdiff| CONST-DECL "{i: upto(length(s1)) | i <= length(s2)}" |bytestrings| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) SHOSTAK (|strdiff_eq| SUBTYPE "bytestrings.j" "below(length(bytestrings.s2))"))) (|strdiff_eq| 0 (|strdiff_eq-1| |nil| 3835732642 ("" (SKEEP :PREDS? T) (("" (CASE "FORALL (i: upto(min(length(s1), length(s2)))):
              i < strdiff_rec(s1, s2, i) => get(s1, i) = get(s2, i)") (("1" (INST?) (("1" (ASSERT) (("1" (EXPAND "strdiff") (("1" (CASE "LET i = strdiff_rec(s1, s2, 0)
                 IN FORALL (k: below(i)): strdiff_rec(s1, s2, k) = i") (("1" (ASSERT) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (INDUCT "k") (("2" (SKEEP :PREDS? T) (("2" (EXPAND "strdiff_rec" -3 1) (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (SKEEP) (("2" (EXPAND "strdiff_rec") (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKEEP :PREDS? T) (("3" (TYPEPRED "strdiff_rec(s1, s2, i)") (("3" (GRIND) NIL NIL)) NIL)) NIL) ("4" (GRIND) NIL NIL) ("5" (GRIND) NIL NIL)) NIL)) NIL) ((|get| CONST-DECL "byte" |bytestrings| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|strdiff_rec| DEF-DECL "{i: upto(length(s1)) | i <= length(s2)}" |bytestrings| NIL) (< CONST-DECL "bool" |reals| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|bytestring| TYPE-EQ-DECL NIL |bytestrings| NIL) (|byte| NONEMPTY-TYPE-EQ-DECL NIL |bytestrings| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|index| TYPE-EQ-DECL NIL |integertypes| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|below_induction| FORMULA-DECL NIL |bounded_nat_inductions| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|strdiff| CONST-DECL "{i: upto(length(s1)) | i <= length(s2)}" |bytestrings| NIL) NIL NIL NIL (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)) SHOSTAK)) (|strdiff_neq_TCC1| 0 (|strdiff_neq_TCC1-1| |nil| 3835419959 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|index| TYPE-EQ-DECL NIL |integertypes| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|byte| NONEMPTY-TYPE-EQ-DECL NIL |bytestrings| NIL) (|bytestring| TYPE-EQ-DECL NIL |bytestrings| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|strdiff| CONST-DECL "{i: upto(length(s1)) | i <= length(s2)}" |bytestrings| NIL)) SHOSTAK (|strdiff_neq| SUBTYPE "bytestrings.i" "below(length(bytestrings.s1))"))) (|strdiff_neq_TCC2| 0 (|strdiff_neq_TCC2-1| |nil| 3835419960 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|index| TYPE-EQ-DECL NIL |integertypes| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|byte| NONEMPTY-TYPE-EQ-DECL NIL |bytestrings| NIL) (|bytestring| TYPE-EQ-DECL NIL |bytestrings| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|strdiff| CONST-DECL "{i: upto(length(s1)) | i <= length(s2)}" |bytestrings| NIL)) SHOSTAK (|strdiff_neq| SUBTYPE "bytestrings.i" "below(length(bytestrings.s2))"))) (|strdiff_neq| 0 (|strdiff_neq-1| |nil| 3835732968 ("" (SKEEP) (("" (BETA) (("" (NAME-REPLACE "i" "strdiff(s1, s2)") (("" (FLATTEN) (("" (EXPAND "get") (("" (REVEAL -1) (("" (EXPAND "strdiff") (("" (CASE "FORALL (i: upto(min(length(s1), length(s2)))):
              i = strdiff_rec(s1, s2, 0) =>
                i = strdiff_rec(s1, s2, i)") (("1" (INST -1 "i") (("1" (ASSERT) (("1" (EXPAND "strdiff_rec" -1) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (EXPAND "get") (("1" (CASE "FORALL (i: upto(min(length(s1), length(s2)))):
                i <= strdiff_rec(s1, s2, i)") (("1" (INST -1 "i+1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (HIDE-ALL-BUT (-3 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (MEASURE-INDUCT+ "min(length(s1), length(s2)) - i" ("i")) (("2" (EXPAND "strdiff_rec" 1) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (GROUND) (("2" (INST -2 "x!1 + 1") (("1" (ASSERT) NIL NIL) ("2" (HIDE 4) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "i") (("1" (FLATTEN) NIL NIL) ("2" (SKEEP) (("2" (CASE "LET i = strdiff_rec(s1, s2, 0)
                 IN FORALL (k: below(i)): strdiff_rec(s1, s2, k) = i") (("1" (LET-NAME-REPLACE) (("1" (GROUND) (("1" (REPLACE -2 :DIR RL) (("1" (INST -3 "jt") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (REPLACE -1 :DIR RL) (("2" (INST -2 "jt") (("2" (ASSERT) (("2" (EXPAND "strdiff_rec" -2) (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (REPLACE -1 :ACTUALS? T) (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-1 1)) (("3" (TYPEPRED "strdiff_rec(s1, s2, 0)") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (BETA) (("2" (INDUCT "k") (("1" (SKEEP :PREDS? T) (("1" (EXPAND "strdiff_rec" -3 1) (("1" (LIFT-IF) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKEEP :PREDS? T) (("2" (TYPEPRED "strdiff_rec(s1, s2, 0)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL) ("4" (ASSERT) NIL NIL) ("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) (("3" (GRIND) NIL NIL)) NIL) ("4" (ASSERT) NIL NIL) ("5" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|strdiff_rec| DEF-DECL "{i: upto(length(s1)) | i <= length(s2)}" |bytestrings| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) NIL (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (< CONST-DECL "bool" |reals| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) NIL NIL NIL (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs| NIL) (|upto_induction| FORMULA-DECL NIL |bounded_nat_inductions| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) NIL (|below_induction| FORMULA-DECL NIL |bounded_nat_inductions| NIL) (|get| CONST-DECL "byte" |bytestrings| NIL) (|strdiff| CONST-DECL "{i: upto(length(s1)) | i <= length(s2)}" |bytestrings| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|bytestring| TYPE-EQ-DECL NIL |bytestrings| NIL) (|byte| NONEMPTY-TYPE-EQ-DECL NIL |bytestrings| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|index| TYPE-EQ-DECL NIL |integertypes| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK)) (|strcmp_eq| 0 (|strcmp_eq-1| |nil| 3835734250 ("" (SKEEP) (("" (EXPAND "strcmp") (("" (LIFT-IF) (("" (APPLY-EXTENSIONALITY :HIDE? T) (("" (APPLY-EXTENSIONALITY :HIDE? T) (("" (LEMMA "strdiff_eq") (("" (EXPAND "get") (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|strcmp| CONST-DECL "subrange(-1, 1)" |bytestrings| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|index| TYPE-EQ-DECL NIL |integertypes| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|byte| NONEMPTY-TYPE-EQ-DECL NIL |bytestrings| NIL) (|bytestring| TYPE-EQ-DECL NIL |bytestrings| NIL) (|strdiff_eq| FORMULA-DECL NIL |bytestrings| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (<= CONST-DECL "bool" |reals| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|strdiff| CONST-DECL "{i: upto(length(s1)) | i <= length(s2)}" |bytestrings| NIL) NIL NIL NIL (|get| CONST-DECL "byte" |bytestrings| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK)) (|strcmp_lt| 0 (|strcmp_lt-1| |nil| 3835734858 ("" (SKEEP) (("" (LET-NAME-REPLACE) (("" (EXPAND "strcmp") (("" (LIFT-IF) (("" (ASSERT) (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|index| TYPE-EQ-DECL NIL |integertypes| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|byte| NONEMPTY-TYPE-EQ-DECL NIL |bytestrings| NIL) (|bytestring| TYPE-EQ-DECL NIL |bytestrings| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|strdiff| CONST-DECL "{i: upto(length(s1)) | i <= length(s2)}" |bytestrings| NIL) (|get| CONST-DECL "byte" |bytestrings| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|strcmp| CONST-DECL "subrange(-1, 1)" |bytestrings| NIL)) SHOSTAK)) (|strcmp_gt| 0 (|strcmp_gt-1| |nil| 3835734996 ("" (SKEEP) (("" (LET-NAME-REPLACE) (("" (EXPAND "strcmp") (("" (LIFT-IF) (("" (ASSERT) (("" (SPLIT -2) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) (("2" (REPLACE -2 :DIR RL) (("2" (EXPAND "get") (("2" (LEMMA "strdiff_neq") (("2" (INST?) (("2" (LET-NAME-REPLACE) (("1" (REPLACE -1 :HIDE? T) (("1" (REPLACE -3 :DIR RL) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|index| TYPE-EQ-DECL NIL |integertypes| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|byte| NONEMPTY-TYPE-EQ-DECL NIL |bytestrings| NIL) (|bytestring| TYPE-EQ-DECL NIL |bytestrings| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|strdiff| CONST-DECL "{i: upto(length(s1)) | i <= length(s2)}" |bytestrings| NIL) (|get| CONST-DECL "byte" |bytestrings| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) NIL (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|strdiff_neq| FORMULA-DECL NIL |bytestrings| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|strcmp| CONST-DECL "subrange(-1, 1)" |bytestrings| NIL)) SHOSTAK)) (|prefix_TCC1| 0 (|prefix_TCC1-1| |nil| 3835419960 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|index| TYPE-EQ-DECL NIL |integertypes| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|byte| NONEMPTY-TYPE-EQ-DECL NIL |bytestrings| NIL) (|bytestring| TYPE-EQ-DECL NIL |bytestrings| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK (|prefix| SUBTYPE "bytestrings.i" "index"))) (|prefix_TCC2| 0 (|prefix_TCC2-1| |nil| 3835419960 ("" (SUBTYPE-TCC) NIL NIL) NIL SHOSTAK (|prefix| SUBTYPE "bytestrings.j" "below(length(bytestrings.s))"))) (|length_prefix| 0 (|length_prefix-1| |nil| 3835735281 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|index| TYPE-EQ-DECL NIL |integertypes| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|byte| NONEMPTY-TYPE-EQ-DECL NIL |bytestrings| NIL) (|bytestring| TYPE-EQ-DECL NIL |bytestrings| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|get| CONST-DECL "byte" |bytestrings| NIL) (|prefix| CONST-DECL "bytestring" |bytestrings| NIL)) SHOSTAK)) (|prefix_ax_TCC1| 0 (|prefix_ax_TCC1-1| |nil| 3835419960 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|index| TYPE-EQ-DECL NIL |integertypes| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|byte| NONEMPTY-TYPE-EQ-DECL NIL |bytestrings| NIL) (|bytestring| TYPE-EQ-DECL NIL |bytestrings| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|get| CONST-DECL "byte" |bytestrings| NIL) (|prefix| CONST-DECL "bytestring" |bytestrings| NIL)) SHOSTAK (|prefix_ax| SUBTYPE "bytestrings.j" "below(length(bytestrings.prefix(bytestrings.s, bytestrings.i)))"))) (|prefix_ax_TCC2| 0 (|prefix_ax_TCC2-1| |nil| 3835419962 ("" (SUBTYPE-TCC) NIL NIL) NIL SHOSTAK (|prefix_ax| SUBTYPE "bytestrings.j" "below(length(bytestrings.s))"))) (|prefix_ax| 0 (|prefix_ax-1| |nil| 3835735315 ("" (GRIND) NIL NIL) ((|get| CONST-DECL "byte" |bytestrings| NIL) (|prefix| CONST-DECL "bytestring" |bytestrings| NIL)) SHOSTAK)) (|suffix_TCC1| 0 (|suffix_TCC1-1| |nil| 3835419962 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|index| TYPE-EQ-DECL NIL |integertypes| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|byte| NONEMPTY-TYPE-EQ-DECL NIL |bytestrings| NIL) (|bytestring| TYPE-EQ-DECL NIL |bytestrings| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK (|suffix| SUBTYPE "(number_fields.-)(bytestrings.s`length, bytestrings.i)" "index"))) (|suffix_TCC2| 0 (|suffix_TCC2-1| |nil| 3835419962 ("" (SUBTYPE-TCC) NIL NIL) NIL SHOSTAK (|suffix| SUBTYPE "(number_fields.+)(bytestrings.i, bytestrings.j)" "below(length(bytestrings.s))"))) (|length_suffix| 0 (|length_suffix-1| |nil| 3835735384 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|index| TYPE-EQ-DECL NIL |integertypes| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|byte| NONEMPTY-TYPE-EQ-DECL NIL |bytestrings| NIL) (|bytestring| TYPE-EQ-DECL NIL |bytestrings| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|suffix| CONST-DECL "bytestring" |bytestrings| NIL) (|get| CONST-DECL "byte" |bytestrings| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK)) (|suffix_ax_TCC1| 0 (|suffix_ax_TCC1-1| |nil| 3835419962 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|index| TYPE-EQ-DECL NIL |integertypes| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|byte| NONEMPTY-TYPE-EQ-DECL NIL |bytestrings| NIL) (|bytestring| TYPE-EQ-DECL NIL |bytestrings| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|suffix| CONST-DECL "bytestring" |bytestrings| NIL) (|get| CONST-DECL "byte" |bytestrings| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK (|suffix_ax| SUBTYPE "bytestrings.j" "below(length(bytestrings.suffix(bytestrings.s, bytestrings.i)))"))) (|suffix_ax_TCC2| 0 (|suffix_ax_TCC2-1| |nil| 3835419962 ("" (SUBTYPE-TCC) NIL NIL) NIL SHOSTAK (|suffix_ax| SUBTYPE "(number_fields.+)(bytestrings.i, bytestrings.j)" "below(length(bytestrings.s))"))) (|suffix_ax| 0 (|suffix_ax-1| |nil| 3835735414 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|index| TYPE-EQ-DECL NIL |integertypes| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|byte| NONEMPTY-TYPE-EQ-DECL NIL |bytestrings| NIL) (|bytestring| TYPE-EQ-DECL NIL |bytestrings| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|suffix| CONST-DECL "bytestring" |bytestrings| NIL) (|get| CONST-DECL "byte" |bytestrings| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK)) (|substr_TCC1| 0 (|substr_TCC1-1| |nil| 3835419962 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|index| TYPE-EQ-DECL NIL |integertypes| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|byte| NONEMPTY-TYPE-EQ-DECL NIL |bytestrings| NIL) (|bytestring| TYPE-EQ-DECL NIL |bytestrings| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|subrange| TYPE-EQ-DECL NIL |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|suffix| CONST-DECL "bytestring" |bytestrings| NIL) (|get| CONST-DECL "byte" |bytestrings| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK (|substr| SUBTYPE "(number_fields.-)(bytestrings.j, bytestrings.i)" "upto(length(bytestrings.suffix(bytestrings.s, bytestrings.i)))"))) (|substr_TCC2| 0 (|substr_TCC2-1| |nil| 3835419962 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|index| TYPE-EQ-DECL NIL |integertypes| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|byte| NONEMPTY-TYPE-EQ-DECL NIL |bytestrings| NIL) (|bytestring| TYPE-EQ-DECL NIL |bytestrings| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|subrange| TYPE-EQ-DECL NIL |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|prefix| CONST-DECL "bytestring" |bytestrings| NIL) (|suffix| CONST-DECL "bytestring" |bytestrings| NIL) (|get| CONST-DECL "byte" |bytestrings| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK (|substr| SUBTYPE "bytestrings.prefix(bytestrings.suffix(bytestrings.s, bytestrings.i), (number_fields.-)(bytestrings.j, bytestrings.i))" "{s1 | length(bytestrings.s1) = (number_fields.-)(bytestrings.j, bytestrings.i)}"))))(|lift|)(|union|)(|tostring|)(|file| (|max_file_size_TCC1| 0 (|max_file_size_TCC1-1| |nil| 3867803602 ("" (INST 1 "0") NIL NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|int32| TYPE-EQ-DECL NIL |integertypes| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK (|max_file_size| EXISTENCE "" "int32"))))(|mucalculus| (|lfp_induction| 0 (|lfp_induction-1| |nil| 3252401360 ("" (GRIND :IF-MATCH NIL) (("" (INST -3 "p!1") (("" (ASSERT) NIL NIL)) NIL)) NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |mucalculus| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|predicate_transformer| TYPE-EQ-DECL NIL |mucalculus| NIL) (|monotonic?| CONST-DECL "bool" |mucalculus| NIL) (|glb| CONST-DECL "pred[T]" |mucalculus| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|lfp| CONST-DECL "pred[T]" |mucalculus| NIL) (<= CONST-DECL "bool" |mucalculus| NIL)) SHOSTAK)) (|gfp_induction| 0 (|gfp_induction-1| |nil| 3252401454 ("" (GRIND :IF-MATCH NIL) (("" (INST 1 "p!1") (("" (ASSERT) NIL NIL)) NIL)) NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |mucalculus| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|predicate_transformer| TYPE-EQ-DECL NIL |mucalculus| NIL) (|monotonic?| CONST-DECL "bool" |mucalculus| NIL) (|lub| CONST-DECL "pred[T]" |mucalculus| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|gfp| CONST-DECL "pred[T]" |mucalculus| NIL) (<= CONST-DECL "bool" |mucalculus| NIL)) SHOSTAK)))(|ctlops| (EG_TCC1 0 (EG_TCC1-1 |nil| 3242699046 ("" (GRIND) NIL NIL) ((|state| FORMAL-TYPE-DECL NIL |ctlops| NIL) (EX CONST-DECL "bool" |ctlops| NIL) (<= CONST-DECL "bool" |mucalculus| NIL) (|monotonic?| CONST-DECL "bool" |mucalculus| NIL)) SHOSTAK (EG SUBTYPE "LAMBDA Q: (LAMBDA (s: ctlops.state): booleans.AND(ctlops.f(s), ctlops.EX(ctlops.N, ctlops.Q)(s)))" "(mucalculus[ctlops.state].monotonic?)"))) (EU_TCC1 0 (EU_TCC1-1 |nil| 3242699046 ("" (GRIND :IF-MATCH NIL) (("" (INST 2 "v!1") (("" (ASSERT) (("" (INST -1 "v!1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|state| FORMAL-TYPE-DECL NIL |ctlops| NIL) (|monotonic?| CONST-DECL "bool" |mucalculus| NIL) (<= CONST-DECL "bool" |mucalculus| NIL) (EX CONST-DECL "bool" |ctlops| NIL)) SHOSTAK (EU SUBTYPE "LAMBDA Q: (LAMBDA (s1: ctlops.state): booleans.OR(ctlops.g(s1), booleans.AND(ctlops.f(s1), ctlops.EX(ctlops.N, ctlops.Q)(s1))))" "(mucalculus[ctlops.state].monotonic?)"))))(|fairctlops| (|fairEG_TCC1| 0 (|fairEG_TCC1-1| |nil| 3242699046 ("" (GRIND :IF-MATCH NIL) (("" (INST -2 "p!1") (("" (ASSERT) (("" (SKOSIMP*) (("" (PROP) (("1" (SKOSIMP*) (("1" (INST -6 "s!2") (("1" (ASSERT) (("1" (FLATTEN) (("1" (INST -5 "v!1") (("1" (INST 2 "v!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST -5 "s!2") (("2" (ASSERT) (("2" (FLATTEN) (("2" (INST 3 "v!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|state| FORMAL-TYPE-DECL NIL |fairctlops| NIL) (|monotonic?| CONST-DECL "bool" |mucalculus| NIL) (|glb| CONST-DECL "pred[T]" |mucalculus| NIL) (|member| CONST-DECL "bool" |sets| NIL) (EU CONST-DECL "pred[state]" |ctlops| NIL) (|mu| CONST-DECL "pred[T]" |mucalculus| NIL) (|lfp| CONST-DECL "pred[T]" |mucalculus| NIL) (<= CONST-DECL "bool" |mucalculus| NIL) (EX CONST-DECL "bool" |ctlops| NIL)) SHOSTAK (|fairEG| SUBTYPE "LAMBDA P: ctlops[fairctlops.state].EU(fairctlops.N, fairctlops.f, LAMBDA (s1: fairctlops.state): booleans.AND(fairctlops.f(s1), booleans.AND(fairctlops.Ff(s1), ctlops[fairctlops.state].EX(fairctlops.N, fairctlops.P)(s1))))" "(mucalculus[fairctlops.state].monotonic?)"))))(|Fairctlops| (|CheckFair_TCC1| 0 (|CheckFair_TCC1-1| |nil| 3237052399 ("" (TERMINATION-TCC) NIL NIL) ((|length| DEF-DECL "nat" |list_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL (|CheckFair| TERMINATION "Fairctlops.CheckFair(Fairctlops.Q, Fairctlops.N, Fairctlops.f, Fairctlops.Gflist)" "NIL"))) (|FairEG_TCC1| 0 (|FairEG_TCC1-1| |nil| 3242699046 ("" (INDUCT "Fflist") (("1" (GRIND) NIL NIL) ("2" (GRIND :IF-MATCH NIL) (("2" (INST -3 "p!1") (("2" (ASSERT) (("2" (SKOSIMP*) (("2" (INST -4 "s!2") (("2" (ASSERT) (("2" (FLATTEN) (("2" (PROP) (("2" (SKOSIMP*) (("2" (INST -5 "N!1" "f!1") (("2" (INST -5 "p1!1" "p2!1") (("2" (ASSERT) (("2" (REPLACE -6) (("2" (INST -5 "v!1") (("2" (ASSERT) (("2" (INST 2 "v!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|glb| CONST-DECL "pred[T]" |mucalculus| NIL) (|member| CONST-DECL "bool" |sets| NIL) (EU CONST-DECL "pred[state]" |ctlops| NIL) (|mu| CONST-DECL "pred[T]" |mucalculus| NIL) (|lfp| CONST-DECL "pred[T]" |mucalculus| NIL) (EX CONST-DECL "bool" |ctlops| NIL) (<= CONST-DECL "bool" |mucalculus| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (|state| FORMAL-TYPE-DECL NIL |Fairctlops| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|CheckFair| DEF-DECL "pred[state]" |Fairctlops| NIL) (|monotonic?| CONST-DECL "bool" |mucalculus| NIL) (|predicate_transformer| TYPE-EQ-DECL NIL |mucalculus| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)) SHOSTAK (|FairEG| SUBTYPE "LAMBDA P: Fairctlops.CheckFair(Fairctlops.P, Fairctlops.N, Fairctlops.f, Fairctlops.Fflist)" "(mucalculus[Fairctlops.state].monotonic?)"))))(|bit| (|bit_cases| 0 (|bit_cases-1| |nil| 3242701078 ("" (SKOSIMP) (("" (ASSERT) NIL NIL)) NIL) NIL SHOSTAK)))(|bv|)(|bv_concat_def| (|oh_TCC1| 0 (|oh_TCC1-1| |nil| 3242699046 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|m| FORMAL-CONST-DECL "nat" |bv_concat_def| NIL) (|n| FORMAL-CONST-DECL "nat" |bv_concat_def| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK (|oh| SUBTYPE "(number_fields.-)(bv_concat_def.nm, bv_concat_def.m)" "below(bv_concat_def.n)"))))(|bv_bitwise| (|bv_OR| 0 (|bv_OR-1| |nil| 3242702892 ("" (GRIND) NIL NIL) ((OR CONST-DECL "bvec[N]" |bv_bitwise| NIL) (^ CONST-DECL "bit" |bv| NIL)) SHOSTAK)) (|bv_AND| 0 (|bv_AND-1| |nil| 3242702898 ("" (GRIND) NIL NIL) ((AND CONST-DECL "bvec[N]" |bv_bitwise| NIL) (^ CONST-DECL "bit" |bv| NIL)) SHOSTAK)) (|bv_IFF| 0 (|bv_IFF-1| |nil| 3242702904 ("" (GRIND) NIL NIL) ((IFF CONST-DECL "bvec[N]" |bv_bitwise| NIL) (^ CONST-DECL "bit" |bv| NIL)) SHOSTAK)) (|bv_XOR| 0 (|bv_XOR-1| |nil| 3242702908 ("" (GRIND) NIL NIL) ((/= CONST-DECL "boolean" |notequal| NIL) (XOR CONST-DECL "bool" |xor_def| NIL) (XOR CONST-DECL "bvec[N]" |bv_bitwise| NIL) (^ CONST-DECL "bit" |bv| NIL)) SHOSTAK)) (|bv_NOT| 0 (|bv_NOT-1| |nil| 3242702912 ("" (GRIND) NIL NIL) ((NOT CONST-DECL "bvec[N]" |bv_bitwise| NIL) (^ CONST-DECL "bit" |bv| NIL)) SHOSTAK)))(|bv_nat| (|bv2nat_rec_TCC1| 0 (|bv2nat_rec_TCC1-1| |nil| 3242699046 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (N FORMAL-CONST-DECL "nat" |bv_nat| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) SHOSTAK (|bv2nat_rec| SUBTYPE "(number_fields.-)(bv_nat.n, 1)" "nat"))) (|bv2nat_rec_TCC2| 0 (|bv2nat_rec_TCC2-1| |nil| 3242699046 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (N FORMAL-CONST-DECL "nat" |bv_nat| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK (|bv2nat_rec| SUBTYPE "((number_fields.-)(bv_nat.n, 1))" "below[N]"))) (|bv2nat_rec_TCC3| 0 (|bv2nat_rec_TCC3-1| |nil| 3242699046 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (N FORMAL-CONST-DECL "nat" |bv_nat| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK (|bv2nat_rec| SUBTYPE "(number_fields.-)(bv_nat.n, 1)" "upto(bv_nat.N)"))) (|bv2nat_rec_TCC4| 0 (|bv2nat_rec_TCC4-1| |nil| 3242699046 ("" (GRIND) NIL NIL) NIL SHOSTAK (|bv2nat_rec| TERMINATION "bv_nat.bv2nat_rec((number_fields.-)(bv_nat.n, 1), bv_nat.bv)" "NIL"))) (|bv2nat_rec_TCC5| 0 (|bv2nat_rec_TCC5-1| |nil| 3242699046 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (N FORMAL-CONST-DECL "nat" |bv_nat| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|b2n| CONST-DECL "nbit" |bit| NIL) (^ CONST-DECL "bit" |bv| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) SHOSTAK (|bv2nat_rec| SUBTYPE "(number_fields.+)(number_fields.*(exp2.exp2((number_fields.-)(bv_nat.n, 1)), bit.b2n(bv[bv_nat.N].^(bv_nat.bv, ((number_fields.-)(bv_nat.n, 1))))), bv_nat.bv2nat_rec((number_fields.-)(bv_nat.n, 1), bv_nat.bv))" "nat"))) (|bv_lem| 0 (|bv_lem-1| |nil| 3242703392 ("" (SKOSIMP) (("" (ASSERT) NIL NIL)) NIL) NIL SHOSTAK)) (|bv2nat_rec_bound| 0 (|bv2nat_rec_bound-1| |nil| 3242703427 ("" (INDUCT-AND-REWRITE "n" 1 "bv2nat_rec" "exp2") (("" (LEMMA "bv_lem") (("" (INST - "jt!1" "bv!1") (("" (EXPAND "^") (("" (EXPAND "b2n") (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|bv_lem| FORMULA-DECL NIL |bv_nat| NIL) (^ CONST-DECL "bit" |bv| NIL) (|b2n| CONST-DECL "nbit" |bit| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (<= CONST-DECL "bool" |reals| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|bit| TYPE-EQ-DECL NIL |bit| NIL) (|bvec| TYPE-EQ-DECL NIL |bv| NIL) (|bv2nat_rec| DEF-DECL "nat" |bv_nat| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (N FORMAL-CONST-DECL "nat" |bv_nat| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|upto_induction| FORMULA-DECL NIL |bounded_nat_inductions| NIL)) SHOSTAK)) (|bv2nat_TCC1| 0 (|bv2nat_TCC1-1| |nil| 3242699046 ("" (GRIND) NIL NIL) ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) SHOSTAK (|bv2nat| SUBTYPE "bv_nat.N" "upto(bv_nat.N)"))) (|bv2nat_TCC2| 0 (|bv2nat_TCC2-1| |nil| 3242699046 ("" (SKOSIMP*) (("" (REWRITE "bv2nat_rec_bound") NIL NIL)) NIL) ((|bv2nat_rec_bound| FORMULA-DECL NIL |bv_nat| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL) (N FORMAL-CONST-DECL "nat" |bv_nat| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|bit| TYPE-EQ-DECL NIL |bit| NIL) (|bvec| TYPE-EQ-DECL NIL |bv| NIL)) SHOSTAK (|bv2nat| SUBTYPE "bv_nat.bv2nat_rec(bv_nat.N, bv_nat.bv)" "below(exp2.exp2(bv_nat.N))"))) (|bv2nat_inj_rec| 0 (|bv2nat_inj_rec-1| |nil| 3242703463 ("" (INDUCT "n") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP*) (("2" (ASSERT) (("2" (EXPAND "bv2nat_rec" +) (("2" (EXPAND "^") (("2" (INST - "bv1!1" "bv2!1") (("2" (BDDSIMP) (("1" (SKOSIMP*) (("1" (INST?) (("1" (ASSERT) (("1" (EXPAND "b2n") (("1" (LIFT-IF) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -4 "jt!1") (("2" (ASSERT) NIL NIL)) NIL) ("3" (HIDE 2 3) (("3" (LEMMA "bv2nat_rec_bound") (("3" (INST-CP - "jt!1" "bv1!1") (("3" (INST - "jt!1" "bv2!1") (("3" (LEMMA "bv_lem") (("3" (INST-CP - "jt!1" "bv1!1") (("3" (INST - "jt!1" "bv2!1") (("3" (EXPAND "b2n") (("3" (LIFT-IF) (("3" (LIFT-IF) (("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKOSIMP*) (("4" (INST?) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|bv_lem| FORMULA-DECL NIL |bv_nat| NIL) (|bv2nat_rec_bound| FORMULA-DECL NIL |bv_nat| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|b2n| CONST-DECL "nbit" |bit| NIL) (^ CONST-DECL "bit" |bv| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|upto_induction| FORMULA-DECL NIL |bounded_nat_inductions| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (N FORMAL-CONST-DECL "nat" |bv_nat| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bv2nat_rec| DEF-DECL "nat" |bv_nat| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bvec| TYPE-EQ-DECL NIL |bv| NIL) (|bit| TYPE-EQ-DECL NIL |bit| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL)) SHOSTAK)) (|bv2nat_surj_rec| 0 (|bv2nat_surj_rec-1| |nil| 3242703513 ("" (INDUCT "n" 1 "upto_induction[N]") (("1" (SKOSIMP*) (("1" (TYPEPRED "y!1") (("1" (GRIND) (("1" (INST 1 "fill[N](FALSE)") NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (TYPEPRED "y!1") (("2" (EXPAND "exp2") (("2" (EXPAND "bv2nat_rec" +) (("2" (CASE "FORALL bv,(b:bit),(n:below(N)),(m:{n1:below(N)|n<=n1}):
                   bv2nat_rec(n,bv)=bv2nat_rec(n,bv with [(m):=b])") (("1" (CASE "y!1<exp2(jt!1)") (("1" (INST -5 "y!1") (("1" (SKOSIMP*) (("1" (INST + "bv!1 with [(jt!1):= FALSE]") (("1" (INST?) (("1" (EXPAND "^") (("1" (ASSERT) (("1" (ASSERT) (("1" (EXPAND "b2n") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -4 "y!1-exp2(jt!1)") (("1" (EXPAND "^") (("1" (SKOSIMP*) (("1" (INST + "bv!1 with [(jt!1):= TRUE]") (("1" (INST?) (("1" (EXPAND "b2n") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3 2) (("2" (INDUCT-AND-REWRITE "n" 1 "bv2nat_rec" "^") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) NIL NIL (^ CONST-DECL "bit" |bv| NIL) (|b2n| CONST-DECL "nbit" |bit| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|below_induction| FORMULA-DECL NIL |bounded_nat_inductions| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (FALSE CONST-DECL "bool" |booleans| NIL) (|fill| CONST-DECL "bit" |bv| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|upto_induction| FORMULA-DECL NIL |bounded_nat_inductions| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (N FORMAL-CONST-DECL "nat" |bv_nat| NIL) (|bv2nat_rec| DEF-DECL "nat" |bv_nat| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|bvec| TYPE-EQ-DECL NIL |bv| NIL) (|bit| TYPE-EQ-DECL NIL |bit| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (< CONST-DECL "bool" |reals| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL)) SHOSTAK)) (|bv2nat_inj| 0 (|bv2nat_inj-1| |nil| 3242703551 ("" (EXPAND "bv2nat") (("" (SKOLEM 1 ("x!1" "y!1")) (("" (REWRITE "bv2nat_inj_rec") (("" (FLATTEN) (("" (APPLY-EXTENSIONALITY) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL) (|bvec| TYPE-EQ-DECL NIL |bv| NIL) (|bit| TYPE-EQ-DECL NIL |bit| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (N FORMAL-CONST-DECL "nat" |bv_nat| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|bv2nat_inj_rec| FORMULA-DECL NIL |bv_nat| NIL) (|bv2nat| CONST-DECL "below(exp2(N))" |bv_nat| NIL)) SHOSTAK)) (|bv2nat_surj| 0 (|bv2nat_surj-1| |nil| 3242703576 ("" (EXPAND "bv2nat") (("" (SKOLEM!) (("" (REWRITE "bv2nat_surj_rec") NIL NIL)) NIL)) NIL) ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (< CONST-DECL "bool" |reals| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (N FORMAL-CONST-DECL "nat" |bv_nat| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|bv2nat_surj_rec| FORMULA-DECL NIL |bv_nat| NIL) (|bv2nat| CONST-DECL "below(exp2(N))" |bv_nat| NIL)) SHOSTAK)) (|bv2nat_bij| 0 (|bv2nat_bij-1| |nil| 3242703599 ("" (EXPAND "bijective?") (("" (PROP) (("1" (EXPAND "injective?") (("1" (SKOSIMP*) (("1" (REWRITE "bv2nat_inj") NIL NIL)) NIL)) NIL) ("2" (EXPAND "surjective?") (("2" (SKOSIMP*) (("2" (REWRITE "bv2nat_surj") NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|bvec| TYPE-EQ-DECL NIL |bv| NIL) (|bit| TYPE-EQ-DECL NIL |bit| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (N FORMAL-CONST-DECL "nat" |bv_nat| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|bv2nat_inj| FORMULA-DECL NIL |bv_nat| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bv2nat_surj| FORMULA-DECL NIL |bv_nat| NIL) (|surjective?| CONST-DECL "bool" |functions| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL)) SHOSTAK)) (|bv2nat_rec_fill_F| 0 (|bv2nat_rec_fill_F-1| |nil| 3242703627 ("" (INDUCT-AND-REWRITE "n" 1 "bv2nat_rec" "fill" "^" "b2n") NIL NIL) ((<= CONST-DECL "bool" |reals| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|bit| TYPE-EQ-DECL NIL |bit| NIL) (|bvec| TYPE-EQ-DECL NIL |bv| NIL) (|bv2nat_rec| DEF-DECL "nat" |bv_nat| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|fill| CONST-DECL "bit" |bv| NIL) (FALSE CONST-DECL "bool" |booleans| NIL) (N FORMAL-CONST-DECL "nat" |bv_nat| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|upto_induction| FORMULA-DECL NIL |bounded_nat_inductions| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|b2n| CONST-DECL "nbit" |bit| NIL) (^ CONST-DECL "bit" |bv| NIL)) SHOSTAK)) (|bv2nat_rec_fill_T| 0 (|bv2nat_rec_fill_T-1| |nil| 3242703658 ("" (INDUCT-AND-REWRITE "n" 1 "bv2nat_rec" "fill" "^" "b2n") (("1" (EXPAND "exp2") (("1" (PROPAX) NIL NIL)) NIL) ("2" (EXPAND "exp2" 1 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ((|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|b2n| CONST-DECL "nbit" |bit| NIL) (^ CONST-DECL "bit" |bv| NIL) (<= CONST-DECL "bool" |reals| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|bit| TYPE-EQ-DECL NIL |bit| NIL) (|bvec| TYPE-EQ-DECL NIL |bv| NIL) (|bv2nat_rec| DEF-DECL "nat" |bv_nat| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|fill| CONST-DECL "bit" |bv| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (N FORMAL-CONST-DECL "nat" |bv_nat| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|upto_induction| FORMULA-DECL NIL |bounded_nat_inductions| NIL)) SHOSTAK)) (|bv2nat_fill_F| 0 (|bv2nat_fill_F-1| |nil| 3242703711 ("" (EXPAND "bv2nat") (("" (REWRITE "bv2nat_rec_fill_F") NIL NIL)) NIL) ((|bv2nat_rec_fill_F| FORMULA-DECL NIL |bv_nat| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL) (N FORMAL-CONST-DECL "nat" |bv_nat| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|bv2nat| CONST-DECL "below(exp2(N))" |bv_nat| NIL)) SHOSTAK)) (|bv2nat_fill_T| 0 (|bv2nat_fill_T-1| |nil| 3242703727 ("" (EXPAND "bv2nat") (("" (REWRITE "bv2nat_rec_fill_T") NIL NIL)) NIL) ((|bv2nat_rec_fill_T| FORMULA-DECL NIL |bv_nat| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL) (N FORMAL-CONST-DECL "nat" |bv_nat| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|bv2nat| CONST-DECL "below(exp2(N))" |bv_nat| NIL)) SHOSTAK)) (|bv2nat_eq0| 0 (|bv2nat_eq0-1| |nil| 3242703746 ("" (SKOSIMP*) (("" (REWRITE "bv2nat_inj") (("" (HIDE 2) (("" (REWRITE "bv2nat_fill_F") NIL NIL)) NIL)) NIL)) NIL) ((|bv2nat_inj| FORMULA-DECL NIL |bv_nat| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (N FORMAL-CONST-DECL "nat" |bv_nat| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|bit| TYPE-EQ-DECL NIL |bit| NIL) (|bvec| TYPE-EQ-DECL NIL |bv| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|fill| CONST-DECL "bit" |bv| NIL) (FALSE CONST-DECL "bool" |booleans| NIL) (|bv2nat_fill_F| FORMULA-DECL NIL |bv_nat| NIL)) SHOSTAK)) (|bv2nat_eq_max| 0 (|bv2nat_eq_max-1| |nil| 3242703767 ("" (SKOSIMP*) (("" (REWRITE "bv2nat_inj") (("" (HIDE 2) (("" (REWRITE "bv2nat_fill_T") NIL NIL)) NIL)) NIL)) NIL) ((|bv2nat_inj| FORMULA-DECL NIL |bv_nat| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (N FORMAL-CONST-DECL "nat" |bv_nat| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|bit| TYPE-EQ-DECL NIL |bit| NIL) (|bvec| TYPE-EQ-DECL NIL |bv| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|fill| CONST-DECL "bit" |bv| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|bv2nat_fill_T| FORMULA-DECL NIL |bv_nat| NIL)) SHOSTAK)) (|bv2nat_top_bit_TCC1| 0 (|bv2nat_top_bit_TCC1-1| |nil| 3242699047 ("" (GRIND) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) SHOSTAK (|bv2nat_top_bit| SUBTYPE "(number_fields.-)(bv_nat.N, 1)" "nat"))) (|bv2nat_top_bit_TCC2| 0 (|bv2nat_top_bit_TCC2-1| |nil| 3242699047 ("" (GRIND) NIL NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|bv2nat| CONST-DECL "below(exp2(N))" |bv_nat| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK (|bv2nat_top_bit| SUBTYPE "((number_fields.-)(bv_nat.N, 1))" "below[N]"))) (|bv2nat_top_bit_TCC3| 0 (|bv2nat_top_bit_TCC3-1| |nil| 3242699047 ("" (GRIND) NIL NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|bv2nat| CONST-DECL "below(exp2(N))" |bv_nat| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK (|bv2nat_top_bit| SUBTYPE "((number_fields.-)(bv_nat.N, 1))" "below[N]"))) (|bv2nat_top_bit| 0 (|bv2nat_top_bit-1| |nil| 3242703785 ("" (SKOSIMP*) (("" (EXPAND "^") (("" (EXPAND "bv2nat") (("" (EXPAND "bv2nat_rec") (("" (LIFT-IF) (("" (ASSERT) (("" (LEMMA "bv_lem") (("" (INST?) (("" (PROP) (("1" (EXPAND "b2n") (("1" (EXPAND "^") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "b2n") (("2" (EXPAND "^") (("2" (ASSERT) (("2" (REWRITE "bv2nat_rec_bound") NIL NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "b2n") (("3" (EXPAND "^") (("3" (LIFT-IF) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (^ CONST-DECL "bit" |bv| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|bv2nat_rec| DEF-DECL "nat" |bv_nat| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (N FORMAL-CONST-DECL "nat" |bv_nat| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|bit| TYPE-EQ-DECL NIL |bit| NIL) (|bvec| TYPE-EQ-DECL NIL |bv| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL) (|bv2nat_rec_bound| FORMULA-DECL NIL |bv_nat| NIL) (|b2n| CONST-DECL "nbit" |bit| NIL) (|bv_lem| FORMULA-DECL NIL |bv_nat| NIL) (|bv2nat| CONST-DECL "below(exp2(N))" |bv_nat| NIL)) SHOSTAK)) (|bv2nat_topbit_TCC1| 0 (|bv2nat_topbit_TCC1-1| |nil| 3242699047 ("" (GRIND) NIL NIL) ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) SHOSTAK (|bv2nat_topbit| SUBTYPE "((number_fields.-)(bv_nat.N, 1))" "below[N]"))) (|bv2nat_topbit| 0 (|bv2nat_topbit-1| |nil| 3242703825 ("" (SKOSIMP*) (("" (LEMMA "bv2nat_top_bit") (("" (INST?) (("" (ASSERT) (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|bv2nat_top_bit| FORMULA-DECL NIL |bv_nat| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|bvec| TYPE-EQ-DECL NIL |bv| NIL) (|bit| TYPE-EQ-DECL NIL |bit| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (N FORMAL-CONST-DECL "nat" |bv_nat| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK)) (|nat2bv_TCC1| 0 (|nat2bv_TCC1-3| "" 3471680341 ("" (INST 1 "inverse(bv2nat)") (("" (SKOSIMP*) (("" (LEMMA "bijective_inverse[bvec[N],below(exp2(N))]") (("" (INST -1 "inverse[bvec[N], below(exp2(N))](bv2nat)(x1!1)" "x1!1" "bv2nat") (("1" (GROUND) NIL NIL) ("2" (HIDE 2) (("2" (LEMMA "bv2nat_bij") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|bijective?| CONST-DECL "bool" |functions| NIL) (|bv2nat_bij| FORMULA-DECL NIL |bv_nat| NIL) (|bijective_inverse| FORMULA-DECL NIL |function_inverse| NIL) (|inverse| CONST-DECL "D" |function_inverse| NIL) (|bv2nat| CONST-DECL "below(exp2(N))" |bv_nat| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|bvec| TYPE-EQ-DECL NIL |bv| NIL) (|bit| TYPE-EQ-DECL NIL |bit| NIL) (< CONST-DECL "bool" |reals| NIL) (N FORMAL-CONST-DECL "nat" |bv_nat| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)) SHOSTAK (|nat2bv| EXISTENCE "" "[val: below(exp2(N)) -> {bv: bv[bv_nat.N].bvec | bv_nat.bv2nat(bv) = val}]")) (|nat2bv_TCC1-2| "" 3458165475 ("" (INST 1 "inverse(bv2nat)") (("" (SKOSIMP*) (("" (LEMMA "bijective_inverse[bvec[N],below(exp2(N))]") (("" (INST -1 "x1!1" "inverse[bvec[N], below(exp2(N))](bv2nat)(x1!1)" "bv2nat") (("1" (GROUND) NIL NIL) ("2" (HIDE 2) (("2" (LEMMA "bv2nat_bij") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|nat2bv| EXISTENCE "" "[val: below(exp2(N)) -> {bv: bv[bv_nat.N].bvec | bv_nat.bv2nat(bv) = val}]")) (|nat2bv_TCC1-1| |nil| 3242699047 ("" (INST 1 "inverse(bv2nat)") (("" (SKOSIMP*) (("" (LEMMA "bijective_inverse[bvec[N],below(exp2(N))]") (("" (INST -1 "inverse[bvec[N], below(exp2(N))](bv2nat)(x1!1)" "x1!1" "bv2nat") (("1" (GROUND) NIL NIL) ("2" (HIDE 2) (("2" (LEMMA "bv2nat_bij") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|nat2bv| EXISTENCE "" "[val: below(exp2(N)) -> {bv: bv[bv_nat.N].bvec | bv_nat.bv2nat(bv) = val}]"))) (|nat2bv_def| 0 (|nat2bv_def-1| |nil| 3242703848 ("" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (TYPEPRED "nat2bv(x!1)") (("1" (EXPAND "inverse") (("1" (LEMMA "epsilon_ax[bvec[N]]") (("1" (INST?) (("1" (SPLIT -1) (("1" (REWRITE "bv2nat_inj") NIL NIL) ("2" (HIDE 2) (("2" (INST 1 "nat2bv(x!1)") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (EXPAND "inverse") (("2" (LEMMA "epsilon_ax[bvec[N]]") (("2" (INST?) (("2" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (HIDE 2) (("2" (INST 1 "nat2bv(x1!1)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|epsilon_ax| FORMULA-DECL NIL |epsilons| NIL) (|epsilon| CONST-DECL "T" |epsilons| NIL) (|bv2nat_inj| FORMULA-DECL NIL |bv_nat| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|bit| TYPE-EQ-DECL NIL |bit| NIL) (|bvec| TYPE-EQ-DECL NIL |bv| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|bv2nat| CONST-DECL "below(exp2(N))" |bv_nat| NIL) (|nat2bv| CONST-DECL "{bv: bvec[N] | bv2nat(bv) = val}" |bv_nat| NIL) (|inverse| CONST-DECL "D" |function_inverse| NIL) (< CONST-DECL "bool" |reals| NIL) (N FORMAL-CONST-DECL "nat" |bv_nat| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)) SHOSTAK)) (|nat2bv_bij| 0 (|nat2bv_bij-1| |nil| 3242703876 ("" (LEMMA "bv2nat_bij") (("" (REWRITE "nat2bv_def") (("" (REWRITE "bij_inv_is_bij") NIL NIL)) NIL)) NIL) ((|nat2bv_def| FORMULA-DECL NIL |bv_nat| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bvec| TYPE-EQ-DECL NIL |bv| NIL) (|bit| TYPE-EQ-DECL NIL |bit| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (N FORMAL-CONST-DECL "nat" |bv_nat| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|bv2nat| CONST-DECL "below(exp2(N))" |bv_nat| NIL) (|bij_inv_is_bij| FORMULA-DECL NIL |function_inverse| NIL) (|bv2nat_bij| FORMULA-DECL NIL |bv_nat| NIL)) SHOSTAK)) (|nat2bv_inv| 0 (|nat2bv_inv-1| |nil| 3242703899 ("" (SKOSIMP*) (("" (TYPEPRED "nat2bv(bv2nat(bv!1))") (("" (REWRITE "bv2nat_inj") NIL NIL)) NIL)) NIL) ((|nat2bv| CONST-DECL "{bv: bvec[N] | bv2nat(bv) = val}" |bv_nat| NIL) (|bv2nat| CONST-DECL "below(exp2(N))" |bv_nat| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bvec| TYPE-EQ-DECL NIL |bv| NIL) (|bit| TYPE-EQ-DECL NIL |bit| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (N FORMAL-CONST-DECL "nat" |bv_nat| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bv2nat_inj| FORMULA-DECL NIL |bv_nat| NIL)) SHOSTAK)) (|nat2bv_rew| 0 (|nat2bv_rew-1| |nil| 3242703922 ("" (SKOSIMP*) (("" (TYPEPRED "nat2bv(val!1)") (("" (PROP) (("1" (ASSERT) NIL NIL) ("2" (REWRITE "bv2nat_inj") NIL NIL)) NIL)) NIL)) NIL) ((|nat2bv| CONST-DECL "{bv: bvec[N] | bv2nat(bv) = val}" |bv_nat| NIL) (|bv2nat| CONST-DECL "below(exp2(N))" |bv_nat| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bvec| TYPE-EQ-DECL NIL |bv| NIL) (|bit| TYPE-EQ-DECL NIL |bit| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (N FORMAL-CONST-DECL "nat" |bv_nat| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bv2nat_inj| FORMULA-DECL NIL |bv_nat| NIL)) SHOSTAK)) (|bv2nat_inv| 0 (|bv2nat_inv-1| |nil| 3242703948 ("" (SKOSIMP*) (("" (ASSERT) NIL NIL)) NIL) NIL SHOSTAK)))(|empty_bv|)(|bv_caret| (|caret_TCC1| 0 (|caret_TCC1-1| |nil| 3242699047 ("" (SUBTYPE-TCC) NIL NIL) ((|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) SHOSTAK (|caret| SUBTYPE "(number_fields.+)((number_fields.-)(1, PROJ_2(bv_caret.sp)), PROJ_1(bv_caret.sp))" "nat"))) (|caret_TCC2| 0 (|caret_TCC2-1| |nil| 3242699047 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (N FORMAL-CONST-DECL "nat" |bv_caret| NIL) (<= CONST-DECL "bool" |reals| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) SHOSTAK (|caret| SUBTYPE "(number_fields.+)(bv_caret.ii, PROJ_2(bv_caret.sp))" "below(bv_caret.N)"))) (|bv_caret_all_TCC1| 0 (|bv_caret_all_TCC1-1| |nil| 3242699047 ("" (SUBTYPE-TCC) NIL NIL) ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) SHOSTAK (|bv_caret_all| SUBTYPE "(number_fields.-)(bv_caret.N, 1)" "below(bv_caret.N)"))) (|bv_caret_all_TCC2| 0 (|bv_caret_all_TCC2-1| |nil| 3242699047 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) SHOSTAK (|bv_caret_all| SUBTYPE "0" "upto((number_fields.-)(bv_caret.N, 1))"))) (|bv_caret_all| 0 (|bv_caret_all-1| |nil| 3242704209 ("" (SKOSIMP*) (("" (EXPAND "^") (("" (APPLY-EXTENSIONALITY 1 :HIDE? T) NIL NIL)) NIL)) NIL) ((^ CONST-DECL "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" |bv_caret| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (N FORMAL-CONST-DECL "nat" |bv_caret| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|bvec| TYPE-EQ-DECL NIL |bv| NIL) (|bit| TYPE-EQ-DECL NIL |bit| NIL)) SHOSTAK)) (|bv_caret_ii_0_TCC1| 0 (|bv_caret_ii_0_TCC1-1| |nil| 3242699047 ("" (SUBTYPE-TCC) NIL NIL) NIL SHOSTAK (|bv_caret_ii_0| SUBTYPE "bv_caret.i" "upto(bv_caret.i)"))) (|bv_caret_ii_0| 0 (|bv_caret_ii_0-1| |nil| 3242704230 ("" (SKOSIMP*) (("" (EXPAND "^") (("" (PROPAX) NIL NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (^ CONST-DECL "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" |bv_caret| NIL) (^ CONST-DECL "bit" |bv| NIL)) SHOSTAK)) (|bv_caret_elim_TCC1| 0 (|bv_caret_elim_TCC1-1| |nil| 3242699047 ("" (SUBTYPE-TCC) NIL NIL) ((|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK (|bv_caret_elim| SUBTYPE "(number_fields.-)((number_fields.+)(1, bv_caret.i), bv_caret.j)" "nat"))) (|bv_caret_elim_TCC2| 0 (|bv_caret_elim_TCC2-1| |nil| 3242699047 ("" (SUBTYPE-TCC) NIL NIL) ((|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) SHOSTAK (|bv_caret_elim| SUBTYPE "((number_fields.+)(bv_caret.j, bv_caret.k))" "below[N]"))) (|bv_caret_elim| 0 (|bv_caret_elim-1| |nil| 3242704247 ("" (SKOSIMP*) (("" (EXPAND "^") (("" (PROPAX) NIL NIL)) NIL)) NIL) ((|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (^ CONST-DECL "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" |bv_caret| NIL) (^ CONST-DECL "bit" |bv| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK)))(|integer_bv_ops| (|u16xor_TCC1| 0 (|u16xor_TCC1-1| |nil| 3835419966 ("" (SUBTYPE-TCC) NIL NIL) ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) SHOSTAK (|u16xor| SUBTYPE "integer_bv_ops.x16" "below(exp2.exp2(16))"))) (|u16xor_TCC2| 0 (|u16xor_TCC2-1| |nil| 3835419966 ("" (SKEEP) (("" (LEMMA "bv2nat_rec_bound[16]") (("" (EXPAND "bv2nat") (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|bv2nat_rec_bound| FORMULA-DECL NIL |bv_nat| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|bit| TYPE-EQ-DECL NIL |bit| NIL) (|bvec| TYPE-EQ-DECL NIL |bv| NIL) (XOR CONST-DECL "bvec[N]" |bv_bitwise| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|nat2bv| CONST-DECL "{bv: bvec[N] | bv2nat(bv) = val}" |bv_nat| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|uint16| TYPE-EQ-DECL NIL |integertypes| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|bv2nat| CONST-DECL "below(exp2(N))" |bv_nat| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) SHOSTAK (|u16xor| SUBTYPE "bv_nat[16].bv2nat((bv_bitwise[16].XOR(bv_nat[16].nat2bv(integer_bv_ops.x16), bv_nat[16].nat2bv(integer_bv_ops.y16))))" "uint16"))) (|u32xor_TCC1| 0 (|u32xor_TCC1-1| |nil| 3835419966 ("" (SUBTYPE-TCC) NIL NIL) ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) SHOSTAK (|u32xor| SUBTYPE "integer_bv_ops.x32" "below(exp2.exp2(32))"))) (|u32xor_TCC2| 0 (|u32xor_TCC2-1| |nil| 3835419966 ("" (SKEEP) (("" (EXPAND "bv2nat") (("" (LEMMA "bv2nat_rec_bound[32]") (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|bv2nat| CONST-DECL "below(exp2(N))" |bv_nat| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|bit| TYPE-EQ-DECL NIL |bit| NIL) (|bvec| TYPE-EQ-DECL NIL |bv| NIL) (XOR CONST-DECL "bvec[N]" |bv_bitwise| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|nat2bv| CONST-DECL "{bv: bvec[N] | bv2nat(bv) = val}" |bv_nat| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|bv2nat_rec_bound| FORMULA-DECL NIL |bv_nat| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) SHOSTAK (|u32xor| SUBTYPE "bv_nat[32].bv2nat((bv_bitwise[32].XOR(bv_nat[32].nat2bv(integer_bv_ops.x32), bv_nat[32].nat2bv(integer_bv_ops.y32))))" "uint32"))) (|u64xor_TCC1| 0 (|u64xor_TCC1-1| |nil| 3835419966 ("" (SUBTYPE-TCC) NIL NIL) ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) SHOSTAK (|u64xor| SUBTYPE "integer_bv_ops.x64" "below(exp2.exp2(64))"))) (|u64xor_TCC2| 0 (|u64xor_TCC2-1| |nil| 3835419966 ("" (SKEEP) (("" (EXPAND "bv2nat") (("" (LEMMA "bv2nat_rec_bound[64]") (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|bv2nat| CONST-DECL "below(exp2(N))" |bv_nat| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|bit| TYPE-EQ-DECL NIL |bit| NIL) (|bvec| TYPE-EQ-DECL NIL |bv| NIL) (XOR CONST-DECL "bvec[N]" |bv_bitwise| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|nat2bv| CONST-DECL "{bv: bvec[N] | bv2nat(bv) = val}" |bv_nat| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|bv2nat_rec_bound| FORMULA-DECL NIL |bv_nat| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) SHOSTAK (|u64xor| SUBTYPE "bv_nat[64].bv2nat((bv_bitwise[64].XOR(bv_nat[64].nat2bv(integer_bv_ops.x64), bv_nat[64].nat2bv(integer_bv_ops.y64))))" "uint64"))) (|u16and_TCC1| 0 (|u16and_TCC1-1| |nil| 3835419966 ("" (SKEEP) (("" (EXPAND "bv2nat") (("" (LEMMA "bv2nat_rec_bound[16]") (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|bv2nat| CONST-DECL "below(exp2(N))" |bv_nat| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|bit| TYPE-EQ-DECL NIL |bit| NIL) (|bvec| TYPE-EQ-DECL NIL |bv| NIL) (AND CONST-DECL "bvec[N]" |bv_bitwise| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|nat2bv| CONST-DECL "{bv: bvec[N] | bv2nat(bv) = val}" |bv_nat| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|uint16| TYPE-EQ-DECL NIL |integertypes| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|bv2nat_rec_bound| FORMULA-DECL NIL |bv_nat| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) SHOSTAK (|u16and| SUBTYPE "bv_nat[16].bv2nat((bv_bitwise[16].AND(bv_nat[16].nat2bv(integer_bv_ops.x16), bv_nat[16].nat2bv(integer_bv_ops.y16))))" "uint16"))) (|u32and_TCC1| 0 (|u32and_TCC1-1| |nil| 3835419966 ("" (SKEEP) (("" (EXPAND "bv2nat") (("" (USE "bv2nat_rec_bound[32]") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|bv2nat| CONST-DECL "below(exp2(N))" |bv_nat| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|bv2nat_rec_bound| FORMULA-DECL NIL |bv_nat| NIL) (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nat2bv| CONST-DECL "{bv: bvec[N] | bv2nat(bv) = val}" |bv_nat| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (AND CONST-DECL "bvec[N]" |bv_bitwise| NIL) (|bvec| TYPE-EQ-DECL NIL |bv| NIL) (|bit| TYPE-EQ-DECL NIL |bit| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) SHOSTAK (|u32and| SUBTYPE "bv_nat[32].bv2nat((bv_bitwise[32].AND(bv_nat[32].nat2bv(integer_bv_ops.x32), bv_nat[32].nat2bv(integer_bv_ops.y32))))" "uint32"))) (|u64and_TCC1| 0 (|u64and_TCC1-1| |nil| 3835419966 ("" (SKEEP) (("" (EXPAND "bv2nat") (("" (USE "bv2nat_rec_bound[64]") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|bv2nat| CONST-DECL "below(exp2(N))" |bv_nat| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|bv2nat_rec_bound| FORMULA-DECL NIL |bv_nat| NIL) (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nat2bv| CONST-DECL "{bv: bvec[N] | bv2nat(bv) = val}" |bv_nat| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (AND CONST-DECL "bvec[N]" |bv_bitwise| NIL) (|bvec| TYPE-EQ-DECL NIL |bv| NIL) (|bit| TYPE-EQ-DECL NIL |bit| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) SHOSTAK (|u64and| SUBTYPE "bv_nat[64].bv2nat((bv_bitwise[64].AND(bv_nat[64].nat2bv(integer_bv_ops.x64), bv_nat[64].nat2bv(integer_bv_ops.y64))))" "uint64"))) (|u16or_TCC1| 0 (|u16or_TCC1-1| |nil| 3835419966 ("" (SKEEP) (("" (EXPAND "bv2nat") (("" (USE "bv2nat_rec_bound[16]") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|bv2nat| CONST-DECL "below(exp2(N))" |bv_nat| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|bv2nat_rec_bound| FORMULA-DECL NIL |bv_nat| NIL) (|uint16| TYPE-EQ-DECL NIL |integertypes| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nat2bv| CONST-DECL "{bv: bvec[N] | bv2nat(bv) = val}" |bv_nat| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (OR CONST-DECL "bvec[N]" |bv_bitwise| NIL) (|bvec| TYPE-EQ-DECL NIL |bv| NIL) (|bit| TYPE-EQ-DECL NIL |bit| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) SHOSTAK (|u16or| SUBTYPE "bv_nat[16].bv2nat((bv_bitwise[16].OR(bv_nat[16].nat2bv(integer_bv_ops.x16), bv_nat[16].nat2bv(integer_bv_ops.y16))))" "uint16"))) (|u32or_TCC1| 0 (|u32or_TCC1-1| |nil| 3835419966 ("" (SKEEP) (("" (EXPAND "bv2nat") (("" (USE "bv2nat_rec_bound[32]") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|bv2nat| CONST-DECL "below(exp2(N))" |bv_nat| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|bv2nat_rec_bound| FORMULA-DECL NIL |bv_nat| NIL) (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nat2bv| CONST-DECL "{bv: bvec[N] | bv2nat(bv) = val}" |bv_nat| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (OR CONST-DECL "bvec[N]" |bv_bitwise| NIL) (|bvec| TYPE-EQ-DECL NIL |bv| NIL) (|bit| TYPE-EQ-DECL NIL |bit| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) SHOSTAK (|u32or| SUBTYPE "bv_nat[32].bv2nat((bv_bitwise[32].OR(bv_nat[32].nat2bv(integer_bv_ops.x32), bv_nat[32].nat2bv(integer_bv_ops.y32))))" "uint32"))) (|u64or_TCC1| 0 (|u64or_TCC1-1| |nil| 3835419967 ("" (SKEEP) (("" (EXPAND "bv2nat") (("" (USE "bv2nat_rec_bound[64]") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|bv2nat| CONST-DECL "below(exp2(N))" |bv_nat| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|bv2nat_rec_bound| FORMULA-DECL NIL |bv_nat| NIL) (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nat2bv| CONST-DECL "{bv: bvec[N] | bv2nat(bv) = val}" |bv_nat| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (OR CONST-DECL "bvec[N]" |bv_bitwise| NIL) (|bvec| TYPE-EQ-DECL NIL |bv| NIL) (|bit| TYPE-EQ-DECL NIL |bit| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) SHOSTAK (|u64or| SUBTYPE "bv_nat[64].bv2nat((bv_bitwise[64].OR(bv_nat[64].nat2bv(integer_bv_ops.x64), bv_nat[64].nat2bv(integer_bv_ops.y64))))" "uint64"))) (|u16not_TCC1| 0 (|u16not_TCC1-1| |nil| 3835419967 ("" (SKEEP) (("" (EXPAND "bv2nat") (("" (USE "bv2nat_rec_bound[16]") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|bv2nat| CONST-DECL "below(exp2(N))" |bv_nat| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|bv2nat_rec_bound| FORMULA-DECL NIL |bv_nat| NIL) (|uint16| TYPE-EQ-DECL NIL |integertypes| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nat2bv| CONST-DECL "{bv: bvec[N] | bv2nat(bv) = val}" |bv_nat| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (NOT CONST-DECL "bvec[N]" |bv_bitwise| NIL) (|bvec| TYPE-EQ-DECL NIL |bv| NIL) (|bit| TYPE-EQ-DECL NIL |bit| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) SHOSTAK (|u16not| SUBTYPE "bv_nat[16].bv2nat((bv_bitwise[16].NOT)(bv_nat[16].nat2bv(integer_bv_ops.x16)))" "uint16"))) (|u32not_TCC1| 0 (|u32not_TCC1-1| |nil| 3835419967 ("" (SKEEP) (("" (EXPAND "bv2nat") (("" (USE "bv2nat_rec_bound[32]") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|bv2nat| CONST-DECL "below(exp2(N))" |bv_nat| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|bv2nat_rec_bound| FORMULA-DECL NIL |bv_nat| NIL) (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nat2bv| CONST-DECL "{bv: bvec[N] | bv2nat(bv) = val}" |bv_nat| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (NOT CONST-DECL "bvec[N]" |bv_bitwise| NIL) (|bvec| TYPE-EQ-DECL NIL |bv| NIL) (|bit| TYPE-EQ-DECL NIL |bit| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) SHOSTAK (|u32not| SUBTYPE "bv_nat[32].bv2nat((bv_bitwise[32].NOT)((bv_nat[32].nat2bv(integer_bv_ops.x32))))" "uint32"))) (|u64not_TCC1| 0 (|u64not_TCC1-1| |nil| 3835419967 ("" (SKEEP) (("" (EXPAND "bv2nat") (("" (USE "bv2nat_rec_bound[64]") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|bv2nat| CONST-DECL "below(exp2(N))" |bv_nat| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|bv2nat_rec_bound| FORMULA-DECL NIL |bv_nat| NIL) (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nat2bv| CONST-DECL "{bv: bvec[N] | bv2nat(bv) = val}" |bv_nat| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (NOT CONST-DECL "bvec[N]" |bv_bitwise| NIL) (|bvec| TYPE-EQ-DECL NIL |bv| NIL) (|bit| TYPE-EQ-DECL NIL |bit| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) SHOSTAK (|u64not| SUBTYPE "bv_nat[64].bv2nat((bv_bitwise[64].NOT)((bv_nat[64].nat2bv(integer_bv_ops.x64))))" "uint64"))))(|mod| (|ml3| 0 (|ml3-1| |nil| 3341424447 ("" (SKOLEM!) (("" (EXPAND "abs") (("" (LEMMA "both_sides_times_pos_lt1") (("" (LIFT-IF) (("" (GROUND) (("1" (INST - "m!1" "floor(i!1 / m!1)" "i!1 / m!1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST - "m!1" "i!1 / m!1" "1 + floor(i!1 / m!1)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|floor| CONST-DECL "{i | i <= x & x < i + 1}" |floor_ceil| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|both_sides_times_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) SHOSTAK)) (|ml4| 0 (|ml4-1| |nil| 3341424588 ("" (SKOLEM!) (("" (EXPAND "abs") (("" (LEMMA "both_sides_times_pos_lt1") (("" (LIFT-IF) (("" (GROUND) (("1" (INST - "m!1" "-i!1 / m!1" "1 + floor(-i!1 / m!1)") (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST - "m!1" "floor(-i!1 / m!1)" "-i!1 / m!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|floor| CONST-DECL "{i | i <= x & x < i + 1}" |floor_ceil| NIL) (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|both_sides_times_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) SHOSTAK)) (|mod_TCC1| 0 (|mod_TCC1-1| |nil| 3341424436 ("" (SKOLEM!) (("" (CASE "j!1 >= 0") (("1" (ASSERT) (("1" (USE "ml3") (("1" (EXPAND "abs") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (LEMMA "ml4") (("2" (INST - "i!1" "-j!1") (("2" (EXPAND "abs") (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nonzero_integer| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|ml3| FORMULA-DECL NIL |mod| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nzint_abs_is_pos| APPLICATION-JUDGEMENT "{j: posint | j >= i}" |real_defs| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}" |real_defs| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|ml4| FORMULA-DECL NIL |mod| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|mod| SUBTYPE "(number_fields.-)(mod.i, number_fields.*(mod.j, floor_ceil.floor(number_fields./(mod.i, mod.j))))" "{k | reals.<(real_defs.abs(mod.k), real_defs.abs(mod.j))}"))) (|mod_pos| 0 (|mod_pos-1| |nil| 3341424826 ("" (SKOLEM!) (("" (TYPEPRED "mod(i!1, m!1)") (("" (TCC) (("" (LEMMA "both_sides_times_pos_le1") (("" (INST - "m!1" "floor(i!1 / m!1)" "i!1 / m!1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|mod| CONST-DECL "{k | abs(k) < abs(j)}" |mod| NIL) (|nonzero_integer| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|both_sides_times_pos_le1| FORMULA-DECL NIL |real_props| NIL) (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|floor| CONST-DECL "{i | i <= x & x < i + 1}" |floor_ceil| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (<= CONST-DECL "bool" |reals| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nzint_abs_is_pos| APPLICATION-JUDGEMENT "{j: posint | j >= i}" |real_defs| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}" |real_defs| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) SHOSTAK)) (|mod_TCC2| 0 (|mod_TCC2-1| |nil| 3341424436 ("" (SKOLEM!) (("" (REWRITE "mod_pos") NIL NIL)) NIL) ((|mod_pos| FORMULA-DECL NIL |mod| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)) NIL (|mod_| SUBTYPE "mod.mod(mod.i, mod.m)" "below(mod.m)"))) (|mod_even| 0 (|mod_even-1| |nil| 3341424996 ("" (SKOSIMP) (("" (EXPAND "mod") (("" (REWRITE "floor_int") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|mod| CONST-DECL "{k | abs(k) < abs(j)}" |mod| NIL) (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nonzero_integer| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|floor_int| FORMULA-DECL NIL |floor_ceil| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)) SHOSTAK)) (|mod_neg| 0 (|mod_neg-1| |nil| 3341425033 ("" (AUTO-REWRITE-THEORY "integers") (("" (SKOLEM!) (("" (LIFT-IF) (("" (EXPAND "mod") (("" (CASE "-i!1 / j!1 = -(i!1 / j!1)") (("1" (REPLACE -1) (("1" (GROUND) (("1" (REWRITE "floor_int") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "floor_neg") (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|mod| CONST-DECL "{k | abs(k) < abs(j)}" |mod| NIL) (|floor_neg| FORMULA-DECL NIL |floor_ceil| NIL) (|integer?| CONST-DECL "bool" |integers| NIL) (|closed_neg| FORMULA-DECL NIL |integers| NIL) (|floor_int| FORMULA-DECL NIL |floor_ceil| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nonzero_integer| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)) SHOSTAK)) (|mod_neg_d| 0 (|mod_neg_d-2| "" 3505099237 ("" (AUTO-REWRITE-THEORY "integers") (("" (SKOLEM!) (("" (LIFT-IF) (("" (EXPAND "mod") (("" (CASE "i!1 / -j!1 = -(i!1 / j!1)") (("1" (REPLACE -1) (("1" (REWRITE "floor_neg") (("1" (LIFT-IF) (("1" (GROUND) (("1" (REWRITE "floor_int") (("1" (ASSERT) NIL NIL)) NIL) ("2" (CASE "integer_pred(--(i!1 / j!1))") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL) ("3" (LIFT-IF) (("3" (ASSERT) (("3" (GROUND) (("3" (CASE "integer_pred(--(i!1 / j!1))") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|mod| CONST-DECL "{k | abs(k) < abs(j)}" |mod| NIL) (|closed_neg| FORMULA-DECL NIL |integers| NIL) (|floor_int| FORMULA-DECL NIL |floor_ceil| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|integer?| CONST-DECL "bool" |integers| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|floor_neg| FORMULA-DECL NIL |floor_ceil| NIL) (|nonzero_integer| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)) SHOSTAK) (|mod_neg_d-1| |nil| 3341425208 ("" (AUTO-REWRITE-THEORY "integers") (("" (SKOLEM!) (("" (LIFT-IF) (("" (EXPAND "mod") (("" (CASE "i!1 / -j!1 = -(i!1 / j!1)") (("1" (REPLACE -1) (("1" (REWRITE "floor_neg") (("1" (LIFT-IF) (("1" (GROUND) (("1" (REWRITE "floor_int") (("1" (ASSERT) NIL NIL)) NIL) ("2" (CASE "integer_pred(--(i!1 / j!1))") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|mod_eq_arg| 0 (|mod_eq_arg-1| |nil| 3341425474 ("" (TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonzero_integer| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nzrat_div_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL) (|mod| CONST-DECL "{k | abs(k) < abs(j)}" |mod| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) SHOSTAK)) (|mod_lt| 0 (|mod_lt-1| |nil| 3341425485 ("" (GRIND :REWRITES ("floor_small" "pos_div_ge")) NIL NIL) ((|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|mod| CONST-DECL "{k | abs(k) < abs(j)}" |mod| NIL) (|sgn| CONST-DECL "int" |real_defs| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|pos_div_ge| FORMULA-DECL NIL |real_props| NIL) (|floor_small| FORMULA-DECL NIL |floor_ceil| NIL) (|nzint_abs_is_pos| APPLICATION-JUDGEMENT "{j: posint | j >= i}" |real_defs| NIL) (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}" |real_defs| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|nonzero_integer| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) SHOSTAK)) (|mod_lt_nat| 0 (|mod_lt_nat-1| |nil| 3341425653 ("" (SKOSIMP) (("" (REWRITE "mod_lt") (("1" (EXPAND "sgn") (("1" (PROPAX) NIL NIL)) NIL) ("2" (EXPAND "abs") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ((|mod_lt| FORMULA-DECL NIL |mod| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nonzero_integer| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (NIL APPLICATION-JUDGEMENT "below(m)" |mod| NIL) (|nzint_abs_is_pos| APPLICATION-JUDGEMENT "{j: posint | j >= i}" |real_defs| NIL) (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}" |real_defs| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|sgn| CONST-DECL "int" |real_defs| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)) SHOSTAK)) (|mod_lt_int| 0 (|mod_lt_int-1| |nil| 3341425710 ("" (SKOSIMP) (("" (REWRITE "mod_lt") (("1" (EXPAND "sgn") (("1" (LIFT-IF) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "abs") (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|mod_lt| FORMULA-DECL NIL |mod| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nonzero_integer| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "below(m)" |mod| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nzint_abs_is_pos| APPLICATION-JUDGEMENT "{j: posint | j >= i}" |real_defs| NIL) (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}" |real_defs| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|sgn| CONST-DECL "int" |real_defs| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)) SHOSTAK)) (|mod_sum_pos| 0 (|mod_sum_pos-1| |nil| 3341425771 ("" (SKOLEM!) (("" (EXPAND "mod") (("" (LEMMA "floor_plus_int") (("" (INST - "k!1 * m!1 / m!1" "i!1 / m!1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|mod| CONST-DECL "{k | abs(k) < abs(j)}" |mod| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|floor_plus_int| FORMULA-DECL NIL |floor_ceil| NIL)) SHOSTAK)) (|mod_gt| 0 (|mod_gt-1| |nil| 3341425822 ("" (SKOSIMP) (("" (LEMMA "mod_sum_pos") (("" (INST - "i!1" -1 "m!1") (("" (REPLACE -1 * RL) (("" (REWRITE "mod_lt_int") (("" (LIFT-IF) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|mod_sum_pos| FORMULA-DECL NIL |mod| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|mod_lt_int| FORMULA-DECL NIL |mod| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "below(m)" |mod| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|nzint_times_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK)) (|mod_sum| 0 (|mod_sum-1| |nil| 3341425866 ("" (SKOLEM!) (("" (EXPAND "mod") (("" (LEMMA "floor_plus_int") (("" (INST - "k!1 * j!1 / j!1" "i!1 / j!1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|mod| CONST-DECL "{k | abs(k) < abs(j)}" |mod| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonzero_integer| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|floor_plus_int| FORMULA-DECL NIL |floor_ceil| NIL)) SHOSTAK)) (|mod_sum_nat| 0 (|mod_sum_nat-1| |nil| 3341425900 ("" (SKOLEM!) (("" (LIFT-IF) (("" (GROUND) (("1" (REWRITE "mod_lt_nat") NIL NIL) ("2" (LEMMA "mod_sum") (("2" (INST - "n1!1 + n2!1" "m!1" -1) (("2" (REWRITE "mod_lt_nat") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|mod_sum| FORMULA-DECL NIL |mod| NIL) (|nzint_times_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|nonzero_integer| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|mod_lt_nat| FORMULA-DECL NIL |mod| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "below(m)" |mod| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) SHOSTAK)) (|mod_it_is| 0 (|mod_it_is-1| |nil| 3341425969 ("" (SKOSIMP) (("" (REPLACE -1) (("" (HIDE -1) (("" (LEMMA "mod_sum") (("" (INST - "b!1" "m!1" "c!1") (("" (REPLACE -1) (("" (HIDE -1) (("" (REWRITE "mod_lt") (("1" (EXPAND "sgn") (("1" (PROPAX) NIL NIL)) NIL) ("2" (EXPAND "abs") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|mod_sum| FORMULA-DECL NIL |mod| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}" |real_defs| NIL) (|nzint_abs_is_pos| APPLICATION-JUDGEMENT "{j: posint | j >= i}" |real_defs| NIL) (NIL APPLICATION-JUDGEMENT "below(m)" |mod| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|mod_lt| FORMULA-DECL NIL |mod| NIL) (|sgn| CONST-DECL "int" |real_defs| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonzero_integer| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK)) (|mod_zero| 0 (|mod_zero-1| |nil| 3341426079 ("" (TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonzero_integer| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|mod| CONST-DECL "{k | abs(k) < abs(j)}" |mod| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) SHOSTAK)) (|mod_one| 0 (|mod_one-1| |nil| 3341426091 ("" (GRIND :REWRITES ("floor_small" "pos_div_ge")) NIL NIL) ((|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|mod| CONST-DECL "{k | abs(k) < abs(j)}" |mod| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|nonneg_floor_is_nat| APPLICATION-JUDGEMENT "nat" |floor_ceil| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nzrat_div_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL) (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}" |real_defs| NIL) (|nzint_abs_is_pos| APPLICATION-JUDGEMENT "{j: posint | j >= i}" |real_defs| NIL) (|nzrat_abs_is_pos| APPLICATION-JUDGEMENT "{r: posrat | r >= q}" |real_defs| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|floor_small| FORMULA-DECL NIL |floor_ceil| NIL) (|pos_div_ge| FORMULA-DECL NIL |real_props| NIL) (|nonzero_integer| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) SHOSTAK)) (|mod_of_mod| 0 (|mod_of_mod-1| |nil| 3341426141 ("" (SKOLEM!) (("" (REWRITE "mod") (("" (LEMMA "mod_sum") (("" (INST - "i!1 + k!1" "m!1" "-floor(k!1 / m!1)") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|mod| CONST-DECL "{k | abs(k) < abs(j)}" |mod| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nonzero_integer| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "below(m)" |mod| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|floor| CONST-DECL "{i | i <= x & x < i + 1}" |floor_ceil| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|mod_sum| FORMULA-DECL NIL |mod| NIL)) SHOSTAK)) (|mod_of_mod_neg| 0 (|mod_of_mod_neg-1| |nil| 3341426188 ("" (SKOLEM!) (("" (REWRITE "mod") (("" (LEMMA "mod_sum") (("" (INST - "i!1 - k!1" "m!1" "floor(k!1 / m!1)") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|mod| CONST-DECL "{k | abs(k) < abs(j)}" |mod| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nonzero_integer| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "below(m)" |mod| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|floor| CONST-DECL "{i | i <= x & x < i + 1}" |floor_ceil| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|mod_sum| FORMULA-DECL NIL |mod| NIL)) SHOSTAK)) (|mod_inj_plus| 0 (|mod_inj_plus-1| |nil| 3341426229 ("" (SKOSIMP) (("" (REWRITE "mod_lt_nat") (("1" (REWRITE "mod_lt_nat") (("1" (ASSERT) NIL NIL) ("2" (REWRITE "mod_gt") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (REWRITE "mod_gt") (("2" (REWRITE "mod_lt_nat") (("1" (ASSERT) NIL NIL) ("2" (REWRITE "mod_gt") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|mod_lt_nat| FORMULA-DECL NIL |mod| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "below(m)" |mod| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|mod_gt| FORMULA-DECL NIL |mod| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) SHOSTAK)) (|mod_inj_minus| 0 (|mod_inj_minus-1| |nil| 3341426501 ("" (SKOSIMP) (("" (EXPAND "mod") (("" (REWRITE "floor_small") (("1" (REWRITE "floor_small") (("1" (GRIND) NIL NIL) ("2" (EXPAND "abs") (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|mod| CONST-DECL "{k | abs(k) < abs(j)}" |mod| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nzint_times_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonzero_integer| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|floor_small| FORMULA-DECL NIL |floor_ceil| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|nzint_abs_is_pos| APPLICATION-JUDGEMENT "{j: posint | j >= i}" |real_defs| NIL) (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}" |real_defs| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) SHOSTAK)) (|mod_wrap_around| 0 (|mod_wrap_around-1| |nil| 3341426603 ("" (SKOSIMP) (("" (EXPAND "mod") (("" (USE "floor_val" ("k" 1)) (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ((|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nonneg_floor_is_nat| APPLICATION-JUDGEMENT "nat" |floor_ceil| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|mod| CONST-DECL "{k | abs(k) < abs(j)}" |mod| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nzint_times_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|floor_val| FORMULA-DECL NIL |floor_ceil| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonzero_integer| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|odd_plus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)) SHOSTAK)) (|mod_wrap2| 0 (|mod_wrap2-1| |nil| 3388684876 ("" (SKOSIMP*) (("" (EXPAND "mod") (("" (CASE "(m!1 + c!1) / m!1 = 1 + c!1/m!1") (("1" (LEMMA "floor_plus_int") (("1" (INST -1 "1" "c!1/m!1") (("1" (LEMMA "floor_small") (("1" (INST?) (("1" (EXPAND "abs") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nonneg_floor_is_nat| APPLICATION-JUDGEMENT "nat" |floor_ceil| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|mod| CONST-DECL "{k | abs(k) < abs(j)}" |mod| NIL) (|floor_plus_int| FORMULA-DECL NIL |floor_ceil| NIL) (|floor_small| FORMULA-DECL NIL |floor_ceil| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|nnrat_plus_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nonzero_integer| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|posrat_plus_nnrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL)) SHOSTAK)) (|mod_inj1| 0 (|mod_inj1-1| |nil| 3388685021 ("" (SKOSIMP*) (("" (EXPAND "mod") (("" (LEMMA "floor_val") (("" (CASE "floor((x!1 + n!1) / m!1) = 0 OR floor((x!1 + n!1) / m!1) = 1") (("1" (CASE "floor((x!1 + c!1) / m!1) = 0 OR floor((x!1 + c!1) / m!1) = 1") (("1" (GROUND) NIL NIL) ("2" (CASE "x!1 + c!1 < m!1") (("1" (FLATTEN) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (INST -2 "x!1+c!1" "m!1" "1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "x!1 + n!1 < m!1") (("1" (INST?) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (INST -1 "x!1+n!1" "m!1" "1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nonneg_floor_is_nat| APPLICATION-JUDGEMENT "nat" |floor_ceil| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|mod| CONST-DECL "{k | abs(k) < abs(j)}" |mod| NIL) (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|floor| CONST-DECL "{i | i <= x & x < i + 1}" |floor_ceil| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonzero_integer| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|odd_plus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|floor_val| FORMULA-DECL NIL |floor_ceil| NIL)) SHOSTAK)) (|mod_inj2| 0 (|mod_inj2-1| |nil| 3388685236 ("" (SKOSIMP*) (("" (EXPAND "mod") (("" (REWRITE "floor_small") (("1" (REWRITE "floor_small") (("1" (TCC-BDD) NIL NIL) ("2" (TCC-BDD) NIL NIL)) NIL) ("2" (TCC-BDD) NIL NIL)) NIL)) NIL)) NIL) ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|mod| CONST-DECL "{k | abs(k) < abs(j)}" |mod| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonzero_integer| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|floor_small| FORMULA-DECL NIL |floor_ceil| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|nzint_abs_is_pos| APPLICATION-JUDGEMENT "{j: posint | j >= i}" |real_defs| NIL) (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}" |real_defs| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) SHOSTAK)) (|mod_wrap_inj| 0 (|mod_wrap_inj-1| |nil| 3341426657 ("" (SKOSIMP) (("" (LEMMA "mod_lt") (("" (INST-CP - "n!1 - b!1" "m!1") (("" (INST - "n!1 + a!1" "m!1") (("" (USE "mod_wrap_around") (("" (EXPAND* "sgn" "abs") (("" (LIFT-IF) (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|mod_lt| FORMULA-DECL NIL |mod| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|sgn| CONST-DECL "int" |real_defs| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "below(m)" |mod| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|mod_wrap_around| FORMULA-DECL NIL |mod| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonzero_integer| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK)) (|mod_wrap_inj_eq| 0 (|mod_wrap_inj_eq-1| |nil| 3388685722 ("" (SKOSIMP) (("" (IFF) (("" (GROUND) (("1" (LEMMA "mod_wrap_inj") (("1" (INST -1 "a!1" "b!1" "m!1" "x!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (CASE-REPLACE "a!1 = m!1 - b!1") (("1" (LEMMA "mod_sum") (("1" (INST -1 "x!1 - b!1" "m!1" "1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((NIL APPLICATION-JUDGEMENT "below(m)" |mod| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nonzero_integer| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|mod_sum| FORMULA-DECL NIL |mod| NIL) (|mod_wrap_inj| FORMULA-DECL NIL |mod| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) SHOSTAK)) (|mod_neg_limited| 0 (|mod_neg_limited-1| |nil| 3388686624 ("" (SKOSIMP*) (("" (LEMMA "mod_lt") (("" (INST?) (("" (EXPAND "abs") (("" (ASSERT) (("" (EXPAND "sgn") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|mod_lt| FORMULA-DECL NIL |mod| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|sgn| CONST-DECL "int" |real_defs| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "below(m)" |mod| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonzero_integer| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) SHOSTAK)) (|odd_mod| 0 (|odd_mod-1| |nil| 3388686712 ("" (SKOSIMP*) (("" (EXPAND "even?") (("" (SKOSIMP*) (("" (REPLACE -1) (("" (HIDE -1) (("" (EXPAND "odd?") (("" (PROP) (("1" (SKOSIMP*) (("1" (EXPAND "mod") (("1" (INST + "(floor(i!1 / (2 * j!1)) * j!1) + j!2") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (SKOSIMP*) (("2" (EXPAND "mod") (("2" (INST + "j!2 - (floor(i!1 / (2 * j!1)) * j!1)") (("1" (ASSERT) NIL NIL) ("2" (REVEAL -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|even?| CONST-DECL "bool" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|odd?| CONST-DECL "bool" |integers| NIL) NIL (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|floor| CONST-DECL "{i | i <= x & x < i + 1}" |floor_ceil| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|mod| CONST-DECL "{k | abs(k) < abs(j)}" |mod| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) SHOSTAK)) (|even_mod| 0 (|even_mod-1| |nil| 3388687032 ("" (SKOSIMP*) (("" (REWRITE "even_iff_not_odd" +) (("" (REWRITE "even_iff_not_odd" +) (("" (USE "odd_mod") (("" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|even_iff_not_odd| FORMULA-DECL NIL |naturalnumbers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nonzero_integer| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|mod| CONST-DECL "{k | abs(k) < abs(j)}" |mod| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (NIL APPLICATION-JUDGEMENT "below(m)" |mod| NIL) (|odd_mod| FORMULA-DECL NIL |mod| NIL)) SHOSTAK)) (|mod_mult| 0 (|mod_mult-1| |nil| 3341426873 ("" (SKOLEM!) (("" (EXPAND "mod") (("" (LEMMA "floor_plus_int") (("" (INST - "-floor(i!1 / (mj!1 * m!1)) * mj!1" "i!1 / m!1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|mod| CONST-DECL "{k | abs(k) < abs(j)}" |mod| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|floor| CONST-DECL "{i | i <= x & x < i + 1}" |floor_ceil| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|floor_plus_int| FORMULA-DECL NIL |floor_ceil| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) SHOSTAK)))(|bv_arith_nat_defs| (|plus_TCC1| 0 (|plus_TCC1-1| |nil| 3364695166 ("" (INST + "LAMBDA (bv: bvec[N], i: int): nat2bv(mod(bv2nat(bv) + i, exp2(N)))") NIL NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (N FORMAL-CONST-DECL "nat" |bv_arith_nat_defs| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|bit| TYPE-EQ-DECL NIL |bit| NIL) (|bvec| TYPE-EQ-DECL NIL |bv| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|bv2nat| CONST-DECL "below(exp2(N))" |bv_nat| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nonzero_integer| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|mod| CONST-DECL "{k | abs(k) < abs(j)}" |mod| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nat2bv| CONST-DECL "{bv: bvec[N] | bv2nat(bv) = val}" |bv_nat| NIL) (NIL APPLICATION-JUDGEMENT "below(m)" |mod| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) SHOSTAK (|plus| EXISTENCE "" "[d: [bvec[N], int] -> {bvn: bv[bv_arith_nat_defs.N].bvec | bv_nat[bv_arith_nat_defs.N].bv2nat(bvn) = mod.mod((number_fields.+)(d`2, bv_nat[bv_arith_nat_defs.N].bv2nat(d`1)), exp2.exp2(bv_arith_nat_defs.N))}]"))) (|bv_plus| 0 (|bv_plus-1| |nil| 3364699615 ("" (SKOLEM!) (("" (ASSERT) NIL NIL)) NIL) ((NIL APPLICATION-JUDGEMENT "below(m)" |mod| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) SHOSTAK)) (|bv_minus| 0 (|bv_minus-1| |nil| 3364699637 ("" (EXPAND "-") (("" (SKOLEM!) (("" (REWRITE "bv_plus") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|bvec| TYPE-EQ-DECL NIL |bv| NIL) (|bit| TYPE-EQ-DECL NIL |bit| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (N FORMAL-CONST-DECL "nat" |bv_arith_nat_defs| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|bv_plus| FORMULA-DECL NIL |bv_arith_nat_defs| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "below(m)" |mod| NIL) (- CONST-DECL "bvec[N]" |bv_arith_nat_defs| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) SHOSTAK)) (|plus_TCC2| 0 (|plus_TCC2-1| |nil| 3364695166 ("" (INST + "LAMBDA (bv1, bv2: bvec[N]): nat2bv(IF bv2nat(bv1) + bv2nat(bv2) < exp2(N) THEN bv2nat(bv1) + bv2nat(bv2) ELSE bv2nat(bv1) + bv2nat(bv2) - exp2(N) ENDIF)") (("" (SKOSIMP) (("" (ASSERT) NIL NIL)) NIL)) NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (N FORMAL-CONST-DECL "nat" |bv_arith_nat_defs| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|bit| TYPE-EQ-DECL NIL |bit| NIL) (|bvec| TYPE-EQ-DECL NIL |bv| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|bv2nat| CONST-DECL "below(exp2(N))" |bv_nat| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nat2bv| CONST-DECL "{bv: bvec[N] | bv2nat(bv) = val}" |bv_nat| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK (|plus| EXISTENCE "" "[d: [bvec[N], bvec[N]] -> {bv: bv[bv_arith_nat_defs.N].bvec | bv_nat[bv_arith_nat_defs.N].bv2nat(bv) = IF reals.<((number_fields.+)(bv_nat[bv_arith_nat_defs.N].bv2nat(d`1), bv_nat[bv_arith_nat_defs.N].bv2nat(d`2)), exp2.exp2(bv_arith_nat_defs.N)) THEN (number_fields.+)(bv_nat[bv_arith_nat_defs.N].bv2nat(d`1), bv_nat[bv_arith_nat_defs.N].bv2nat(d`2)) ELSE (number_fields.-)((number_fields.+)(bv_nat[bv_arith_nat_defs.N].bv2nat(d`1), bv_nat[bv_arith_nat_defs.N].bv2nat(d`2)), exp2.exp2(bv_arith_nat_defs.N)) ENDIF}]"))) (|times_TCC1| 0 (|times_TCC1-1| |nil| 3364695166 ("" (INST + "LAMBDA (bv1, bv2: bvec[N]): nat2bv[2 * N](bv2nat(bv1) * bv2nat(bv2))") (("" (SKOLEM!) (("" (ASSERT) (("" (LEMMA "lt_times_lt_pos1") (("" (INST?) (("" (INST - "exp2(N)" "exp2(N)") (("" (USE "exp2_sum") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|lt_times_lt_pos1| FORMULA-DECL NIL |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|exp2_sum| FORMULA-DECL NIL |exp2| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (N FORMAL-CONST-DECL "nat" |bv_arith_nat_defs| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|bit| TYPE-EQ-DECL NIL |bit| NIL) (|bvec| TYPE-EQ-DECL NIL |bv| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|bv2nat| CONST-DECL "below(exp2(N))" |bv_nat| NIL) (|nat2bv| CONST-DECL "{bv: bvec[N] | bv2nat(bv) = val}" |bv_nat| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)) SHOSTAK (|times| EXISTENCE "" "[d: [bvec[N], bvec[N]] -> {bv: bv[number_fields.*(2, bv_arith_nat_defs.N)].bvec | bv_nat[number_fields.*(2, bv_arith_nat_defs.N)].bv2nat(bv) = number_fields.*(bv_nat[bv_arith_nat_defs.N].bv2nat(d`1), bv_nat[bv_arith_nat_defs.N].bv2nat(d`2))}]"))))(|bv_int_defs| (|minint_TCC1| 0 (|minint_TCC1-1| |nil| 3364695166 ("" (SUBTYPE-TCC) NIL NIL) ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK (|minint| SUBTYPE "(number_fields.-)(bv_int_defs.N, 1)" "nat"))) (|bv_maxint_to_minint| 0 (|bv_maxint_to_minint-1| |nil| 3364710000 ("" (EXPAND* "maxint" "minint") (("" (ASSERT) NIL NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|maxint| CONST-DECL "int" |bv_int_defs| NIL) (|minint| CONST-DECL "int" |bv_int_defs| NIL)) SHOSTAK)) (|bv_minint_to_maxint| 0 (|bv_minint_to_maxint-1| |nil| 3364710014 ("" (EXPAND* "maxint" "minint") (("" (ASSERT) NIL NIL)) NIL) ((|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|maxint| CONST-DECL "int" |bv_int_defs| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|minint| CONST-DECL "int" |bv_int_defs| NIL)) SHOSTAK)) (|bv2int_TCC1| 0 (|bv2int_TCC1-1| |nil| 3364695166 ("" (SUBTYPE-TCC) NIL NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|maxint| CONST-DECL "int" |bv_int_defs| NIL) (|minint| CONST-DECL "int" |bv_int_defs| NIL) (|bv2nat| CONST-DECL "below(exp2(N))" |bv_nat| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) SHOSTAK (|bv2int| SUBTYPE "bv_nat[bv_int_defs.N].bv2nat(bv_int_defs.bv)" "rng_2s_comp"))) (|bv2int_TCC2| 0 (|bv2int_TCC2-1| |nil| 3364695166 ("" (SKOSIMP) (("" (EXPAND* "maxint" "minint") (("" (ASSERT) (("" (EXPAND "exp2" 2 2) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|minint| CONST-DECL "int" |bv_int_defs| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|maxint| CONST-DECL "int" |bv_int_defs| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) SHOSTAK (|bv2int| SUBTYPE "(number_fields.-)(bv_nat[bv_int_defs.N].bv2nat(bv_int_defs.bv), exp2.exp2(bv_int_defs.N))" "rng_2s_comp"))) (|int2bv_TCC1| 0 (|int2bv_TCC1-1| |nil| 3364695167 ("" (INST + "LAMBDA (iv: rng_2s_comp): inverse(bv2int)(iv)") (("" (SKOLEM!) (("" (CASE "bijective?(bv2int)") (("1" (USE "bijective_inverse[bvec[N], rng_2s_comp]") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "bijective?") (("2" (PROP) (("1" (EXPAND "injective?") (("1" (SKOSIMP) (("1" (EXPAND "bv2int") (("1" (LEMMA "bv2nat_inj[N]") (("1" (INST -1 "x1!1" "x2!1") (("1" (SMASH) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "surjective?") (("2" (SKOLEM-TYPEPRED) (("2" (EXPAND "maxint") (("2" (EXPAND "minint") (("2" (LEMMA "bv2nat_surj[N]") (("2" (EXPAND "bv2int") (("2" (CASE "y!1 >= 0") (("1" (INST -2 "y!1") (("1" (SKOSIMP) (("1" (INST 1 "x!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (ASSERT) (("2" (EXPAND "exp2" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -1 "y!1 + exp2(N)") (("1" (SKOSIMP) (("1" (INST 2 "x!1") (("1" (ASSERT) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (EXPAND "exp2" -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "exp2" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|bv2nat_inj| FORMULA-DECL NIL |bv_nat| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) NIL (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|bv2nat_surj| FORMULA-DECL NIL |bv_nat| NIL) (|surjective?| CONST-DECL "bool" |functions| NIL) (|bijective_inverse| FORMULA-DECL NIL |function_inverse| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|inverse| CONST-DECL "D" |function_inverse| NIL) (|bv2int| CONST-DECL "rng_2s_comp" |bv_int_defs| NIL) (|maxint| CONST-DECL "int" |bv_int_defs| NIL) (|minint| CONST-DECL "int" |bv_int_defs| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|bvec| TYPE-EQ-DECL NIL |bv| NIL) (|bit| TYPE-EQ-DECL NIL |bit| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (N FORMAL-CONST-DECL "posnat" |bv_int_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|rng_2s_comp| TYPE-EQ-DECL NIL |bv_int_defs| NIL)) SHOSTAK (|int2bv| EXISTENCE "" "[iv: rng_2s_comp -> {bv: bv[bv_int_defs.N].bvec | bv_int_defs.bv2int(bv) = iv}]"))))(|bv_arithmetic_defs| (|difference_TCC1| 0 (|difference_TCC1-1| |nil| 3364695167 ("" (INST + "LAMBDA (bv: bvec[N]): int2bv(IF bv2int[N](bv) = minint[N] THEN bv2int[N](bv) ELSE -((bv2int[N](bv))) ENDIF)") (("" (SKOSIMP) (("" (TYPEPRED "bv2int[N](bv!1)") (("" (EXPAND* "minint" "maxint") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (N FORMAL-CONST-DECL "posnat" |bv_arithmetic_defs| NIL) (|bvec| TYPE-EQ-DECL NIL |bv| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|bit| TYPE-EQ-DECL NIL |bit| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|minint| CONST-DECL "int" |bv_int_defs| NIL) (|maxint| CONST-DECL "int" |bv_int_defs| NIL) (|rng_2s_comp| TYPE-EQ-DECL NIL |bv_int_defs| NIL) (|bv2int| CONST-DECL "rng_2s_comp" |bv_int_defs| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|int2bv| CONST-DECL "{bv: bvec[N] | bv2int(bv) = iv}" |bv_int_defs| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) SHOSTAK (|difference| EXISTENCE "" "[bv: bvec[N] -> {bvn: bv[bv_arithmetic_defs.N].bvec | bv_int_defs[bv_arithmetic_defs.N].bv2int(bvn) = IF bv_int_defs[bv_arithmetic_defs.N].bv2int(bv) = bv_int_defs[bv_arithmetic_defs.N].minint THEN bv_int_defs[bv_arithmetic_defs.N].bv2int(bv) ELSE (number_fields.-)((bv_int_defs[bv_arithmetic_defs.N].bv2int(bv))) ENDIF}]"))) (|bv_splus_TCC1| 0 (|bv_splus_TCC1-1| |nil| 3369463698 ("" (SUBTYPE-TCC) NIL NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (N FORMAL-CONST-DECL "posnat" |bv_arithmetic_defs| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|bit| TYPE-EQ-DECL NIL |bit| NIL) (|bvec| TYPE-EQ-DECL NIL |bv| NIL) (|overflow| CONST-DECL "bool" |bv_arithmetic_defs| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|maxint| CONST-DECL "int" |bv_int_defs| NIL) (|bv2nat| CONST-DECL "below(exp2(N))" |bv_nat| NIL) (|minint| CONST-DECL "int" |bv_int_defs| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) SHOSTAK (|bv_splus| SUBTYPE "(number_fields.+)(bv_int_defs[bv_arithmetic_defs.N].bv2int(bv_arithmetic_defs.bv1), bv_int_defs[bv_arithmetic_defs.N].bv2int(bv_arithmetic_defs.bv2))" "rng_2s_comp"))) (|bv_stimes_TCC1| 0 (|bv_stimes_TCC1-1| |nil| 3369463699 ("" (SUBTYPE-TCC) NIL NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (N FORMAL-CONST-DECL "posnat" |bv_arithmetic_defs| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|bit| TYPE-EQ-DECL NIL |bit| NIL) (|bvec| TYPE-EQ-DECL NIL |bv| NIL) (|mult_overflow| CONST-DECL "bool" |bv_arithmetic_defs| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|maxint| CONST-DECL "int" |bv_int_defs| NIL) (|bv2nat| CONST-DECL "below(exp2(N))" |bv_nat| NIL) (|minint| CONST-DECL "int" |bv_int_defs| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) SHOSTAK (|bv_stimes| SUBTYPE "number_fields.*(bv_int_defs[bv_arithmetic_defs.N].bv2int(bv_arithmetic_defs.bv1), bv_int_defs[bv_arithmetic_defs.N].bv2int(bv_arithmetic_defs.bv2))" "rng_2s_comp"))) (|nat2bv_rec_TCC1| 0 (|nat2bv_rec_TCC1-1| |nil| 3726081087 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (N FORMAL-CONST-DECL "posnat" |bv_arithmetic_defs| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "upto(n)" |modulo_arithmetic| NIL) (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|mod| CONST-DECL "{k | abs(k) < abs(j)}" |mod| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nonneg_floor_is_nat| APPLICATION-JUDGEMENT "nat" |floor_ceil| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL)) SHOSTAK (|nat2bv_rec| SUBTYPE "modulo_arithmetic.ndiv(bv_arithmetic_defs.n, 2)" "below(exp2.exp2(bv_arithmetic_defs.N))"))) (|nat2bv_rec_TCC2| 0 (|nat2bv_rec_TCC2-1| |nil| 3726081087 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (N FORMAL-CONST-DECL "posnat" |bv_arithmetic_defs| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|mod| CONST-DECL "{k | abs(k) < abs(j)}" |mod| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nonneg_floor_is_nat| APPLICATION-JUDGEMENT "nat" |floor_ceil| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL)) SHOSTAK (|nat2bv_rec| SUBTYPE "(number_fields.-)(bv_arithmetic_defs.idx, 1)" "below(bv_arithmetic_defs.N)"))) (|nat2bv_rec_TCC3| 0 (|nat2bv_rec_TCC3-1| |nil| 3726081087 ("" (TERMINATION-TCC) NIL NIL) ((|mod| CONST-DECL "{k | abs(k) < abs(j)}" |mod| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nonneg_floor_is_nat| APPLICATION-JUDGEMENT "nat" |floor_ceil| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK (|nat2bv_rec| TERMINATION "bv_arithmetic_defs.nat2bv_rec(modulo_arithmetic.ndiv(bv_arithmetic_defs.n, 2), bv_arithmetic_defs.nbv, (number_fields.-)(bv_arithmetic_defs.idx, 1))" "NIL"))) (|bv_TCC1| 0 (|bv_TCC1-1| |nil| 3726081087 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (N FORMAL-CONST-DECL "posnat" |bv_arithmetic_defs| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK (|bv| SUBTYPE "(number_fields.-)(bv_arithmetic_defs.N, 1)" "below(bv_arithmetic_defs.N)"))))(|bv_extend_defs| (|zero_extend_TCC1| 0 (|zero_extend_TCC1-1| |nil| 3364695167 ("" (SUBTYPE-TCC) NIL NIL) NIL SHOSTAK (|zero_extend| SUBTYPE "(number_fields.-)(bv_extend_defs.k, bv_extend_defs.N)" "nat"))) (|sign_extend_TCC1| 0 (|sign_extend_TCC1-1| |nil| 3364695167 ("" (SUBTYPE-TCC) NIL NIL) ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) SHOSTAK (|sign_extend| SUBTYPE "((number_fields.-)(bv_extend_defs.N, 1))" "below[N]"))) (|lsb_extend_TCC1| 0 (|lsb_extend_TCC1-1| |nil| 3364695167 ("" (SUBTYPE-TCC) NIL NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) SHOSTAK (|lsb_extend| SUBTYPE "0" "below[N]"))))(|infinite_sets_def| (|infinite_nonempty| 0 (|infinite_nonempty-1| |nil| 3249344193 ("" (SKOLEM-TYPEPRED) (("" (EXPAND "nonempty?") (("" (REWRITE "emptyset_is_empty?[T]") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|nonempty?| CONST-DECL "bool" |sets| NIL) (|emptyset_is_empty?| FORMULA-DECL NIL |sets_lemmas| NIL) (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL) (|infinite_set| TYPE-EQ-DECL NIL |infinite_sets_def| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |infinite_sets_def| NIL)) NIL (|infinite_nonempty| SUBTYPE "infinite_sets_def.x" "(sets[infinite_sets_def.T].nonempty?)"))) (|infinite_add| 0 (|infinite_add-1| |nil| 3249344193 ("" (SKOLEM-TYPEPRED) (("" (USE "member_add[T]") (("" (ASSERT) (("" (LEMMA "finite_remove[T]") (("" (INST - "add(t!1, Inf!1)" "t!1") (("" (USE "remove_add_member[T]") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|member_add| FORMULA-DECL NIL |sets_lemmas| NIL) (|finite_remove| JUDGEMENT-TCC NIL |finite_sets| NIL) (|remove_add_member| FORMULA-DECL NIL |sets_lemmas| NIL) (|add| CONST-DECL "(nonempty?)" |sets| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|infinite_set| TYPE-EQ-DECL NIL |infinite_sets_def| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |infinite_sets_def| NIL)) NIL (|infinite_add| SUBTYPE "sets[infinite_sets_def.T].add(infinite_sets_def.t, infinite_sets_def.Inf)" "infinite_set"))) (|infinite_remove| 0 (|infinite_remove-1| |nil| 3249344193 ("" (SKOLEM-TYPEPRED) (("" (USE "member_remove[T]") (("" (ASSERT) (("" (LEMMA "finite_add[T]") (("" (INST - "remove(t!1, Inf!1)" "t!1") (("" (FORWARD-CHAIN "add_remove_member[T]") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|member_remove| FORMULA-DECL NIL |sets_lemmas| NIL) (|finite_add| FORMULA-DECL NIL |finite_sets| NIL) (|add_remove_member| FORMULA-DECL NIL |sets_lemmas| NIL) (|remove| CONST-DECL "set" |sets| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|infinite_set| TYPE-EQ-DECL NIL |infinite_sets_def| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |infinite_sets_def| NIL)) NIL (|infinite_remove| SUBTYPE "sets[infinite_sets_def.T].remove(infinite_sets_def.t, infinite_sets_def.Inf)" "infinite_set"))) (|infinite_superset| 0 (|infinite_superset-1| |nil| 3249344193 ("" (SKOSIMP :PREDS? T) (("" (FORWARD-CHAIN "finite_subset[T]") NIL NIL)) NIL) ((|finite_subset| FORMULA-DECL NIL |finite_sets| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (T FORMAL-TYPE-DECL NIL |infinite_sets_def| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|infinite_set| TYPE-EQ-DECL NIL |infinite_sets_def| NIL)) NIL)) (|infinite_union_left| 0 (|infinite_union_left-3| "" 3658948361 ("" (SKOLEM-TYPEPRED) (("" (EXPAND* "union" "member" "is_finite") (("" (SKOLEM-TYPEPRED) (("" (INST + "N!1" "restrict[({x: T | Inf!1(x) OR S!1(x)}), (Inf!1), below[N!1]](f!1)") (("" (EXPAND* "injective?" "restrict") (("" (SKOSIMP* :PREDS? T) (("" (INST? -) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|member| CONST-DECL "bool" |sets| NIL) (|union| CONST-DECL "set" |sets| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|infinite_set| TYPE-EQ-DECL NIL |infinite_sets_def| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |infinite_sets_def| NIL)) SHOSTAK (|infinite_union_left| SUBTYPE "sets[infinite_sets_def.T].union(infinite_sets_def.Inf, infinite_sets_def.S)" "infinite_set")) (|infinite_union_left-2| "" 3590860111 ("" (SKOLEM-TYPEPRED) (("" (EXPAND* "union" "member" "is_finite") (("" (SKOLEM-TYPEPRED) (("" (INST + "N!1" "restrict[({x: T | Inf!1(x) OR S!1(x)}), (Inf!1), below[N!1]](f!1)") (("" (EXPAND* "injective?" "restrict") (("" (SKOSIMP* :PREDS? T) (("" (INST? -6) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|infinite_union_left| SUBTYPE "sets[infinite_sets_def.T].union(infinite_sets_def.Inf, infinite_sets_def.S)" "infinite_set")) (|infinite_union_left-1| |nil| 3249344193 ("" (SKOLEM-TYPEPRED) (("" (EXPAND* "union" "member" "is_finite") (("" (SKOLEM-TYPEPRED) (("" (INST + "N!1" "restrict[({x: T | Inf!1(x) OR S!1(x)}), (Inf!1), below[N!1]](f!1)") (("" (EXPAND* "injective?" "restrict") (("" (SKOSIMP* :PREDS? T) (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|infinite_union_left| SUBTYPE "sets[infinite_sets_def.T].union(infinite_sets_def.Inf, infinite_sets_def.S)" "infinite_set"))) (|infinite_union_right| 0 (|infinite_union_right-1| |nil| 3249344193 ("" (SKOLEM-TYPEPRED) (("" (USE "union_commutative[T]") (("" (USE "infinite_union_left") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|union_commutative| FORMULA-DECL NIL |sets_lemmas| NIL) (|infinite_union_left| APPLICATION-JUDGEMENT "infinite_set" |infinite_sets_def| NIL) (|nonempty_union2| APPLICATION-JUDGEMENT "(nonempty?)" |sets| NIL) (|infinite_union_left| JUDGEMENT-TCC NIL |infinite_sets_def| NIL) (|infinite_set| TYPE-EQ-DECL NIL |infinite_sets_def| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |infinite_sets_def| NIL)) NIL (|infinite_union_right| SUBTYPE "sets[infinite_sets_def.T].union(infinite_sets_def.S, infinite_sets_def.Inf)" "infinite_set"))) (|infinite_union| 0 (|infinite_union-1| |nil| 3249344193 ("" (SKOSIMP) (("" (USE "finite_union[T]") NIL NIL)) NIL) ((|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) NIL NIL (|finite_union| JUDGEMENT-TCC NIL |finite_sets| NIL) (T FORMAL-TYPE-DECL NIL |infinite_sets_def| NIL)) NIL)) (|infinite_intersection| 0 (|infinite_intersection-1| |nil| 3249344193 ("" (SKOSIMP) (("" (USE "finite_intersection1[T]") (("" (USE "finite_intersection2[T]") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|finite_intersection1| JUDGEMENT-TCC NIL |finite_sets| NIL) (T FORMAL-TYPE-DECL NIL |infinite_sets_def| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) NIL (|finite_intersection2| JUDGEMENT-TCC NIL |finite_sets| NIL) NIL) NIL)) (|infinite_difference| 0 (|infinite_difference-1| |nil| 3249344193 ("" (SKOLEM-TYPEPRED) (("" (EXPAND* "difference" "member" "is_finite" "injective?") (("" (SKOSIMP*) (("" (INST + "N!1 + N!2" "LAMBDA (s: (Inf!1)): IF Fin!1(s) THEN f!1(s) + N!2 ELSE f!2(s) ENDIF") (("1" (SKOSIMP) (("1" (SMASH) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST? -3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP) NIL NIL) ("4" (SKOSIMP) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|injective?| CONST-DECL "bool" |functions| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|difference| CONST-DECL "set" |sets| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) NIL (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL NIL (|below| TYPE-EQ-DECL NIL |nat_types| NIL) NIL (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (< CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) NIL (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|infinite_set| TYPE-EQ-DECL NIL |infinite_sets_def| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (T FORMAL-TYPE-DECL NIL |infinite_sets_def| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL (|infinite_difference| SUBTYPE "sets[infinite_sets_def.T].difference(infinite_sets_def.Inf, infinite_sets_def.Fin)" "infinite_set"))) (|infinite_rest| 0 (|infinite_rest-1| |nil| 3249344193 ("" (SKOLEM-TYPEPRED) (("" (EXPAND "rest") (("" (PROP) (("" (USE "add_remove_member[T]") (("" (EXPAND "member") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|rest| CONST-DECL "set" |sets| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|choose| CONST-DECL "(p)" |sets| NIL) (|add_remove_member| FORMULA-DECL NIL |sets_lemmas| NIL) (|infinite_add| APPLICATION-JUDGEMENT "infinite_set" |infinite_sets_def| NIL) (|infinite_remove| APPLICATION-JUDGEMENT "infinite_set" |infinite_sets_def| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|infinite_set| TYPE-EQ-DECL NIL |infinite_sets_def| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |infinite_sets_def| NIL)) NIL (|infinite_rest| SUBTYPE "sets[infinite_sets_def.T].rest(infinite_sets_def.Inf)" "infinite_set"))) (|infinite_fullset| 0 (|infinite_fullset-1| |nil| 3249344193 ("" (FLATTEN) (("" (SKOLEM!) (("" (LEMMA "finite_subset[T]" ("A" "fullset[T]" "s" "S!1")) (("1" (EXPAND* "subset?" "fullset" "member") NIL NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ((|subset?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|finite_subset| FORMULA-DECL NIL |finite_sets| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|fullset| CONST-DECL "set" |sets| NIL) (T FORMAL-TYPE-DECL NIL |infinite_sets_def| NIL)) NIL)))(|finite_sets_of_sets| (|powerset_natfun_rec_TCC1| 0 (|powerset_natfun_rec_TCC1-1| |nil| 3242842726 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets_of_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|Card| CONST-DECL "nat" |finite_sets| NIL) (|card| CONST-DECL "{n: nat | n = Card(S)}" |finite_sets| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|setof| TYPE-EQ-DECL NIL |defined_types| NIL) (|setofsets| TYPE-EQ-DECL NIL |sets| NIL) (|powerset| CONST-DECL "setofsets" |sets| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nonempty_powerset| APPLICATION-JUDGEMENT "(nonempty?[set[T]])" |sets_lemmas| NIL) (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |sets_lemmas| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|surjective?| CONST-DECL "bool" |functions| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|inverse| CONST-DECL "D" |function_inverse| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) SHOSTAK (|powerset_natfun_rec| SUBTYPE "(number_fields.-)(finite_sets_of_sets.n, 1)" "upto(finite_sets[finite_sets_of_sets.T].card(finite_sets_of_sets.A))"))) (|powerset_natfun_rec_TCC2| 0 (|powerset_natfun_rec_TCC2-2| "" 3332190247 ("" (SKOLEM-TYPEPRED) (("" (FLATTEN) (("" (ASSERT) NIL NIL)) NIL)) NIL) ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nonempty_powerset| APPLICATION-JUDGEMENT "(nonempty?[set[T]])" |sets_lemmas| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|powerset| CONST-DECL "setofsets" |sets| NIL) (|setofsets| TYPE-EQ-DECL NIL |sets| NIL) (|setof| TYPE-EQ-DECL NIL |defined_types| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|card| CONST-DECL "{n: nat | n = Card(S)}" |finite_sets| NIL) (|Card| CONST-DECL "nat" |finite_sets| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets_of_sets| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) SHOSTAK (|powerset_natfun_rec| TERMINATION "finite_sets_of_sets.powerset_natfun_rec(finite_sets_of_sets.A, (number_fields.-)(finite_sets_of_sets.n, 1), finite_sets_of_sets.f, finite_sets_of_sets.B)" "NIL")) (|powerset_natfun_rec_TCC2-1| |nil| 3242842733 ("" (SKOLEM-TYPEPRED) (("" (HIDE -1 -2 -3) (("" (FLATTEN) (("" (LEMMA "empty_card[T]") (("" (INST -1 "A!1") (("" (ASSERT) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|powerset_natfun_rec| TERMINATION "finite_sets_of_sets.powerset_natfun_rec(finite_sets_of_sets.A, (number_fields.-)(finite_sets_of_sets.n, 1), finite_sets_of_sets.f, finite_sets_of_sets.B)" "NIL"))) (|powerset_natfun_rec_TCC3| 0 (|powerset_natfun_rec_TCC3-1| |nil| 3242843028 ("" (GRIND) (("" (LEMMA "empty_card[T]") (("" (INST -1 "A!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets_of_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|Card| CONST-DECL "nat" |finite_sets| NIL) (|card| CONST-DECL "{n: nat | n = Card(S)}" |finite_sets| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|setof| TYPE-EQ-DECL NIL |defined_types| NIL) (|setofsets| TYPE-EQ-DECL NIL |sets| NIL) (|powerset| CONST-DECL "setofsets" |sets| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |sets_lemmas| NIL) (|nonempty_powerset| APPLICATION-JUDGEMENT "(nonempty?[set[T]])" |sets_lemmas| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|surjective?| CONST-DECL "bool" |functions| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) NIL (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|epsilon| CONST-DECL "T" |epsilons| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|inverse| CONST-DECL "D" |function_inverse| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) SHOSTAK (|powerset_natfun_rec| SUBTYPE "(number_fields.+)(finite_sets_of_sets.nval, finite_sets_of_sets.powerset_natfun_rec(finite_sets_of_sets.A, (number_fields.-)(finite_sets_of_sets.n, 1), finite_sets_of_sets.f, finite_sets_of_sets.B))" "nat"))) (|powerset_natfun_rec_TCC4| 0 (|powerset_natfun_rec_TCC4-1| |nil| 3242843036 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets_of_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|Card| CONST-DECL "nat" |finite_sets| NIL) (|card| CONST-DECL "{n: nat | n = Card(S)}" |finite_sets| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|setof| TYPE-EQ-DECL NIL |defined_types| NIL) (|setofsets| TYPE-EQ-DECL NIL |sets| NIL) (|powerset| CONST-DECL "setofsets" |sets| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nonempty_powerset| APPLICATION-JUDGEMENT "(nonempty?[set[T]])" |sets_lemmas| NIL) (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |sets_lemmas| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|surjective?| CONST-DECL "bool" |functions| NIL) (|injective?| CONST-DECL "bool" |functions| NIL)) SHOSTAK (|powerset_natfun_rec| SUBTYPE "(number_fields.-)(finite_sets_of_sets.n, 1)" "nat"))) (|powerset_natfun_rec_TCC5| 0 (|powerset_natfun_rec_TCC5-1| |nil| 3242962925 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets_of_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|Card| CONST-DECL "nat" |finite_sets| NIL) (|card| CONST-DECL "{n: nat | n = Card(S)}" |finite_sets| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|setof| TYPE-EQ-DECL NIL |defined_types| NIL) (|setofsets| TYPE-EQ-DECL NIL |sets| NIL) (|powerset| CONST-DECL "setofsets" |sets| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nonempty_powerset| APPLICATION-JUDGEMENT "(nonempty?[set[T]])" |sets_lemmas| NIL) (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |sets_lemmas| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|surjective?| CONST-DECL "bool" |functions| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK (|powerset_natfun_rec| SUBTYPE "(number_fields.-)(finite_sets_of_sets.n, 1)" "below(finite_sets[finite_sets_of_sets.T].card(finite_sets_of_sets.A))"))) (|powerset_natfun_rec_TCC6| 0 (|powerset_natfun_rec_TCC6-1| |nil| 3369463704 ("" (SKOLEM-TYPEPRED) (("" (FLATTEN) (("" (USE "empty_card[T]") (("" (EXPAND "empty?") (("" (EXPAND "member") (("" (ASSERT) (("" (SKOLEM-TYPEPRED) (("" (INST 2 "x!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|empty?| CONST-DECL "bool" |sets| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nonempty_powerset| APPLICATION-JUDGEMENT "(nonempty?[set[T]])" |sets_lemmas| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) NIL NIL (|member| CONST-DECL "bool" |sets| NIL) (|empty_card| FORMULA-DECL NIL |finite_sets| NIL) (|powerset| CONST-DECL "setofsets" |sets| NIL) (|setofsets| TYPE-EQ-DECL NIL |sets| NIL) (|setof| TYPE-EQ-DECL NIL |defined_types| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|card| CONST-DECL "{n: nat | n = Card(S)}" |finite_sets| NIL) (|Card| CONST-DECL "nat" |finite_sets| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets_of_sets| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) SHOSTAK (|powerset_natfun_rec| EXISTENCE "" "(finite_sets_of_sets.A)"))) (|powerset_natfun_rec_bound| 0 (|powerset_natfun_rec_bound-1| |nil| 3242966710 ("" (SKOLEM 1 ("A!1" _ "f!1" "B!1")) (("" (INDUCT-AND-SIMPLIFY "n") NIL NIL)) NIL) ((|inverse| CONST-DECL "D" |function_inverse| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|unique_bijective_inverse| APPLICATION-JUDGEMENT "{x: D | f(x) = y}" |function_inverse| NIL) (|bijective_inverse_is_bijective| APPLICATION-JUDGEMENT "(bijective?[R, D])" |function_inverse| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|upto_induction| FORMULA-DECL NIL |bounded_nat_inductions| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets_of_sets| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|Card| CONST-DECL "nat" |finite_sets| NIL) (|card| CONST-DECL "{n: nat | n = Card(S)}" |finite_sets| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|powerset_natfun_rec| DEF-DECL "nat" |finite_sets_of_sets| NIL) (|powerset| CONST-DECL "setofsets" |sets| NIL) (|setofsets| TYPE-EQ-DECL NIL |sets| NIL) (|setof| TYPE-EQ-DECL NIL |defined_types| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL)) SHOSTAK)) (|powerset_natfun_TCC1| 0 (|powerset_natfun_TCC1-2| "" 3342856117 ("" (SKOLEM-TYPEPRED) (("" (LEMMA "Card_bijection[T]") (("" (INST -1 "A!1" "card(A!1)") (("" (REWRITE "card_def") (("" (ASSERT) (("" (SKOSIMP) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|Card_bijection| FORMULA-DECL NIL |finite_sets| NIL) (|card_def| FORMULA-DECL NIL |finite_sets| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (|surjective?| CONST-DECL "bool" |functions| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |sets_lemmas| NIL) (|nonempty_powerset| APPLICATION-JUDGEMENT "(nonempty?[set[T]])" |sets_lemmas| NIL) (|card| CONST-DECL "{n: nat | n = Card(S)}" |finite_sets| NIL) (|Card| CONST-DECL "nat" |finite_sets| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|powerset| CONST-DECL "setofsets" |sets| NIL) (|setofsets| TYPE-EQ-DECL NIL |sets| NIL) (|setof| TYPE-EQ-DECL NIL |defined_types| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets_of_sets| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) SHOSTAK (|powerset_natfun| SUBTYPE "functions[(finite_sets_of_sets.A), below(finite_sets[finite_sets_of_sets.T].card(finite_sets_of_sets.A))].bijective?" "(sets[[(finite_sets_of_sets.A) -> below(finite_sets[finite_sets_of_sets.T].card(finite_sets_of_sets.A))]].nonempty?)")) (|powerset_natfun_TCC1-1| |nil| 3242843042 ("" (SKOSIMP) (("" (USE "Card_bijection[T]") (("" (INST -1 "A!1" "card(A!1)") (("" (REWRITE "card_def") (("" (ASSERT) (("" (SKOSIMP) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|powerset_natfun| SUBTYPE "functions[(finite_sets_of_sets.A), below(finite_sets[finite_sets_of_sets.T].card(finite_sets_of_sets.A))].bijective?" "(sets[[(finite_sets_of_sets.A) -> below(finite_sets[finite_sets_of_sets.T].card(finite_sets_of_sets.A))]].nonempty?)"))) (|powerset_natfun_TCC2| 0 (|powerset_natfun_TCC2-1| |nil| 3242843103 ("" (GRIND) NIL NIL) NIL SHOSTAK (|powerset_natfun| SUBTYPE "finite_sets[finite_sets_of_sets.T].card(finite_sets_of_sets.A)" "upto(finite_sets[finite_sets_of_sets.T].card(finite_sets_of_sets.A))"))) (|powerset_natfun_TCC3| 0 (|powerset_natfun_TCC3-2| "" 3369465081 ("" (SKOSIMP) (("" (BETA) (("" (LEMMA "powerset_natfun_rec_bound") (("" (INST?) NIL NIL)) NIL)) NIL)) NIL) ((|powerset_natfun_rec_bound| FORMULA-DECL NIL |finite_sets_of_sets| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets_of_sets| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|Card| CONST-DECL "nat" |finite_sets| NIL) (|card| CONST-DECL "{n: nat | n = Card(S)}" |finite_sets| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|setof| TYPE-EQ-DECL NIL |defined_types| NIL) (|setofsets| TYPE-EQ-DECL NIL |sets| NIL) (|powerset| CONST-DECL "setofsets" |sets| NIL)) SHOSTAK (|powerset_natfun| SUBTYPE "finite_sets_of_sets.powerset_natfun_rec(finite_sets_of_sets.A, finite_sets[finite_sets_of_sets.T].card(finite_sets_of_sets.A), finite_sets_of_sets.f, finite_sets_of_sets.B)" "below(exp2.exp2(finite_sets[finite_sets_of_sets.T].card(finite_sets_of_sets.A)))")) (|powerset_natfun_TCC3-1| |nil| 3369463706 ("" (SUBTYPE-TCC) (("" (POSTPONE) NIL NIL)) NIL) NIL SHOSTAK (|powerset_natfun| SUBTYPE "finite_sets_of_sets.powerset_natfun_rec(finite_sets_of_sets.A, finite_sets[finite_sets_of_sets.T].card(finite_sets_of_sets.A), finite_sets_of_sets.f, finite_sets_of_sets.B)" "below(exp2.exp2(finite_sets[finite_sets_of_sets.T].card(finite_sets_of_sets.A)))"))) (|powerset_natfun_inj_rec_TCC1| 0 (|powerset_natfun_inj_rec_TCC1-1| |nil| 3242962926 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets_of_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|Card| CONST-DECL "nat" |finite_sets| NIL) (|card| CONST-DECL "{n: nat | n = Card(S)}" |finite_sets| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|setof| TYPE-EQ-DECL NIL |defined_types| NIL) (|setofsets| TYPE-EQ-DECL NIL |sets| NIL) (|powerset| CONST-DECL "setofsets" |sets| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nonempty_powerset| APPLICATION-JUDGEMENT "(nonempty?[set[T]])" |sets_lemmas| NIL) (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |sets_lemmas| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|surjective?| CONST-DECL "bool" |functions| NIL) (|injective?| CONST-DECL "bool" |functions| NIL)) SHOSTAK (|powerset_natfun_inj_rec| SUBTYPE "finite_sets_of_sets.m" "below(finite_sets[finite_sets_of_sets.T].card(finite_sets_of_sets.A))"))) (|powerset_natfun_inj_rec_TCC2| 0 (|powerset_natfun_inj_rec_TCC2-3| "" 3590860305 ("" (SKOLEM-TYPEPRED) (("" (FLATTEN) (("" (LEMMA "nonempty_card[T]") (("" (INST?) (("" (ASSERT) (("" (EXPAND "nonempty?") (("" (EXPAND "empty?") (("" (SKOLEM-TYPEPRED) (("" (EXPAND "member") (("" (INST? 1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nonempty?| CONST-DECL "bool" |sets| NIL) NIL NIL (|member| CONST-DECL "bool" |sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nonempty_powerset| APPLICATION-JUDGEMENT "(nonempty?[set[T]])" |sets_lemmas| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nonempty_card| FORMULA-DECL NIL |finite_sets| NIL) (|powerset| CONST-DECL "setofsets" |sets| NIL) (|setofsets| TYPE-EQ-DECL NIL |sets| NIL) (|setof| TYPE-EQ-DECL NIL |defined_types| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|card| CONST-DECL "{n: nat | n = Card(S)}" |finite_sets| NIL) (|Card| CONST-DECL "nat" |finite_sets| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets_of_sets| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) SHOSTAK (|powerset_natfun_inj_rec| EXISTENCE "" "(finite_sets_of_sets.A)")) (|powerset_natfun_inj_rec_TCC2-2| "" 3332564344 ("" (SKOLEM-TYPEPRED) (("" (FLATTEN) (("" (LEMMA "nonempty_card[T]") (("" (INST?) (("" (ASSERT) (("" (EXPAND "nonempty?") (("" (EXPAND "empty?") (("" (SKOLEM-TYPEPRED) (("" (EXPAND "member") (("" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|powerset_natfun_inj_rec| EXISTENCE "" "(finite_sets_of_sets.A)")) (|powerset_natfun_inj_rec_TCC2-1| |nil| 3242962926 ("" (GRIND) NIL NIL) NIL SHOSTAK (|powerset_natfun_inj_rec| EXISTENCE "" "(finite_sets_of_sets.A)"))) (|powerset_natfun_inj_rec| 0 (|powerset_natfun_inj_rec-1| |nil| 3242959167 ("" (SKOLEM 1 ("A!1" _ "f!1" "B1!1" "B2!1")) (("" (INDUCT "n") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (SKOSIMP) (("3" (EXPAND "powerset_natfun_rec" +) (("3" (SPLIT 1) (("1" (FLATTEN) (("1" (SKOSIMP) (("1" (CASE-REPLACE "m!1 = jt!1") (("1" (ASSERT) (("1" (EXPAND "member") (("1" (LEMMA "powerset_natfun_rec_bound") (("1" (INST-CP -1 "A!1" "jt!1" "f!1" "B1!1") (("1" (INST -1 "A!1" "jt!1" "f!1" "B2!1") (("1" (ASSERT) (("1" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL) ("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SPLIT -4) (("1" (INST -1 "m!1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (REPLACE 1) (("2" (ASSERT) (("2" (EXPAND "member") (("2" (LEMMA "powerset_natfun_rec_bound") (("2" (INST-CP -1 "A!1" "jt!1" "f!1" "B1!1") (("2" (INST -1 "A!1" "jt!1" "f!1" "B2!1") (("2" (ASSERT) (("2" (HIDE 4) (("2" (LIFT-IF) (("2" (PROP) (("1" (ASSERT) (("1" (LIFT-IF) (("1" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (LIFT-IF) (("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (LIFT-IF) (("3" (GROUND) NIL NIL)) NIL) ("4" (LIFT-IF) (("4" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (SPLIT -4) (("1" (INST -2 "jt!1") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (INST -2 "m!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE -1 1) (("4" (GRIND) (("4" (LEMMA "empty_card[T]") (("4" (INST -1 "A!1") (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (HIDE -1 1) (("5" (GRIND) (("5" (LEMMA "empty_card[T]") (("5" (INST -1 "A!1") (("5" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("6" (HIDE -1 1) (("6" (GRIND) NIL NIL)) NIL) ("7" (HIDE -1 1) (("7" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((< CONST-DECL "bool" |reals| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) NIL (<= CONST-DECL "bool" |reals| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|setof| TYPE-EQ-DECL NIL |defined_types| NIL) (|setofsets| TYPE-EQ-DECL NIL |sets| NIL) (|powerset| CONST-DECL "setofsets" |sets| NIL) (|powerset_natfun_rec| DEF-DECL "nat" |finite_sets_of_sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|inverse| CONST-DECL "D" |function_inverse| NIL) (|card| CONST-DECL "{n: nat | n = Card(S)}" |finite_sets| NIL) (|Card| CONST-DECL "nat" |finite_sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets_of_sets| NIL) (|upto_induction| FORMULA-DECL NIL |bounded_nat_inductions| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|powerset_natfun_rec_bound| FORMULA-DECL NIL |finite_sets_of_sets| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|unique_bijective_inverse| APPLICATION-JUDGEMENT "{x: D | f(x) = y}" |function_inverse| NIL) (|bijective_inverse_is_bijective| APPLICATION-JUDGEMENT "(bijective?[R, D])" |function_inverse| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)) SHOSTAK)) (|powerset_natfun_inj| 0 (|powerset_natfun_inj-4| "" 3658948800 ("" (LEMMA "powerset_natfun_inj_rec") (("" (SKOSIMP) (("" (SKOSIMP) (("" (EXPAND "powerset_natfun") (("" (INST? -1) (("" (ASSERT) (("" (APPLY-EXTENSIONALITY) (("" (EXPAND "member") (("" (HIDE -2) (("" (HIDE 2) (("" (NAME-REPLACE "f" "choose(bijective?[(A!1), below(card(A!1))])") (("1" (CASE "A!1(x!1)") (("1" (INST -2 "f(x!1)") (("1" (ASSERT) (("1" (TYPEPRED "f") (("1" (EXPAND "inverse") (("1" (CASE-REPLACE "(epsilon! (x: (A!1)): f(x) = f(x!1)) = x!1") (("1" (IFF) (("1" (PROPAX) NIL NIL)) NIL) ("2" (HIDE -3 2) (("2" (USE "epsilon_ax[(A!1)]") (("1" (PROP) (("1" (EXPAND "bijective?") (("1" (FLATTEN) (("1" (EXPAND "injective?") (("1" (INST?) (("1" (ASSERT) NIL NIL) ("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST?) NIL NIL)) NIL) ("2" (INST?) NIL NIL)) NIL)) NIL) ("3" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "f(x!1)") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "inverse") (("2" (TYPEPRED "B1!1") (("2" (TYPEPRED "B2!1") (("2" (HIDE -3) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (LEMMA "Card_bijection[T]") (("2" (INST -1 "A!1" "card(A!1)") (("2" (REWRITE "card_def") (("2" (ASSERT) (("2" (SKOSIMP) (("2" (EXPAND "nonempty?") (("2" (EXPAND "empty?") (("2" (INST?) (("2" (EXPAND "member") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|powerset_natfun| CONST-DECL "below(exp2(card(A)))" |finite_sets_of_sets| NIL) (|unique_bijective_inverse| APPLICATION-JUDGEMENT "{x: D | f(x) = y}" |function_inverse| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|card_def| FORMULA-DECL NIL |finite_sets| NIL) (|Card_bijection| FORMULA-DECL NIL |finite_sets| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|inverse| CONST-DECL "D" |function_inverse| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (|epsilon_ax| FORMULA-DECL NIL |epsilons| NIL) (|epsilon| CONST-DECL "T" |epsilons| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) NIL NIL NIL (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |sets_lemmas| NIL) (|nonempty_powerset| APPLICATION-JUDGEMENT "(nonempty?[set[T]])" |sets_lemmas| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|powerset| CONST-DECL "setofsets" |sets| NIL) (|setofsets| TYPE-EQ-DECL NIL |sets| NIL) (|setof| TYPE-EQ-DECL NIL |defined_types| NIL) (|choose| CONST-DECL "(p)" |sets| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|card| CONST-DECL "{n: nat | n = Card(S)}" |finite_sets| NIL) (|Card| CONST-DECL "nat" |finite_sets| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets_of_sets| NIL) (|powerset_natfun_inj_rec| FORMULA-DECL NIL |finite_sets_of_sets| NIL)) SHOSTAK) (|powerset_natfun_inj-3| "" 3590860968 ("" (LEMMA "powerset_natfun_inj_rec") (("" (SKOSIMP) (("" (SKOSIMP) (("" (EXPAND "powerset_natfun") (("" (INST? -1) (("" (ASSERT) (("" (APPLY-EXTENSIONALITY) (("" (EXPAND "member") (("" (HIDE -2) (("" (HIDE 2) (("" (NAME-REPLACE "f" "choose(bijective?[(A!1), below(card(A!1))])") (("1" (CASE "A!1(x!1)") (("1" (INST -2 "f(x!1)") (("1" (ASSERT) (("1" (TYPEPRED "f") (("1" (EXPAND "inverse") (("1" (CASE-REPLACE "(epsilon! (x: (A!1)): f(x) = f(x!1)) = x!1") (("1" (IFF) (("1" (PROPAX) NIL NIL)) NIL) ("2" (HIDE -4 2) (("2" (USE "epsilon_ax[(A!1)]") (("1" (PROP) (("1" (EXPAND "bijective?") (("1" (FLATTEN) (("1" (EXPAND "injective?") (("1" (INST?) (("1" (ASSERT) NIL NIL) ("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST?) NIL NIL)) NIL) ("2" (INST?) NIL NIL)) NIL)) NIL) ("3" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "f(x!1)") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "inverse") (("2" (TYPEPRED "B1!1") (("2" (TYPEPRED "B2!1") (("2" (HIDE -3) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (LEMMA "Card_bijection[T]") (("2" (INST -1 "A!1" "card(A!1)") (("2" (REWRITE "card_def") (("2" (ASSERT) (("2" (SKOSIMP) (("2" (EXPAND "nonempty?") (("2" (EXPAND "empty?") (("2" (INST?) (("2" (EXPAND "member") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|powerset_natfun_inj-2| "" 3342858990 ("" (LEMMA "powerset_natfun_inj_rec") (("" (SKOSIMP) (("" (SKOSIMP) (("" (EXPAND "powerset_natfun") (("" (INST? -1) (("" (ASSERT) (("" (APPLY-EXTENSIONALITY) (("" (EXPAND "member") (("" (HIDE -2) (("" (HIDE 2) (("" (NAME-REPLACE "f" "choose(bijective?[(A!1), below(card(A!1))])") (("1" (CASE "A!1(x!1)") (("1" (INST -2 "f(x!1)") (("1" (ASSERT) (("1" (TYPEPRED "f") (("1" (EXPAND "inverse") (("1" (CASE-REPLACE "(epsilon! (x: (A!1)): f(x) = f(x!1)) = x!1") (("1" (IFF) (("1" (PROPAX) NIL NIL)) NIL) ("2" (HIDE -3 2) (("2" (USE "epsilon_ax[(A!1)]") (("1" (PROP) (("1" (EXPAND "bijective?") (("1" (FLATTEN) (("1" (EXPAND "injective?") (("1" (INST?) (("1" (ASSERT) NIL NIL) ("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST?) NIL NIL)) NIL) ("2" (INST?) NIL NIL)) NIL)) NIL) ("3" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "f(x!1)") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "inverse") (("2" (TYPEPRED "B1!1") (("2" (TYPEPRED "B2!1") (("2" (HIDE -3) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (LEMMA "Card_bijection[T]") (("2" (INST -1 "A!1" "card(A!1)") (("2" (REWRITE "card_def") (("2" (ASSERT) (("2" (SKOSIMP) (("2" (EXPAND "nonempty?") (("2" (EXPAND "empty?") (("2" (INST?) (("2" (EXPAND "member") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|powerset_natfun_inj-1| |nil| 3242962518 ("" (LEMMA "powerset_natfun_inj_rec") (("" (SKOSIMP) (("" (SKOSIMP) (("" (EXPAND "powerset_natfun") (("" (INST? -1) (("1" (ASSERT) (("1" (APPLY-EXTENSIONALITY) (("1" (EXPAND "member") (("1" (HIDE -2) (("1" (HIDE 2) (("1" (NAME-REPLACE "f" "choose(bijective?[(A!1), below(card(A!1))])") (("1" (INST -1 "f(x!1)") (("1" (ASSERT) (("1" (TYPEPRED "f") (("1" (EXPAND "inverse") (("1" (CASE "A!1(x!1)") (("1" (CASE-REPLACE "(epsilon! (x: (A!1)): f(x) = f(x!1)) = x!1") (("1" (IFF) (("1" (EXPAND "restrict") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (EXPAND "restrict") (("2" (HIDE -3 2) (("2" (USE "epsilon_ax[(A!1)]") (("1" (SPLIT) (("1" (EXPAND "bijective?") (("1" (FLATTEN) (("1" (EXPAND "injective?") (("1" (INST?) (("1" (ASSERT) NIL NIL) ("2" (INST 1 "x!1") NIL NIL) ("3" (SKOSIMP) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "x!1") NIL NIL)) NIL) ("2" (SKOSIMP) NIL NIL) ("3" (INST 1 "x!1") NIL NIL)) NIL)) NIL)) NIL) ("3" (INST 1 "x!1") NIL NIL) ("4" (SKOSIMP) NIL NIL)) NIL) ("2" (HIDE -1 -2) (("2" (TYPEPRED "B1!1") (("2" (TYPEPRED "B2!1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "f") (("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("3" (TYPEPRED "B1!1") (("3" (TYPEPRED "B2!1") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (LEMMA "Card_bijection[T]") (("2" (INST -1 "A!1" "card(A!1)") (("2" (REWRITE "card_def") (("2" (ASSERT) (("2" (SKOSIMP) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (LEMMA "Card_bijection[T]") (("2" (INST -1 "A!1" "card(A!1)") (("2" (REWRITE "card_def") (("2" (ASSERT) (("2" (SKOSIMP) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|powerset_finite| 0 (|powerset_finite-1| |nil| 3242843110 ("" (USE "powerset_natfun_inj") (("" (SKOSIMP) (("" (EXPAND "is_finite") (("" (INST 1 "exp2(card(A!1))" "powerset_natfun(A!1)") (("" (EXPAND "injective?") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets_of_sets| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|Card| CONST-DECL "nat" |finite_sets| NIL) (|card| CONST-DECL "{n: nat | n = Card(S)}" |finite_sets| NIL) (|setof| TYPE-EQ-DECL NIL |defined_types| NIL) (|setofsets| TYPE-EQ-DECL NIL |sets| NIL) (|powerset| CONST-DECL "setofsets" |sets| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|powerset_natfun| CONST-DECL "below(exp2(card(A)))" |finite_sets_of_sets| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|powerset_natfun_inj| FORMULA-DECL NIL |finite_sets_of_sets| NIL)) SHOSTAK (|powerset_finite| SUBTYPE "sets[finite_sets_of_sets.T].powerset(finite_sets_of_sets.A)" "finite_set[set[T]]"))) (|powerset_finite2| 0 (|powerset_finite2-1| NIL 3887424675 ("" (SKOLEM-TYPEPRED) (("" (GROUND) (("1" (SKOLEM-TYPEPRED) (("1" (EXPAND "powerset") (("1" (LEMMA "finite_subset" ("s" "x!1" "A" "A!1")) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "is_finite") (("2" (SKOLEM-TYPEPRED) (("2" (INST 1 "exp2(card(A!1))" "powerset_natfun(A!1)") (("2" (EXPAND "injective?") (("2" (LEMMA "powerset_natfun_inj[T]") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nonempty_powerset| APPLICATION-JUDGEMENT "(nonempty?[set[T]])" |sets_lemmas| NIL) (|powerset_finite| APPLICATION-JUDGEMENT "finite_set[set[T]]" |finite_sets_of_sets| NIL) (|powerset| CONST-DECL "setofsets" |sets| NIL) (|finite_subset| FORMULA-DECL NIL |finite_sets| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|powerset_natfun_inj| FORMULA-DECL NIL |finite_sets_of_sets| NIL) (|powerset_natfun| CONST-DECL "below(exp2(card(A)))" |finite_sets_of_sets| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|setofsets| TYPE-EQ-DECL NIL |sets| NIL) (|setof| TYPE-EQ-DECL NIL |defined_types| NIL) (|card| CONST-DECL "{n: nat | n = Card(S)}" |finite_sets| NIL) (|Card| CONST-DECL "nat" |finite_sets| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets_of_sets| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) SHOSTAK (|powerset_finite2| SUBTYPE "sets[finite_sets_of_sets.T].powerset(finite_sets_of_sets.A)" "finite_set[finite_set[T]]"))) (|Union_finite| 0 (|Union_finite-2| "" 3728843445 ("" (SKOLEM!) (("" (EXPAND "every") (("" (PROP) (("1" (LEMMA "finite_subset[set[T]]") (("1" (INST - "powerset(Union(SS!1))" "SS!1") (("1" (GRIND) NIL NIL) ("2" (USE "powerset_finite") NIL NIL)) NIL)) NIL) ("2" (SKOLEM!) (("2" (LEMMA "finite_subset[T]") (("2" (INST - "Union(SS!1)" "x!1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (CASE "FORALL (n: nat), (B: setofsets[T]): (EXISTS (f: [(B) -> below[n]]): injective?(f)) AND (FORALL (b: (B)): is_finite(b)) => is_finite(Union(B))") (("1" (EXPAND "is_finite" -2) (("1" (SKOLEM!) (("1" (INST - "N!1" "SS!1") (("1" (PROP) (("1" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (DELETE -1 -2 2) (("2" (INDUCT "n") (("1" (SKOSIMP*) (("1" (EXPAND "is_finite" +) (("1" (INST + "1" "LAMBDA (b: (Union(B!1))): 0") (("1" (EXPAND "injective?") (("1" (SKOLEM-TYPEPRED) (("1" (EXPAND "Union") (("1" (SKOSIMP*) (("1" (TYPEPRED "f!1(a!1)") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (CASE "EXISTS (b: (B!1)): f!1(b) = j!1") (("1" (SKOLEM!) (("1" (INST - "remove(b!1, B!1)") (("1" (PROP) (("1" (INST - "b!1") (("1" (EXPAND "is_finite") (("1" (SKOSIMP*) (("1" (INST + "N!1 + N!2" "LAMBDA (c: (Union(B!1))): IF b!1(c) THEN N!1 + f!3(c) ELSE f!2(c) ENDIF") (("1" (EXPAND "injective?") (("1" (SKOSIMP :PREDS? T) (("1" (EXPAND "Union") (("1" (SKOSIMP*) (("1" (SMASH) (("1" (INST -6 "x1!1" "x2!1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST - "x1!1" "x2!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP :PREDS? T) (("2" (EXPAND* "remove" "member" "Union") (("2" (SKOLEM!) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP :PREDS? T) (("3" (EXPAND* "remove" "member" "Union") (("3" (SKOLEM!) (("3" (INST + "a!1") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKOSIMP) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST + "LAMBDA (c: (remove(b!1, B!1))): f!1(c)") (("1" (EXPAND "injective?") (("1" (SKOSIMP :PREDS? T) (("1" (EXPAND* "remove" "member") (("1" (FLATTEN) (("1" (INST - "x1!1" "x2!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOLEM-TYPEPRED) (("2" (EXPAND* "remove" "member" "injective?") (("2" (FLATTEN) (("2" (INST - "b!1" "c!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOLEM-TYPEPRED) (("3" (EXPAND* "remove" "member") (("3" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKOLEM-TYPEPRED) (("3" (EXPAND* "remove" "member") (("3" (FLATTEN) (("3" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST - "B!1") (("2" (PROP) (("2" (INST + "f!1") (("2" (SKOLEM!) (("2" (INST + "x1!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|remove| CONST-DECL "set" |sets| NIL) NIL NIL NIL NIL (/= CONST-DECL "boolean" |notequal| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) NIL NIL NIL NIL NIL NIL (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|finite_subset| FORMULA-DECL NIL |finite_sets| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets_of_sets| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|powerset_finite| JUDGEMENT-TCC NIL |finite_sets_of_sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |sets_lemmas| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|Union_surjective| NAME-JUDGEMENT "(surjective?[setofsets[T], set[T]])" |sets_lemmas| NIL) (|nonempty_powerset| APPLICATION-JUDGEMENT "(nonempty?[set[T]])" |sets_lemmas| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|setof| TYPE-EQ-DECL NIL |defined_types| NIL) (|setofsets| TYPE-EQ-DECL NIL |sets| NIL) (|powerset| CONST-DECL "setofsets" |sets| NIL) (|Union| CONST-DECL "set" |sets| NIL) NIL (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)) SHOSTAK) (|Union_finite-1| |nil| 3252521570 ("" (SKOLEM!) (("" (EXPAND "every") (("" (PROP) (("1" (LEMMA "finite_subset[set[T]]") (("1" (INST - "powerset(Union(SS!1))" "SS!1") (("1" (GRIND) NIL NIL) ("2" (USE "powerset_finite") NIL NIL)) NIL)) NIL) ("2" (SKOLEM!) (("2" (LEMMA "finite_subset[T]") (("2" (INST - "Union(SS!1)" "x!1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (CASE "FORALL (n: nat), (B: setofsets[T]): (EXISTS (f: [(B) -> below[n]]): injective?(f)) AND (FORALL (b: (B)): is_finite(b)) => is_finite(Union(B))") (("1" (EXPAND "is_finite" -2) (("1" (SKOLEM!) (("1" (INST - "N!1" "SS!1") (("1" (PROP) (("1" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (DELETE -1 -2 2) (("2" (INDUCT "n") (("1" (SKOSIMP*) (("1" (EXPAND "is_finite" +) (("1" (INST + "1" "LAMBDA (b: (Union(B!1))): 0") (("1" (EXPAND "injective?") (("1" (SKOLEM-TYPEPRED) (("1" (EXPAND "Union") (("1" (SKOSIMP*) (("1" (TYPEPRED "f!1(a!1)") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (CASE "EXISTS (b: (B!1)): f!1(b) = j!1") (("1" (SKOLEM!) (("1" (INST - "remove(b!1, B!1)") (("1" (PROP) (("1" (INST - "b!1") (("1" (EXPAND "is_finite") (("1" (SKOSIMP*) (("1" (INST + "N!1 + N!2" "LAMBDA (c: (Union(B!1))): IF b!1(c) THEN N!1 + f!3(c) ELSE f!2(c) ENDIF") (("1" (EXPAND "injective?") (("1" (SKOSIMP :PREDS? T) (("1" (EXPAND "Union") (("1" (SKOSIMP*) (("1" (SMASH) (("1" (INST -6 "x1!1" "x2!1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST - "x1!1" "x2!1") (("1" (ASSERT) NIL NIL) ("2" (EXPAND* "remove" "member" "Union") (("2" (INST + "a!2") NIL NIL)) NIL) ("3" (EXPAND* "remove" "member" "Union") (("3" (INST + "a!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP :PREDS? T) (("3" (EXPAND* "remove" "member" "Union") (("3" (SKOLEM!) (("3" (INST + "a!1") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKOSIMP) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST + "LAMBDA (c: (remove(b!1, B!1))): f!1(c)") (("1" (EXPAND "injective?") (("1" (SKOSIMP :PREDS? T) (("1" (EXPAND* "remove" "member") (("1" (FLATTEN) (("1" (INST - "x1!1" "x2!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOLEM-TYPEPRED) (("2" (EXPAND* "remove" "member" "injective?") (("2" (FLATTEN) (("2" (INST - "b!1" "c!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOLEM-TYPEPRED) (("3" (EXPAND* "remove" "member") (("3" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKOLEM-TYPEPRED) (("3" (EXPAND* "remove" "member") (("3" (FLATTEN) (("3" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST - "B!1") (("2" (PROP) (("2" (INST + "f!1") (("1" (EXPAND "injective?") (("1" (PROPAX) NIL NIL)) NIL) ("2" (SKOLEM!) (("2" (INST + "x1!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|finite_Union_finite| 0 (|finite_Union_finite-1| |nil| 3397716311 ("" (SKOSIMP*) (("" (USE "Union_finite") (("" (ASSERT) NIL NIL)) NIL)) NIL) ((|Union_finite| FORMULA-DECL NIL |finite_sets_of_sets| NIL) (|setofsets| TYPE-EQ-DECL NIL |sets| NIL) (|setof| TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets_of_sets| NIL) (|Union_surjective| NAME-JUDGEMENT "(surjective?[setofsets[T], set[T]])" |sets_lemmas| NIL)) SHOSTAK)) (|Union_infinite| 0 (|Union_infinite-1| |nil| 3252521819 ("" (SKOLEM!) (("" (USE "Union_finite") (("" (EXPAND* "every" "some") (("" (SMASH) (("1" (SKOLEM!) (("1" (INST - "x!1") NIL NIL)) NIL) ("2" (SKOLEM!) (("2" (INST + "x!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|Union_finite| FORMULA-DECL NIL |finite_sets_of_sets| NIL) (|setofsets| TYPE-EQ-DECL NIL |sets| NIL) (|setof| TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets_of_sets| NIL) (|Union_surjective| NAME-JUDGEMENT "(surjective?[setofsets[T], set[T]])" |sets_lemmas| NIL) NIL NIL) SHOSTAK)) (|Intersection_finite| 0 (|Intersection_finite-1| |nil| 3252521839 ("" (EXPAND* "every" "is_finite" "nonempty?" "empty?" "member") (("" (SKOSIMP*) (("" (INST - "x!1") (("" (SKOLEM!) (("" (INST + "N!1" "LAMBDA (a: (Intersection(SS!1))): f!1(a)") (("1" (EXPAND "injective?") (("1" (SKOSIMP :PREDS? T) (("1" (EXPAND "Intersection") (("1" (INST - "x!1") (("1" (INST - "x!1") (("1" (INST - "x1!1" "x2!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOLEM-TYPEPRED) (("2" (EXPAND "Intersection") (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|injective?| CONST-DECL "bool" |functions| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|Intersection| CONST-DECL "set" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets_of_sets| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|setof| TYPE-EQ-DECL NIL |defined_types| NIL) (|setofsets| TYPE-EQ-DECL NIL |sets| NIL) NIL NIL NIL (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL)) SHOSTAK)) (|Intersection_infinite| 0 (|Intersection_infinite-1| |nil| 3252521879 ("" (EXPAND* "every" "is_finite") (("" (SKOSIMP*) (("" (INST + "N!1" "LAMBDA (a: (Intersection(SS!1))): f!1(a)") (("1" (EXPAND "injective?") (("1" (SKOSIMP :PREDS? T) (("1" (EXPAND "Intersection") (("1" (INST - "x!1") (("1" (INST - "x!1") (("1" (INST - "x1!1" "x2!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOLEM-TYPEPRED) (("2" (EXPAND "Intersection") (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|injective?| CONST-DECL "bool" |functions| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets_of_sets| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|setof| TYPE-EQ-DECL NIL |defined_types| NIL) (|setofsets| TYPE-EQ-DECL NIL |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|Intersection| CONST-DECL "set" |sets| NIL) NIL NIL (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) NIL (|is_finite| CONST-DECL "bool" |finite_sets| NIL)) SHOSTAK)) (|Complement_finite| 0 (|Complement_finite-1| |nil| 3252521922 ("" (SKOLEM!) (("" (EXPAND* "Complement" "is_finite" "injective?") (("" (PROP) (("1" (SKOLEM!) (("1" (INST + "N!1" "LAMBDA (a: (SS!1)): f!1(complement(a))") (("1" (SKOSIMP) (("1" (INST - "complement(x1!1)" "complement(x2!1)") (("1" (ASSERT) (("1" (REWRITE "complement_equal") NIL NIL)) NIL) ("2" (INST + "x2!1") NIL NIL) ("3" (INST + "x1!1") NIL NIL)) NIL)) NIL) ("2" (SKOLEM!) (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOLEM!) (("2" (INST + "N!1" "LAMBDA (c: ({a: set[T] | EXISTS (b: (SS!1)): a = complement(b)})): f!1(complement(c))") (("1" (SKOSIMP :PREDS? T) (("1" (SKOSIMP*) (("1" (INST - "complement(x1!1)" "complement(x2!1)") (("1" (ASSERT) (("1" (REWRITE "complement_equal") NIL NIL)) NIL) ("2" (LEMMA "complement_complement[T]") (("2" (INST - "b!2") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (LEMMA "complement_complement[T]") (("3" (INST - "b!1") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP* :PREDS? T) (("2" (USE "complement_complement[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|injective?| CONST-DECL "bool" |functions| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|Complement| CONST-DECL "setofsets[T]" |sets_lemmas| NIL) (|complement_complement| FORMULA-DECL NIL |sets_lemmas| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|complement_equal| FORMULA-DECL NIL |sets_lemmas| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets_of_sets| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|setof| TYPE-EQ-DECL NIL |defined_types| NIL) (|setofsets| TYPE-EQ-DECL NIL |sets| NIL) NIL (|set| TYPE-EQ-DECL NIL |sets| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|complement| CONST-DECL "set" |sets| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK)) (|Complement_is_finite| 0 (|Complement_is_finite-1| |nil| 3252221181 ("" (SKOLEM!) (("" (REWRITE "Complement_finite") NIL NIL)) NIL) ((|Complement_finite| FORMULA-DECL NIL |finite_sets_of_sets| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets_of_sets| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|setof| TYPE-EQ-DECL NIL |defined_types| NIL) (|setofsets| TYPE-EQ-DECL NIL |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)) SHOSTAK (|Complement_is_finite| SUBTYPE "sets_lemmas[finite_sets_of_sets.T].Complement(finite_sets_of_sets.SS)" "finite_set[set[T]]"))) (|Complement_infinite| 0 (|Complement_infinite-1| |nil| 3252522256 ("" (SKOLEM!) (("" (USE "Complement_finite") (("" (PROP) NIL NIL)) NIL)) NIL) ((|Complement_finite| FORMULA-DECL NIL |finite_sets_of_sets| NIL) (|setofsets| TYPE-EQ-DECL NIL |sets| NIL) (|setof| TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets_of_sets| NIL)) SHOSTAK)) (|Complement_is_infinite| 0 (|Complement_is_infinite-1| |nil| 3252221181 ("" (SKOLEM!) (("" (REWRITE "Complement_infinite") NIL NIL)) NIL) ((|Complement_infinite| FORMULA-DECL NIL |finite_sets_of_sets| NIL) (T FORMAL-TYPE-DECL NIL |finite_sets_of_sets| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|setof| TYPE-EQ-DECL NIL |defined_types| NIL) (|setofsets| TYPE-EQ-DECL NIL |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|infinite_set| TYPE-EQ-DECL NIL |infinite_sets_def| NIL)) SHOSTAK (|Complement_is_infinite| SUBTYPE "sets_lemmas[finite_sets_of_sets.T].Complement(finite_sets_of_sets.SS)" "infinite_set[set[T]]"))))(|EquivalenceClosure| (|EquivClos_TCC1| 0 (|EquivClos_TCC1-1| |nil| 3243015830 ("" (SKOSIMP*) (("" (EXPAND "equivalence?") (("" (EXPAND "EquivClos") (("" (PROP) (("1" (EXPAND "reflexive?") (("1" (SKOSIMP*) (("1" (TYPEPRED "S!1") (("1" (EXPAND "equivalence?") (("1" (FLATTEN) (("1" (EXPAND "reflexive?") (("1" (INST?) NIL))))))))))))) ("2" (EXPAND "symmetric?") (("2" (SKOSIMP*) (("2" (TYPEPRED "S!1") (("2" (EXPAND "equivalence?") (("2" (FLATTEN) (("2" (INST?) (("2" (PROP) (("2" (EXPAND "symmetric?") (("2" (INST -3 "x!1" "y!1") (("2" (ASSERT) NIL))))))))))))))))))) ("3" (EXPAND "transitive?") (("3" (SKOSIMP*) (("3" (TYPEPRED "S!1") (("3" (EXPAND "equivalence?") (("3" (FLATTEN) (("3" (INST?) (("3" (INST?) (("3" (PROP) (("3" (EXPAND "transitive?") (("3" (INST -5 "x!1" "y!1" "z!1") (("3" (ASSERT) NIL)))))))))))))))))))))))))))) NIL) ((|equivalence?| CONST-DECL "bool" |relations| NIL) (|transitive?| CONST-DECL "bool" |relations| NIL) (|symmetric?| CONST-DECL "bool" |relations| NIL) (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |sets_lemmas| NIL) (|reflexive?| CONST-DECL "bool" |relations| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |EquivalenceClosure| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|equivalence| TYPE-EQ-DECL NIL |relations| NIL)) NIL (|EquivClos| SUBTYPE "{(x, y) | FORALL (S: relations[EquivalenceClosure.T].equivalence): booleans.IMPLIES(sets[[EquivalenceClosure.T, EquivalenceClosure.T]].subset?(EquivalenceClosure.R, S), S(EquivalenceClosure.x, EquivalenceClosure.y))}" "equivalence[T]"))) (|EquivClosSuperset| 0 (|EquivClosSuperset-1| |nil| 3243015830 ("" (SKOSIMP*) (("" (EXPAND "subset?") (("" (SKOSIMP*) (("" (EXPAND "member") (("" (EXPAND "EquivClos") (("" (SKOSIMP*) (("" (EXPAND "subset?") (("" (INST?) (("" (EXPAND "member") (("" (ASSERT) NIL)))))))))))))))))) NIL) ((|subset?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (T FORMAL-TYPE-DECL NIL |EquivalenceClosure| NIL) (|EquivClos| CONST-DECL "equivalence[T]" |EquivalenceClosure| NIL)) NIL)) (|EquivClosMonotone| 0 (|EquivClosMonotone-1| |nil| 3243015830 ("" (SKOSIMP*) (("" (EXPAND "subset?") (("" (SKOSIMP*) (("" (EXPAND "member") (("" (EXPAND "EquivClos") (("" (SKOSIMP*) (("" (TYPEPRED "S!2") (("" (INST -3 "S!2") (("" (ASSERT) (("" (EXPAND "subset?") (("" (EXPAND "member") (("" (SKOSIMP*) (("" (INST?) (("" (INST?) (("" (ASSERT) NIL)))))))))))))))))))))))))))) NIL) ((|subset?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |sets_lemmas| NIL) (|equivalence| TYPE-EQ-DECL NIL |relations| NIL) (|equivalence?| CONST-DECL "bool" |relations| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (T FORMAL-TYPE-DECL NIL |EquivalenceClosure| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|EquivClos| CONST-DECL "equivalence[T]" |EquivalenceClosure| NIL)) NIL)) (|EquivClosLeast| 0 (|EquivClosLeast-1| |nil| 3243015830 ("" (SKOSIMP*) (("" (EXPAND "subset?" 1) (("" (SKOSIMP*) (("" (EXPAND "member") (("" (EXPAND "EquivClos") (("" (INST?) (("" (ASSERT) NIL)))))))))))) NIL) ((|subset?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|equivalence| TYPE-EQ-DECL NIL |relations| NIL) NIL (|equivalence?| CONST-DECL "bool" |relations| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |EquivalenceClosure| NIL) (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |sets_lemmas| NIL) (|EquivClos| CONST-DECL "equivalence[T]" |EquivalenceClosure| NIL)) NIL)) (|EquivClosIdempotent| 0 (|EquivClosIdempotent-1| |nil| 3243015830 ("" (SKOSIMP*) (("" (APPLY-EXTENSIONALITY :HIDE? T) (("" (IFF) (("" (PROP) (("1" (LEMMA "EquivClosLeast") (("1" (INST -1 "EquivClos(R!1)" "EquivClos(R!1)") (("1" (ASSERT) (("1" (EXPAND "subset?") (("1" (EXPAND "member") (("1" (PROP) (("1" (INST?) (("1" (ASSERT) NIL))) ("2" (SKOSIMP*) NIL))))))))))))) ("2" (LEMMA "EquivClosSuperset") (("2" (INST -1 "EquivClos(R!1)") (("2" (EXPAND "subset?") (("2" (INST -1 "(x!1, x!2)") (("2" (ASSERT) (("2" (EXPAND "member") (("2" (PROPAX) NIL)))))))))))))))))))) NIL) ((T FORMAL-TYPE-DECL NIL |EquivalenceClosure| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|EquivClos| CONST-DECL "equivalence[T]" |EquivalenceClosure| NIL) (|equivalence| TYPE-EQ-DECL NIL |relations| NIL) (|equivalence?| CONST-DECL "bool" |relations| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |sets_lemmas| NIL) (|EquivClosLeast| FORMULA-DECL NIL |EquivalenceClosure| NIL) (|EquivClosSuperset| FORMULA-DECL NIL |EquivalenceClosure| NIL)) NIL)) (|EquivalenceCharacterization| 0 (|EquivalenceCharacterization-1| |nil| 3243015830 ("" (SKOSIMP*) (("" (PROP) (("1" (APPLY-EXTENSIONALITY :HIDE? T) (("1" (IFF) (("1" (PROP) (("1" (LEMMA "EquivClosSuperset") (("1" (INST?) (("1" (EXPAND "subset?") (("1" (EXPAND "member") (("1" (INST?) (("1" (ASSERT) NIL))))))))))) ("2" (LEMMA "EquivClosLeast") (("2" (INST -1 "S!1" "S!1") (("2" (ASSERT) (("2" (PROP) (("1" (EXPAND "subset?") (("1" (EXPAND "member") (("1" (INST?) (("1" (ASSERT) NIL))))))) ("2" (EXPAND "subset?") (("2" (EXPAND "member") (("2" (SKOSIMP*) NIL))))))))))))))))))) ("2" (ASSERT) NIL)))) NIL) ((|EquivClosLeast| FORMULA-DECL NIL |EquivalenceClosure| NIL) (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |sets_lemmas| NIL) (|EquivClosSuperset| FORMULA-DECL NIL |EquivalenceClosure| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|equivalence?| CONST-DECL "bool" |relations| NIL) (|equivalence| TYPE-EQ-DECL NIL |relations| NIL) (|EquivClos| CONST-DECL "equivalence[T]" |EquivalenceClosure| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |EquivalenceClosure| NIL)) NIL)))(|QuotientDefinition| (|EquivClassNonEmpty| 0 (|EquivClassNonEmpty-1| |nil| 3243015830 ("" (SKOSIMP*) (("" (EXPAND "nonempty?") (("" (EXPAND "empty?") (("" (EXPAND "member") (("" (EXPAND "EquivClass") (("" (INST -1 "x!1") (("" (TYPEPRED "S!1") (("" (EXPAND "equivalence?") (("" (EXPAND "reflexive?") (("" (FLATTEN) (("" (INST -1 "x!1") NIL)))))))))))))))))))) NIL) ((|nonempty?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (T FORMAL-TYPE-DECL NIL |QuotientDefinition| NIL) (|reflexive?| CONST-DECL "bool" |relations| NIL) (|equivalence| TYPE-EQ-DECL NIL |relations| NIL) (|equivalence?| CONST-DECL "bool" |relations| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|EquivClass| CONST-DECL "set[T]" |QuotientDefinition| NIL) (|empty?| CONST-DECL "bool" |sets| NIL)) NIL)) (|EquivClassEq| 0 (|EquivClassEq-1| |nil| 3243015830 ("" (SKOSIMP*) (("" (TYPEPRED "S!1") (("" (EXPAND "EquivClass") (("" (PROP) (("1" (CASE "S!1(x!1, y!1) = (LAMBDA (z: T): S!1(x!1, z))(y!1)") (("1" (REPLACE -2) (("1" (ASSERT) (("1" (EXPAND "equivalence?") (("1" (FLATTEN) (("1" (EXPAND "reflexive?") (("1" (INST -3 "y!1") (("1" (ASSERT) NIL))))))))))))) ("2" (ASSERT) NIL))) ("2" (APPLY-EXTENSIONALITY :HIDE? T) (("2" (IFF) (("2" (PROP) (("1" (EXPAND "equivalence?") (("1" (FLATTEN) (("1" (EXPAND "symmetric?") (("1" (EXPAND "transitive?") (("1" (INST -4 "x!1" "y!1") (("1" (ASSERT) (("1" (INST -5 "y!1" "x!1" "x!2") (("1" (ASSERT) NIL))))))))))))))) ("2" (EXPAND "equivalence?") (("2" (FLATTEN) (("2" (EXPAND "transitive?") (("2" (INST -5 "x!1" "y!1" "x!2") (("2" (ASSERT) NIL)))))))))))))))))))))) NIL) ((|equivalence| TYPE-EQ-DECL NIL |relations| NIL) (|equivalence?| CONST-DECL "bool" |relations| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (T FORMAL-TYPE-DECL NIL |QuotientDefinition| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|reflexive?| CONST-DECL "bool" |relations| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|symmetric?| CONST-DECL "bool" |relations| NIL) (|transitive?| CONST-DECL "bool" |relations| NIL) (|EquivClass| CONST-DECL "set[T]" |QuotientDefinition| NIL)) NIL)) (|repEC_TCC1| 0 (|repEC_TCC1-1| |nil| 3243663393 ("" (SKOSIMP) (("" (GRIND) (("" (TYPEPRED "S!1") (("" (EXPAND "equivalence?") (("" (FLATTEN) (("" (HIDE -2 -3) (("" (EXPAND "reflexive?") (("" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|EquivClass| CONST-DECL "set[T]" |QuotientDefinition| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (T FORMAL-TYPE-DECL NIL |QuotientDefinition| NIL) (|reflexive?| CONST-DECL "bool" |relations| NIL) (|equivalence| TYPE-EQ-DECL NIL |relations| NIL) (|equivalence?| CONST-DECL "bool" |relations| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) SHOSTAK (|repEC| SUBTYPE "QuotientDefinition.EquivClass(QuotientDefinition.S)(QuotientDefinition.x)" "(sets[QuotientDefinition.T].nonempty?)"))) (|EquivClassChoose| 0 (|EquivClassChoose-1| |nil| 3243015830 ("" (SKOSIMP*) (("" (USE "EquivClassNonEmpty") (("" (EXPAND "repEC") (("" (TYPEPRED "choose(EquivClass(S!1)(x!1))") (("1" (EXPAND "EquivClass") (("1" (PROPAX) NIL NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|EquivClassNonEmpty| FORMULA-DECL NIL |QuotientDefinition| NIL) (|equivalence| TYPE-EQ-DECL NIL |relations| NIL) (|equivalence?| CONST-DECL "bool" |relations| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |QuotientDefinition| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|EquivClass| CONST-DECL "set[T]" |QuotientDefinition| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|choose| CONST-DECL "(p)" |sets| NIL) (|repEC| CONST-DECL "T" |QuotientDefinition| NIL)) NIL)) (|ChooseEquivClassChoose| 0 (|ChooseEquivClassChoose-1| |nil| 3243015830 ("" (SKOSIMP*) (("" (USE "EquivClassNonEmpty") (("" (USE "EquivClassEq") (("" (USE "EquivClassChoose") (("" (ASSERT) (("" (TYPEPRED "S!1") (("" (EXPAND "equivalence?") (("" (EXPAND "symmetric?") (("" (FLATTEN) (("" (INST -2 "x!1" "repEC(S!1)(x!1)") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|EquivClassNonEmpty| FORMULA-DECL NIL |QuotientDefinition| NIL) (|repEC| CONST-DECL "T" |QuotientDefinition| NIL) (|equivalence| TYPE-EQ-DECL NIL |relations| NIL) (|equivalence?| CONST-DECL "bool" |relations| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |QuotientDefinition| NIL) (|EquivClassChoose| FORMULA-DECL NIL |QuotientDefinition| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|symmetric?| CONST-DECL "bool" |relations| NIL) (|EquivClassEq| FORMULA-DECL NIL |QuotientDefinition| NIL)) NIL)) (|rep_TCC1| 0 (|rep_TCC1-1| |nil| 3243663393 ("" (SKOSIMP) (("" (GRIND) (("" (TYPEPRED "P!1") (("" (SKOSIMP) (("" (EXPAND "EquivClass") (("" (DECOMPOSE-EQUALITY) (("" (INST -1 "x!1") (("" (INST -2 "x!1") (("" (ASSERT) (("" (REPLACE -1) (("" (HIDE -1) (("" (TYPEPRED "S!1") (("" (EXPAND "equivalence?") (("" (FLATTEN) (("" (HIDE -2 -3) (("" (EXPAND "reflexive?") (("" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|member| CONST-DECL "bool" |sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|reflexive?| CONST-DECL "bool" |relations| NIL) (|Quotient| TYPE-EQ-DECL NIL |QuotientDefinition| NIL) (|equivalence| TYPE-EQ-DECL NIL |relations| NIL) (|equivalence?| CONST-DECL "bool" |relations| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|EquivClass| CONST-DECL "set[T]" |QuotientDefinition| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (T FORMAL-TYPE-DECL NIL |QuotientDefinition| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) SHOSTAK (|rep| SUBTYPE "QuotientDefinition.P" "(sets[QuotientDefinition.T].nonempty?)"))) (|rep_is_repEC_TCC1| 0 (|rep_is_repEC_TCC1-1| |nil| 3243663393 ("" (SKOSIMP) (("" (INST 1 "x!1") NIL NIL)) NIL) ((T FORMAL-TYPE-DECL NIL |QuotientDefinition| NIL)) SHOSTAK (|rep_is_repEC| SUBTYPE "QuotientDefinition.EquivClass(QuotientDefinition.S)(QuotientDefinition.x)" "Quotient(QuotientDefinition.S)"))) (|rep_is_repEC| 0 (|rep_is_repEC-1| |nil| 3243664057 ("" (GRIND) NIL NIL) ((|rep| CONST-DECL "T" |QuotientDefinition| NIL) (|repEC| CONST-DECL "T" |QuotientDefinition| NIL)) SHOSTAK)) (|rep_lemma| 0 (|rep_lemma-1| |nil| 3245191776 ("" (GRIND :IF-MATCH NIL) (("" (USE "epsilon_ax[T]") (("1" (GRIND :IF-MATCH NIL) (("1" (INST 1 "x!1") (("1" (INST? -1) NIL NIL)) NIL)) NIL) ("2" (INST 1 "x!1") NIL NIL)) NIL)) NIL) ((|rep| CONST-DECL "T" |QuotientDefinition| NIL)) SHOSTAK)) (|quotient_map_surjective| 0 (|quotient_map_surjective-1| |nil| 3243015830 ("" (SKOSIMP*) (("" (EXPAND "surjective?") (("" (SKOSIMP*) (("" (TYPEPRED "y!1") (("" (SKOSIMP*) (("" (INST?) (("" (EXPAND "quotient_map") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|surjective?| CONST-DECL "bool" |functions| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |QuotientDefinition| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|EquivClass| CONST-DECL "set[T]" |QuotientDefinition| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|equivalence?| CONST-DECL "bool" |relations| NIL) (|equivalence| TYPE-EQ-DECL NIL |relations| NIL) (|Quotient| TYPE-EQ-DECL NIL |QuotientDefinition| NIL) (|quotient_map| CONST-DECL "Quotient(S)" |QuotientDefinition| NIL)) NIL)))(|KernelDefinition| (|EquivalenceKernel_TCC1| 0 (|EquivalenceKernel_TCC1-1| |nil| 3243663393 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (X FORMAL-TYPE-DECL NIL |KernelDefinition| NIL) (|X1_pred| CONST-DECL "[X -> boolean]" |KernelDefinition| NIL) (X1 FORMAL-SUBTYPE-DECL NIL |KernelDefinition| NIL) (|reflexive?| CONST-DECL "bool" |relations| NIL) (|symmetric?| CONST-DECL "bool" |relations| NIL) (|transitive?| CONST-DECL "bool" |relations| NIL) (|equivalence?| CONST-DECL "bool" |relations| NIL)) SHOSTAK (|EquivalenceKernel| SUBTYPE "{(x1, x2) | KernelDefinition.f(KernelDefinition.x1) = KernelDefinition.f(KernelDefinition.x2)}" "equivalence[X1]"))) (|PreservesEqClosure| 0 (|PreservesEqClosure-1| |nil| 3243664201 ("" (SKOSIMP*) (("" (EXPAND "PreservesEq") (("" (APPLY-EXTENSIONALITY :HIDE? T) (("" (IFF) (("" (PROP) (("1" (LEMMA "EquivClosLeast[X1]") (("1" (INST?) (("1" (ASSERT) (("1" (REWRITE "restrict_extend[[X, X], [X1, X1], bool, FALSE]") NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "EquivClosSuperset[X1]") (("2" (REWRITE "restrict_extend[[X, X], [X1, X1], bool, FALSE]") (("2" (INST?) (("2" (LEMMA "subset_transitive[[X1, X1]]") (("2" (INST -1 "restrict[[X, X], [X1, X1], bool](R!1)" "EquivClos(restrict[[X, X], [X1, X1], boolean](R!1))" "EquivalenceKernel(x!1)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|PreservesEq| CONST-DECL "bool" |KernelDefinition| NIL) (|EquivClosSuperset| FORMULA-DECL NIL |EquivalenceClosure| NIL) (|subset_transitive| FORMULA-DECL NIL |sets_lemmas| NIL) (|EquivClosLeast| FORMULA-DECL NIL |EquivalenceClosure| NIL) (|restrict_extend| FORMULA-DECL NIL |extend| NIL) (Y FORMAL-TYPE-DECL NIL |KernelDefinition| NIL) (X1 FORMAL-SUBTYPE-DECL NIL |KernelDefinition| NIL) (|X1_pred| CONST-DECL "[X -> boolean]" |KernelDefinition| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (X FORMAL-TYPE-DECL NIL |KernelDefinition| NIL) (|EquivClos| CONST-DECL "equivalence[T]" |EquivalenceClosure| NIL) (|extend| CONST-DECL "R" |extend| NIL) (FALSE CONST-DECL "bool" |booleans| NIL) (|EquivalenceKernel| CONST-DECL "equivalence[X1]" |KernelDefinition| NIL) (|equivalence| TYPE-EQ-DECL NIL |relations| NIL) (|equivalence?| CONST-DECL "bool" |relations| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|symmetric_extend| APPLICATION-JUDGEMENT "(symmetric?[T])" |extend_order_props| NIL) (|transitive_extend| APPLICATION-JUDGEMENT "(transitive?[T])" |extend_order_props| NIL) (|symmetric_restrict| APPLICATION-JUDGEMENT "(symmetric?[S])" |restrict_order_props| NIL) (|transitive_restrict| APPLICATION-JUDGEMENT "(transitive?[S])" |restrict_order_props| NIL) (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |sets_lemmas| NIL)) SHOSTAK)) (|PreservesEq_is_preserving| 0 (|PreservesEq_is_preserving-1| |nil| 3244148904 ("" (GRIND) (("" (APPLY-EXTENSIONALITY :HIDE? T) NIL NIL)) NIL) ((Y FORMAL-TYPE-DECL NIL |KernelDefinition| NIL) (X1 FORMAL-SUBTYPE-DECL NIL |KernelDefinition| NIL) (|X1_pred| CONST-DECL "[X -> boolean]" |KernelDefinition| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (X FORMAL-TYPE-DECL NIL |KernelDefinition| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|EquivalenceKernel| CONST-DECL "equivalence[X1]" |KernelDefinition| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) NIL (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |sets_lemmas| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) NIL (|PreservesEq| CONST-DECL "bool" |KernelDefinition| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)) SHOSTAK)))(|QuotientKernelProperties| (|Kernel_quotient_map| 0 (|Kernel_quotient_map-1| |nil| 3243015830 ("" (SKOSIMP*) (("" (EXPAND "quotient_map") (("" (APPLY-EXTENSIONALITY :HIDE? T) (("1" (EXPAND "EquivalenceKernel") (("1" (USE "EquivClassEq[X1]") (("1" (ASSERT) (("1" (IFF) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|quotient_map| CONST-DECL "Quotient(S)" |QuotientDefinition| NIL) (|EquivClassEq| FORMULA-DECL NIL |QuotientDefinition| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (X1 FORMAL-SUBTYPE-DECL NIL |QuotientKernelProperties| NIL) (|X1_pred| CONST-DECL "[X -> boolean]" |QuotientKernelProperties| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (X FORMAL-TYPE-DECL NIL |QuotientKernelProperties| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|EquivClass| CONST-DECL "set[T]" |QuotientDefinition| NIL) (|equivalence?| CONST-DECL "bool" |relations| NIL) (|equivalence| TYPE-EQ-DECL NIL |relations| NIL) NIL (|EquivalenceKernel| CONST-DECL "equivalence[X1]" |KernelDefinition| NIL) (|Quotient| TYPE-EQ-DECL NIL |QuotientDefinition| NIL)) NIL)) (|PreservesEq_quotient_map| 0 (|PreservesEq_quotient_map-1| |nil| 3243665917 ("" (SKOSIMP*) (("" (EXPAND "PreservesEq") (("" (EXPAND "subset?") (("" (SKOSIMP*) (("" (EXPAND "member") (("" (EXPAND "EquivalenceKernel") (("" (EXPAND "quotient_map") (("" (USE "EquivClassEq[X1]") (("" (ASSERT) (("" (REWRITE "restrict_extend[[X, X], [X1, X1], bool, FALSE]") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|PreservesEq| CONST-DECL "bool" |KernelDefinition| NIL) (|EquivalenceKernel| CONST-DECL "equivalence[X1]" |KernelDefinition| NIL) (|equivalence| TYPE-EQ-DECL NIL |relations| NIL) (|equivalence?| CONST-DECL "bool" |relations| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|EquivClassEq| FORMULA-DECL NIL |QuotientDefinition| NIL) (X FORMAL-TYPE-DECL NIL |QuotientKernelProperties| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|X1_pred| CONST-DECL "[X -> boolean]" |QuotientKernelProperties| NIL) (X1 FORMAL-SUBTYPE-DECL NIL |QuotientKernelProperties| NIL) (FALSE CONST-DECL "bool" |booleans| NIL) (|restrict_extend| FORMULA-DECL NIL |extend| NIL) (|symmetric_extend| APPLICATION-JUDGEMENT "(symmetric?[T])" |extend_order_props| NIL) (|transitive_extend| APPLICATION-JUDGEMENT "(transitive?[T])" |extend_order_props| NIL) (|symmetric_restrict| APPLICATION-JUDGEMENT "(symmetric?[S])" |restrict_order_props| NIL) (|transitive_restrict| APPLICATION-JUDGEMENT "(transitive?[S])" |restrict_order_props| NIL) (|quotient_map| CONST-DECL "Quotient(S)" |QuotientDefinition| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|subset?| CONST-DECL "bool" |sets| NIL)) SHOSTAK)) (|quotient_map_is_Quotient_EqivalenceRespecting| 0 (|quotient_map_is_Quotient_EqivalenceRespecting-3| |nil| 3244167432 ("" (SKOSIMP*) (("" (EXPAND "PreservesEq") (("" (REWRITE "restrict_extend[[X, X], [X1, X1], bool, FALSE]") (("" (EXPAND "subset?") (("" (SKOSIMP*) (("" (EXPAND "member") (("" (EXPAND "EquivalenceKernel") (("" (EXPAND "quotient_map") (("" (USE "EquivClassEq[X1]") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|PreservesEq| CONST-DECL "bool" |KernelDefinition| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|quotient_map| CONST-DECL "Quotient(S)" |QuotientDefinition| NIL) (|EquivClassEq| FORMULA-DECL NIL |QuotientDefinition| NIL) (|EquivalenceKernel| CONST-DECL "equivalence[X1]" |KernelDefinition| NIL) (FALSE CONST-DECL "bool" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (X1 FORMAL-SUBTYPE-DECL NIL |QuotientKernelProperties| NIL) (|X1_pred| CONST-DECL "[X -> boolean]" |QuotientKernelProperties| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (X FORMAL-TYPE-DECL NIL |QuotientKernelProperties| NIL) (|equivalence| TYPE-EQ-DECL NIL |relations| NIL) (|equivalence?| CONST-DECL "bool" |relations| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|restrict_extend| FORMULA-DECL NIL |extend| NIL)) NIL (|quotient_map_is_Quotient_EqivalenceRespecting| SUBTYPE "QuotientDefinition[X1].quotient_map(QuotientKernelProperties.S)" "(KernelDefinition[QuotientKernelProperties.X, X1, Quotient[X1](QuotientKernelProperties.S)].PreservesEq(extend[[QuotientKernelProperties.X, QuotientKernelProperties.X], [X1, X1], bool, booleans.FALSE].extend(QuotientKernelProperties.S)))")) (|quotient_map_is_Quotient_EqivalenceRespecting-2| |nil| 3244167419 ("" (SKOSIMP*) (("" (EXPAND "PreservesEq") (("" (EXPAND "subset?") (("" (SKOSIMP*) (("" (EXPAND "member") (("" (EXPAND "EquivalenceKernel") (("" (EXPAND "quotient_map") (("" (USE "EquivClassEq") (("" (ASSERT) NIL)))))))))))))))) NIL) NIL NIL (|quotient_map_is_Quotient_EqivalenceRespecting| SUBTYPE "QuotientDefinition[X1].quotient_map(QuotientKernelProperties.S)" "(KernelDefinition[QuotientKernelProperties.X, X1, Quotient[X1](QuotientKernelProperties.S)].PreservesEq(extend[[QuotientKernelProperties.X, QuotientKernelProperties.X], [X1, X1], bool, booleans.FALSE].extend(QuotientKernelProperties.S)))")) (|quotient_map_is_Quotient_EqivalenceRespecting-1| |nil| 3243663394 ("" (SKOSIMP*) (("" (EXPAND "PreservesEq") (("" (EXPAND "subset?") (("" (SKOSIMP*) (("" (EXPAND "member") (("" (EXPAND "EquivalenceKernel") (("" (EXPAND "quotient_map") (("" (USE "EquivClassEq") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|quotient_map_is_Quotient_EqivalenceRespecting| SUBTYPE "QuotientDefinition[X1].quotient_map(QuotientKernelProperties.S)" "(KernelDefinition[QuotientKernelProperties.X, X1, Quotient[X1](QuotientKernelProperties.S)].PreservesEq(extend[[QuotientKernelProperties.X, QuotientKernelProperties.X], [X1, X1], bool, booleans.FALSE].extend(QuotientKernelProperties.S)))"))) (|Kernel_ECquotient_map_TCC1| 0 (|Kernel_ECquotient_map_TCC1-1| |nil| 3243663394 ("" (SKOSIMP) (("" (EXPAND "quotient_map") (("" (LEMMA "EquivalenceCharacterization[X1]") (("" (INST -1 "S!1") (("" (ASSERT) (("" (REPLACE -1 :DIR RL) (("" (INST 1 "x1!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|quotient_map| CONST-DECL "Quotient(S)" |QuotientDefinition| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|equivalence?| CONST-DECL "bool" |relations| NIL) (|equivalence| TYPE-EQ-DECL NIL |relations| NIL) (X1 FORMAL-SUBTYPE-DECL NIL |QuotientKernelProperties| NIL) (|X1_pred| CONST-DECL "[X -> boolean]" |QuotientKernelProperties| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (X FORMAL-TYPE-DECL NIL |QuotientKernelProperties| NIL) (|EquivalenceCharacterization| FORMULA-DECL NIL |EquivalenceClosure| NIL)) SHOSTAK (|Kernel_ECquotient_map| SUBTYPE "QuotientDefinition[X1].quotient_map(QuotientKernelProperties.S)" "[X1 -> ECQuotient[X1](QuotientKernelProperties.S)]"))) (|Kernel_ECquotient_map| 0 (|Kernel_ECquotient_map-1| |nil| 3243666194 ("" (SKOSIMP) (("" (EXPAND "quotient_map") (("" (APPLY-EXTENSIONALITY :HIDE? T) (("1" (EXPAND "EquivalenceKernel") (("1" (USE "EquivClassEq[X1]") (("1" (ASSERT) (("1" (IFF) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST?) (("2" (LEMMA "EquivalenceCharacterization[X1]") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|quotient_map| CONST-DECL "Quotient(S)" |QuotientDefinition| NIL) (|EquivalenceCharacterization| FORMULA-DECL NIL |EquivalenceClosure| NIL) (|EquivClassEq| FORMULA-DECL NIL |QuotientDefinition| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (X1 FORMAL-SUBTYPE-DECL NIL |QuotientKernelProperties| NIL) (|X1_pred| CONST-DECL "[X -> boolean]" |QuotientKernelProperties| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (X FORMAL-TYPE-DECL NIL |QuotientKernelProperties| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|EquivClass| CONST-DECL "set[T]" |QuotientDefinition| NIL) (|equivalence?| CONST-DECL "bool" |relations| NIL) (|equivalence| TYPE-EQ-DECL NIL |relations| NIL) NIL (|EquivClos| CONST-DECL "equivalence[T]" |EquivalenceClosure| NIL) (|EquivalenceKernel| CONST-DECL "equivalence[X1]" |KernelDefinition| NIL) (|ECQuotient| TYPE-EQ-DECL NIL |QuotientDefinition| NIL)) SHOSTAK)) (|PreservesEq_ECquotient_map| 0 (|PreservesEq_ECquotient_map-1| |nil| 3243666401 ("" (SKOSIMP*) (("" (EXPAND "PreservesEq") (("" (EXPAND "subset?") (("" (SKOSIMP*) (("" (EXPAND "member") (("" (EXPAND "EquivalenceKernel") (("" (EXPAND "quotient_map") (("" (USE "EquivClassEq[X1]") (("" (ASSERT) (("" (REWRITE "restrict_extend[[X, X], [X1, X1], bool, FALSE]") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|PreservesEq| CONST-DECL "bool" |KernelDefinition| NIL) (|EquivalenceKernel| CONST-DECL "equivalence[X1]" |KernelDefinition| NIL) (|equivalence| TYPE-EQ-DECL NIL |relations| NIL) (|equivalence?| CONST-DECL "bool" |relations| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|EquivClassEq| FORMULA-DECL NIL |QuotientDefinition| NIL) (X FORMAL-TYPE-DECL NIL |QuotientKernelProperties| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|X1_pred| CONST-DECL "[X -> boolean]" |QuotientKernelProperties| NIL) (X1 FORMAL-SUBTYPE-DECL NIL |QuotientKernelProperties| NIL) (FALSE CONST-DECL "bool" |booleans| NIL) (|restrict_extend| FORMULA-DECL NIL |extend| NIL) (|symmetric_extend| APPLICATION-JUDGEMENT "(symmetric?[T])" |extend_order_props| NIL) (|transitive_extend| APPLICATION-JUDGEMENT "(transitive?[T])" |extend_order_props| NIL) (|symmetric_restrict| APPLICATION-JUDGEMENT "(symmetric?[S])" |restrict_order_props| NIL) (|transitive_restrict| APPLICATION-JUDGEMENT "(transitive?[S])" |restrict_order_props| NIL) (|quotient_map| CONST-DECL "Quotient(S)" |QuotientDefinition| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|subset?| CONST-DECL "bool" |sets| NIL)) SHOSTAK)) (|quotient_map_is_ECQuotient_EqivalenceRespecting| 0 (|quotient_map_is_ECQuotient_EqivalenceRespecting-1| |nil| 3243663394 ("" (SKOSIMP) (("" (PROP) (("1" (SKOSIMP) (("1" (LEMMA "Kernel_ECquotient_map_TCC1") (("1" (INST -1 "S!1" "x1!1") NIL NIL)) NIL)) NIL) ("2" (EXPAND "PreservesEq") (("2" (EXPAND "subset?") (("2" (SKOSIMP*) (("2" (EXPAND "member") (("2" (REWRITE "restrict_extend[[X, X], [X1, X1], bool, FALSE]") (("2" (EXPAND "EquivalenceKernel") (("2" (EXPAND "quotient_map") (("2" (USE "EquivClassEq[X1]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|Kernel_ECquotient_map_TCC1| SUBTYPE-TCC NIL |QuotientKernelProperties| NIL) (|equivalence| TYPE-EQ-DECL NIL |relations| NIL) (|equivalence?| CONST-DECL "bool" |relations| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (X1 FORMAL-SUBTYPE-DECL NIL |QuotientKernelProperties| NIL) (|X1_pred| CONST-DECL "[X -> boolean]" |QuotientKernelProperties| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (X FORMAL-TYPE-DECL NIL |QuotientKernelProperties| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|EquivalenceKernel| CONST-DECL "equivalence[X1]" |KernelDefinition| NIL) (|EquivClassEq| FORMULA-DECL NIL |QuotientDefinition| NIL) (|quotient_map| CONST-DECL "Quotient(S)" |QuotientDefinition| NIL) (FALSE CONST-DECL "bool" |booleans| NIL) (|restrict_extend| FORMULA-DECL NIL |extend| NIL) (|PreservesEq| CONST-DECL "bool" |KernelDefinition| NIL)) SHOSTAK (|quotient_map_is_ECQuotient_EqivalenceRespecting| SUBTYPE "QuotientDefinition[X1].quotient_map(QuotientKernelProperties.S)" "(KernelDefinition[QuotientKernelProperties.X, X1, ECQuotient[X1](QuotientKernelProperties.S)].PreservesEq(extend[[QuotientKernelProperties.X, QuotientKernelProperties.X], [X1, X1], bool, booleans.FALSE].extend(QuotientKernelProperties.S)))"))))(|QuotientSubDefinition| (|quotient_sub_map_TCC1| 0 (|quotient_sub_map_TCC1-1| |nil| 3245525335 ("" (GRIND :EXCLUDE "rep" :IF-MATCH NIL) (("" (INST 1 "x!1") NIL NIL)) NIL) ((|reflexive?| CONST-DECL "bool" |relations| NIL) (|symmetric?| CONST-DECL "bool" |relations| NIL) (|transitive?| CONST-DECL "bool" |relations| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|EquivalenceKernel| CONST-DECL "equivalence[X1]" |KernelDefinition| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|equivalence_restrict| APPLICATION-JUDGEMENT "(equivalence?[S])" |restrict_order_props| NIL) (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |sets_lemmas| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (X FORMAL-TYPE-DECL NIL |QuotientSubDefinition| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|equivalence?| CONST-DECL "bool" |relations| NIL) (|equivalence| TYPE-EQ-DECL NIL |relations| NIL) (|PreservesEq| CONST-DECL "bool" |KernelDefinition| NIL) (|X1_pred| CONST-DECL "[X -> boolean]" |QuotientSubDefinition| NIL) (X1 FORMAL-SUBTYPE-DECL NIL |QuotientSubDefinition| NIL)) SHOSTAK (|quotient_sub_map| SUBTYPE "QuotientDefinition[QuotientSubDefinition.X].EquivClass(QuotientSubDefinition.S)(QuotientSubDefinition.x)" "QuotientSub(QuotientSubDefinition.S)"))))(|QuotientExtensionProperties| (|lift_TCC1| 0 (|lift_TCC1-1| |nil| 3245193421 ("" (GRIND :EXCLUDE "rep" :IF-MATCH NIL) (("" (INST 1 "x!1") NIL NIL)) NIL) ((|reflexive?| CONST-DECL "bool" |relations| NIL) (|symmetric?| CONST-DECL "bool" |relations| NIL) (|transitive?| CONST-DECL "bool" |relations| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|EquivalenceKernel| CONST-DECL "equivalence[X1]" |KernelDefinition| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|equivalence_restrict| APPLICATION-JUDGEMENT "(equivalence?[S])" |restrict_order_props| NIL) (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |sets_lemmas| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (X FORMAL-TYPE-DECL NIL |QuotientExtensionProperties| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|equivalence?| CONST-DECL "bool" |relations| NIL) (|equivalence| TYPE-EQ-DECL NIL |relations| NIL) (|PreservesEq| CONST-DECL "bool" |KernelDefinition| NIL) (|X1_pred| CONST-DECL "[X -> boolean]" |QuotientExtensionProperties| NIL) (X1 FORMAL-SUBTYPE-DECL NIL |QuotientExtensionProperties| NIL) (Y FORMAL-TYPE-DECL NIL |QuotientExtensionProperties| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|EquivClass| CONST-DECL "set[T]" |QuotientDefinition| NIL) (|QuotientSub| TYPE-EQ-DECL NIL |QuotientSubDefinition| NIL)) SHOSTAK (|lift| SUBTYPE "QuotientExtensionProperties.P" "Quotient[QuotientExtensionProperties.X](QuotientExtensionProperties.S)"))) (|lift_TCC2| 0 (|lift_TCC2-3| "" 3658949058 ("" (GRIND :EXCLUDE "rep" :IF-MATCH NIL) (("" (USE "rep_lemma[X]" :IF-MATCH ALL) (("" (EXPAND "EquivClass" -1 1) (("" (INST -6 "(x!1, rep(S!1)(EquivClass(S!1)(x!1)))") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|rep_lemma| FORMULA-DECL NIL |QuotientDefinition| NIL) (|Quotient| TYPE-EQ-DECL NIL |QuotientDefinition| NIL) (|rep| CONST-DECL "T" |QuotientDefinition| NIL) (|reflexive?| CONST-DECL "bool" |relations| NIL) (|symmetric?| CONST-DECL "bool" |relations| NIL) (|transitive?| CONST-DECL "bool" |relations| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|EquivalenceKernel| CONST-DECL "equivalence[X1]" |KernelDefinition| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|equivalence_restrict| APPLICATION-JUDGEMENT "(equivalence?[S])" |restrict_order_props| NIL) (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |sets_lemmas| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (X FORMAL-TYPE-DECL NIL |QuotientExtensionProperties| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|equivalence?| CONST-DECL "bool" |relations| NIL) (|equivalence| TYPE-EQ-DECL NIL |relations| NIL) (|PreservesEq| CONST-DECL "bool" |KernelDefinition| NIL) (|X1_pred| CONST-DECL "[X -> boolean]" |QuotientExtensionProperties| NIL) (X1 FORMAL-SUBTYPE-DECL NIL |QuotientExtensionProperties| NIL) (Y FORMAL-TYPE-DECL NIL |QuotientExtensionProperties| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|EquivClass| CONST-DECL "set[T]" |QuotientDefinition| NIL) (|QuotientSub| TYPE-EQ-DECL NIL |QuotientSubDefinition| NIL)) SHOSTAK (|lift| SUBTYPE "QuotientDefinition[QuotientExtensionProperties.X].rep(QuotientExtensionProperties.S)(QuotientExtensionProperties.P)" "X1")) (|lift_TCC2-2| "" 3590861164 ("" (GRIND :EXCLUDE "rep" :IF-MATCH NIL) (("" (USE "rep_lemma[X]" :IF-MATCH ALL) (("" (EXPAND "EquivClass" -1 1) (("" (INST -3 "(x!1, rep(S!1)(EquivClass(S!1)(x!1)))") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|lift| SUBTYPE "QuotientDefinition[QuotientExtensionProperties.X].rep(QuotientExtensionProperties.S)(QuotientExtensionProperties.P)" "X1")) (|lift_TCC2-1| |nil| 3245525012 ("" (GRIND :EXCLUDE "rep" :IF-MATCH NIL) (("" (USE "rep_lemma[X]" :IF-MATCH ALL) (("" (EXPAND "EquivClass" -1 1) (("" (INST -6 "(x!1, rep(S!1)(EquivClass(S!1)(x!1)))") (("1" (ASSERT) NIL NIL) ("2" (INST 1 "x!1") NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|lift| SUBTYPE "QuotientDefinition[QuotientExtensionProperties.X].rep(QuotientExtensionProperties.S)(QuotientExtensionProperties.P)" "X1"))) (|lift_commutation| 0 (|lift_commutation-3| "" 3658949262 ("" (GRIND :EXCLUDE "rep" :IF-MATCH NIL) (("" (APPLY-EXTENSIONALITY :HIDE? T) (("" (USE "rep_lemma[X]") (("" (EXPAND "EquivClass" -1) (("" (INST -6 "(x!1, rep(S!1)({z: X | S!1(x!1, z)}))") (("1" (ASSERT) (("1" (EXPAND "EquivClass" 1) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (INST -5 "(x!1, rep(S!1)(EquivClass(S!1)(x!1)))") (("2" (ASSERT) (("2" (EXPAND "EquivClass") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (INST 1 "x!1") (("3" (EXPAND "EquivClass" 1) (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|quotient_sub_map| CONST-DECL "QuotientSub(S)" |QuotientSubDefinition| NIL) (|lift| CONST-DECL "Y" |QuotientExtensionProperties| NIL) (O CONST-DECL "T3" |function_props| NIL) (|QuotientSub| TYPE-EQ-DECL NIL |QuotientSubDefinition| NIL) (|EquivClass| CONST-DECL "set[T]" |QuotientDefinition| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|Quotient| TYPE-EQ-DECL NIL |QuotientDefinition| NIL) (|rep| CONST-DECL "T" |QuotientDefinition| NIL) NIL NIL (|rep_lemma| FORMULA-DECL NIL |QuotientDefinition| NIL) (|reflexive?| CONST-DECL "bool" |relations| NIL) (|symmetric?| CONST-DECL "bool" |relations| NIL) (|transitive?| CONST-DECL "bool" |relations| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|EquivalenceKernel| CONST-DECL "equivalence[X1]" |KernelDefinition| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|equivalence_restrict| APPLICATION-JUDGEMENT "(equivalence?[S])" |restrict_order_props| NIL) (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |sets_lemmas| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (X FORMAL-TYPE-DECL NIL |QuotientExtensionProperties| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|equivalence?| CONST-DECL "bool" |relations| NIL) (|equivalence| TYPE-EQ-DECL NIL |relations| NIL) (|PreservesEq| CONST-DECL "bool" |KernelDefinition| NIL) (|X1_pred| CONST-DECL "[X -> boolean]" |QuotientExtensionProperties| NIL) (X1 FORMAL-SUBTYPE-DECL NIL |QuotientExtensionProperties| NIL) (Y FORMAL-TYPE-DECL NIL |QuotientExtensionProperties| NIL)) SHOSTAK) (|lift_commutation-2| "" 3590861329 ("" (GRIND :EXCLUDE "rep" :IF-MATCH NIL) (("" (APPLY-EXTENSIONALITY :HIDE? T) (("" (USE "rep_lemma[X]") (("" (EXPAND "EquivClass" -1) (("" (INST -6 "(x!1, rep(S!1)({z: X | S!1(x!1, z)}))") (("1" (ASSERT) (("1" (EXPAND "EquivClass" 1) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (INST -2 "(x!1, rep(S!1)({z: X | S!1(x!1, z)}))") (("1" (ASSERT) NIL NIL) ("2" (INST 1 "x!1") (("2" (EXPAND "EquivClass" 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (INST 1 "x!1") (("3" (EXPAND "EquivClass" 1) (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|lift_commutation-1| |nil| 3243666489 ("" (GRIND :EXCLUDE "rep" :IF-MATCH NIL) (("" (APPLY-EXTENSIONALITY :HIDE? T) (("" (USE "rep_lemma[X]") (("" (EXPAND "EquivClass" -1) (("" (INST -6 "(x!1, rep(S!1)({z: X | S!1(x!1, z)}))") (("1" (ASSERT) (("1" (EXPAND "EquivClass" 1) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (INST -5 "(x!1, rep(S!1)({z: X | S!1(x!1, z)}))") (("1" (ASSERT) NIL NIL) ("2" (INST 1 "x!1") (("2" (EXPAND "EquivClass" 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (INST 1 "x!1") (("3" (EXPAND "EquivClass" 1) (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|lift_unicity| 0 (|lift_unicity-1| |nil| 3243666688 ("" (SKOSIMP*) (("" (APPLY-EXTENSIONALITY :HIDE? T) (("" (TYPEPRED "x!1") (("" (SKOSIMP*) (("" (CASE "h!1(x!1) = g!1(x!2)") (("1" (REPLACE -1) (("1" (HIDE -1 -3) (("1" (EXPAND "lift") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (USE "rep_lemma[X]") (("1" (GRIND :EXCLUDE "rep" :IF-MATCH NIL) (("1" (TYPEPRED "g!1") (("1" (EXPAND "PreservesEq") (("1" (EXPAND "subset?") (("1" (EXPAND "member") (("1" (EXPAND "EquivalenceKernel") (("1" (EXPAND "restrict") (("1" (INST -1 "(x!2, rep(S!1)(EquivClass[X](S!1)(x!2)))") (("1" (ASSERT) NIL NIL) ("2" (TYPEPRED "S!1") (("2" (EXPAND "PreservesEq") (("2" (EXPAND "subset?") (("2" (EXPAND "member") (("2" (EXPAND "EquivalenceKernel") (("2" (EXPAND "restrict") (("2" (INST -2 "(x!2, rep(S!1)(EquivClass[X](S!1)(x!2)))") (("1" (ASSERT) NIL NIL) ("2" (INST 1 "x!2") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST 1 "x!2") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (REPLACE -2 1 RL) (("2" (HIDE -2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((X FORMAL-TYPE-DECL NIL |QuotientExtensionProperties| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|X1_pred| CONST-DECL "[X -> boolean]" |QuotientExtensionProperties| NIL) (X1 FORMAL-SUBTYPE-DECL NIL |QuotientExtensionProperties| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|EquivClass| CONST-DECL "set[T]" |QuotientDefinition| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|equivalence?| CONST-DECL "bool" |relations| NIL) (|equivalence| TYPE-EQ-DECL NIL |relations| NIL) (|PreservesEq| CONST-DECL "bool" |KernelDefinition| NIL) (|QuotientSub| TYPE-EQ-DECL NIL |QuotientSubDefinition| NIL) (Y FORMAL-TYPE-DECL NIL |QuotientExtensionProperties| NIL) (|lift| CONST-DECL "Y" |QuotientExtensionProperties| NIL) (|quotient_sub_map| CONST-DECL "QuotientSub(S)" |QuotientSubDefinition| NIL) (O CONST-DECL "T3" |function_props| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (|rep| CONST-DECL "T" |QuotientDefinition| NIL) (|Quotient| TYPE-EQ-DECL NIL |QuotientDefinition| NIL) (|EquivalenceKernel| CONST-DECL "equivalence[X1]" |KernelDefinition| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|rep_lemma| FORMULA-DECL NIL |QuotientDefinition| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)) SHOSTAK)))(|QuotientDistributive| (|EqualityExtension_is_equivalence| 0 (|EqualityExtension_is_equivalence-1| |nil| 3245193423 ("" (GRIND :IF-MATCH NIL) (("1" (FORWARD-CHAIN -3) NIL NIL) ("2" (FORWARD-CHAIN -2) NIL NIL) ("3" (INST? -1) NIL NIL)) NIL) ((Y FORMAL-TYPE-DECL NIL |QuotientDistributive| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (X FORMAL-TYPE-DECL NIL |QuotientDistributive| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|equivalence| TYPE-EQ-DECL NIL |relations| NIL) (|equivalence?| CONST-DECL "bool" |relations| NIL) (|transitive?| CONST-DECL "bool" |relations| NIL) (|symmetric?| CONST-DECL "bool" |relations| NIL) (|reflexive?| CONST-DECL "bool" |relations| NIL) (|EqualityExtension| CONST-DECL "set[[[X, Y], [X, Y]]]" |QuotientDistributive| NIL)) SHOSTAK (|EqualityExtension_is_equivalence| SUBTYPE "QuotientDistributive.EqualityExtension(QuotientDistributive.S)" "equivalence[[X, Y]]"))) (|EqualityExtensionPreservesEq| 0 (|EqualityExtensionPreservesEq-1| |nil| 3245193857 ("" (GRIND :EXCLUDE "rep" :IF-MATCH NIL) (("" (USE "EquivClassEq[X]") (("" (ASSERT) NIL NIL)) NIL)) NIL) ((Y FORMAL-TYPE-DECL NIL |QuotientDistributive| NIL) (|EquivClassEq| FORMULA-DECL NIL |QuotientDefinition| NIL) (|reflexive?| CONST-DECL "bool" |relations| NIL) (|symmetric?| CONST-DECL "bool" |relations| NIL) (|transitive?| CONST-DECL "bool" |relations| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (X FORMAL-TYPE-DECL NIL |QuotientDistributive| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|equivalence?| CONST-DECL "bool" |relations| NIL) (|equivalence| TYPE-EQ-DECL NIL |relations| NIL) (|PreservesEq| CONST-DECL "bool" |KernelDefinition| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|EquivalenceKernel| CONST-DECL "equivalence[X1]" |KernelDefinition| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (|EqualityExtension| CONST-DECL "set[[[X, Y], [X, Y]]]" |QuotientDistributive| NIL) (|quotient_map| CONST-DECL "Quotient(S)" |QuotientDefinition| NIL)) SHOSTAK)) (|QuotientDistributive_TCC1| 0 (|QuotientDistributive_TCC1-1| |nil| 3245193423 ("" (GRIND :EXCLUDE "rep" :IF-MATCH NIL) (("" (APPLY-EXTENSIONALITY :HIDE? T) (("" (FORWARD-CHAIN -2) (("" (IFF) (("" (PROP) (("1" (FORWARD-CHAIN -4) NIL NIL) ("2" (HIDE -2) (("2" (FORWARD-CHAIN -3) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((Y FORMAL-TYPE-DECL NIL |QuotientDistributive| NIL) (|EquivClass| CONST-DECL "set[T]" |QuotientDefinition| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|reflexive?| CONST-DECL "bool" |relations| NIL) (|symmetric?| CONST-DECL "bool" |relations| NIL) (|transitive?| CONST-DECL "bool" |relations| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (X FORMAL-TYPE-DECL NIL |QuotientDistributive| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|equivalence?| CONST-DECL "bool" |relations| NIL) (|equivalence| TYPE-EQ-DECL NIL |relations| NIL) (|PreservesEq| CONST-DECL "bool" |KernelDefinition| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|EquivalenceKernel| CONST-DECL "equivalence[X1]" |KernelDefinition| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (|EqualityExtension| CONST-DECL "set[[[X, Y], [X, Y]]]" |QuotientDistributive| NIL) (|quotient_map| CONST-DECL "Quotient(S)" |QuotientDefinition| NIL)) SHOSTAK (|QuotientDistributive| SUBTYPE "LAMBDA (x: QuotientDistributive.X, y: QuotientDistributive.Y): (QuotientDefinition[QuotientDistributive.X].quotient_map(QuotientDistributive.S)(x), y)" "(KernelDefinition[[QuotientDistributive.X, QuotientDistributive.Y], [QuotientDistributive.X, QuotientDistributive.Y], [Quotient[QuotientDistributive.X](QuotientDistributive.S), QuotientDistributive.Y]].PreservesEq(QuotientDistributive.EqualityExtension(QuotientDistributive.S)))"))) (|QuotientDistributive_TCC2| 0 (|QuotientDistributive_TCC2-1| |nil| 3245193423 ("" (GRIND :EXCLUDE "rep" :IF-MATCH NIL) (("1" (REWRITE "restrict_full[[[X, Y], [X, Y]], bool]") (("1" (INST? 1) NIL NIL)) NIL) ("2" (REWRITE "restrict_full[[[X, Y], [X, Y]], bool]") (("2" (INST? 1) NIL NIL)) NIL)) NIL) ((|EqualityExtension| CONST-DECL "set[[[X, Y], [X, Y]]]" |QuotientDistributive| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|EquivalenceKernel| CONST-DECL "equivalence[X1]" |KernelDefinition| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|PreservesEq| CONST-DECL "bool" |KernelDefinition| NIL)) SHOSTAK (|QuotientDistributive| SUBTYPE "QuotientDistributive.EqualityExtension(QuotientDistributive.S)" "{R: relations[[QuotientDistributive.X, QuotientDistributive.Y]].equivalence | KernelDefinition[[QuotientDistributive.X, QuotientDistributive.Y], [QuotientDistributive.X, QuotientDistributive.Y], bool].PreservesEq(R)(LAMBDA (x: [QuotientDistributive.X, QuotientDistributive.Y]): booleans.TRUE)}"))) (|QuotientDistributive| 0 (|QuotientDistributive-2| "" 3458173920 ("" (SKOSIMP*) (("" (EXPAND "bijective?") (("" (PROP) (("1" (EXPAND "injective?") (("1" (SKOSIMP*) (("1" (EXPAND "lift") (("1" (EXPAND "rep") (("1" (FLATTEN) (("1" (TYPEPRED "x1!1" "x2!1") (("1" (SKOSIMP*) (("1" (CASE "nonempty?(x1!1)") (("1" (CASE "nonempty?(x2!1)") (("1" (NAME-REPLACE "ch1" "choose(x1!1)") (("1" (NAME-REPLACE "ch2" "choose(x2!1)") (("1" (TYPEPRED "ch1" "ch2") (("1" (REPLACE*) (("1" (HIDE -3 -4 -5 -6) (("1" (EXPAND "EquivClass") (("1" (APPLY-EXTENSIONALITY :HIDE? T) (("1" (EXPAND "EqualityExtension") (("1" (FLATTEN) (("1" (ASSERT) (("1" (IFF) (("1" (LEMMA "Kernel_quotient_map[X, X]") (("1" (INST?) (("1" (CASE "EquivalenceKernel[X, X, Quotient[X](S!1)](quotient_map(S!1))(ch1`1, ch2`1)") (("1" (REPLACE -2) (("1" (HIDE -2) (("1" (ASSERT) (("1" (SMASH) (("1" (TYPEPRED "S!1") (("1" (EXPAND "equivalence?") (("1" (FLATTEN) (("1" (EXPAND "symmetric?") (("1" (EXPAND "transitive?") (("1" (HIDE -1 -6 -8 -10 -11 -12) (("1" (INST-CP -1 "ch1`1" "ch2`1") (("1" (ASSERT) (("1" (HIDE -4) (("1" (INST -1 "x!1`1" "ch1`1") (("1" (ASSERT) (("1" (HIDE -5) (("1" (INST-CP -3 "x!2`1" "ch2`1" "ch1`1") (("1" (ASSERT) (("1" (INST-CP -3 "x!2`1" "ch1`1" "x!1`1") (("1" (ASSERT) (("1" (INST -3 "x!2`1" "x!1`1" "x!3") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -3 -5 -7 -8 -9) (("2" (TYPEPRED "S!1") (("2" (EXPAND "equivalence?") (("2" (FLATTEN) (("2" (HIDE -1) (("2" (EXPAND "symmetric?") (("2" (EXPAND "transitive?") (("2" (INST -1 "x!2`1" "ch2`1") (("2" (ASSERT) (("2" (HIDE -6) (("2" (INST-CP -2 "x!1`1" "ch1`1" "ch2`1") (("2" (ASSERT) (("2" (HIDE -4 -6) (("2" (INST-CP -2 "x!1`1" "ch2`1" "x!2`1") (("2" (ASSERT) (("2" (HIDE -1 -4) (("2" (INST -1 "x!1`1" "x!2`1" "x!3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "EquivalenceKernel") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -3) (("2" (HIDE -1 -2 -3 -4 -5 2) (("2" (GRIND) (("2" (TYPEPRED "S!1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1) (("2" (HIDE -1 -2 -3 -4 2) (("2" (GRIND) (("2" (TYPEPRED "S!1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "surjective?") (("2" (SKOSIMP*) (("2" (TYPEPRED "y!1`1") (("2" (SKOSIMP*) (("2" (CASE "nonempty?(y!1`1)") (("1" (INST 1 "EquivClass[[X, Y]](EqualityExtension(S!1))(choose(y!1`1), y!1`2)") (("1" (EXPAND "lift") (("1" (EXPAND "rep") (("1" (CASE "nonempty?(EquivClass[[X, Y]](EqualityExtension(S!1))(choose(y!1`1), y!1`2))") (("1" (NAME-REPLACE "ch" "choose(EquivClass[[X, Y]](EqualityExtension(S!1))(choose(y!1`1), y!1`2))") (("1" (TYPEPRED "ch") (("1" (HIDE -2 -3) (("1" (EXPAND "EquivClass") (("1" (EXPAND "EqualityExtension") (("1" (FLATTEN) (("1" (NAME-REPLACE "ch1" "choose(y!1`1)") (("1" (TYPEPRED "ch1") (("1" (REPLACE -4 -1) (("1" (ASSERT) (("1" (EXPAND "quotient_map") (("1" (EXPAND "EquivClass") (("1" (APPLY-EXTENSIONALITY :HIDE? T) (("1" (APPLY-EXTENSIONALITY :HIDE? T) (("1" (IFF) (("1" (REPLACE -4) (("1" (HIDE -3 -4) (("1" (ASSERT) (("1" (TYPEPRED "S!1") (("1" (EXPAND "equivalence?") (("1" (FLATTEN) (("1" (PROP) (("1" (EXPAND "transitive?") (("1" (INST-CP -4 "x!1" "ch1" "ch`1") (("1" (ASSERT) (("1" (HIDE -2 -3 -6 -7) (("1" (INST -2 "x!1" "ch`1" "x!2") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "symmetric?") (("2" (EXPAND "transitive?") (("2" (INST-CP -3 "ch1" "ch`1") (("2" (ASSERT) (("2" (HIDE -7) (("2" (INST -3 "x!1" "ch1") (("2" (ASSERT) (("2" (HIDE -2 -6) (("2" (INST-CP -4 "ch`1" "ch1" "x!1") (("2" (ASSERT) (("2" (HIDE -2 -3) (("2" (INST -2 "ch`1" "x!1" "x!2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 2) (("2" (GRIND) (("2" (INST -1 "(choose(y!1`1), y!1`2)") (("1" (ASSERT) (("1" (TYPEPRED "S!1") (("1" (EXPAND "equivalence?") (("1" (FLATTEN) (("1" (EXPAND "reflexive?") (("1" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -1 "x!2") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST?) NIL NIL)) NIL) ("2" (GRIND :IF-MATCH NIL) (("2" (INST -1 "x!1") (("2" (TYPEPRED "S!1") (("2" (EXPAND "equivalence?") (("2" (FLATTEN) (("2" (EXPAND "reflexive?") (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|EqualityExtension_is_equivalence| APPLICATION-JUDGEMENT "equivalence[[X, Y]]" |QuotientDistributive| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|surjective?| CONST-DECL "bool" |functions| NIL) NIL NIL (|injective?| CONST-DECL "bool" |functions| NIL) (|lift| CONST-DECL "Y" |QuotientExtensionProperties| NIL) (|Kernel_quotient_map| FORMULA-DECL NIL |QuotientKernelProperties| NIL) (|quotient_map| CONST-DECL "Quotient(S)" |QuotientDefinition| NIL) (|EquivalenceKernel| CONST-DECL "equivalence[X1]" |KernelDefinition| NIL) (|symmetric?| CONST-DECL "bool" |relations| NIL) (|transitive?| CONST-DECL "bool" |relations| NIL) (|choose| CONST-DECL "(p)" |sets| NIL) (|reflexive?| CONST-DECL "bool" |relations| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|Quotient| TYPE-EQ-DECL NIL |QuotientDefinition| NIL) (|EqualityExtension| CONST-DECL "set[[[X, Y], [X, Y]]]" |QuotientDistributive| NIL) (|equivalence| TYPE-EQ-DECL NIL |relations| NIL) (|equivalence?| CONST-DECL "bool" |relations| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|EquivClass| CONST-DECL "set[T]" |QuotientDefinition| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (Y FORMAL-TYPE-DECL NIL |QuotientDistributive| NIL) (X FORMAL-TYPE-DECL NIL |QuotientDistributive| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|rep| CONST-DECL "T" |QuotientDefinition| NIL)) SHOSTAK) (|QuotientDistributive-1| |nil| 3245193912 ("" (SKOSIMP*) (("" (EXPAND "bijective?") (("" (PROP) (("1" (EXPAND "injective?") (("1" (SKOSIMP*) (("1" (EXPAND "lift") (("1" (EXPAND "rep") (("1" (FLATTEN) (("1" (TYPEPRED "x1!1" "x2!1") (("1" (SKOSIMP*) (("1" (CASE "nonempty?(x1!1)") (("1" (CASE "nonempty?(x2!1)") (("1" (NAME-REPLACE "ch1" "choose(x1!1)") (("1" (NAME-REPLACE "ch2" "choose(x2!1)") (("1" (TYPEPRED "ch1" "ch2") (("1" (REPLACE*) (("1" (HIDE -3 -4 -5 -6) (("1" (EXPAND "EquivClass") (("1" (APPLY-EXTENSIONALITY :HIDE? T) (("1" (EXPAND "EqualityExtension") (("1" (FLATTEN) (("1" (ASSERT) (("1" (IFF) (("1" (LEMMA "Kernel_quotient_map[X, X]") (("1" (INST?) (("1" (CASE "EquivalenceKernel[X, X, Quotient[X](S!1)](quotient_map(S!1))(ch1`1, ch2`1)") (("1" (REPLACE -2) (("1" (HIDE -2) (("1" (ASSERT) (("1" (SMASH) (("1" (TYPEPRED "S!1") (("1" (EXPAND "equivalence?") (("1" (FLATTEN) (("1" (EXPAND "symmetric?") (("1" (EXPAND "transitive?") (("1" (HIDE -1 -6 -8 -10 -11 -12) (("1" (INST-CP -1 "ch1`1" "ch2`1") (("1" (ASSERT) (("1" (HIDE -4) (("1" (INST -1 "x!1`1" "ch1`1") (("1" (ASSERT) (("1" (HIDE -5) (("1" (INST-CP -3 "x!2`1" "ch2`1" "ch1`1") (("1" (ASSERT) (("1" (INST-CP -3 "x!2`1" "ch1`1" "x!1`1") (("1" (ASSERT) (("1" (INST -3 "x!2`1" "x!1`1" "x!3") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -3 -5 -7 -8 -9) (("2" (TYPEPRED "S!1") (("2" (EXPAND "equivalence?") (("2" (FLATTEN) (("2" (HIDE -1) (("2" (EXPAND "symmetric?") (("2" (EXPAND "transitive?") (("2" (INST -1 "x!2`1" "ch2`1") (("2" (ASSERT) (("2" (HIDE -6) (("2" (INST-CP -2 "x!1`1" "ch1`1" "ch2`1") (("2" (ASSERT) (("2" (HIDE -4 -6) (("2" (INST-CP -2 "x!1`1" "ch2`1" "x!2`1") (("2" (ASSERT) (("2" (HIDE -1 -4) (("2" (INST -1 "x!1`1" "x!2`1" "x!3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "EquivalenceKernel") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -3) (("2" (HIDE -1 -2 -3 -4 -5 2) (("2" (GRIND) (("2" (TYPEPRED "S!1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1) (("2" (HIDE -1 -2 -3 -4 2) (("2" (GRIND) (("2" (TYPEPRED "S!1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "surjective?") (("2" (SKOSIMP*) (("2" (TYPEPRED "y!1`1") (("2" (SKOSIMP*) (("2" (CASE "nonempty?(y!1`1)") (("1" (INST 1 "EquivClass[[X, Y]](EqualityExtension(S!1))(choose(y!1`1), y!1`2)") (("1" (EXPAND "lift") (("1" (EXPAND "rep") (("1" (CASE "nonempty?(EquivClass[[X, Y]](EqualityExtension(S!1))(choose(y!1`1), y!1`2))") (("1" (NAME-REPLACE "ch" "choose(EquivClass[[X, Y]](EqualityExtension(S!1))(choose(y!1`1), y!1`2))") (("1" (TYPEPRED "ch") (("1" (HIDE -2 -3) (("1" (EXPAND "EquivClass") (("1" (EXPAND "EqualityExtension") (("1" (FLATTEN) (("1" (NAME-REPLACE "ch1" "choose(y!1`1)") (("1" (TYPEPRED "ch1") (("1" (REPLACE -4 -1) (("1" (ASSERT) (("1" (EXPAND "quotient_map") (("1" (EXPAND "EquivClass") (("1" (APPLY-EXTENSIONALITY :HIDE? T) (("1" (APPLY-EXTENSIONALITY :HIDE? T) (("1" (IFF) (("1" (REPLACE -4) (("1" (HIDE -3 -4) (("1" (ASSERT) (("1" (TYPEPRED "S!1") (("1" (EXPAND "equivalence?") (("1" (FLATTEN) (("1" (PROP) (("1" (EXPAND "transitive?") (("1" (INST-CP -4 "x!1" "ch1" "ch`1") (("1" (ASSERT) (("1" (HIDE -2 -3 -6 -7) (("1" (INST -2 "x!1" "ch`1" "x!2") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "symmetric?") (("2" (EXPAND "transitive?") (("2" (INST-CP -3 "ch1" "ch`1") (("2" (ASSERT) (("2" (HIDE -7) (("2" (INST -3 "x!1" "ch1") (("2" (ASSERT) (("2" (HIDE -2 -6) (("2" (INST-CP -4 "ch`1" "ch1" "x!1") (("2" (ASSERT) (("2" (HIDE -2 -3) (("2" (INST -2 "ch`1" "x!1" "x!2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "ch`1") (("2" (APPLY-EXTENSIONALITY :HIDE? T) (("2" (EXPAND "EquivClass") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 2) (("2" (GRIND) (("2" (INST -1 "(epsilon(y!1`1), y!1`2)") (("1" (ASSERT) (("1" (TYPEPRED "S!1") (("1" (EXPAND "equivalence?") (("1" (FLATTEN) (("1" (EXPAND "reflexive?") (("1" (INST?) (("1" (INST 1 "x!2") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "x!2") NIL NIL)) NIL)) NIL)) NIL) ("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (INST?) NIL NIL)) NIL) ("2" (REPLACE -1) (("2" (HIDE -1 2) (("2" (GRIND) (("2" (TYPEPRED "S!1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|RelExtension_TCC1| 0 (|RelExtension_TCC1-2| "" 3332191104 ("" (GRIND :EXCLUDE "rep" :IF-MATCH NIL) (("1" (FORWARD-CHAIN -6) NIL NIL) ("2" (FORWARD-CHAIN -3) NIL NIL) ("3" (FORWARD-CHAIN -5) NIL NIL) ("4" (FORWARD-CHAIN -2) NIL NIL) ("5" (INST? -4) NIL NIL) ("6" (INST? -1) NIL NIL)) NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (X FORMAL-TYPE-DECL NIL |QuotientDistributive| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|equivalence| TYPE-EQ-DECL NIL |relations| NIL) (Y FORMAL-TYPE-DECL NIL |QuotientDistributive| NIL) (|equivalence?| CONST-DECL "bool" |relations| NIL) (|transitive?| CONST-DECL "bool" |relations| NIL) (|symmetric?| CONST-DECL "bool" |relations| NIL) (|reflexive?| CONST-DECL "bool" |relations| NIL)) SHOSTAK (|RelExtension| SUBTYPE "{(z, w) | booleans.AND(QuotientDistributive.S(QuotientDistributive.z`1, QuotientDistributive.w`1), QuotientDistributive.R(QuotientDistributive.z`2, QuotientDistributive.w`2))}" "equivalence[[X, Y]]")) (|RelExtension_TCC1-1| |nil| 3245193424 ("" (GRIND :EXCLUDE "rep" :IF-MATCH NIL) (("1" (FORWARD-CHAIN -3) NIL NIL) ("2" (FORWARD-CHAIN -6) NIL NIL) ("3" (FORWARD-CHAIN -2) NIL NIL) ("4" (FORWARD-CHAIN -5) NIL NIL) ("5" (INST? -1) NIL NIL) ("6" (INST? -4) NIL NIL)) NIL) NIL SHOSTAK (|RelExtension| SUBTYPE "{(z, w) | booleans.AND(QuotientDistributive.S(QuotientDistributive.z`1, QuotientDistributive.w`1), QuotientDistributive.R(QuotientDistributive.z`2, QuotientDistributive.w`2))}" "equivalence[[X, Y]]"))) (|RelExtensionPreservesEq| 0 (|RelExtensionPreservesEq-1| |nil| 3245194382 ("" (GRIND :IF-MATCH NIL) (("1" (USE "EquivClassEq[Y]") (("1" (ASSERT) NIL NIL)) NIL) ("2" (USE "EquivClassEq[X]") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ((|EquivClassEq| FORMULA-DECL NIL |QuotientDefinition| NIL) (|reflexive?| CONST-DECL "bool" |relations| NIL) (|symmetric?| CONST-DECL "bool" |relations| NIL) (|transitive?| CONST-DECL "bool" |relations| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (Y FORMAL-TYPE-DECL NIL |QuotientDistributive| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|equivalence?| CONST-DECL "bool" |relations| NIL) (|equivalence| TYPE-EQ-DECL NIL |relations| NIL) (X FORMAL-TYPE-DECL NIL |QuotientDistributive| NIL) (|PreservesEq| CONST-DECL "bool" |KernelDefinition| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|EquivalenceKernel| CONST-DECL "equivalence[X1]" |KernelDefinition| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (|RelExtension| CONST-DECL "equivalence[[X, Y]]" |QuotientDistributive| NIL) (|quotient_map| CONST-DECL "Quotient(S)" |QuotientDefinition| NIL)) SHOSTAK)) (|RelQuotientDistributive_TCC1| 0 (|RelQuotientDistributive_TCC1-1| |nil| 3245193424 ("" (GRIND :EXCLUDE "rep" :IF-MATCH NIL) (("1" (APPLY-EXTENSIONALITY :HIDE? T) (("1" (HIDE -4 -5 -6 -7) (("1" (FORWARD-CHAIN -2) (("1" (IFF) (("1" (PROP) (("1" (FORWARD-CHAIN -4) NIL NIL) ("2" (HIDE -2) (("2" (FORWARD-CHAIN -3) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (APPLY-EXTENSIONALITY :HIDE? T) (("2" (HIDE -1 -2 -3 -4 -8) (("2" (FORWARD-CHAIN -1) (("2" (IFF) (("2" (PROP) (("1" (FORWARD-CHAIN -3) NIL NIL) ("2" (HIDE -2) (("2" (FORWARD-CHAIN -2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|EquivClass| CONST-DECL "set[T]" |QuotientDefinition| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|reflexive?| CONST-DECL "bool" |relations| NIL) (|symmetric?| CONST-DECL "bool" |relations| NIL) (|transitive?| CONST-DECL "bool" |relations| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (Y FORMAL-TYPE-DECL NIL |QuotientDistributive| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|equivalence?| CONST-DECL "bool" |relations| NIL) (|equivalence| TYPE-EQ-DECL NIL |relations| NIL) (X FORMAL-TYPE-DECL NIL |QuotientDistributive| NIL) (|PreservesEq| CONST-DECL "bool" |KernelDefinition| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|EquivalenceKernel| CONST-DECL "equivalence[X1]" |KernelDefinition| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (|RelExtension| CONST-DECL "equivalence[[X, Y]]" |QuotientDistributive| NIL) (|quotient_map| CONST-DECL "Quotient(S)" |QuotientDefinition| NIL)) SHOSTAK (|RelQuotientDistributive| SUBTYPE "LAMBDA (x: QuotientDistributive.X, y: QuotientDistributive.Y): (QuotientDefinition[QuotientDistributive.X].quotient_map(QuotientDistributive.S)(x), QuotientDefinition[QuotientDistributive.Y].quotient_map(QuotientDistributive.R)(y))" "(KernelDefinition[[QuotientDistributive.X, QuotientDistributive.Y], [QuotientDistributive.X, QuotientDistributive.Y], [Quotient[QuotientDistributive.X](QuotientDistributive.S), Quotient[QuotientDistributive.Y](QuotientDistributive.R)]].PreservesEq(QuotientDistributive.RelExtension(QuotientDistributive.S, QuotientDistributive.R)))"))) (|RelQuotientDistributive_TCC2| 0 (|RelQuotientDistributive_TCC2-1| |nil| 3245193424 ("" (GRIND :EXCLUDE "rep" :IF-MATCH NIL) (("1" (REWRITE "restrict_full[[[X, Y], [X, Y]], bool]") (("1" (INST?) NIL NIL)) NIL) ("2" (REWRITE "restrict_full[[[X, Y], [X, Y]], bool]") (("2" (INST?) NIL NIL)) NIL)) NIL) ((|RelExtension| CONST-DECL "equivalence[[X, Y]]" |QuotientDistributive| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|EquivalenceKernel| CONST-DECL "equivalence[X1]" |KernelDefinition| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|PreservesEq| CONST-DECL "bool" |KernelDefinition| NIL)) SHOSTAK (|RelQuotientDistributive| SUBTYPE "QuotientDistributive.RelExtension(QuotientDistributive.S, QuotientDistributive.R)" "{R: relations[[QuotientDistributive.X, QuotientDistributive.Y]].equivalence | KernelDefinition[[QuotientDistributive.X, QuotientDistributive.Y], [QuotientDistributive.X, QuotientDistributive.Y], bool].PreservesEq(R)(LAMBDA (x: [QuotientDistributive.X, QuotientDistributive.Y]): booleans.TRUE)}"))) (|RelQuotientDistributive| 0 (|RelQuotientDistributive-1| |nil| 3245194514 ("" (SKOSIMP*) (("" (EXPAND "bijective?") (("" (PROP) (("1" (EXPAND "injective?") (("1" (SKOSIMP*) (("1" (EXPAND "lift") (("1" (FLATTEN) (("1" (TYPEPRED "x1!1" "x2!1") (("1" (SKOSIMP*) (("1" (CASE "nonempty?(x1!1)") (("1" (CASE "nonempty?(x2!1)") (("1" (EXPAND "rep") (("1" (NAME-REPLACE "ch1" "choose(x1!1)") (("1" (NAME-REPLACE "ch2" "choose(x2!1)") (("1" (TYPEPRED "ch1" "ch2") (("1" (REPLACE -5) (("1" (HIDE -5) (("1" (REPLACE -5) (("1" (HIDE -5) (("1" (HIDE -3 -4) (("1" (EXPAND "EquivClass") (("1" (APPLY-EXTENSIONALITY :HIDE? T) (("1" (EXPAND "RelExtension") (("1" (FLATTEN) (("1" (ASSERT) (("1" (IFF) (("1" (LEMMA "Kernel_quotient_map[X, X]") (("1" (LEMMA "Kernel_quotient_map[Y, Y]") (("1" (INST?) (("1" (INST?) (("1" (CASE "EquivalenceKernel[X, X, Quotient[X](S!1)](quotient_map(S!1))(ch1`1, ch2`1)") (("1" (CASE "EquivalenceKernel[Y, Y, Quotient[Y](R!1)](quotient_map(R!1))(ch1`2, ch2`2)") (("1" (REPLACE -3) (("1" (REPLACE -4) (("1" (HIDE -3 -4) (("1" (ASSERT) (("1" (SMASH) (("1" (TYPEPRED "R!1") (("1" (EXPAND "equivalence?") (("1" (FLATTEN) (("1" (EXPAND "symmetric?") (("1" (EXPAND "transitive?") (("1" (HIDE -1 -5 -6 -8 -10 -12 -13) (("1" (INST-CP -1 "ch1`2" "ch2`2") (("1" (ASSERT) (("1" (HIDE -4) (("1" (INST -1 "x!1`2" "ch1`2") (("1" (ASSERT) (("1" (HIDE -5) (("1" (INST-CP -3 "x!2`2" "ch2`2" "ch1`2") (("1" (ASSERT) (("1" (HIDE -6 -2) (("1" (INST-CP -2 "x!2`2" "ch1`2" "x!1`2") (("1" (ASSERT) (("1" (HIDE -4 -1) (("1" (INST -1 "x!2`2" "x!1`2" "x!4") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -4 -6 -8 -9 -10) (("2" (TYPEPRED "S!1") (("2" (EXPAND "equivalence?") (("2" (FLATTEN) (("2" (EXPAND "symmetric?") (("2" (EXPAND "transitive?") (("2" (HIDE -1) (("2" (INST-CP -1 "ch1`1" "ch2`1") (("2" (ASSERT) (("2" (HIDE -4) (("2" (INST -1 "x!1`1" "ch1`1") (("2" (ASSERT) (("2" (HIDE -5) (("2" (INST-CP -3 "x!2`1" "ch2`1" "ch1`1") (("2" (ASSERT) (("2" (HIDE -6 -2) (("2" (INST-CP -2 "x!2`1" "ch1`1" "x!1`1") (("2" (ASSERT) (("2" (HIDE -4 -1) (("2" (INST -1 "x!2`1" "x!1`1" "x!3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -2 -3 -5 -7 -9 -10) (("3" (TYPEPRED "R!1") (("3" (EXPAND "equivalence?") (("3" (FLATTEN) (("3" (HIDE -1) (("3" (EXPAND "symmetric?") (("3" (EXPAND "transitive?") (("3" (INST -1 "x!2`2" "ch2`2") (("3" (ASSERT) (("3" (HIDE -6) (("3" (INST-CP -2 "x!1`2" "ch1`2" "ch2`2") (("3" (ASSERT) (("3" (HIDE -6 -4) (("3" (INST-CP -2 "x!1`2" "ch2`2" "x!2`2") (("3" (ASSERT) (("3" (HIDE -4 -1) (("3" (INST -1 "x!1`2" "x!2`2" "x!4") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE -1 -4 -6 -8 -9 -10) (("4" (TYPEPRED "S!1") (("4" (EXPAND "equivalence?") (("4" (FLATTEN) (("4" (EXPAND "symmetric?") (("4" (EXPAND "transitive?") (("4" (HIDE -1) (("4" (INST -1 "x!2`1" "ch2`1") (("4" (ASSERT) (("4" (HIDE -6) (("4" (INST-CP -2 "x!1`1" "ch1`1" "ch2`1") (("4" (ASSERT) (("4" (HIDE -6 -4) (("4" (INST-CP -2 "x!1`1" "ch2`1" "x!2`1") (("4" (ASSERT) (("4" (HIDE -4 -1) (("4" (INST -1 "x!1`1" "x!2`1" "x!3") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "EquivalenceKernel") (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (EXPAND "EquivalenceKernel") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -3) (("2" (HIDE -1 -2 -3 -4 -5 2) (("2" (GRIND) (("1" (TYPEPRED "R!1") (("1" (GRIND) NIL NIL)) NIL) ("2" (TYPEPRED "S!1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1) (("2" (HIDE -1 -2 -3 -4 2) (("2" (GRIND) (("1" (TYPEPRED "R!1") (("1" (GRIND) NIL NIL)) NIL) ("2" (TYPEPRED "S!1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "surjective?") (("2" (SKOSIMP*) (("2" (TYPEPRED "y!1`1") (("2" (TYPEPRED "y!1`2") (("2" (SKOSIMP*) (("2" (CASE "nonempty?(y!1`1)") (("1" (CASE "nonempty?(y!1`2)") (("1" (INST 1 "EquivClass[[X, Y]](RelExtension(S!1,R!1))(choose(y!1`1), choose(y!1`2))") (("1" (CASE "nonempty?(EquivClass[[X, Y]]
                                             (RelExtension(S!1, R!1))(choose(y!1`1), choose(y!1`2)))") (("1" (EXPAND "lift") (("1" (EXPAND "rep") (("1" (NAME-REPLACE "ch" "choose(EquivClass[[X, Y]]
                                            (RelExtension(S!1, R!1))(choose(y!1`1), choose(y!1`2)))") (("1" (TYPEPRED "ch") (("1" (EXPAND "EquivClass") (("1" (EXPAND "RelExtension") (("1" (FLATTEN) (("1" (NAME-REPLACE "ch1" "choose(y!1`1)") (("1" (NAME-REPLACE "ch2" "choose(y!1`2)") (("1" (TYPEPRED "ch1" "ch2") (("1" (REPLACE -8 -2) (("1" (REPLACE -9 -1) (("1" (ASSERT) (("1" (EXPAND "quotient_map") (("1" (EXPAND "EquivClass") (("1" (APPLY-EXTENSIONALITY :HIDE? T) (("1" (APPLY-EXTENSIONALITY :HIDE? T) (("1" (REPLACE -9 1) (("1" (ASSERT) (("1" (IFF) (("1" (HIDE -2 -4 -5 -6 -7 -8 -9) (("1" (TYPEPRED "S!1") (("1" (EXPAND "equivalence?") (("1" (FLATTEN) (("1" (HIDE -1) (("1" (EXPAND "symmetric?") (("1" (EXPAND "transitive?") (("1" (PROP) (("1" (HIDE -2) (("1" (INST-CP -2 "x!2" "ch1" "ch`1") (("1" (ASSERT) (("1" (HIDE -4 -5) (("1" (INST -2 "x!2" "ch`1" "x!3") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST-CP -2 "ch1" "ch`1") (("2" (ASSERT) (("2" (HIDE -6) (("2" (INST -2 "x!2" "ch1") (("2" (ASSERT) (("2" (HIDE -5) (("2" (INST-CP -4 "ch`1" "ch1" "x!2") (("2" (ASSERT) (("2" (HIDE -3 -2) (("2" (INST -2 "ch`1" "x!2" "x!3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (APPLY-EXTENSIONALITY :HIDE? T) (("2" (REPLACE -8 1) (("2" (ASSERT) (("2" (IFF) (("2" (TYPEPRED "R!1") (("2" (EXPAND "equivalence?") (("2" (FLATTEN) (("2" (HIDE -1 -4 -6 -8 -9 -10 -11 -12) (("2" (EXPAND "symmetric?") (("2" (EXPAND "transitive?") (("2" (PROP) (("1" (HIDE -2) (("1" (INST-CP -2 "x!1" "ch2" "ch`2") (("1" (ASSERT) (("1" (HIDE -4 -5) (("1" (INST -2 "x!1" "ch`2" "x!3") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST-CP -2 "ch2" "ch`2") (("2" (ASSERT) (("2" (HIDE -6) (("2" (INST -2 "x!1" "ch2") (("2" (ASSERT) (("2" (HIDE -5) (("2" (INST-CP -4 "ch`2" "ch2" "x!1") (("2" (ASSERT) (("2" (HIDE -3 -2) (("2" (INST -2 "ch`2" "x!1" "x!3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "EquivClass") (("3" (INST 1 "ch`2") NIL NIL)) NIL) ("4" (EXPAND "EquivClass") (("4" (INST 1 "ch`1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "nonempty?" 1) (("2" (EXPAND "empty?") (("2" (EXPAND "member") (("2" (EXPAND "EquivClass" -1) (("2" (EXPAND "RelExtension" -1) (("2" (INST -1 "(choose(y!1`1), choose(y!1`2))") (("2" (TYPEPRED "S!1" "R!1") (("2" (EXPAND "equivalence?") (("2" (FLATTEN) (("2" (HIDE -2 -3 -5 -6) (("2" (EXPAND "reflexive?") (("2" (INST?) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (PROPAX) NIL NIL) ("4" (PROPAX) NIL NIL)) NIL) ("2" (EXPAND "EquivClass" 1) (("2" (EXPAND "RelExtension" 1) (("2" (INST 1 "(choose(y!1`1), choose(y!1`2))") NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -3 2) (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (GRIND) (("2" (TYPEPRED "R!1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -2 1) (("2" (HIDE -1 -2 2) (("2" (GRIND) (("2" (TYPEPRED "S!1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|bijective?| CONST-DECL "bool" |functions| NIL) (|surjective?| CONST-DECL "bool" |functions| NIL) NIL NIL NIL (|injective?| CONST-DECL "bool" |functions| NIL) (|lift| CONST-DECL "Y" |QuotientExtensionProperties| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (X FORMAL-TYPE-DECL NIL |QuotientDistributive| NIL) (Y FORMAL-TYPE-DECL NIL |QuotientDistributive| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|EquivClass| CONST-DECL "set[T]" |QuotientDefinition| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|equivalence?| CONST-DECL "bool" |relations| NIL) (|equivalence| TYPE-EQ-DECL NIL |relations| NIL) (|RelExtension| CONST-DECL "equivalence[[X, Y]]" |QuotientDistributive| NIL) (|Quotient| TYPE-EQ-DECL NIL |QuotientDefinition| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|reflexive?| CONST-DECL "bool" |relations| NIL) (|rep| CONST-DECL "T" |QuotientDefinition| NIL) (|transitive?| CONST-DECL "bool" |relations| NIL) (|symmetric?| CONST-DECL "bool" |relations| NIL) (|EquivalenceKernel| CONST-DECL "equivalence[X1]" |KernelDefinition| NIL) (|quotient_map| CONST-DECL "Quotient(S)" |QuotientDefinition| NIL) (|Kernel_quotient_map| FORMULA-DECL NIL |QuotientKernelProperties| NIL) (|choose| CONST-DECL "(p)" |sets| NIL)) SHOSTAK)) (|FunExtension_TCC1| 0 (|FunExtension_TCC1-3| "" 3658949833 ("" (GRIND :EXCLUDE "rep" :IF-MATCH NIL) (("1" (TYPEPRED "F!1(x!2)") (("1" (INST?) (("1" (INST?) (("1" (GRIND :EXCLUDE "rep" :IF-MATCH NIL) (("1" (FORWARD-CHAIN -3) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "F!1(x!2)") (("2" (GRIND :EXCLUDE "rep" :IF-MATCH NIL) (("2" (INST? -4) (("2" (INST -2 "x!1(x!2)" "y!1(x!2)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "F!1(x!2)") (("3" (GRIND :EXCLUDE "rep" :IF-MATCH NIL) (("3" (INST? -1) NIL NIL)) NIL)) NIL)) NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (Y FORMAL-TYPE-DECL NIL |QuotientDistributive| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (X FORMAL-TYPE-DECL NIL |QuotientDistributive| NIL) (|equivalence| TYPE-EQ-DECL NIL |relations| NIL) (|equivalence?| CONST-DECL "bool" |relations| NIL) (|transitive?| CONST-DECL "bool" |relations| NIL) (|symmetric?| CONST-DECL "bool" |relations| NIL) (|reflexive?| CONST-DECL "bool" |relations| NIL)) SHOSTAK (|FunExtension| SUBTYPE "{(f, g) | FORALL (x: QuotientDistributive.X): QuotientDistributive.F(x)(QuotientDistributive.f(x), QuotientDistributive.g(x))}" "equivalence[[X -> Y]]")) (|FunExtension_TCC1-2| "" 3590861483 ("" (GRIND :EXCLUDE "rep" :IF-MATCH NIL) (("1" (TYPEPRED "F!1(x!2)") (("1" (HIDE -2) (("1" (INST?) (("1" (INST?) (("1" (GRIND :EXCLUDE "rep" :IF-MATCH NIL) (("1" (FORWARD-CHAIN -3) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1) (("2" (INST?) (("2" (TYPEPRED "F!1(x!2)") (("2" (GRIND :EXCLUDE "rep" :IF-MATCH NIL) (("2" (FORWARD-CHAIN -2) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "F!1(x!2)") (("3" (GRIND :EXCLUDE "rep" :IF-MATCH NIL) (("3" (INST? -1) NIL NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|FunExtension| SUBTYPE "{(f, g) | FORALL (x: QuotientDistributive.X): QuotientDistributive.F(x)(QuotientDistributive.f(x), QuotientDistributive.g(x))}" "equivalence[[X -> Y]]")) (|FunExtension_TCC1-1| |nil| 3245193424 ("" (GRIND :EXCLUDE "rep" :IF-MATCH NIL) (("1" (TYPEPRED "F!1(x!2)") (("1" (INST?) (("1" (INST?) (("1" (GRIND :EXCLUDE "rep" :IF-MATCH NIL) (("1" (FORWARD-CHAIN -3) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST?) (("2" (TYPEPRED "F!1(x!2)") (("2" (GRIND :EXCLUDE "rep" :IF-MATCH NIL) (("2" (FORWARD-CHAIN -2) NIL NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "F!1(x!2)") (("3" (GRIND :EXCLUDE "rep" :IF-MATCH NIL) (("3" (INST? -1) NIL NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|FunExtension| SUBTYPE "{(f, g) | FORALL (x: QuotientDistributive.X): QuotientDistributive.F(x)(QuotientDistributive.f(x), QuotientDistributive.g(x))}" "equivalence[[X -> Y]]"))) (|FunExtensionPreservesEq| 0 (|FunExtensionPreservesEq-4| "" 3658950104 ("" (GRIND) (("" (APPLY-EXTENSIONALITY :HIDE? T) (("" (APPLY-EXTENSIONALITY :HIDE? T) (("" (INST?) (("" (IFF) (("" (TYPEPRED "F!1(x!2)") (("" (EXPAND "equivalence?") (("" (FLATTEN) (("" (HIDE -1) (("" (EXPAND "symmetric?") (("" (EXPAND "transitive?") (("" (PROP) (("1" (INST -2 "x!1`1(x!2)" "x!1`2(x!2)") (("1" (ASSERT) (("1" (FORWARD-CHAIN -3) NIL NIL)) NIL)) NIL) ("2" (FORWARD-CHAIN -3) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|equivalence| TYPE-EQ-DECL NIL |relations| NIL) (|equivalence?| CONST-DECL "bool" |relations| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|EquivClass| CONST-DECL "set[T]" |QuotientDefinition| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (Y FORMAL-TYPE-DECL NIL |QuotientDistributive| NIL) (X FORMAL-TYPE-DECL NIL |QuotientDistributive| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|symmetric?| CONST-DECL "bool" |relations| NIL) (|transitive?| CONST-DECL "bool" |relations| NIL) (|PreservesEq| CONST-DECL "bool" |KernelDefinition| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|EquivalenceKernel| CONST-DECL "equivalence[X1]" |KernelDefinition| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (|FunExtension| CONST-DECL "equivalence[[X -> Y]]" |QuotientDistributive| NIL) (|quotient_map| CONST-DECL "Quotient(S)" |QuotientDefinition| NIL)) SHOSTAK) (|FunExtensionPreservesEq-3| "" 3590861688 ("" (GRIND) (("" (APPLY-EXTENSIONALITY :HIDE? T) (("" (APPLY-EXTENSIONALITY :HIDE? T) (("" (HIDE -1) (("" (INST?) (("" (IFF) (("" (TYPEPRED "F!1(x!2)") (("" (EXPAND "equivalence?") (("" (FLATTEN) (("" (HIDE -1) (("" (EXPAND "symmetric?") (("" (EXPAND "transitive?") (("" (PROP) (("1" (INST -2 "x!1`1(x!2)" "x!1`2(x!2)") (("1" (ASSERT) (("1" (FORWARD-CHAIN -3) NIL NIL)) NIL)) NIL) ("2" (FORWARD-CHAIN -3) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|FunExtensionPreservesEq-2| "Fix for 3.2" 3307984197 ("" (GRIND) (("" (APPLY-EXTENSIONALITY :HIDE? T) (("1" (APPLY-EXTENSIONALITY :HIDE? T) (("1" (INST?) (("1" (IFF) (("1" (TYPEPRED "F!1(x!2)") (("1" (EXPAND "equivalence?") (("1" (FLATTEN) (("1" (HIDE -1) (("1" (EXPAND "symmetric?") (("1" (EXPAND "transitive?") (("1" (PROP) (("1" (INST -2 "x!1`1(x!2)" "x!1`2(x!2)") (("1" (ASSERT) (("1" (FORWARD-CHAIN -3) NIL NIL)) NIL)) NIL) ("2" (FORWARD-CHAIN -3) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOLEM!) (("2" (INST? 1) NIL NIL)) NIL) ("3" (SKOLEM!) (("3" (INST? 1) NIL NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|FunExtensionPreservesEq-1| |nil| 3245194994 ("" (GRIND) (("" (APPLY-EXTENSIONALITY :HIDE? T) (("" (APPLY-EXTENSIONALITY :HIDE? T) (("" (INST?) (("" (IFF) (("" (TYPEPRED "F!1(x!2)") (("" (EXPAND "equivalence?") (("" (FLATTEN) (("" (HIDE -1) (("" (EXPAND "symmetric?") (("" (EXPAND "transitive?") (("" (PROP) (("1" (INST -2 "x!1`1(x!2)" "x!1`2(x!2)") (("1" (ASSERT) (("1" (FORWARD-CHAIN -3) NIL NIL)) NIL)) NIL) ("2" (FORWARD-CHAIN -3) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|FunQuotientDistributive_TCC1| 0 (|FunQuotientDistributive_TCC1-4| "" 3658950169 ("" (GRIND :EXCLUDE "rep" :IF-MATCH NIL) (("" (APPLY-EXTENSIONALITY :HIDE? T) (("" (INST?) (("" (TYPEPRED "F!1(x!2)") (("" (APPLY-EXTENSIONALITY :HIDE? T) (("" (FLATTEN) (("" (FORWARD-CHAIN -2) (("" (IFF) (("" (PROP) (("1" (FORWARD-CHAIN -4) NIL NIL) ("2" (HIDE -2) (("2" (FORWARD-CHAIN -3) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|equivalence| TYPE-EQ-DECL NIL |relations| NIL) (|equivalence?| CONST-DECL "bool" |relations| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|EquivClass| CONST-DECL "set[T]" |QuotientDefinition| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (Y FORMAL-TYPE-DECL NIL |QuotientDistributive| NIL) (X FORMAL-TYPE-DECL NIL |QuotientDistributive| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|transitive?| CONST-DECL "bool" |relations| NIL) (|symmetric?| CONST-DECL "bool" |relations| NIL) (|reflexive?| CONST-DECL "bool" |relations| NIL) (|PreservesEq| CONST-DECL "bool" |KernelDefinition| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|EquivalenceKernel| CONST-DECL "equivalence[X1]" |KernelDefinition| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (|FunExtension| CONST-DECL "equivalence[[X -> Y]]" |QuotientDistributive| NIL) (|quotient_map| CONST-DECL "Quotient(S)" |QuotientDefinition| NIL)) SHOSTAK (|FunQuotientDistributive| SUBTYPE "LAMBDA (f: [QuotientDistributive.X -> QuotientDistributive.Y]): LAMBDA (x: QuotientDistributive.X): (QuotientDefinition[QuotientDistributive.Y].quotient_map(QuotientDistributive.F(x))(f(x)))" "(KernelDefinition[[QuotientDistributive.X -> QuotientDistributive.Y], [QuotientDistributive.X -> QuotientDistributive.Y], [x: X -> Quotient[QuotientDistributive.Y](QuotientDistributive.F(x))]].PreservesEq(QuotientDistributive.FunExtension(QuotientDistributive.F)))")) (|FunQuotientDistributive_TCC1-3| "" 3590861839 ("" (GRIND :EXCLUDE "rep" :IF-MATCH NIL) (("" (HIDE -1) (("" (APPLY-EXTENSIONALITY :HIDE? T) (("" (INST?) (("" (TYPEPRED "F!1(x!2)") (("" (APPLY-EXTENSIONALITY :HIDE? T) (("" (FLATTEN) (("" (FORWARD-CHAIN -2) (("" (IFF) (("" (PROP) (("1" (FORWARD-CHAIN -4) NIL NIL) ("2" (HIDE -2) (("2" (FORWARD-CHAIN -3) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|FunQuotientDistributive| SUBTYPE "LAMBDA (f: [QuotientDistributive.X -> QuotientDistributive.Y]): LAMBDA (x: QuotientDistributive.X): (QuotientDefinition[QuotientDistributive.Y].quotient_map(QuotientDistributive.F(x))(f(x)))" "(KernelDefinition[[QuotientDistributive.X -> QuotientDistributive.Y], [QuotientDistributive.X -> QuotientDistributive.Y], [x: X -> Quotient[QuotientDistributive.Y](QuotientDistributive.F(x))]].PreservesEq(QuotientDistributive.FunExtension(QuotientDistributive.F)))")) (|FunQuotientDistributive_TCC1-2| "" 3307985072 ("" (GRIND :EXCLUDE "rep" :IF-MATCH NIL) (("" (APPLY-EXTENSIONALITY :HIDE? T) (("1" (INST?) (("1" (TYPEPRED "F!1(x!2)") (("1" (APPLY-EXTENSIONALITY :HIDE? T) (("1" (FLATTEN) (("1" (FORWARD-CHAIN -2) (("1" (IFF) (("1" (PROP) (("1" (FORWARD-CHAIN -4) NIL NIL) ("2" (HIDE -2) (("2" (FORWARD-CHAIN -3) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOLEM!) (("2" (INST?) NIL NIL)) NIL) ("3" (SKOLEM!) (("3" (INST?) NIL NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|FunQuotientDistributive| SUBTYPE "LAMBDA (f: [QuotientDistributive.X -> QuotientDistributive.Y]): LAMBDA (x: QuotientDistributive.X): (QuotientDefinition[QuotientDistributive.Y].quotient_map(QuotientDistributive.F(x))(f(x)))" "(KernelDefinition[[QuotientDistributive.X -> QuotientDistributive.Y], [QuotientDistributive.X -> QuotientDistributive.Y], [x: X -> Quotient[QuotientDistributive.Y](QuotientDistributive.F(x))]].PreservesEq(QuotientDistributive.FunExtension(QuotientDistributive.F)))")) (|FunQuotientDistributive_TCC1-1| |nil| 3245193424 ("" (GRIND :EXCLUDE "rep" :IF-MATCH NIL) (("" (APPLY-EXTENSIONALITY :HIDE? T) (("" (INST?) (("" (TYPEPRED "F!1(x!2)") (("" (APPLY-EXTENSIONALITY :HIDE? T) (("" (FLATTEN) (("" (FORWARD-CHAIN -2) (("" (IFF) (("" (PROP) (("1" (FORWARD-CHAIN -4) NIL NIL) ("2" (HIDE -2) (("2" (FORWARD-CHAIN -3) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|FunQuotientDistributive| SUBTYPE "LAMBDA (f: [QuotientDistributive.X -> QuotientDistributive.Y]): LAMBDA (x: QuotientDistributive.X): (QuotientDefinition[QuotientDistributive.Y].quotient_map(QuotientDistributive.F(x))(f(x)))" "(KernelDefinition[[QuotientDistributive.X -> QuotientDistributive.Y], [QuotientDistributive.X -> QuotientDistributive.Y], [x: X -> Quotient[QuotientDistributive.Y](QuotientDistributive.F(x))]].PreservesEq(QuotientDistributive.FunExtension(QuotientDistributive.F)))"))) (|FunQuotientDistributive_TCC2| 0 (|FunQuotientDistributive_TCC2-1| |nil| 3245193424 ("" (GRIND :EXCLUDE "rep" :IF-MATCH NIL) (("1" (REWRITE "restrict_full[[[X -> Y], [X -> Y]], bool]") (("1" (INST?) NIL NIL)) NIL) ("2" (REWRITE "restrict_full[[[X -> Y], [X -> Y]], bool]") (("2" (INST?) NIL NIL)) NIL)) NIL) ((|FunExtension| CONST-DECL "equivalence[[X -> Y]]" |QuotientDistributive| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|EquivalenceKernel| CONST-DECL "equivalence[X1]" |KernelDefinition| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|PreservesEq| CONST-DECL "bool" |KernelDefinition| NIL)) SHOSTAK (|FunQuotientDistributive| SUBTYPE "QuotientDistributive.FunExtension(QuotientDistributive.F)" "{R: relations[[QuotientDistributive.X -> QuotientDistributive.Y]].equivalence | KernelDefinition[[QuotientDistributive.X -> QuotientDistributive.Y], [QuotientDistributive.X -> QuotientDistributive.Y], bool].PreservesEq(R)(LAMBDA (x: [QuotientDistributive.X -> QuotientDistributive.Y]): booleans.TRUE)}"))) (|FunQuotientDistributive| 0 (|FunQuotientDistributive-3| "" 3342937949 ("" (SKOSIMP) (("" (LEMMA "FunExtensionPreservesEq") (("" (EXPAND "bijective?") (("" (INST -1 "F!1") (("" (PROP) (("1" (EXPAND "injective?") (("1" (SKOLEM-TYPEPRED) (("1" (SKOSIMP*) (("1" (REPLACE -1 :HIDE? T) (("1" (REPLACE -1 :HIDE? T) (("1" (EXPAND "EquivClass") (("1" (APPLY-EXTENSIONALITY :HIDE? T) (("1" (EXPAND "FunExtension" 1) (("1" (EXPAND "lift") (("1" (DECOMPOSE-EQUALITY) (("1" (IFF) (("1" (PROP) (("1" (SKOSIMP*) (("1" (INST -1 "x!4") (("1" (INST -2 "x!4") (("1" (EXPAND "quotient_map" -2) (("1" (EXPAND "EquivClass" -2) (("1" (DECOMPOSE-EQUALITY) (("1" (INST -1 "x!1(x!4)") (("1" (EXPAND "rep") (("1" (EXPAND "FunExtension") (("1" (EXPAND "PreservesEq") (("1" (EXPAND "subset?") (("1" (EXPAND "member") (("1" (EXPAND "EquivalenceKernel") (("1" (REWRITE "restrict_full[[[X -> Y], [X -> Y]], bool]") (("1" (EXPAND "quotient_map") (("1" (EXPAND "EquivClass") (("1" (NAME-REPLACE "ch1" "choose({z: [X -> Y] | FORALL (x: X): F!1(x)(x!1(x), z(x))})") (("1" (NAME-REPLACE "ch2" "choose({z: [X -> Y] | FORALL (x: X): F!1(x)(x!2(x), z(x))})") (("1" (INST -3 "(ch1, ch2)") (("1" (PROP) (("1" (DECOMPOSE-EQUALITY) (("1" (INST -1 "x!4") (("1" (DECOMPOSE-EQUALITY) (("1" (TYPEPRED "ch1") (("1" (TYPEPRED "ch2") (("1" (INST -1 "x!4") (("1" (INST -2 "x!4") (("1" (INST -3 "x!2(x!4)") (("1" (TYPEPRED "F!1(x!4)") (("1" (EXPAND "equivalence?") (("1" (FLATTEN) (("1" (HIDE -1) (("1" (EXPAND "symmetric?") (("1" (EXPAND "transitive?") (("1" (ASSERT) (("1" (INST-CP -1 "x!2(x!4)" "ch2(x!4)") (("1" (ASSERT) (("1" (REPLACE -2) (("1" (HIDE -2) (("1" (INST -1 "x!1(x!4)" "ch1(x!4)") (("1" (ASSERT) (("1" (REPLACE -1) (("1" (HIDE -1 -4 -5) (("1" (INST-CP -1 "x!2(x!4)" "ch2(x!4)" "x!1(x!4)") (("1" (ASSERT) (("1" (HIDE -3 -4) (("1" (INST -1 "x!2(x!4)" "x!1(x!4)" "x!3(x!4)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "ch1" "ch2") (("2" (HIDE 1) (("2" (INST -1 "x!4") (("2" (INST -2 "x!4") (("2" (TYPEPRED "F!1(x!4)") (("2" (EXPAND "equivalence?") (("2" (FLATTEN) (("2" (HIDE -1) (("2" (EXPAND "symmetric?") (("2" (EXPAND "transitive?") (("2" (INST -1 "x!1(x!4)" "ch1(x!4)") (("2" (ASSERT) (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (HIDE -2) (("2" (INST-CP -1 "x!2(x!4)" "ch2(x!4)" "x!1(x!4)") (("2" (ASSERT) (("2" (HIDE -3 -4) (("2" (INST -1 "x!2(x!4)" "x!1(x!4)" "x!3(x!4)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3 2) (("2" (EXPAND "nonempty?") (("2" (EXPAND "empty?") (("2" (INST -1 "x!2") (("2" (EXPAND "member") (("2" (SKOSIMP) (("2" (TYPEPRED "F!1(x!5)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3 2) (("2" (EXPAND "nonempty?") (("2" (EXPAND "empty?") (("2" (INST -1 "x!1") (("2" (EXPAND "member") (("2" (SKOSIMP) (("2" (TYPEPRED "F!1(x!5)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND :IF-MATCH NIL) (("2" (EXPAND "EquivClass" 1) (("2" (EXPAND "FunExtension" 1) (("2" (INST 1 "x!2") NIL NIL)) NIL)) NIL)) NIL) ("3" (INST 1 "x!1") (("3" (APPLY-EXTENSIONALITY :HIDE? T) (("3" (EXPAND "FunExtension") (("3" (EXPAND "EquivClass") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (INST -1 "x!4") (("2" (INST -2 "x!4") (("2" (EXPAND "quotient_map") (("2" (EXPAND "EquivClass") (("2" (DECOMPOSE-EQUALITY) (("1" (EXPAND "PreservesEq") (("1" (EXPAND "subset?") (("1" (EXPAND "member") (("1" (EXPAND "FunExtension") (("1" (REWRITE "restrict_full[[[X -> Y], [X -> Y]], bool]") (("1" (EXPAND "EquivalenceKernel") (("1" (EXPAND "rep") (("1" (NAME-REPLACE "ch1" "choose({z: [X -> Y] | FORALL (x: X): F!1(x)(x!1(x), z(x))})") (("1" (NAME-REPLACE "ch2" "choose({z: [X -> Y] | FORALL (x: X): F!1(x)(x!2(x), z(x))})") (("1" (INST -3 "(ch1, ch2)") (("1" (TYPEPRED "ch1" "ch2") (("1" (HIDE -5) (("1" (INST -1 "x!4") (("1" (INST -2 "x!4") (("1" (INST -3 "ch1(x!4)") (("1" (TYPEPRED "F!1(x!4)") (("1" (EXPAND "equivalence?") (("1" (FLATTEN) (("1" (EXPAND "reflexive?") (("1" (INST -1 "ch1(x!4)") (("1" (ASSERT) (("1" (HIDE -1) (("1" (EXPAND "symmetric?") (("1" (EXPAND "transitive?") (("1" (INST-CP -1 "ch2(x!4)" "ch1(x!4)") (("1" (ASSERT) (("1" (HIDE -6) (("1" (INST -1 "x!2(x!4)" "ch2(x!4)") (("1" (ASSERT) (("1" (HIDE -5) (("1" (INST-CP -3 "x!1(x!4)" "ch1(x!4)" "ch2(x!4)") (("1" (ASSERT) (("1" (HIDE -5 -2) (("1" (INST-CP -2 "x!1(x!4)" "ch2(x!4)" "x!2(x!4)") (("1" (ASSERT) (("1" (HIDE -4 -1) (("1" (FORWARD-CHAIN -1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3 2) (("2" (GRIND) (("2" (TYPEPRED "F!1(x!5)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3 2) (("2" (GRIND) (("2" (TYPEPRED "F!1(x!5)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3 2) (("2" (GRIND :IF-MATCH NIL) (("2" (EXPAND "FunExtension") (("2" (EXPAND "EquivClass") (("2" (INST 1 "x!2") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST 1 "x!1") (("3" (APPLY-EXTENSIONALITY :HIDE? T) (("3" (EXPAND "FunExtension") (("3" (EXPAND "EquivClass") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "x!2") (("2" (APPLY-EXTENSIONALITY :HIDE? T) (("2" (EXPAND "FunExtension") (("2" (EXPAND "EquivClass") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST 1 "x!2") (("3" (APPLY-EXTENSIONALITY :HIDE? T) (("3" (EXPAND "FunExtension") (("3" (EXPAND "EquivClass") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (INST 1 "x!1") (("4" (APPLY-EXTENSIONALITY :HIDE? T) (("4" (EXPAND "EquivClass") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("5" (INST 1 "x!1") (("5" (APPLY-EXTENSIONALITY :HIDE? T) (("5" (EXPAND "EquivClass") (("5" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1) (("2" (EXPAND "surjective?") (("2" (SKOSIMP) (("2" (INST 1 "{ f : [X -> Y] | FORALL (x: X): (y!1(x))(f(x)) }") (("1" (EXPAND "lift") (("1" (APPLY-EXTENSIONALITY :HIDE? T) (("1" (EXPAND "quotient_map") (("1" (EXPAND "EquivClass") (("1" (APPLY-EXTENSIONALITY :HIDE? T) (("1" (EXPAND "rep") (("1" (NAME-REPLACE "ch" "choose({f: [X -> Y] | FORALL (x: X): y!1(x)(f(x))})") (("1" (TYPEPRED "ch") (("1" (TYPEPRED "F!1(x!1)") (("1" (INST -2 "x!1") (("1" (TYPEPRED "y!1(x!1)") (("1" (SKOSIMP) (("1" (EXPAND "EquivClass") (("1" (DECOMPOSE-EQUALITY) (("1" (INST-CP -1 "x!2") (("1" (INST -1 "ch(x!1)") (("1" (REPLACE -4) (("1" (REPLACE -2) (("1" (HIDE -2 -4) (("1" (IFF) (("1" (EXPAND "equivalence?") (("1" (FLATTEN) (("1" (HIDE -2) (("1" (EXPAND "symmetric?") (("1" (EXPAND "transitive?") (("1" (PROP) (("1" (INST -4 "x!3" "ch(x!1)" "x!2") (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST -3 "x!3" "ch(x!1)") (("2" (ASSERT) (("2" (HIDE -2) (("2" (INST -3 "ch(x!1)" "x!3" "x!2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND :IF-MATCH NIL) (("2" (INST -1 "LAMBDA (x: X): choose(y!1(x))") (("1" (SKOSIMP) (("1" (TYPEPRED "y!1(x!3)") (("1" (SKOSIMP) (("1" (EXPAND "EquivClass") (("1" (REPLACE -1) (("1" (BETA) (("1" (NAME-REPLACE "ch" "choose({z: Y | F!1(x!3)(x!4, z)})") (("1" (TYPEPRED "ch") (("1" (PROPAX) NIL NIL)) NIL) ("2" (INST -1 "x!4") (("2" (HIDE -1 2) (("2" (TYPEPRED "F!1(x!3)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (TYPEPRED "y!1(x!3)") (("2" (SKOSIMP) (("2" (EXPAND "EquivClass") (("2" (DECOMPOSE-EQUALITY) (("2" (INST -1 "x!4") (("2" (INST -2 "x!4") (("2" (REPLACE -1 :HIDE? T) (("2" (TYPEPRED "F!1(x!3)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (EXPAND "EquivClass") (("2" (EXPAND "FunExtension") (("2" (INST 1 "LAMBDA (x: X): choose(y!1(x))") (("1" (APPLY-EXTENSIONALITY :HIDE? T) (("1" (IFF) (("1" (PROP) (("1" (SKOSIMP) (("1" (TYPEPRED "y!1(x!3)") (("1" (SKOSIMP) (("1" (EXPAND "EquivClass") (("1" (DECOMPOSE-EQUALITY) (("1" (NAME-REPLACE "ch" "choose(y!1(x!3))") (("1" (TYPEPRED "ch") (("1" (INST -3 "x!3") (("1" (INST-CP -2 "ch") (("1" (REPLACE -1) (("1" (INST -2 "x!2(x!3)") (("1" (REPLACE -4) (("1" (HIDE -1 -4) (("1" (TYPEPRED "F!1(x!3)") (("1" (EXPAND "equivalence?") (("1" (FLATTEN) (("1" (HIDE -1) (("1" (EXPAND "symmetric?") (("1" (EXPAND "transitive?") (("1" (INST -1 "x!4" "ch") (("1" (ASSERT) (("1" (HIDE -4) (("1" (INST -2 "ch" "x!4" "x!2(x!3)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (INST -1 "x!3") (("2" (TYPEPRED "y!1(x!3)") (("2" (SKOSIMP) (("2" (REPLACE -1 :HIDE? T) (("2" (EXPAND "EquivClass") (("2" (NAME-REPLACE "ch" "choose({z: Y | F!1(x!3)(x!4, z)})") (("1" (TYPEPRED "ch") (("1" (TYPEPRED "F!1(x!3)") (("1" (EXPAND "equivalence?") (("1" (FLATTEN) (("1" (HIDE -1 -2) (("1" (EXPAND "transitive?") (("1" (INST -1 "x!4" "ch" "x!2(x!3)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (GRIND) (("2" (TYPEPRED "F!1(x!3)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (GRIND :IF-MATCH NIL) (("2" (TYPEPRED "y!1(x!2)") (("2" (SKOSIMP) (("2" (REPLACE -1 :HIDE? T) (("2" (INST -1 "x!3") (("2" (TYPEPRED "F!1(x!2)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (GRIND :IF-MATCH NIL) (("2" (TYPEPRED "y!1(x!2)") (("2" (SKOSIMP) (("2" (REPLACE -1 :HIDE? T) (("2" (INST -1 "x!3") (("2" (TYPEPRED "F!1(x!2)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (INST 1 "LAMBDA (x: X): choose(y!1(x))") (("1" (APPLY-EXTENSIONALITY :HIDE? T) (("1" (IFF) (("1" (EXPAND "EquivClass") (("1" (EXPAND "FunExtension") (("1" (PROP) (("1" (SKOSIMP) (("1" (NAME-REPLACE "ch" "choose(y!1(x!3))") (("1" (TYPEPRED "ch") (("1" (INST -2 "x!3") (("1" (TYPEPRED "y!1(x!3)") (("1" (SKOSIMP) (("1" (REPLACE -1 :HIDE? T) (("1" (EXPAND "EquivClass") (("1" (TYPEPRED "F!1(x!3)") (("1" (GRIND :IF-MATCH NIL) (("1" (HIDE -1) (("1" (INST -1 "x!4" "ch") (("1" (ASSERT) (("1" (HIDE -3) (("1" (INST -2 "ch" "x!4" "x!2(x!3)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (TYPEPRED "y!1(x!3)") (("2" (SKOSIMP) (("2" (INST -2 "x!3") (("2" (REPLACE -1 :HIDE? T) (("2" (EXPAND "EquivClass") (("2" (NAME-REPLACE "ch" "choose({z: Y | F!1(x!3)(x!4, z)})") (("1" (TYPEPRED "ch") (("1" (TYPEPRED "F!1(x!3)") (("1" (GRIND :IF-MATCH NIL) (("1" (HIDE -1 -2) (("1" (INST -1 "x!4" "ch" "x!2(x!3)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (GRIND) (("2" (TYPEPRED "F!1(x!3)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (GRIND) (("2" (TYPEPRED "y!1(x!2)") (("2" (SKOSIMP) (("2" (REPLACE -1 :HIDE? T) (("2" (INST -1 "x!3") (("2" (GRIND) (("2" (TYPEPRED "F!1(x!2)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (GRIND) (("2" (TYPEPRED "y!1(x!2)") (("2" (SKOSIMP) (("2" (REPLACE -1 :HIDE? T) (("2" (INST -1 "x!3") (("2" (GRIND) (("2" (TYPEPRED "F!1(x!2)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "LAMBDA (x: X): choose(y!1(x))") (("1" (EXPAND "EquivClass") (("1" (EXPAND "FunExtension") (("1" (APPLY-EXTENSIONALITY :HIDE? T) (("1" (IFF) (("1" (PROP) (("1" (SKOSIMP) (("1" (NAME-REPLACE "ch" "choose(y!1(x!2))") (("1" (TYPEPRED "ch") (("1" (TYPEPRED "y!1(x!2)") (("1" (SKOSIMP) (("1" (INST -3 "x!2") (("1" (REPLACE -1 :HIDE? T) (("1" (EXPAND "EquivClass") (("1" (TYPEPRED "F!1(x!2)") (("1" (GRIND :IF-MATCH NIL) (("1" (HIDE -1) (("1" (INST -1 "x!3" "ch") (("1" (ASSERT) (("1" (HIDE -3) (("1" (INST -2 "ch" "x!3" "x!1(x!2)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (TYPEPRED "y!1(x!2)") (("2" (SKOSIMP) (("2" (INST -2 "x!2") (("2" (NAME-REPLACE "ch" "choose(y!1(x!2))") (("2" (TYPEPRED "ch") (("2" (REPLACE -2 :HIDE? T) (("2" (EXPAND "EquivClass") (("2" (TYPEPRED "F!1(x!2)") (("2" (GRIND :IF-MATCH NIL) (("2" (HIDE -1 -2) (("2" (INST -1 "x!3" "ch" "x!1(x!2)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (GRIND) (("2" (TYPEPRED "y!1(x!1)") (("2" (SKOSIMP) (("2" (REPLACE -1 :HIDE? T) (("2" (INST -1 "x!2") (("2" (GRIND) (("2" (TYPEPRED "F!1(x!1)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (GRIND) (("2" (TYPEPRED "y!1(x!1)") (("2" (SKOSIMP) (("2" (REPLACE -1 :HIDE? T) (("2" (INST -1 "x!2") (("2" (GRIND) (("2" (TYPEPRED "F!1(x!1)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|FunExtensionPreservesEq| FORMULA-DECL NIL |QuotientDistributive| NIL) (X FORMAL-TYPE-DECL NIL |QuotientDistributive| NIL) (Y FORMAL-TYPE-DECL NIL |QuotientDistributive| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|equivalence?| CONST-DECL "bool" |relations| NIL) (|equivalence| TYPE-EQ-DECL NIL |relations| NIL) NIL NIL (|surjective?| CONST-DECL "bool" |functions| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (|lift| CONST-DECL "Y" |QuotientExtensionProperties| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (|equivalence_restrict| APPLICATION-JUDGEMENT "(equivalence?[S])" |restrict_order_props| NIL) (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |sets_lemmas| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|EquivalenceKernel| CONST-DECL "equivalence[X1]" |KernelDefinition| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|choose| CONST-DECL "(p)" |sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|reflexive?| CONST-DECL "bool" |relations| NIL) (|symmetric?| CONST-DECL "bool" |relations| NIL) (|transitive?| CONST-DECL "bool" |relations| NIL) (|restrict_full| FORMULA-DECL NIL |restrict_props| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|PreservesEq| CONST-DECL "bool" |KernelDefinition| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|quotient_map| CONST-DECL "Quotient(S)" |QuotientDefinition| NIL) (|rep| CONST-DECL "T" |QuotientDefinition| NIL) (|Quotient| TYPE-EQ-DECL NIL |QuotientDefinition| NIL) (|FunExtension| CONST-DECL "equivalence[[X -> Y]]" |QuotientDistributive| NIL) (|EquivClass| CONST-DECL "set[T]" |QuotientDefinition| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL)) SHOSTAK) (|FunQuotientDistributive-2| "Fix for 3.2" 3307985259 ("" (SKOSIMP) (("" (LEMMA "FunExtensionPreservesEq") (("" (EXPAND "bijective?") (("" (INST -1 "F!1") (("" (PROP) (("1" (EXPAND "injective?") (("1" (SKOLEM-TYPEPRED) (("1" (SKOSIMP*) (("1" (REPLACE -1 :HIDE? T) (("1" (REPLACE -1 :HIDE? T) (("1" (EXPAND "EquivClass") (("1" (APPLY-EXTENSIONALITY :HIDE? T) (("1" (EXPAND "FunExtension" 1) (("1" (EXPAND "lift") (("1" (DECOMPOSE-EQUALITY) (("1" (IFF) (("1" (PROP) (("1" (SKOSIMP*) (("1" (INST -1 "x!4") (("1" (INST -2 "x!4") (("1" (EXPAND "quotient_map" -2) (("1" (EXPAND "EquivClass" -2) (("1" (DECOMPOSE-EQUALITY) (("1" (INST -1 "x!1(x!4)") (("1" (EXPAND "rep") (("1" (EXPAND "FunExtension") (("1" (EXPAND "PreservesEq") (("1" (EXPAND "subset?") (("1" (EXPAND "member") (("1" (EXPAND "EquivalenceKernel") (("1" (REWRITE "restrict_full[[[X -> Y], [X -> Y]], bool]") (("1" (EXPAND "quotient_map") (("1" (EXPAND "EquivClass") (("1" (NAME-REPLACE "ch1" "choose({z: [X -> Y] | FORALL (x: X): F!1(x)(x!1(x), z(x))})") (("1" (NAME-REPLACE "ch2" "choose({z: [X -> Y] | FORALL (x: X): F!1(x)(x!2(x), z(x))})") (("1" (INST -3 "(ch1, ch2)") (("1" (PROP) (("1" (DECOMPOSE-EQUALITY) (("1" (INST -1 "x!4") (("1" (DECOMPOSE-EQUALITY) (("1" (TYPEPRED "ch1") (("1" (TYPEPRED "ch2") (("1" (INST -1 "x!4") (("1" (INST -2 "x!4") (("1" (INST -3 "x!2(x!4)") (("1" (TYPEPRED "F!1(x!4)") (("1" (EXPAND "equivalence?") (("1" (FLATTEN) (("1" (HIDE -1) (("1" (EXPAND "symmetric?") (("1" (EXPAND "transitive?") (("1" (ASSERT) (("1" (INST-CP -1 "x!2(x!4)" "ch2(x!4)") (("1" (ASSERT) (("1" (REPLACE -2) (("1" (HIDE -2) (("1" (INST -1 "x!1(x!4)" "ch1(x!4)") (("1" (ASSERT) (("1" (REPLACE -1) (("1" (HIDE -1 -4 -5) (("1" (INST-CP -1 "x!2(x!4)" "ch2(x!4)" "x!1(x!4)") (("1" (ASSERT) (("1" (HIDE -3 -4) (("1" (INST -1 "x!2(x!4)" "x!1(x!4)" "x!3(x!4)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "EquivClass") (("2" (INST?) NIL NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (EXPAND "EquivClass") (("3" (INST?) NIL NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (EXPAND "EquivClass") (("4" (INST?) NIL NIL)) NIL)) NIL) ("5" (HIDE-ALL-BUT 1) (("5" (EXPAND "EquivClass") (("5" (INST?) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "ch1" "ch2") (("2" (HIDE 1) (("2" (INST -1 "x!4") (("2" (INST -2 "x!4") (("2" (TYPEPRED "F!1(x!4)") (("2" (EXPAND "equivalence?") (("2" (FLATTEN) (("2" (HIDE -1) (("2" (EXPAND "symmetric?") (("2" (EXPAND "transitive?") (("2" (INST -1 "x!1(x!4)" "ch1(x!4)") (("2" (ASSERT) (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (HIDE -2) (("2" (INST-CP -1 "x!2(x!4)" "ch2(x!4)" "x!1(x!4)") (("2" (ASSERT) (("2" (HIDE -3 -4) (("2" (INST -1 "x!2(x!4)" "x!1(x!4)" "x!3(x!4)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3 2) (("2" (EXPAND "nonempty?") (("2" (EXPAND "empty?") (("2" (INST -1 "x!2") (("2" (EXPAND "member") (("2" (SKOSIMP) (("2" (TYPEPRED "F!1(x!5)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3 2) (("2" (EXPAND "nonempty?") (("2" (EXPAND "empty?") (("2" (INST -1 "x!1") (("2" (EXPAND "member") (("2" (SKOSIMP) (("2" (TYPEPRED "F!1(x!5)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND :IF-MATCH NIL) (("2" (EXPAND "EquivClass" 1) (("2" (EXPAND "FunExtension" 1) (("2" (INST 1 "x!2") NIL NIL)) NIL)) NIL)) NIL) ("3" (INST 1 "x!1") (("3" (APPLY-EXTENSIONALITY :HIDE? T) (("3" (EXPAND "FunExtension") (("3" (EXPAND "EquivClass") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (INST -1 "x!4") (("2" (INST -2 "x!4") (("2" (EXPAND "quotient_map") (("2" (EXPAND "EquivClass") (("2" (DECOMPOSE-EQUALITY) (("1" (EXPAND "PreservesEq") (("1" (EXPAND "subset?") (("1" (EXPAND "member") (("1" (EXPAND "FunExtension") (("1" (REWRITE "restrict_full[[[X -> Y], [X -> Y]], bool]") (("1" (EXPAND "EquivalenceKernel") (("1" (EXPAND "rep") (("1" (NAME-REPLACE "ch1" "choose({z: [X -> Y] | FORALL (x: X): F!1(x)(x!1(x), z(x))})") (("1" (NAME-REPLACE "ch2" "choose({z: [X -> Y] | FORALL (x: X): F!1(x)(x!2(x), z(x))})") (("1" (INST -3 "(ch1, ch2)") (("1" (TYPEPRED "ch1" "ch2") (("1" (HIDE -5) (("1" (INST -1 "x!4") (("1" (INST -2 "x!4") (("1" (INST -3 "ch1(x!4)") (("1" (TYPEPRED "F!1(x!4)") (("1" (EXPAND "equivalence?") (("1" (FLATTEN) (("1" (EXPAND "reflexive?") (("1" (INST -1 "ch1(x!4)") (("1" (ASSERT) (("1" (HIDE -1) (("1" (EXPAND "symmetric?") (("1" (EXPAND "transitive?") (("1" (INST-CP -1 "ch2(x!4)" "ch1(x!4)") (("1" (ASSERT) (("1" (HIDE -6) (("1" (INST -1 "x!2(x!4)" "ch2(x!4)") (("1" (ASSERT) (("1" (HIDE -5) (("1" (INST-CP -3 "x!1(x!4)" "ch1(x!4)" "ch2(x!4)") (("1" (ASSERT) (("1" (HIDE -5 -2) (("1" (INST-CP -2 "x!1(x!4)" "ch2(x!4)" "x!2(x!4)") (("1" (ASSERT) (("1" (HIDE -4 -1) (("1" (FORWARD-CHAIN -1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3 2) (("2" (GRIND) (("2" (TYPEPRED "F!1(x!5)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3 2) (("2" (GRIND) (("2" (TYPEPRED "F!1(x!5)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3 2) (("2" (GRIND :IF-MATCH NIL) (("2" (EXPAND "FunExtension") (("2" (EXPAND "EquivClass") (("2" (INST 1 "x!2") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST 1 "x!1") (("3" (APPLY-EXTENSIONALITY :HIDE? T) (("3" (EXPAND "FunExtension") (("3" (EXPAND "EquivClass") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "x!2") (("2" (APPLY-EXTENSIONALITY :HIDE? T) (("2" (EXPAND "FunExtension") (("2" (EXPAND "EquivClass") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST 1 "x!2") (("3" (APPLY-EXTENSIONALITY :HIDE? T) (("3" (EXPAND "FunExtension") (("3" (EXPAND "EquivClass") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (INST 1 "x!1") (("4" (APPLY-EXTENSIONALITY :HIDE? T) (("4" (EXPAND "EquivClass") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("5" (INST 1 "x!1") (("5" (APPLY-EXTENSIONALITY :HIDE? T) (("5" (EXPAND "EquivClass") (("5" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1) (("2" (EXPAND "surjective?") (("2" (SKOSIMP) (("2" (INST 1 "{ f : [X -> Y] | FORALL (x: X): (y!1(x))(f(x)) }") (("1" (EXPAND "lift") (("1" (APPLY-EXTENSIONALITY :HIDE? T) (("1" (EXPAND "quotient_map") (("1" (EXPAND "EquivClass") (("1" (APPLY-EXTENSIONALITY :HIDE? T) (("1" (EXPAND "rep") (("1" (NAME-REPLACE "ch" "choose({f: [X -> Y] | FORALL (x: X): y!1(x)(f(x))})") (("1" (TYPEPRED "ch") (("1" (TYPEPRED "F!1(x!1)") (("1" (INST -2 "x!1") (("1" (TYPEPRED "y!1(x!1)") (("1" (SKOSIMP) (("1" (EXPAND "EquivClass") (("1" (DECOMPOSE-EQUALITY) (("1" (INST-CP -1 "x!2") (("1" (INST -1 "ch(x!1)") (("1" (REPLACE -4) (("1" (REPLACE -2) (("1" (HIDE -2 -4) (("1" (IFF) (("1" (EXPAND "equivalence?") (("1" (FLATTEN) (("1" (HIDE -2) (("1" (EXPAND "symmetric?") (("1" (EXPAND "transitive?") (("1" (PROP) (("1" (INST -4 "x!3" "ch(x!1)" "x!2") (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST -3 "x!3" "ch(x!1)") (("2" (ASSERT) (("2" (HIDE -2) (("2" (INST -3 "ch(x!1)" "x!3" "x!2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND :IF-MATCH NIL) (("2" (INST -1 "LAMBDA (x: X): choose(y!1(x))") (("1" (SKOSIMP) (("1" (TYPEPRED "y!1(x!3)") (("1" (SKOSIMP) (("1" (EXPAND "EquivClass") (("1" (REPLACE -1) (("1" (BETA) (("1" (NAME-REPLACE "ch" "choose({z: Y | F!1(x!3)(x!4, z)})") (("1" (TYPEPRED "ch") (("1" (PROPAX) NIL NIL)) NIL) ("2" (INST -1 "x!4") (("2" (HIDE -1 2) (("2" (TYPEPRED "F!1(x!3)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (TYPEPRED "y!1(x!3)") (("2" (SKOSIMP) (("2" (EXPAND "EquivClass") (("2" (DECOMPOSE-EQUALITY) (("2" (INST -1 "x!4") (("2" (INST -2 "x!4") (("2" (REPLACE -1 :HIDE? T) (("2" (TYPEPRED "F!1(x!3)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (EXPAND "EquivClass") (("2" (EXPAND "FunExtension") (("2" (INST 1 "LAMBDA (x: X): choose(y!1(x))") (("1" (APPLY-EXTENSIONALITY :HIDE? T) (("1" (IFF) (("1" (PROP) (("1" (SKOSIMP) (("1" (TYPEPRED "y!1(x!3)") (("1" (SKOSIMP) (("1" (EXPAND "EquivClass") (("1" (DECOMPOSE-EQUALITY) (("1" (NAME-REPLACE "ch" "choose(y!1(x!3))") (("1" (TYPEPRED "ch") (("1" (INST -3 "x!3") (("1" (INST-CP -2 "ch") (("1" (REPLACE -1) (("1" (INST -2 "x!2(x!3)") (("1" (REPLACE -4) (("1" (HIDE -1 -4) (("1" (TYPEPRED "F!1(x!3)") (("1" (EXPAND "equivalence?") (("1" (FLATTEN) (("1" (HIDE -1) (("1" (EXPAND "symmetric?") (("1" (EXPAND "transitive?") (("1" (INST -1 "x!4" "ch") (("1" (ASSERT) (("1" (HIDE -4) (("1" (INST -2 "ch" "x!4" "x!2(x!3)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (INST -1 "x!3") (("2" (TYPEPRED "y!1(x!3)") (("2" (SKOSIMP) (("2" (REPLACE -1 :HIDE? T) (("2" (EXPAND "EquivClass") (("2" (NAME-REPLACE "ch" "choose({z: Y | F!1(x!3)(x!4, z)})") (("1" (TYPEPRED "ch") (("1" (TYPEPRED "F!1(x!3)") (("1" (EXPAND "equivalence?") (("1" (FLATTEN) (("1" (HIDE -1 -2) (("1" (EXPAND "transitive?") (("1" (INST -1 "x!4" "ch" "x!2(x!3)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (GRIND) (("2" (TYPEPRED "F!1(x!3)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (GRIND) (("2" (TYPEPRED "y!1(x!2)") (("2" (SKOSIMP) (("2" (REPLACE -1 :HIDE? T) (("2" (INST -1 "x!3") (("2" (GRIND) (("2" (TYPEPRED "F!1(x!2)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (GRIND) (("2" (TYPEPRED "y!1(x!2)") (("2" (SKOSIMP) (("2" (REPLACE -1 :HIDE? T) (("2" (INST -1 "x!3") (("2" (GRIND) (("2" (TYPEPRED "F!1(x!2)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (INST 1 "LAMBDA (x: X): choose(y!1(x))") (("1" (APPLY-EXTENSIONALITY :HIDE? T) (("1" (IFF) (("1" (EXPAND "EquivClass") (("1" (EXPAND "FunExtension") (("1" (PROP) (("1" (SKOSIMP) (("1" (NAME-REPLACE "ch" "choose(y!1(x!3))") (("1" (TYPEPRED "ch") (("1" (INST -2 "x!3") (("1" (TYPEPRED "y!1(x!3)") (("1" (SKOSIMP) (("1" (REPLACE -1 :HIDE? T) (("1" (EXPAND "EquivClass") (("1" (TYPEPRED "F!1(x!3)") (("1" (GRIND :IF-MATCH NIL) (("1" (HIDE -1) (("1" (INST -1 "x!4" "ch") (("1" (ASSERT) (("1" (HIDE -3) (("1" (INST -2 "ch" "x!4" "x!2(x!3)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (TYPEPRED "y!1(x!3)") (("2" (SKOSIMP) (("2" (INST -2 "x!3") (("2" (REPLACE -1 :HIDE? T) (("2" (EXPAND "EquivClass") (("2" (NAME-REPLACE "ch" "choose({z: Y | F!1(x!3)(x!4, z)})") (("1" (TYPEPRED "ch") (("1" (TYPEPRED "F!1(x!3)") (("1" (GRIND :IF-MATCH NIL) (("1" (HIDE -1 -2) (("1" (INST -1 "x!4" "ch" "x!2(x!3)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (GRIND) (("2" (TYPEPRED "F!1(x!3)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (GRIND) (("2" (TYPEPRED "y!1(x!2)") (("2" (SKOSIMP) (("2" (REPLACE -1 :HIDE? T) (("2" (INST -1 "x!3") (("2" (GRIND) (("2" (TYPEPRED "F!1(x!2)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (GRIND) (("2" (TYPEPRED "y!1(x!2)") (("2" (SKOSIMP) (("2" (REPLACE -1 :HIDE? T) (("2" (INST -1 "x!3") (("2" (GRIND) (("2" (TYPEPRED "F!1(x!2)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "LAMBDA (x: X): choose(y!1(x))") (("1" (EXPAND "EquivClass") (("1" (EXPAND "FunExtension") (("1" (APPLY-EXTENSIONALITY :HIDE? T) (("1" (IFF) (("1" (PROP) (("1" (SKOSIMP) (("1" (NAME-REPLACE "ch" "choose(y!1(x!2))") (("1" (TYPEPRED "ch") (("1" (TYPEPRED "y!1(x!2)") (("1" (SKOSIMP) (("1" (INST -3 "x!2") (("1" (REPLACE -1 :HIDE? T) (("1" (EXPAND "EquivClass") (("1" (TYPEPRED "F!1(x!2)") (("1" (GRIND :IF-MATCH NIL) (("1" (HIDE -1) (("1" (INST -1 "x!3" "ch") (("1" (ASSERT) (("1" (HIDE -3) (("1" (INST -2 "ch" "x!3" "x!1(x!2)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (TYPEPRED "y!1(x!2)") (("2" (SKOSIMP) (("2" (INST -2 "x!2") (("2" (NAME-REPLACE "ch" "choose(y!1(x!2))") (("2" (TYPEPRED "ch") (("2" (REPLACE -2 :HIDE? T) (("2" (EXPAND "EquivClass") (("2" (TYPEPRED "F!1(x!2)") (("2" (GRIND :IF-MATCH NIL) (("2" (HIDE -1 -2) (("2" (INST -1 "x!3" "ch" "x!1(x!2)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (GRIND) (("2" (TYPEPRED "y!1(x!1)") (("2" (SKOSIMP) (("2" (REPLACE -1 :HIDE? T) (("2" (INST -1 "x!2") (("2" (GRIND) (("2" (TYPEPRED "F!1(x!1)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (GRIND) (("2" (TYPEPRED "y!1(x!1)") (("2" (SKOSIMP) (("2" (REPLACE -1 :HIDE? T) (("2" (INST -1 "x!2") (("2" (GRIND) (("2" (TYPEPRED "F!1(x!1)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|FunQuotientDistributive-1| |nil| 3245195217 ("" (SKOSIMP) (("" (LEMMA "FunExtensionPreservesEq") (("" (EXPAND "bijective?") (("" (INST -1 "F!1") (("" (PROP) (("1" (EXPAND "injective?") (("1" (SKOLEM-TYPEPRED) (("1" (SKOSIMP*) (("1" (REPLACE -1 :HIDE? T) (("1" (REPLACE -1 :HIDE? T) (("1" (EXPAND "EquivClass") (("1" (APPLY-EXTENSIONALITY :HIDE? T) (("1" (EXPAND "FunExtension" 1) (("1" (EXPAND "lift") (("1" (DECOMPOSE-EQUALITY) (("1" (IFF) (("1" (PROP) (("1" (SKOSIMP*) (("1" (INST -1 "x!4") (("1" (INST -2 "x!4") (("1" (EXPAND "quotient_map" -2) (("1" (EXPAND "EquivClass" -2) (("1" (DECOMPOSE-EQUALITY) (("1" (INST -1 "x!1(x!4)") (("1" (EXPAND "rep") (("1" (EXPAND "FunExtension") (("1" (EXPAND "PreservesEq") (("1" (EXPAND "subset?") (("1" (EXPAND "member") (("1" (EXPAND "EquivalenceKernel") (("1" (REWRITE "restrict_full[[[X -> Y], [X -> Y]], bool]") (("1" (EXPAND "quotient_map") (("1" (EXPAND "EquivClass") (("1" (NAME-REPLACE "ch1" "choose({z: [X -> Y] | FORALL (x: X): F!1(x)(x!1(x), z(x))})") (("1" (NAME-REPLACE "ch2" "choose({z: [X -> Y] | FORALL (x: X): F!1(x)(x!2(x), z(x))})") (("1" (INST -3 "(ch1, ch2)") (("1" (PROP) (("1" (DECOMPOSE-EQUALITY) (("1" (INST -1 "x!4") (("1" (DECOMPOSE-EQUALITY) (("1" (TYPEPRED "ch1") (("1" (TYPEPRED "ch2") (("1" (INST -1 "x!4") (("1" (INST -2 "x!4") (("1" (INST -3 "x!2(x!4)") (("1" (TYPEPRED "F!1(x!4)") (("1" (EXPAND "equivalence?") (("1" (FLATTEN) (("1" (HIDE -1) (("1" (EXPAND "symmetric?") (("1" (EXPAND "transitive?") (("1" (ASSERT) (("1" (INST-CP -1 "x!2(x!4)" "ch2(x!4)") (("1" (ASSERT) (("1" (REPLACE -2) (("1" (HIDE -2) (("1" (INST -1 "x!1(x!4)" "ch1(x!4)") (("1" (ASSERT) (("1" (REPLACE -1) (("1" (HIDE -1 -4 -5) (("1" (INST-CP -1 "x!2(x!4)" "ch2(x!4)" "x!1(x!4)") (("1" (ASSERT) (("1" (HIDE -3 -4) (("1" (INST -1 "x!2(x!4)" "x!1(x!4)" "x!3(x!4)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "ch1" "ch2") (("2" (HIDE 1) (("2" (INST -1 "x!4") (("2" (INST -2 "x!4") (("2" (TYPEPRED "F!1(x!4)") (("2" (EXPAND "equivalence?") (("2" (FLATTEN) (("2" (HIDE -1) (("2" (EXPAND "symmetric?") (("2" (EXPAND "transitive?") (("2" (INST -1 "x!1(x!4)" "ch1(x!4)") (("2" (ASSERT) (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (HIDE -2) (("2" (INST-CP -1 "x!2(x!4)" "ch2(x!4)" "x!1(x!4)") (("2" (ASSERT) (("2" (HIDE -3 -4) (("2" (INST -1 "x!2(x!4)" "x!1(x!4)" "x!3(x!4)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3 2) (("2" (EXPAND "nonempty?") (("2" (EXPAND "empty?") (("2" (INST -1 "x!2") (("2" (EXPAND "member") (("2" (SKOSIMP) (("2" (TYPEPRED "F!1(x!5)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3 2) (("2" (EXPAND "nonempty?") (("2" (EXPAND "empty?") (("2" (INST -1 "x!1") (("2" (EXPAND "member") (("2" (SKOSIMP) (("2" (TYPEPRED "F!1(x!5)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND :IF-MATCH NIL) (("2" (EXPAND "EquivClass" 1) (("2" (EXPAND "FunExtension" 1) (("2" (INST 1 "x!2") NIL NIL)) NIL)) NIL)) NIL) ("3" (INST 1 "x!1") (("3" (APPLY-EXTENSIONALITY :HIDE? T) (("3" (EXPAND "FunExtension") (("3" (EXPAND "EquivClass") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (INST -1 "x!4") (("2" (INST -2 "x!4") (("2" (EXPAND "quotient_map") (("2" (EXPAND "EquivClass") (("2" (DECOMPOSE-EQUALITY) (("1" (EXPAND "PreservesEq") (("1" (EXPAND "subset?") (("1" (EXPAND "member") (("1" (EXPAND "FunExtension") (("1" (REWRITE "restrict_full[[[X -> Y], [X -> Y]], bool]") (("1" (EXPAND "EquivalenceKernel") (("1" (EXPAND "rep") (("1" (NAME-REPLACE "ch1" "choose({z: [X -> Y] | FORALL (x: X): F!1(x)(x!1(x), z(x))})") (("1" (NAME-REPLACE "ch2" "choose({z: [X -> Y] | FORALL (x: X): F!1(x)(x!2(x), z(x))})") (("1" (INST -3 "(ch1, ch2)") (("1" (TYPEPRED "ch1" "ch2") (("1" (HIDE -5) (("1" (INST -1 "x!4") (("1" (INST -2 "x!4") (("1" (INST -3 "ch1(x!4)") (("1" (TYPEPRED "F!1(x!4)") (("1" (EXPAND "equivalence?") (("1" (FLATTEN) (("1" (EXPAND "reflexive?") (("1" (INST -1 "ch1(x!4)") (("1" (ASSERT) (("1" (HIDE -1) (("1" (EXPAND "symmetric?") (("1" (EXPAND "transitive?") (("1" (INST-CP -1 "ch2(x!4)" "ch1(x!4)") (("1" (ASSERT) (("1" (HIDE -6) (("1" (INST -1 "x!2(x!4)" "ch2(x!4)") (("1" (ASSERT) (("1" (HIDE -5) (("1" (INST-CP -3 "x!1(x!4)" "ch1(x!4)" "ch2(x!4)") (("1" (ASSERT) (("1" (HIDE -5 -2) (("1" (INST-CP -2 "x!1(x!4)" "ch2(x!4)" "x!2(x!4)") (("1" (ASSERT) (("1" (HIDE -4 -1) (("1" (FORWARD-CHAIN -1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3 2) (("2" (GRIND) (("2" (TYPEPRED "F!1(x!5)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3 2) (("2" (GRIND) (("2" (TYPEPRED "F!1(x!5)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3 2) (("2" (GRIND :IF-MATCH NIL) (("2" (EXPAND "FunExtension") (("2" (EXPAND "EquivClass") (("2" (INST 1 "x!2") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST 1 "x!1") (("3" (APPLY-EXTENSIONALITY :HIDE? T) (("3" (EXPAND "FunExtension") (("3" (EXPAND "EquivClass") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "x!2") (("2" (APPLY-EXTENSIONALITY :HIDE? T) (("2" (EXPAND "FunExtension") (("2" (EXPAND "EquivClass") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST 1 "x!2") (("3" (APPLY-EXTENSIONALITY :HIDE? T) (("3" (EXPAND "FunExtension") (("3" (EXPAND "EquivClass") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (INST 1 "x!1") (("4" (APPLY-EXTENSIONALITY :HIDE? T) (("4" (EXPAND "EquivClass") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("5" (INST 1 "x!1") (("5" (APPLY-EXTENSIONALITY :HIDE? T) (("5" (EXPAND "EquivClass") (("5" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1) (("2" (EXPAND "surjective?") (("2" (SKOSIMP) (("2" (INST 1 "{ f : [X -> Y] | FORALL (x: X): (y!1(x))(f(x)) }") (("1" (EXPAND "lift") (("1" (APPLY-EXTENSIONALITY :HIDE? T) (("1" (EXPAND "quotient_map") (("1" (EXPAND "EquivClass") (("1" (APPLY-EXTENSIONALITY :HIDE? T) (("1" (EXPAND "rep") (("1" (NAME-REPLACE "ch" "choose({f: [X -> Y] | FORALL (x: X): y!1(x)(f(x))})") (("1" (TYPEPRED "ch") (("1" (TYPEPRED "F!1(x!1)") (("1" (INST -2 "x!1") (("1" (TYPEPRED "y!1(x!1)") (("1" (SKOSIMP) (("1" (EXPAND "EquivClass") (("1" (DECOMPOSE-EQUALITY) (("1" (INST-CP -1 "x!2") (("1" (INST -1 "ch(x!1)") (("1" (REPLACE -4) (("1" (REPLACE -2) (("1" (HIDE -2 -4) (("1" (IFF) (("1" (EXPAND "equivalence?") (("1" (FLATTEN) (("1" (HIDE -2) (("1" (EXPAND "symmetric?") (("1" (EXPAND "transitive?") (("1" (PROP) (("1" (INST -4 "x!3" "ch(x!1)" "x!2") (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST -3 "x!3" "ch(x!1)") (("2" (ASSERT) (("2" (HIDE -2) (("2" (INST -3 "ch(x!1)" "x!3" "x!2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND :IF-MATCH NIL) (("2" (INST -1 "LAMBDA (x: X): choose(y!1(x))") (("1" (SKOSIMP) (("1" (TYPEPRED "y!1(x!3)") (("1" (SKOSIMP) (("1" (EXPAND "EquivClass") (("1" (REPLACE -1) (("1" (BETA) (("1" (NAME-REPLACE "ch" "choose({z: Y | F!1(x!3)(x!4, z)})") (("1" (TYPEPRED "ch") (("1" (PROPAX) NIL NIL)) NIL) ("2" (INST -1 "x!4") (("2" (HIDE -1 2) (("2" (TYPEPRED "F!1(x!3)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (TYPEPRED "y!1(x!3)") (("2" (SKOSIMP) (("2" (EXPAND "EquivClass") (("2" (DECOMPOSE-EQUALITY) (("2" (INST -1 "x!4") (("2" (INST -2 "x!4") (("2" (REPLACE -1 :HIDE? T) (("2" (TYPEPRED "F!1(x!3)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (EXPAND "EquivClass") (("2" (EXPAND "FunExtension") (("2" (INST 1 "LAMBDA (x: X): choose(y!1(x))") (("1" (APPLY-EXTENSIONALITY :HIDE? T) (("1" (IFF) (("1" (PROP) (("1" (SKOSIMP) (("1" (TYPEPRED "y!1(x!3)") (("1" (SKOSIMP) (("1" (EXPAND "EquivClass") (("1" (DECOMPOSE-EQUALITY) (("1" (NAME-REPLACE "ch" "choose(y!1(x!3))") (("1" (TYPEPRED "ch") (("1" (INST -3 "x!3") (("1" (INST-CP -2 "ch") (("1" (REPLACE -1) (("1" (INST -2 "x!2(x!3)") (("1" (REPLACE -4) (("1" (HIDE -1 -4) (("1" (TYPEPRED "F!1(x!3)") (("1" (EXPAND "equivalence?") (("1" (FLATTEN) (("1" (HIDE -1) (("1" (EXPAND "symmetric?") (("1" (EXPAND "transitive?") (("1" (INST -1 "x!4" "ch") (("1" (ASSERT) (("1" (HIDE -4) (("1" (INST -2 "ch" "x!4" "x!2(x!3)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 2) (("2" (GRIND) (("2" (TYPEPRED "y!1(x!3)") (("2" (SKOSIMP) (("2" (EXPAND "EquivClass") (("2" (DECOMPOSE-EQUALITY) (("2" (INST -1 "x!5") (("2" (INST -2 "x!5") (("2" (REPLACE 1) (("2" (ASSERT) (("2" (HIDE 2) (("2" (TYPEPRED "F!1(x!3)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (INST -1 "x!3") (("2" (TYPEPRED "y!1(x!3)") (("2" (SKOSIMP) (("2" (REPLACE -1 :HIDE? T) (("2" (EXPAND "EquivClass") (("2" (NAME-REPLACE "ch" "choose({z: Y | F!1(x!3)(x!4, z)})") (("1" (TYPEPRED "ch") (("1" (TYPEPRED "F!1(x!3)") (("1" (EXPAND "equivalence?") (("1" (FLATTEN) (("1" (HIDE -1 -2) (("1" (EXPAND "transitive?") (("1" (INST -1 "x!4" "ch" "x!2(x!3)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (GRIND) (("2" (TYPEPRED "F!1(x!3)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (GRIND) (("2" (TYPEPRED "y!1(x!2)") (("2" (SKOSIMP) (("2" (REPLACE -1 :HIDE? T) (("2" (INST -1 "x!3") (("2" (GRIND) (("2" (TYPEPRED "F!1(x!2)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (GRIND) (("2" (TYPEPRED "y!1(x!2)") (("2" (SKOSIMP) (("2" (REPLACE -1 :HIDE? T) (("2" (INST -1 "x!3") (("2" (GRIND) (("2" (TYPEPRED "F!1(x!2)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (INST 1 "LAMBDA (x: X): choose(y!1(x))") (("1" (APPLY-EXTENSIONALITY :HIDE? T) (("1" (IFF) (("1" (EXPAND "EquivClass") (("1" (EXPAND "FunExtension") (("1" (PROP) (("1" (SKOSIMP) (("1" (NAME-REPLACE "ch" "choose(y!1(x!3))") (("1" (TYPEPRED "ch") (("1" (INST -2 "x!3") (("1" (TYPEPRED "y!1(x!3)") (("1" (SKOSIMP) (("1" (REPLACE -1 :HIDE? T) (("1" (EXPAND "EquivClass") (("1" (TYPEPRED "F!1(x!3)") (("1" (GRIND :IF-MATCH NIL) (("1" (HIDE -1) (("1" (INST -1 "x!4" "ch") (("1" (ASSERT) (("1" (HIDE -3) (("1" (INST -2 "ch" "x!4" "x!2(x!3)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (GRIND) (("2" (TYPEPRED "y!1(x!3)") (("2" (SKOSIMP) (("2" (REPLACE -1 :HIDE? T) (("2" (INST -1 "x!4") (("2" (GRIND) (("2" (TYPEPRED "F!1(x!3)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (TYPEPRED "y!1(x!3)") (("2" (SKOSIMP) (("2" (INST -2 "x!3") (("2" (REPLACE -1 :HIDE? T) (("2" (EXPAND "EquivClass") (("2" (NAME-REPLACE "ch" "choose({z: Y | F!1(x!3)(x!4, z)})") (("1" (TYPEPRED "ch") (("1" (TYPEPRED "F!1(x!3)") (("1" (GRIND :IF-MATCH NIL) (("1" (HIDE -1 -2) (("1" (INST -1 "x!4" "ch" "x!2(x!3)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (GRIND) (("2" (TYPEPRED "F!1(x!3)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (GRIND) (("2" (TYPEPRED "y!1(x!2)") (("2" (SKOSIMP) (("2" (REPLACE -1 :HIDE? T) (("2" (INST -1 "x!3") (("2" (GRIND) (("2" (TYPEPRED "F!1(x!2)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (GRIND) (("2" (TYPEPRED "y!1(x!2)") (("2" (SKOSIMP) (("2" (REPLACE -1 :HIDE? T) (("2" (INST -1 "x!3") (("2" (GRIND) (("2" (TYPEPRED "F!1(x!2)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "LAMBDA (x: X): choose(y!1(x))") (("1" (EXPAND "EquivClass") (("1" (EXPAND "FunExtension") (("1" (APPLY-EXTENSIONALITY :HIDE? T) (("1" (IFF) (("1" (PROP) (("1" (SKOSIMP) (("1" (NAME-REPLACE "ch" "choose(y!1(x!2))") (("1" (TYPEPRED "ch") (("1" (TYPEPRED "y!1(x!2)") (("1" (SKOSIMP) (("1" (INST -3 "x!2") (("1" (REPLACE -1 :HIDE? T) (("1" (EXPAND "EquivClass") (("1" (TYPEPRED "F!1(x!2)") (("1" (GRIND :IF-MATCH NIL) (("1" (HIDE -1) (("1" (INST -1 "x!3" "ch") (("1" (ASSERT) (("1" (HIDE -3) (("1" (INST -2 "ch" "x!3" "x!1(x!2)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (GRIND) (("2" (TYPEPRED "y!1(x!2)") (("2" (SKOSIMP) (("2" (REPLACE -1 :HIDE? T) (("2" (INST -1 "x!3") (("2" (GRIND) (("2" (TYPEPRED "F!1(x!2)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (TYPEPRED "y!1(x!2)") (("2" (SKOSIMP) (("2" (INST -2 "x!2") (("2" (NAME-REPLACE "ch" "choose(y!1(x!2))") (("1" (TYPEPRED "ch") (("1" (REPLACE -2 :HIDE? T) (("1" (EXPAND "EquivClass") (("1" (TYPEPRED "F!1(x!2)") (("1" (GRIND :IF-MATCH NIL) (("1" (HIDE -1 -2) (("1" (INST -1 "x!3" "ch" "x!1(x!2)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 2) (("2" (GRIND) (("2" (TYPEPRED "y!1(x!2)") (("2" (SKOSIMP) (("2" (REPLACE -1 :HIDE? T) (("2" (INST -1 "x!4") (("2" (GRIND) (("2" (TYPEPRED "F!1(x!2)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (GRIND) (("2" (TYPEPRED "y!1(x!1)") (("2" (SKOSIMP) (("2" (REPLACE -1 :HIDE? T) (("2" (INST -1 "x!2") (("2" (GRIND) (("2" (TYPEPRED "F!1(x!1)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (GRIND) (("2" (TYPEPRED "y!1(x!1)") (("2" (SKOSIMP) (("2" (REPLACE -1 :HIDE? T) (("2" (INST -1 "x!2") (("2" (GRIND) (("2" (TYPEPRED "F!1(x!1)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)))(|QuotientIteration| (|action_TCC1| 0 (|action_TCC1-1| |nil| 3243015883 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (X FORMAL-TYPE-DECL NIL |QuotientIteration| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|equivalence?| CONST-DECL "bool" |relations| NIL) (|equivalence| TYPE-EQ-DECL NIL |relations| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|EquivClass| CONST-DECL "set[T]" |QuotientDefinition| NIL) (|Quotient| TYPE-EQ-DECL NIL |QuotientDefinition| NIL) NIL NIL (|transitive?| CONST-DECL "bool" |relations| NIL) (|symmetric?| CONST-DECL "bool" |relations| NIL) (|reflexive?| CONST-DECL "bool" |relations| NIL)) NIL (|action| SUBTYPE "QuotientDefinition[QuotientIteration.X].EquivClass(QuotientIteration.S)(QuotientIteration.x)" "Quotient[QuotientIteration.X](QuotientIteration.S)"))) (|action_TCC2| 0 (|action_TCC2-1| |nil| 3243015883 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (X FORMAL-TYPE-DECL NIL |QuotientIteration| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|equivalence?| CONST-DECL "bool" |relations| NIL) (|equivalence| TYPE-EQ-DECL NIL |relations| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|EquivClass| CONST-DECL "set[T]" |QuotientDefinition| NIL) (|Quotient| TYPE-EQ-DECL NIL |QuotientDefinition| NIL) NIL NIL (|transitive?| CONST-DECL "bool" |relations| NIL) (|symmetric?| CONST-DECL "bool" |relations| NIL) (|reflexive?| CONST-DECL "bool" |relations| NIL)) NIL (|action| SUBTYPE "QuotientDefinition[QuotientIteration.X].EquivClass(QuotientIteration.S)(QuotientIteration.y)" "Quotient[QuotientIteration.X](QuotientIteration.S)"))) (|action_equivalence_is_equivalence| 0 (|action_equivalence_is_equivalence-1| |nil| 3243663397 ("" (SKOSIMP*) (("" (TYPEPRED "S!1" "R!1") (("" (EXPAND "equivalence?") (("" (FLATTEN) (("" (EXPAND "reflexive?") (("" (EXPAND "symmetric?") (("" (EXPAND "transitive?") (("" (EXPAND "action") (("" (PROP) (("1" (SKOSIMP*) (("1" (INST? -4) (("1" (INST 1 "x!1") NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST -6 "EquivClass(S!1)(x!1)" "EquivClass(S!1)(y!1)") (("1" (ASSERT) NIL NIL) ("2" (INST 1 "y!1") NIL NIL) ("3" (INST 1 "x!1") NIL NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (INST -8 "EquivClass(S!1)(x!1)" "EquivClass(S!1)(y!1)" "EquivClass(S!1)(z!1)") (("1" (ASSERT) NIL NIL) ("2" (INST 1 "z!1") NIL NIL) ("3" (INST 1 "y!1") NIL NIL) ("4" (INST 1 "x!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|Quotient| TYPE-EQ-DECL NIL |QuotientDefinition| NIL) (|EquivClass| CONST-DECL "set[T]" |QuotientDefinition| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|equivalence| TYPE-EQ-DECL NIL |relations| NIL) (|equivalence?| CONST-DECL "bool" |relations| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (X FORMAL-TYPE-DECL NIL |QuotientIteration| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|symmetric?| CONST-DECL "bool" |relations| NIL) (|action| CONST-DECL "bool" |QuotientIteration| NIL) (|transitive?| CONST-DECL "bool" |relations| NIL) (|reflexive?| CONST-DECL "bool" |relations| NIL)) SHOSTAK (|action_equivalence_is_equivalence| SUBTYPE "QuotientIteration.action(QuotientIteration.S)(QuotientIteration.R)" "equivalence[X]"))) (|QuotientAction_TCC1| 0 (|QuotientAction_TCC1-1| |nil| 3243015883 ("" (GRIND :EXCLUDE "rep" :IF-MATCH NIL) (("" (APPLY-EXTENSIONALITY :HIDE? T) (("" (LEMMA "PreservesEq_quotient_map[X, X]") (("" (INST?) (("" (EXPAND "PreservesEq") (("" (EXPAND "subset?") (("" (EXPAND "member") (("" (REWRITE "restrict_full[[X, X], bool]") (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|action| CONST-DECL "bool" |QuotientIteration| NIL) (|restrict_full| FORMULA-DECL NIL |restrict_props| NIL) (|PreservesEq_quotient_map| FORMULA-DECL NIL |QuotientKernelProperties| NIL) (|reflexive?| CONST-DECL "bool" |relations| NIL) (|symmetric?| CONST-DECL "bool" |relations| NIL) (|transitive?| CONST-DECL "bool" |relations| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (X FORMAL-TYPE-DECL NIL |QuotientIteration| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|equivalence?| CONST-DECL "bool" |relations| NIL) (|equivalence| TYPE-EQ-DECL NIL |relations| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|EquivClass| CONST-DECL "set[T]" |QuotientDefinition| NIL) (|Quotient| TYPE-EQ-DECL NIL |QuotientDefinition| NIL) (|action_equivalence_is_equivalence| APPLICATION-JUDGEMENT "equivalence[X]" |QuotientIteration| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|quotient_map| CONST-DECL "Quotient(S)" |QuotientDefinition| NIL) (|EquivalenceKernel| CONST-DECL "equivalence[X1]" |KernelDefinition| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|PreservesEq| CONST-DECL "bool" |KernelDefinition| NIL)) NIL (|QuotientAction| SUBTYPE "QuotientDefinition[QuotientIteration.X].quotient_map(QuotientIteration.action(QuotientIteration.S)(QuotientIteration.R))" "(KernelDefinition[QuotientIteration.X, QuotientIteration.X, Quotient[QuotientIteration.X](QuotientIteration.action(QuotientIteration.S)(QuotientIteration.R))].PreservesEq(QuotientIteration.S))"))) (|QuotientAction_TCC2| 0 (|QuotientAction_TCC2-1| |nil| 3243015883 ("" (SKOSIMP*) (("" (EXPAND "PreservesEq") (("" (EXPAND "subset?") (("" (EXPAND "member") (("" (EXPAND "EquivalenceKernel") (("" (EXPAND "quotient_map") (("" (REWRITE "restrict_full[[Quotient[X](S!1), Quotient[X](S!1)], bool]") (("" (REWRITE "restrict_full[[X, X], bool]") (("" (PROP) (("1" (SKOSIMP*) (("1" (ASSERT) NIL NIL)) NIL) ("2" (SKOSIMP*) (("2" (TYPEPRED "x!1`1" "x!1`2") (("2" (EXPAND "lift") (("2" (LEMMA "EquivClassEq[X]") (("2" (AUTO-REWRITE "EquivClassNonEmpty[X]") (("2" (SKOSIMP*) (("2" (REPLACE -2) (("2" (REPLACE -3) (("2" (INST?) (("1" (ASSERT) (("1" (HIDE 2) (("1" (EXPAND "action") (("1" (REWRITE "restrict_full[[X, X], bool]") (("1" (CASE "FORALL(x : X) :
                   EquivClass(S!1)(choose(EquivClass[X](S!1)(x))) = EquivClass(S!1)(x)") (("1" (INST-CP -1 "x!2") (("1" (EXPAND "rep") (("1" (REPLACE -2) (("1" (INST -1 "x!3") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3 2) (("2" (SKOSIMP*) (("2" (LEMMA "EquivClassEq[X]") (("2" (INST?) (("2" (ASSERT) (("2" (USE "EquivClassChoose[X]") (("2" (HIDE 2) (("2" (TYPEPRED "S!1") (("2" (EXPAND "equivalence?") (("2" (EXPAND "symmetric?") (("2" (FLATTEN) (("2" (EXPAND "repEC") (("2" (FORWARD-CHAIN -2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "restrict_full[[X, X], bool]") (("2" (INST 1 "x!3") NIL NIL)) NIL) ("3" (REWRITE "restrict_full[[X, X], bool]") (("3" (ASSERT) NIL NIL)) NIL) ("4" (REWRITE "restrict_full[[X, X], bool]") (("4" (INST 1 "x!2") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|PreservesEq| CONST-DECL "bool" |KernelDefinition| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|EquivalenceKernel| CONST-DECL "equivalence[X1]" |KernelDefinition| NIL) (|subset?| CONST-DECL "bool" |sets| NIL)) NIL (|QuotientAction| SUBTYPE "QuotientIteration.S" "{R: relations[QuotientIteration.X].equivalence | KernelDefinition[QuotientIteration.X, QuotientIteration.X, bool].PreservesEq(R)(LAMBDA (x: QuotientIteration.X): booleans.TRUE)}"))) (|QuotientAction_TCC3| 0 (|QuotientAction_TCC3-2| "Fix for 3.2" 3307986379 ("" (SKOSIMP*) (("" (EXPAND "PreservesEq") (("" (EXPAND "subset?") (("" (EXPAND "member") (("" (SKOSIMP*) (("" (REWRITE "restrict_full[[Quotient[X](S!1), Quotient[X](S!1)], bool]") (("" (EXPAND "EquivalenceKernel") (("" (EXPAND "quotient_map") (("" (TYPEPRED "x!1`1" "x!1`2") (("" (EXPAND "lift") (("" (LEMMA "EquivClassEq[X]") (("" (AUTO-REWRITE "EquivClassNonEmpty[X]") (("" (SKOSIMP*) (("" (REPLACE -2) (("" (REPLACE -3) (("" (INST?) (("" (ASSERT) (("" (HIDE 2) (("" (EXPAND "action") (("" (CASE "FORALL(x : X) :
                            EquivClass(S!1)(choose(EquivClass[X](S!1)(x))) = EquivClass(S!1)(x)") (("1" (INST-CP -1 "x!2") (("1" (EXPAND "rep") (("1" (REPLACE -2) (("1" (INST -1 "x!3") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3 2) (("2" (SKOSIMP*) (("2" (LEMMA "EquivClassEq[X]") (("2" (INST?) (("2" (ASSERT) (("2" (HIDE 2) (("2" (USE "rep_lemma[X]") (("2" (EXPAND "EquivClass") (("2" (EXPAND "rep") (("2" (TYPEPRED "S!1") (("2" (EXPAND "equivalence?") (("2" (FLATTEN) (("2" (EXPAND "symmetric?") (("2" (FORWARD-CHAIN -2) (("2" (EXPAND "nonempty?") (("2" (EXPAND "empty?") (("2" (EXPAND "member") (("2" (INST -1 "x!4") (("2" (EXPAND "reflexive?") (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|PreservesEq| CONST-DECL "bool" |KernelDefinition| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|restrict_full| FORMULA-DECL NIL |restrict_props| NIL) (X FORMAL-TYPE-DECL NIL |QuotientIteration| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|EquivClass| CONST-DECL "set[T]" |QuotientDefinition| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|equivalence?| CONST-DECL "bool" |relations| NIL) (|equivalence| TYPE-EQ-DECL NIL |relations| NIL) (|Quotient| TYPE-EQ-DECL NIL |QuotientDefinition| NIL) (|quotient_map| CONST-DECL "Quotient(S)" |QuotientDefinition| NIL) (|lift| CONST-DECL "Y" |QuotientExtensionProperties| NIL) (|action_equivalence_is_equivalence| APPLICATION-JUDGEMENT "equivalence[X]" |QuotientIteration| NIL) (|rep| CONST-DECL "T" |QuotientDefinition| NIL) (|action| CONST-DECL "bool" |QuotientIteration| NIL) (|choose| CONST-DECL "(p)" |sets| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) NIL NIL (|empty?| CONST-DECL "bool" |sets| NIL) (|reflexive?| CONST-DECL "bool" |relations| NIL) (|symmetric?| CONST-DECL "bool" |relations| NIL) (|rep_lemma| FORMULA-DECL NIL |QuotientDefinition| NIL) (|EquivClassEq| FORMULA-DECL NIL |QuotientDefinition| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|EquivalenceKernel| CONST-DECL "equivalence[X1]" |KernelDefinition| NIL) (|subset?| CONST-DECL "bool" |sets| NIL)) SHOSTAK (|QuotientAction| SUBTYPE "QuotientExtensionProperties[QuotientIteration.X, QuotientIteration.X, Quotient[QuotientIteration.X](QuotientIteration.action(QuotientIteration.S)(QuotientIteration.R))].lift(QuotientIteration.S)(QuotientDefinition[QuotientIteration.X].quotient_map(QuotientIteration.action(QuotientIteration.S)(QuotientIteration.R)))" "(KernelDefinition[Quotient[QuotientIteration.X](QuotientIteration.S), Quotient[QuotientIteration.X](QuotientIteration.S), Quotient[QuotientIteration.X](QuotientIteration.action(QuotientIteration.S)(QuotientIteration.R))].PreservesEq(QuotientIteration.R))")) (|QuotientAction_TCC3-1| |nil| 3245193427 ("" (SKOSIMP*) (("" (EXPAND "PreservesEq") (("" (EXPAND "subset?") (("" (EXPAND "member") (("" (SKOSIMP*) (("" (REWRITE "restrict_full[[Quotient[X](S!1), Quotient[X](S!1)], bool]") (("" (EXPAND "EquivalenceKernel") (("" (EXPAND "quotient_map") (("" (TYPEPRED "x!1`1" "x!1`2") (("" (EXPAND "lift") (("" (LEMMA "EquivClassEq[X]") (("" (AUTO-REWRITE "EquivClassNonEmpty[X]") (("" (SKOSIMP*) (("" (REPLACE -2) (("" (REPLACE -3) (("" (INST?) (("1" (ASSERT) (("1" (HIDE 2) (("1" (EXPAND "action") (("1" (CASE "FORALL(x : X) :
                   EquivClass(S!1)(choose(EquivClass[X](S!1)(x))) = EquivClass(S!1)(x)") (("1" (INST-CP -1 "x!2") (("1" (EXPAND "rep") (("1" (REPLACE -2) (("1" (INST -1 "x!3") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3 2) (("2" (SKOSIMP*) (("2" (LEMMA "EquivClassEq[X]") (("2" (INST?) (("2" (ASSERT) (("2" (USE "EquivClassChoose[X]") (("2" (HIDE 2) (("2" (TYPEPRED "S!1") (("2" (EXPAND "equivalence?") (("2" (EXPAND "symmetric?") (("2" (FLATTEN) (("2" (INST -2 "x!4" "choose(EquivClass[X](S!1)(x!4))") (("2" (ASSERT) (("2" (EXPAND "repEC") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|QuotientAction| SUBTYPE "QuotientExtensionProperties[QuotientIteration.X, QuotientIteration.X, Quotient[QuotientIteration.X](QuotientIteration.action(QuotientIteration.S)(QuotientIteration.R))].lift(QuotientIteration.S)(QuotientDefinition[QuotientIteration.X].quotient_map(QuotientIteration.action(QuotientIteration.S)(QuotientIteration.R)))" "(KernelDefinition[Quotient[QuotientIteration.X](QuotientIteration.S), Quotient[QuotientIteration.X](QuotientIteration.S), Quotient[QuotientIteration.X](QuotientIteration.action(QuotientIteration.S)(QuotientIteration.R))].PreservesEq(QuotientIteration.R))"))) (|QuotientAction_TCC4| 0 (|QuotientAction_TCC4-1| |nil| 3245525352 ("" (GRIND :EXCLUDE "rep" :IF-MATCH NIL) NIL NIL) ((|restrict| CONST-DECL "R" |restrict| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|EquivalenceKernel| CONST-DECL "equivalence[X1]" |KernelDefinition| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|PreservesEq| CONST-DECL "bool" |KernelDefinition| NIL)) SHOSTAK (|QuotientAction| SUBTYPE "QuotientIteration.R" "{R: relations[Quotient[QuotientIteration.X](QuotientIteration.S)].equivalence | KernelDefinition[Quotient[QuotientIteration.X](QuotientIteration.S), Quotient[QuotientIteration.X](QuotientIteration.S), bool].PreservesEq(R)(LAMBDA (x: Quotient[QuotientIteration.X](QuotientIteration.S)): booleans.TRUE)}"))) (|QuotientAction| 0 (|QuotientAction-3| "" 3658951612 ("" (SKOSIMP*) (("" (TYPEPRED "S!1" "R!1") (("" (EXPAND "bijective?") (("" (PROP) (("1" (EXPAND "injective?") (("1" (SKOSIMP*) (("1" (EXPAND "lift") (("1" (TYPEPRED "x1!1" "x2!1") (("1" (AUTO-REWRITE-THEORIES "QuotientDefinition[X]" "QuotientDefinition[Quotient[X](S!1)]") (("1" (SKOSIMP*) (("1" (REPLACE -1) (("1" (REPLACE -2) (("1" (HIDE -1 -2) (("1" (EXPAND "rep") (("1" (NAME-REPLACE "ch1" "choose(EquivClass[Quotient[X](S!1)](R!1)(x!1))") (("1" (NAME-REPLACE "ch2" "choose(EquivClass[Quotient[X](S!1)](R!1)(x!2))") (("1" (TYPEPRED "ch1" "ch2") (("1" (SKOSIMP*) (("1" (REPLACE -1) (("1" (REPLACE -3) (("1" (HIDE -1 -3) (("1" (NAME-REPLACE "ch3" "choose(EquivClass[X](S!1)(x!3))") (("1" (NAME-REPLACE "ch4" "choose(EquivClass[X](S!1)(x!4))") (("1" (TYPEPRED "ch3" "ch4") (("1" (STOP-REWRITE "EquivClassEq[X]") (("1" (ASSERT) (("1" (CASE "EquivClass[X](action(S!1)(R!1))(ch3)(ch3)") (("1" (REPLACE -6) (("1" (HIDE -6) (("1" (ASSERT) (("1" (EXPAND "action") (("1" (LEMMA "EquivClassEq[X]") (("1" (INST?) (("1" (PROP) (("1" (REPLACE -1) (("1" (HIDE -1 -2) (("1" (LEMMA "EquivClassEq[X]") (("1" (INST -1 "S!1" "ch4" "x!4") (("1" (PROP) (("1" (REPLACE -1) (("1" (HIDE -1 -2) (("1" (HIDE -2 -3) (("1" (EXPAND "equivalence?") (("1" (FLATTEN) (("1" (EXPAND "symmetric?") (("1" (INST-CP -8 "EquivClass[X](S!1)(x!4)" "EquivClass(S!1)(ch3)") (("1" (PROP) (("1" (HIDE -2) (("1" (INST -8 "x!2" "EquivClass[X](S!1)(x!4)") (("1" (EXPAND "transitive?") (("1" (INST-CP -9 "x!1" "EquivClass(S!1)(ch3)" "EquivClass[X](S!1)(x!4)") (("1" (ASSERT) (("1" (INST-CP -9 "x!1" "EquivClass[X](S!1)(x!4)" "x!2") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "equivalence?") (("2" (EXPAND "symmetric?") (("2" (FLATTEN) (("2" (INST -7 "x!4" "ch4") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3 -4 -5 2) (("2" (EXPAND "EquivClass") (("2" (EXPAND "action") (("2" (EXPAND "equivalence?") (("2" (EXPAND "reflexive?") (("2" (FLATTEN) (("2" (INST -4 "EquivClass(S!1)(ch3)") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "surjective?") (("2" (SKOSIMP*) (("2" (TYPEPRED "y!1") (("2" (SKOSIMP*) (("2" (INST 1 "EquivClass(R!1)(EquivClass(S!1)(x!1))") (("1" (EXPAND "lift") (("1" (EXPAND "quotient_map") (("1" (REPLACE -1) (("1" (LEMMA "EquivClassEq[X]") (("1" (INST -1 "action(S!1)(R!1)" "_" "_") (("1" (CASE "nonempty?(EquivClass(R!1)(EquivClass(S!1)(x!1)))") (("1" (EXPAND "rep") (("1" (NAME-REPLACE "ch1" "choose(EquivClass(R!1)(EquivClass(S!1)(x!1)))") (("1" (TYPEPRED "ch1") (("1" (SKOSIMP*) (("1" (CASE "nonempty?(ch1)") (("1" (NAME-REPLACE "ch2" "choose(ch1)") (("1" (TYPEPRED "ch2") (("1" (INST -6 "ch2" "x!1") (("1" (ASSERT) (("1" (HIDE 2) (("1" (EXPAND "action" 1) (("1" (EXPAND "EquivClass" -3) (("1" (EXPAND "equivalence?") (("1" (FLATTEN) (("1" (EXPAND "symmetric?") (("1" (INST -11 "LAMBDA (z: X): S!1(x!1, z)" "ch1") (("1" (ASSERT) (("1" (CASE-REPLACE "EquivClass(S!1)(ch2) = ch1") (("1" (EXPAND "EquivClass" 1) (("1" (REPLACE 1) (("1" (EXPAND "EquivClass" -5) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (REPLACE -3) (("2" (ASSERT) (("2" (LEMMA "EquivClassEq[X]") (("2" (INST -1 "S!1" "x!2" "ch2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "x!1") (("2" (APPLY-EXTENSIONALITY :HIDE? T) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1) (("2" (HIDE -1 -2 -3 -4 -5 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "EquivClass[X](S!1)(x!1)") (("2" (INST 1 "x!1") NIL NIL)) NIL) ("3" (INST 1 "x!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|Quotient| TYPE-EQ-DECL NIL |QuotientDefinition| NIL) (|EquivClass| CONST-DECL "set[T]" |QuotientDefinition| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|equivalence| TYPE-EQ-DECL NIL |relations| NIL) (|equivalence?| CONST-DECL "bool" |relations| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (X FORMAL-TYPE-DECL NIL |QuotientIteration| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|rep| CONST-DECL "T" |QuotientDefinition| NIL) (|quotient_map| CONST-DECL "Quotient(S)" |QuotientDefinition| NIL) (|EquivClassEq| FORMULA-DECL NIL |QuotientDefinition| NIL) (|reflexive?| CONST-DECL "bool" |relations| NIL) (|transitive?| CONST-DECL "bool" |relations| NIL) (|symmetric?| CONST-DECL "bool" |relations| NIL) (|action| CONST-DECL "bool" |QuotientIteration| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|choose| CONST-DECL "(p)" |sets| NIL) (|lift| CONST-DECL "Y" |QuotientExtensionProperties| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) NIL NIL NIL (|surjective?| CONST-DECL "bool" |functions| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|action_equivalence_is_equivalence| APPLICATION-JUDGEMENT "equivalence[X]" |QuotientIteration| NIL)) SHOSTAK) (|QuotientAction-2| "" 3590873023 ("" (SKOSIMP*) (("" (TYPEPRED "S!1" "R!1") (("" (EXPAND "bijective?") (("" (PROP) (("1" (EXPAND "injective?") (("1" (SKOSIMP*) (("1" (EXPAND "lift") (("1" (TYPEPRED "x1!1" "x2!1") (("1" (AUTO-REWRITE-THEORIES "QuotientDefinition[X]" "QuotientDefinition[Quotient[X](S!1)]") (("1" (SKOSIMP*) (("1" (REPLACE -1) (("1" (REPLACE -2) (("1" (HIDE -1 -2) (("1" (EXPAND "rep") (("1" (NAME-REPLACE "ch1" "choose(EquivClass[Quotient[X](S!1)](R!1)(x!1))") (("1" (NAME-REPLACE "ch2" "choose(EquivClass[Quotient[X](S!1)](R!1)(x!2))") (("1" (TYPEPRED "ch1" "ch2") (("1" (SKOSIMP*) (("1" (REPLACE -2) (("1" (REPLACE -4) (("1" (HIDE -2 -4) (("1" (NAME-REPLACE "ch3" "choose(EquivClass[X](S!1)(x!3))") (("1" (NAME-REPLACE "ch4" "choose(EquivClass[X](S!1)(x!4))") (("1" (TYPEPRED "ch3" "ch4") (("1" (STOP-REWRITE "EquivClassEq[X]") (("1" (ASSERT) (("1" (CASE "EquivClass[X](action(S!1)(R!1))(ch3)(ch3)") (("1" (REPLACE -6) (("1" (HIDE -6) (("1" (ASSERT) (("1" (EXPAND "action") (("1" (LEMMA "EquivClassEq[X]") (("1" (INST?) (("1" (PROP) (("1" (REPLACE -1) (("1" (HIDE -1 -2) (("1" (LEMMA "EquivClassEq[X]") (("1" (INST -1 "S!1" "ch4" "x!4") (("1" (PROP) (("1" (REPLACE -1) (("1" (HIDE -1 -2) (("1" (HIDE -2 -3) (("1" (EXPAND "equivalence?") (("1" (FLATTEN) (("1" (EXPAND "symmetric?") (("1" (INST-CP -8 "EquivClass[X](S!1)(x!4)" "EquivClass(S!1)(ch3)") (("1" (PROP) (("1" (HIDE -2) (("1" (INST -8 "x!2" "EquivClass[X](S!1)(x!4)") (("1" (EXPAND "transitive?") (("1" (INST-CP -9 "x!1" "EquivClass(S!1)(ch3)" "EquivClass[X](S!1)(x!4)") (("1" (ASSERT) (("1" (INST-CP -9 "x!1" "EquivClass[X](S!1)(x!4)" "x!2") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "equivalence?") (("2" (EXPAND "symmetric?") (("2" (FLATTEN) (("2" (INST -7 "x!4" "ch4") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3 -4 -5 2) (("2" (EXPAND "EquivClass") (("2" (EXPAND "action") (("2" (EXPAND "equivalence?") (("2" (EXPAND "reflexive?") (("2" (FLATTEN) (("2" (INST -4 "EquivClass(S!1)(ch3)") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "surjective?") (("2" (SKOSIMP*) (("2" (TYPEPRED "y!1") (("2" (SKOSIMP*) (("2" (INST 1 "EquivClass(R!1)(EquivClass(S!1)(x!1))") (("1" (EXPAND "lift") (("1" (EXPAND "quotient_map") (("1" (REPLACE -1) (("1" (LEMMA "EquivClassEq[X]") (("1" (INST -1 "action(S!1)(R!1)" "_" "_") (("1" (CASE "nonempty?(EquivClass(R!1)(EquivClass(S!1)(x!1)))") (("1" (EXPAND "rep") (("1" (NAME-REPLACE "ch1" "choose(EquivClass(R!1)(EquivClass(S!1)(x!1)))") (("1" (TYPEPRED "ch1") (("1" (SKOSIMP*) (("1" (CASE "nonempty?(ch1)") (("1" (NAME-REPLACE "ch2" "choose(ch1)") (("1" (TYPEPRED "ch2") (("1" (INST -6 "ch2" "x!1") (("1" (ASSERT) (("1" (HIDE 2) (("1" (EXPAND "action" 1) (("1" (EXPAND "EquivClass" -3) (("1" (EXPAND "equivalence?") (("1" (FLATTEN) (("1" (EXPAND "symmetric?") (("1" (INST -11 "LAMBDA (z: X): S!1(x!1, z)" "ch1") (("1" (ASSERT) (("1" (CASE-REPLACE "EquivClass(S!1)(ch2) = ch1") (("1" (EXPAND "EquivClass" 1) (("1" (PROPAX) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (HIDE -2 -3 -5 -6 -10 -11 -12) (("2" (REPLACE -2) (("2" (HIDE -2) (("2" (ASSERT) (("2" (EXPAND "EquivClass" -1) (("2" (LEMMA "EquivClassEq[X]") (("2" (INST -1 "S!1" "x!2" "ch2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "x!1") (("2" (APPLY-EXTENSIONALITY :HIDE? T) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -2) (("2" (HIDE -1 -2 -3 -4 -5 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "EquivClass[X](S!1)(x!1)") (("2" (INST 1 "x!1") NIL NIL)) NIL) ("3" (INST 1 "x!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|QuotientAction-1| |nil| 3243015883 ("" (SKOSIMP*) (("" (TYPEPRED "S!1" "R!1") (("" (EXPAND "bijective?") (("" (PROP) (("1" (EXPAND "injective?") (("1" (SKOSIMP*) (("1" (EXPAND "lift") (("1" (TYPEPRED "x1!1" "x2!1") (("1" (AUTO-REWRITE-THEORIES "QuotientDefinition[X]" "QuotientDefinition[Quotient[X](S!1)]") (("1" (SKOSIMP*) (("1" (REPLACE -1) (("1" (REPLACE -2) (("1" (HIDE -1 -2) (("1" (EXPAND "rep") (("1" (NAME-REPLACE "ch1" "choose(EquivClass[Quotient[X](S!1)](R!1)(x!1))") (("1" (NAME-REPLACE "ch2" "choose(EquivClass[Quotient[X](S!1)](R!1)(x!2))") (("1" (TYPEPRED "ch1" "ch2") (("1" (SKOSIMP*) (("1" (REPLACE -1) (("1" (REPLACE -3) (("1" (HIDE -1 -3) (("1" (NAME-REPLACE "ch3" "choose(EquivClass[X](S!1)(x!3))") (("1" (NAME-REPLACE "ch4" "choose(EquivClass[X](S!1)(x!4))") (("1" (TYPEPRED "ch3" "ch4") (("1" (STOP-REWRITE "EquivClassEq[X]") (("1" (ASSERT) (("1" (CASE "EquivClass[X](action(S!1)(R!1))(ch3)(ch3)") (("1" (REPLACE -6) (("1" (HIDE -6) (("1" (ASSERT) (("1" (EXPAND "action") (("1" (LEMMA "EquivClassEq[X]") (("1" (INST?) (("1" (PROP) (("1" (REPLACE -1) (("1" (HIDE -1 -2) (("1" (LEMMA "EquivClassEq[X]") (("1" (INST -1 "S!1" "ch4" "x!4") (("1" (PROP) (("1" (REPLACE -1) (("1" (HIDE -1 -2) (("1" (HIDE -2 -3) (("1" (EXPAND "equivalence?") (("1" (FLATTEN) (("1" (EXPAND "symmetric?") (("1" (INST-CP -8 "EquivClass[X](S!1)(x!4)" "EquivClass(S!1)(ch3)") (("1" (PROP) (("1" (HIDE -2) (("1" (INST -8 "x!2" "EquivClass[X](S!1)(x!4)") (("1" (EXPAND "transitive?") (("1" (INST-CP -9 "x!1" "EquivClass(S!1)(ch3)" "EquivClass[X](S!1)(x!4)") (("1" (ASSERT) (("1" (INST-CP -9 "x!1" "EquivClass[X](S!1)(x!4)" "x!2") (("1" (ASSERT) NIL NIL) ("2" (EXPAND "reflexive?") (("2" (INST 1 "x!4") NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "reflexive?") (("2" (INST 1 "x!4") NIL NIL)) NIL) ("3" (EXPAND "reflexive?") (("3" (INST 1 "ch3") NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "reflexive?") (("2" (INST 1 "x!4") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "reflexive?") (("2" (INST 1 "ch3") NIL NIL)) NIL) ("3" (EXPAND "reflexive?") (("3" (INST 1 "x!4") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "equivalence?") (("2" (EXPAND "symmetric?") (("2" (FLATTEN) (("2" (INST -7 "x!4" "ch4") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3 -4 -5 2) (("2" (EXPAND "EquivClass") (("2" (EXPAND "action") (("2" (EXPAND "equivalence?") (("2" (EXPAND "reflexive?") (("2" (FLATTEN) (("2" (INST -4 "EquivClass(S!1)(ch3)") (("2" (ASSERT) (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "surjective?") (("2" (SKOSIMP*) (("2" (TYPEPRED "y!1") (("2" (SKOSIMP*) (("2" (INST 1 "EquivClass(R!1)(EquivClass(S!1)(x!1))") (("1" (EXPAND "lift") (("1" (EXPAND "quotient_map") (("1" (REPLACE -1) (("1" (LEMMA "EquivClassEq[X]") (("1" (INST -1 "action(S!1)(R!1)" "_" "_") (("1" (CASE "nonempty?(EquivClass(R!1)(EquivClass(S!1)(x!1)))") (("1" (EXPAND "rep") (("1" (NAME-REPLACE "ch1" "choose(EquivClass(R!1)(EquivClass(S!1)(x!1)))") (("1" (TYPEPRED "ch1") (("1" (SKOSIMP*) (("1" (CASE "nonempty?(ch1)") (("1" (NAME-REPLACE "ch2" "choose(ch1)") (("1" (TYPEPRED "ch2") (("1" (INST -6 "ch2" "x!1") (("1" (ASSERT) (("1" (HIDE 2) (("1" (EXPAND "action" 1) (("1" (EXPAND "EquivClass" -4) (("1" (EXPAND "equivalence?") (("1" (FLATTEN) (("1" (EXPAND "symmetric?") (("1" (INST -11 "LAMBDA (z: X): S!1(x!1, z)" "ch1") (("1" (ASSERT) (("1" (CASE-REPLACE "EquivClass(S!1)(ch2) = ch1") (("1" (EXPAND "EquivClass" 1) (("1" (PROPAX) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (HIDE -2 -4 -5 -6 -10 -11 -12) (("2" (REPLACE -2) (("2" (HIDE -2) (("2" (ASSERT) (("2" (EXPAND "EquivClass" -1) (("2" (LEMMA "EquivClassEq[X]") (("2" (INST -1 "S!1" "x!2" "ch2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "x!1") (("2" (APPLY-EXTENSIONALITY :HIDE? T) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1) (("2" (HIDE -1 -2 -3 -4 -5 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 2) (("2" (GRIND) NIL NIL)) NIL) ("3" (INST 1 "x!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "EquivClass[X](S!1)(x!1)") (("2" (INST 1 "x!1") NIL NIL)) NIL) ("3" (INST 1 "x!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL)))(|PartialFunctionDefinitions| (|LPartFun_to_SPartFun_TCC1| 0 (|LPartFun_to_SPartFun_TCC1-1| |nil| 3243663400 ("" (SUBTYPE-TCC) NIL NIL) NIL SHOSTAK (|LPartFun_to_SPartFun| SUBTYPE "PartialFunctionDefinitions.f(PartialFunctionDefinitions.y)" "(lift_adt[PartialFunctionDefinitions.Y].up?)"))) (|SPartFun_to_LPartFun_to_SPartFun| 0 (|SPartFun_to_LPartFun_to_SPartFun-1| |nil| 3243715985 ("" (SKOSIMP*) (("" (APPLY-EXTENSIONALITY :HIDE? T) (("1" (APPLY-EXTENSIONALITY :HIDE? T) (("1" (GRIND) NIL NIL)) NIL) ("2" (APPLY-EXTENSIONALITY :HIDE? T) (("1" (TYPEPRED "x!1") (("1" (GRIND) NIL NIL)) NIL) ("2" (SKOSIMP*) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((X FORMAL-TYPE-DECL NIL |PartialFunctionDefinitions| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (Y FORMAL-TYPE-DECL NIL |PartialFunctionDefinitions| NIL) (|SubsetPartialFunction| TYPE-EQ-DECL NIL |PartialFunctionDefinitions| NIL) (|SPartFun_to_LPartFun| CONST-DECL "LiftPartialFunction" |PartialFunctionDefinitions| NIL) (|LPartFun_to_SPartFun| CONST-DECL "SubsetPartialFunction" |PartialFunctionDefinitions| NIL) (|LiftPartialFunction| TYPE-EQ-DECL NIL |PartialFunctionDefinitions| NIL) (|lift| TYPE-DECL NIL |lift_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)) SHOSTAK)) (|LPartFun_to_SPartFun_to_LPartFun| 0 (|LPartFun_to_SPartFun_to_LPartFun-1| |nil| 3243716027 ("" (SKOSIMP*) (("" (APPLY-EXTENSIONALITY :HIDE? T) (("" (GRIND) (("" (REWRITE "lift_up_eta") NIL NIL)) NIL)) NIL)) NIL) ((X FORMAL-TYPE-DECL NIL |PartialFunctionDefinitions| NIL) (Y FORMAL-TYPE-DECL NIL |PartialFunctionDefinitions| NIL) (|lift| TYPE-DECL NIL |lift_adt| NIL) (|LPartFun_to_SPartFun| CONST-DECL "SubsetPartialFunction" |PartialFunctionDefinitions| NIL) (|SPartFun_to_LPartFun| CONST-DECL "LiftPartialFunction" |PartialFunctionDefinitions| NIL) (|LiftPartialFunction| TYPE-EQ-DECL NIL |PartialFunctionDefinitions| NIL) (|SubsetPartialFunction| TYPE-EQ-DECL NIL |PartialFunctionDefinitions| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|up?| ADT-RECOGNIZER-DECL "[lift -> boolean]" |lift_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|lift_up_eta| FORMULA-DECL NIL |lift_adt| NIL)) SHOSTAK)))(|PartialFunctionComposition| (|oh_TCC1| 0 (|oh_TCC1-1| |nil| 3243015884 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (Y FORMAL-TYPE-DECL NIL |PartialFunctionComposition| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (Z FORMAL-TYPE-DECL NIL |PartialFunctionComposition| NIL) (|SubsetPartialFunction| TYPE-EQ-DECL NIL |PartialFunctionDefinitions| NIL) (X FORMAL-TYPE-DECL NIL |PartialFunctionComposition| NIL) (|CompDom| CONST-DECL "PRED[X]" |PartialFunctionComposition| NIL)) NIL (|oh| SUBTYPE "PartialFunctionComposition.x" "(PartialFunctionComposition.h`dom)"))) (|oh_TCC2| 0 (|oh_TCC2-1| |nil| 3243015884 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (Y FORMAL-TYPE-DECL NIL |PartialFunctionComposition| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (Z FORMAL-TYPE-DECL NIL |PartialFunctionComposition| NIL) (|SubsetPartialFunction| TYPE-EQ-DECL NIL |PartialFunctionDefinitions| NIL) (X FORMAL-TYPE-DECL NIL |PartialFunctionComposition| NIL) (|CompDom| CONST-DECL "PRED[X]" |PartialFunctionComposition| NIL)) NIL (|oh| SUBTYPE "fun(PartialFunctionComposition.h)(PartialFunctionComposition.x)" "(PartialFunctionComposition.k`dom)"))) (|SPartFun_to_LPartFun_CompositionPreservation| 0 (|SPartFun_to_LPartFun_CompositionPreservation-1| |nil| 3243716138 ("" (SKOSIMP*) (("" (APPLY-EXTENSIONALITY :HIDE? T) (("" (GRIND) NIL NIL)) NIL)) NIL) ((X FORMAL-TYPE-DECL NIL |PartialFunctionComposition| NIL) (Z FORMAL-TYPE-DECL NIL |PartialFunctionComposition| NIL) (|lift| TYPE-DECL NIL |lift_adt| NIL) (O CONST-DECL "LiftPartialFunction[X, Z]" |PartialFunctionComposition| NIL) (O CONST-DECL "SubsetPartialFunction[X, Z]" |PartialFunctionComposition| NIL) (Y FORMAL-TYPE-DECL NIL |PartialFunctionComposition| NIL) (|SPartFun_to_LPartFun| CONST-DECL "LiftPartialFunction" |PartialFunctionDefinitions| NIL) (|LiftPartialFunction| TYPE-EQ-DECL NIL |PartialFunctionDefinitions| NIL) (|SubsetPartialFunction| TYPE-EQ-DECL NIL |PartialFunctionDefinitions| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|CompDom| CONST-DECL "PRED[X]" |PartialFunctionComposition| NIL)) SHOSTAK)) (|LPartFun_to_SPartFun_CompositionPreservation| 0 (|LPartFun_to_SPartFun_CompositionPreservation-1| |nil| 3243716183 ("" (SKOSIMP*) (("" (APPLY-EXTENSIONALITY :HIDE? T) (("1" (APPLY-EXTENSIONALITY :HIDE? T) (("1" (GRIND) NIL NIL)) NIL) ("2" (APPLY-EXTENSIONALITY :HIDE? T) (("1" (GRIND) (("1" (TYPEPRED "x!1") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((X FORMAL-TYPE-DECL NIL |PartialFunctionComposition| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (Z FORMAL-TYPE-DECL NIL |PartialFunctionComposition| NIL) (|SubsetPartialFunction| TYPE-EQ-DECL NIL |PartialFunctionDefinitions| NIL) (O CONST-DECL "SubsetPartialFunction[X, Z]" |PartialFunctionComposition| NIL) (O CONST-DECL "LiftPartialFunction[X, Z]" |PartialFunctionComposition| NIL) (Y FORMAL-TYPE-DECL NIL |PartialFunctionComposition| NIL) (|LPartFun_to_SPartFun| CONST-DECL "SubsetPartialFunction" |PartialFunctionDefinitions| NIL) (|LiftPartialFunction| TYPE-EQ-DECL NIL |PartialFunctionDefinitions| NIL) (|lift| TYPE-DECL NIL |lift_adt| NIL) (|CompDom| CONST-DECL "PRED[X]" |PartialFunctionComposition| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)) SHOSTAK)))
