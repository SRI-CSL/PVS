########################### -*- Mode: Makefile -*- ###########################
## Makefile -- Main Makefile for PVS; requires GNU Make
## Author          : Sam Owre, Joseph Kiniry
## Created On      : Wed Dec 30 19:29:47 1998
## Last Modified By: Sam Owre
## Last Modified On: Thu May 20 22:26:02 2004
## Update Count    : 23
## Status          : Stable
###############################################################################
## PVS
## Copyright (C) 2006, SRI International.  All Rights Reserved.

## This program is free software; you can redistribute it and/or
## modify it under the terms of the GNU General Public License
## as published by the Free Software Foundation; either version 2
## of the License, or (at your option) any later version.

## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.

## You should have received a copy of the GNU General Public License
## along with this program; if not, write to the Free Software
## Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
## --------------------------------------------------------------------

# This Makefile consists of several parts
#  Initialization
#  External libraries and files
#  PVS grammar files
#  PVS methods file
#  PVS Lisp compilation
#  PVS Lisp image
#  PVS Emacs prelude info file
#  PVS Emacs compilation
#  PVS tarfiles
#  Clean

# Initialization
# Initializes variables and performs some checks before invoking rules

ifneq (,)
This makefile requires GNU Make.
endif

SHELL=/bin/sh

# Should test for existence of platform dependent Makefiles
ifdef PVSPATH
ifneq "${PVSPATH:-1}" "/"
PVSPATH := ${PVSPATH}/
endif
endif
ARCH=$(shell ./config.sub `./config.guess`)
CFLAGS = @CFLAGS@
GREP = @GREP@
ETAGS = @ETAGS@
GIT = @GIT@
GIT_FILES := $(shell $(GIT) ls-files)
TAR = @TAR@
TARFLAGS = co --group=0 --owner=0 --exclude='\._*' "$$tardir"
MKDIR = @MKDIR@
MKDIR_P = $(MKDIR) -p
PACKAGE = @PACKAGE_NAME@
VERSION = @PACKAGE_VERSION@

# If SBCL_HOME is set, it is preferred over SBCL; useful when testing
# PVS in different SBCL versions
SBCL = @SBCL@
ifneq ($(SBCL_HOME),)
# The SBCL_HOME directory should have run-sbcl.sh in it; difficult to
# run the executable directly from $(SBCL_HOME)/src/runtime/sbcl
# as it gives a "Can't find sbcl.core" error.
SBCL = $(SBCL_HOME)/run-sbcl.sh
ifeq ($(wildcard $(SBCL)),)
$(error "SBCL_HOME/run-sbcl.sh not found")
endif
endif

ifneq ($(SBCL),)
SBCL_VERSION = $(shell $(SBCL) --version)
SBCL_SPACE_SIZE = 6000 # 6Gb, default is 1.8Gb
sbcl-rt = $(PVSPATH)bin/$(PLATFORM)/runtime/pvs-sbclisp
pvs-images += $(HOME)/.sbclrc $(sbcl-rt)
fasldirs += $(shell $(SBCL) --noinform \
	--eval '(require :asdf)' \
	--eval '(format t (namestring (asdf:apply-output-translations ".")))' --quit)
endif

# Build with Allegro only if ALLEGRO_HOME is set
ifneq ($(ALLEGRO_HOME),)
ALLEGRO = $(ALLEGRO_HOME)/mlisp
ifeq ($(wildcard $(ALLEGRO)),)
$(error "ALLEGRO_HOME/mlisp not found")
endif
ALLEGRO_VERSION = \
   $(shell $(ALLEGRO) -e '(format t "~a" (lisp-implementation-version))' --kill)
# Only needed for building Allegro runtime images
export LD_LIBRARY_PATH
LD_LIBRARY_PATH = $(ALLEGRO_HOME):$LD_LIBRARY_PATH
allegro-devel = $(bindir)/devel/$(PACKAGE)-allegro
pvs-images += $(allegro-devel)
ifneq ($(wildcard $(ALLEGRO_HOME)/devel.lic),)
allegro-rt = $(bindir)/runtime/$(PACKAGE)-allegro
pvs-images += $(HOME)/.clinit.cl $(allegro-rt)
endif
endif

# Check that at least one of SBCL or Allegro CL is available
ifeq ($(SBCL)$(ALLEGRO),)
$(error "Must install SBCL, or set SBCL_HOME or ALLEGRO_HOME")
endif

PLATFORM := $(shell $(PVSPATH)bin/pvs-platform)
export PLATFORM

# Make sure the platform-dependent bin directory exists
bindir = $(TARGETPATH)bin/$(PLATFORM)
ifeq (,$(wildcard $(bindir)))
$(shell $(MKDIR_P) $(bindir))
endif

# Check to see if we are doing something that requires Emacs and Lisp
# If MAKECMDGOALS is empty, or has something besides clean, tar, etc.
# then buildcmds will be nonempty
ifeq ($(MAKECMDGOALS),)
buildcmds = all
else
buildcmds = $(filter-out clean tarfiles, $(MAKECMDGOALS))
endif

ifneq ($(buildcmds),)
# Need an emacs to work with
ifndef EMACS
ifdef PVSEMACS
EMACS = $(PVSEMACS)
else
EMACS = $(shell which emacs 2> /dev/null)
endif
endif
ifeq ($(EMACS),)
EMACS = $(shell which xemacs 2> /dev/null)
endif
ifeq ($(EMACS),)
$(error "No Emacs or Xemacs found")
endif
endif # end of buildcmds check

# Below this is only for dist; i.e., generating tar files

SYSTEM_FILES = README.md INSTALL LICENSE LICENSE-SRI NOTICES install-sh \
	pvs.asd pvs pvsio proveit provethem emacs/pvs.xpm emacs/pvslogo.gif \
	pvs-tex.sub pvs.sty bin/pvs-platform \
	bin/tar-b64-mail Examples \
	$(wildcard lib/*.pvs lib/*.prf lib/*.help) \
	lib/pvs.grammar lib/pvs.bnf lib/pvs-style.css \
	wish/pvs-support.tcl \
	python doc/release-notes/pvs-release-notes.info \
	doc/release-notes/pvs-release-notes*.html doc/release-notes/pvs-release-notes.ps \
	doc/release-notes/pvs-release-notes.pdf \
	doc/user-guide/user-guide.pdf doc/language/language.pdf doc/prover/prover.pdf \
	doc/PVSio-2.d.pdf doc/manip-guide.pdf doc/extrategies.pdf doc/ProofLite-4.2.pdf \
	wish/gray.xbm wish/sequent.xbm \
	$(wildcard lib/finite_sets/*.pvs lib/finite_sets/*.prf) \
	lib/finite_sets/.pvscontext lib/finite_sets/pvsbin \
	$(wildcard lib/bitvectors/*.pvs lib/bitvectors/*.prf) \
	lib/bitvectors/.pvscontext lib/bitvectors/pvsbin \
	yices/$(PLATFORM) $(bindir)/yices1 $(bindir)/yices2 \
	emacs/configured-for-x src/asdf-patch.lisp Vagrantfile vagrant.README \
	pvs-version.lisp git-commit

ALLEGRO_FILES = $(bindir)/runtime/file_utils.$(LOAD-FOREIGN-EXTENSION) \
	$(wildcard $(bindir)/runtime/libacli*.$(LOAD-FOREIGN-EXTENSION)) \
	$(bindir)/runtime/mu.$(LOAD-FOREIGN-EXTENSION) \
	$(bindir)/runtime/pvs-allegro $(bindir)/runtime/pvs-allegro.dxl \
	$(bindir)/runtime/pvs-allegro.lic \
	$(bindir)/runtime/ws1s.$(LOAD-FOREIGN-EXTENSION)

# This does NOT include devel.lic - that must be gotten separately 
ALLEGRO_DEVEL_FILES = $(bindir)/devel/files.bu \
	$(bindir)/devel/file_utils.$(LOAD-FOREIGN-EXTENSION) \
	$(wildcard $(bindir)/devel/libacli*.$(LOAD-FOREIGN-EXTENSION)) \
	$(bindir)/devel/mu.$(LOAD-FOREIGN-EXTENSION) \
	$(bindir)/devel/pvs-allegro $(bindir)/devel/pvs-allegro.dxl \
	$(bindir)/devel/pvs-allegro.lic \
	$(bindir)/devel/ws1s.$(LOAD-FOREIGN-EXTENSION)

SBCLISP_FILES = $(bindir)/runtime/pvs-sbclisp \
	$(bindir)/runtime/file_utils.$(LOAD-FOREIGN-EXTENSION) \
	$(bindir)/runtime/mu.$(LOAD-FOREIGN-EXTENSION) \
	$(bindir)/runtime/ws1s.$(LOAD-FOREIGN-EXTENSION)

ALLEGRO_DISTFILES = $(SYSTEM_FILES) $(ALLEGRO_FILES) $(emacs-src) $(SOURCE_FILES)
ALLEGRO_DEVEL_DISTFILES = $(SYSTEM_FILES) $(ALLEGRO_DEVEL_FILES) $(emacs-src) $(SOURCE_FILES) 
SBCLISP_DISTFILES = $(SYSTEM_FILES) $(SBCLISP_FILES) $(emacs-src) # $(SOURCE_FILES)

# SOURCE_FILES = $(ess-files) $(lisp-files) $(emacs-src) $(pvs-make-files) $(allegro-make-files)

GIT_TAG = $(PACKAGE)$(VERSION)
ifneq ($(wildcard .git),)
GIT_DESC := $(GIT_TAG)-g$(shell $(GIT) rev-parse --short HEAD)
else
GIT_DESC := $(GIT_TAG)
endif
DISTDIR = $(PACKAGE)-$(VERSION)

remove_distdir = \
  if test -d "$(DISTDIR)"; then \
    find "$(DISTDIR)" -type d ! -perm -200 -exec chmod u+w {} ';' \
      && rm -rf "$(DISTDIR)" \
      || { sleep 5 && rm -rf "$(DISTDIR)"; }; \
  else :; fi

ifeq ($(findstring MacOSX,$(PLATFORM)),MacOSX)
LOAD-FOREIGN-EXTENSION=dylib
else
LOAD-FOREIGN-EXTENSION=so
endif

pvs-make-files = pvs.asd

allegro-make-files =  src/make-pvs.lisp src/make-allegro-pvs.lisp

emacs-src = $(shell $(GIT) ls-files | $(GREP) -E ".*\.el$$" | $(GREP) -v "^\(doc\|src\|Examples\)")
emacs-src += emacs/pvs-prelude-files-and-regions.el

ff-files = src/utils/$(PLATFORM)/file_utils.$(LOAD-FOREIGN-EXTENSION) \
           src/BDD/$(PLATFORM)/mu.$(LOAD-FOREIGN-EXTENSION) \
           src/WS1S/$(PLATFORM)/ws1s.$(LOAD-FOREIGN-EXTENSION)

ess-files = ess/dist-ess.lisp \
	ess/init-load.lisp \
	ess/sys/ergolisp/rel/ergolisp.lisp \
	ess/sys/ergolisp/rel/ergolisp-exports.lisp \
	ess/sys/ergolisp/rel/ergo-system.lisp \
	ess/sys/ergolisp/rel/ergo-types.lisp \
	ess/sys/ergolisp/rel/type-check.lisp \
	ess/sys/ergolisp/rel/tdefun.lisp \
	ess/sys/tools/rel/retry.lisp \
	ess/sys/tools/rel/box-system.lisp \
	ess/sys/tools/rel/box.lisp \
	ess/box-defs.lisp \
	ess/sys/tools/rel/regression-test.lisp \
	ess/sys/tools/rel/clet.lisp \
	ess/sys/tools/rel/box-lib.lisp \
	ess/sys/tools/rel/print-utils.lisp \
	ess/sys/ergolisp/rel/dlambda.lisp \
	ess/sys/ergolisp/rel/dlambda-lib.lisp \
	ess/term/language/rel/languages.lisp \
	ess/term/terms/rel/opers.lisp \
	ess/term/terms/rel/occur.lisp \
	ess/term/terms/rel/sorts.lisp \
	ess/term/trep/rel/attr-prims.lisp \
	ess/term/trep/rel/gterm.lisp \
	ess/term/terms/rel/terms.lisp \
	ess/term/terms/rel/termop.lisp \
	ess/lang/sb-term/rel/access.lisp \
	ess/lang/sb-term/rel/access-par.lisp \
	ess/lang/sb-term/rel/aux-funs.lisp \
	ess/lang/sb-term/rel/sb-lexer.lisp \
	ess/lang/sb-term/rel/sb-parser.lisp \
	ess/lang/sb-term/rel/sb-sorts.lisp \
	ess/lang/sb-term/rel/sb-unparser.lisp \
	ess/lang/sb-term/rel/sb-unparsing-aux.lisp \
	ess/lang/sb-term/rel/pre-process.lisp \
	ess/lang/sb-term/rel/inter-phase.lisp \
	ess/lang/sb-term/rel/sort-gen.lisp \
	ess/lang/sb-term/rel/lexer-gen.lisp \
	ess/lang/sb-term/rel/flatten.lisp \
	ess/lang/sb-term/rel/look-ahead.lisp \
	ess/lang/sb-term/rel/compare.lisp \
	ess/lang/sb-term/rel/phase-three.lisp \
	ess/lang/sb-term/rel/top-parse.lisp \
	ess/lang/sb-term/rel/unp-code-revise.lisp \
	ess/lang/sb-term/rel/unparse-gen.lisp \
	ess/lang/sb-term/rel/sbrt-lang-def.lisp \
	ess/lang/sb-term/rel/sbrt-sorting.lisp \
	ess/lang/sb-term/rel/rt-structs.lisp \
	ess/lang/sb-term/rel/rt-unp-structs.lisp \
	ess/lang/sb-term/rel/rt-lex.lisp \
	ess/lang/sb-term/rel/rt-term.lisp \
	ess/lang/sb-term/rel/rt-parse-mac.lisp \
	ess/lang/sb-term/rel/rt-parse.lisp \
	ess/lang/sb-term/rel/rt-unparse.lisp \
	ess/lang/sb-term/rel/top.lisp \
	ess/term/attr/rel/attr-lang-lib.lisp \
	ess/term/attr/rel/attr-sort.lisp \
	ess/term/attr/rel/attr-lang.lisp \
	ess/term/attr/rel/attr-global.lisp \
	ess/lang/sb-term/rel/rt-unp-attr.lisp \
	ess/lang/sb-term/rel/rt-format.lisp \
	ess/lang/sb-term/rel/rt-unp-tex.lisp \
	ess/lang/sb-term/rel/rt-unp-top.lisp \
	ess/term/attr/rel/attr-lib.lisp \
	ess/term/attr/rel/attr-gsort.lisp \
	ess/term/attr/rel/attr-occ.lisp \
	ess/lang/sb-term/rel/sbrt-lang-def.lisp \
	ess/lang/sb-term/rel/sbrt-sorting.lisp \
	ess/lang/sb-term/rel/rt-structs.lisp \
	ess/lang/sb-term/rel/rt-unp-structs.lisp \
	ess/lang/sb-term/rel/rt-lex.lisp \
	ess/lang/sb-term/rel/rt-term.lisp \
	ess/lang/sb-term/rel/rt-parse-mac.lisp \
	ess/lang/sb-term/rel/rt-parse.lisp \
	ess/lang/sb-term/rel/rt-unparse.lisp \
	ess/lang/sb-term/rel/rt-unp-attr.lisp \
	ess/lang/sb-term/rel/rt-format.lisp \
	ess/lang/sb-term/rel/rt-unp-tex.lisp \
	ess/lang/sb-term/rel/rt-unp-top.lisp \
	ess/lang/ab-term/rel/af-runtime.lisp \
	ess/sys/constr/rel/constr.lisp \
	ess/sys/constr/rel/constr-term-rep.lisp \
	ess/sys/constr/rel/constr-sorts.lisp \
	ess/sys/constr/rel/constr-lexer.lisp \
	ess/sys/constr/rel/constr-parser.lisp \
	ess/sys/constr/rel/defsconstr.lisp

pvs-parser-in = src/make-pvs-parser.lisp \
             src/pvs-gr.txt \
             src/ergo-runtime-fixes.lisp \
             src/ergo-gen-fixes.lisp \
             src/pvs-lang-def.lisp \
             src/pvs-parse-fixes.lisp

pvs-parser-out = src/pvs-lexer.lisp \
             src/pvs-parser.lisp \
             src/pvs-sorts.lisp

ground-prover = src/ground-prover/prmacros.lisp \
		src/ground-prover/interface.lisp \
		src/ground-prover/prglobals.lisp \
		src/ground-prover/process.lisp \
		src/ground-prover/arrays.lisp \
		src/ground-prover/tuples.lisp \
		src/ground-prover/arith.lisp \
		src/ground-prover/q.lisp

rahd = src/rahd/rahd.lisp src/rahd/polyalg.lisp \
       src/rahd/polyeval.lisp src/rahd/polyconv.lisp \
       src/rahd/sturm.lisp src/rahd/sturmineq.lisp \
       src/rahd/strings.lisp src/rahd/ineqfert.lisp \
       src/rahd/canonizer.lisp src/rahd/ideals.lisp \
       src/rahd/opencad.lisp src/rahd/cocoa.lisp \
       src/rahd/cases.lisp src/rahd/realnull.lisp \
       src/rahd/cauchyeval.lisp src/rahd/intgrldom.lisp \
       src/rahd/demodlin.lisp src/rahd/demodnl.lisp \
       src/rahd/plinsolver.lisp src/rahd/intsplit.lisp \
       src/rahd/interval.lisp src/rahd/intvlcp.lisp \
       src/rahd/gbrnull.lisp src/rahd/cnf.lisp \
       src/rahd/division.lisp src/rahd/quicksat.lisp \
       src/rahd/prover.lisp src/rahd/abbrevs.lisp \
       src/rahd/regression.lisp src/rahd/debug.lisp \
       src/rahd/prfanal.lisp src/rahd/rahd-pvs.lisp

pvs-src = src/closopt.lisp \
          src/store-object.lisp \
	  src/defcl.lisp \
          src/classes-expr.lisp \
          src/classes-decl.lisp \
          src/prover/estructures.lisp \
          src/utils/hashfn.lisp \
          src/macros.lisp \
          src/linked-hash-table.lisp \
          src/globals.lisp \
          src/optimize.lisp \
	  src/makes.lisp \
	  src/parse.lisp \
	  src/pp.lisp \
          src/pp-tex.lisp \
          src/pp-html.lisp \
          src/pp-json-ml.lisp \
          src/pp-xml.lisp \
          src/print-object.lisp \
	  src/equalities.lisp \
          src/utils.lisp \
          src/gensubst.lisp \
	  src/substit.lisp \
	  src/freeparams.lisp \
	  src/subst-mod-params.lisp \
	  src/tc-unify.lisp \
	  src/resolve.lisp \
	  src/tcc-gen.lisp \
	  src/set-type.lisp \
	  src/check-for-tccs.lisp \
          src/tcexprs.lisp \
	  src/tcdecls.lisp \
	  src/conversions.lisp \
	  src/judgements.lisp \
	  src/xref.lisp \
	  src/occurs-in.lisp \
	  src/context.lisp \
	  src/workspaces.lisp \
	  src/datatype.lisp \
	  src/typecheck.lisp \
	  src/tclib.lisp \
          src/compare.lisp \
	  src/untypecheck.lisp \
	  src/copy-lex.lisp \
	  src/save-theories.lisp \
          src/pvs.lisp \
          src/status-cmds.lisp \
	  src/add-decl.lisp \
	  src/list-decls.lisp \
	  src/tex-support.lisp \
          src/raw-api.lisp \
          src/pvs-threads.lisp

interface = src/interface/pvs-emacs.lisp \
	    src/interface/emacs-calls.lisp \
	    src/interface/cl-ilisp.lisp \
	    src/interface/allegro.lisp \
	    src/interface/ilisp-pkg.lisp \
	    src/interface/pvs-websocket.lisp \
	    src/interface/pvs-json-rpc.lisp \
	    src/interface/pvs-json-methods.lisp

pvs-prover = src/prover/checker-macros.lisp \
         src/prover/decision-procedure-interface.lisp \
         src/prover/translate-to-prove.lisp \
         src/prover/eproofcheck.lisp \
         src/prover/proofrules.lisp \
	 src/prover/equantifiers.lisp \
	 src/prover/freevars.lisp \
	 src/prover/rewrites.lisp \
	 src/prover/assert.lisp \
	 src/prover/beta-reduce.lisp \
	 src/prover/replace.lisp \
	 src/prover/expand.lisp \
	 src/prover/match.lisp \
	 src/prover/rules.lisp \
         src/prover/strategies.lisp \
         src/prover/wish.lisp \
	 src/prover/translate-to-yices.lisp \
	 src/prover/translate-to-yices2.lisp

bddlisp = src/BDD/bdd.lisp src/BDD/mu.lisp src/BDD/bdd-cffi.lisp

PVSiolisp = src/PVSio/pvs-lib.lisp src/PVSio/defattach.lisp \
            src/PVSio/pvsio.lisp

Maniplisp = src/Manip/pregexp.lisp src/Manip/manip-utilities.lisp \
            src/Manip/extended-expr.lisp src/Manip/syntax-matching.lisp \
            src/Manip/manip-strategies.lisp

Fieldlisp = src/Field/decimals.lisp src/Field/extrategies.lisp src/Field/field.lisp

ProofLitelisp = src/ProofLite/prooflite.lisp src/ProofLite/proveit-init.lisp

ws1slisp = src/WS1S/lisp/dfa-foreign.lisp src/WS1S/lisp/dfa.lisp \
           src/WS1S/lisp/pvs-utils.lisp src/WS1S/lisp/symtab.lisp \
           src/WS1S/lisp/signature.lisp src/WS1S/lisp/pvs2dfa.lisp \
           src/WS1S/lisp/ws1s-strategy.lisp \
           src/WS1S/lisp/presburger.lisp

abstractionlisp = src/abstraction/abstract.lisp

groundevallisp = src/groundeval/eval-macros.lisp \
		 src/groundeval/eval-utils.lisp \
		 src/groundeval/ground-expr.lisp \
		 src/groundeval/static-update.lisp \
		 src/groundeval/pvseval-update.lisp \
		 src/groundeval/cl2pvs.lisp \
		 src/groundeval/generate-lisp-for-theory.lisp \
                 src/groundeval/random-test.lisp \
                 src/groundeval/pvs2clean.lisp \
	         src/groundeval/pvs2c-types.lisp \
	         src/groundeval/pvs2c-code.lisp \
	         src/groundeval/pvs2c-analysis.lisp \
	         src/groundeval/pvs2ir.lisp \
	         src/groundeval/c-primitive-attachments.lisp

inst-by-unif-lisp = src/inst-by-unif/unify.lisp \
                    src/inst-by-unif/herbrandize.lisp \
                    src/inst-by-unif/gensubsts.lisp \
                    src/inst-by-unif/inst-by-unif.lisp

lisp-files = pvs-config.lisp $(ground-prover) $(pvs-src) \
	     $(interface) $(pvs-prover) $(bddlisp) \
	     $(PVSiolisp) $(Maniplisp) $(Fieldlisp) $(ProofLitelisp) \
             $(ws1slisp) $(groundevallisp) $(abstractionlisp) $(rahd)

ifneq ($(PVSPATH),)
pvs-make-files := $(patsubst %,$(PVSPATH)%,$(pvs-make-files))
allegro-make-files := $(patsubst %,$(PVSPATH)%,$(allegro-make-files))
ff-files := $(patsubst %,$(PVSPATH)%,$(ff-files))
ess := $(patsubst %,$(PVSPATH)%,$(ess-files))
pvs-parser-in := $(patsubst %,$(PVSPATH)%,$(pvs-parser-in))
pvs-parser-out := $(patsubst %,$(PVSPATH)%,$(pvs-parser-out))
ground-prover := $(patsubst %,$(PVSPATH)%,$(ground-prover))
pvs-src := $(patsubst %,$(PVSPATH)%,$(pvs-src))
interface := $(patsubst %,$(PVSPATH)%,$(interface))
pvs-prover := $(patsubst %,$(PVSPATH)%,$(pvs-prover))
bddlisp := $(patsubst %,$(PVSPATH)%,$(bddlisp))
PVSiolisp := $(patsubst %,$(PVSPATH)%,$(PVSiolisp))
Maniplisp := $(patsubst %,$(PVSPATH)%,$(Maniplisp))
Fieldlisp := $(patsubst %,$(PVSPATH)%,$(Fieldlisp))
ProofLitelisp := $(patsubst %,$(PVSPATH)%,$(ProofLitelisp))
ws1slisp := $(patsubst %,$(PVSPATH)%,$(ws1slisp))
abstractionlisp := $(patsubst %,$(PVSPATH)%,$(abstractionlisp))
rahd := $(patsubst %,$(PVSPATH)%,$(rahd))
groundevallisp := $(patsubst %,$(PVSPATH)%,$(groundevallisp))
inst-by-unif-lisp := $(patsubst %,$(PVSPATH)%,$(inst-by-unif-lisp))
endif

all-lisp-files = $(ess-files) $(pvs-parser-in) $(lisp-files)

PVSiolib = $(PVSPATH)lib/PVSio/pvsbin/top.bin

bitvectorslib = $(PVSPATH)lib/bitvectors/pvsbin/top.bin

finitesetslib = $(PVSPATH)lib/finite_sets/pvsbin/top.bin

dist-allegro-gzip = $(GIT_DESC)-$(PLATFORM)-allegro.tgz
dist-sbclisp-gzip = $(GIT_DESC)-$(PLATFORM)-sbclisp.tgz

# @echo $(shell $(GIT) rev-parse HEAD) > git-commit

.PHONY : all parser yices emacs prelude-files-and-regions

all : $(HOME)/quicklisp $(pvs-images) yices prelude-files-and-regions etags

devel : $(allegro-devel) 

runtime : $(sbcl-rt) # $(allegro-rt)

prelude-files-and-regions : $(PVSPATH)emacs/pvs-prelude-files-and-regions.el

# Quicklisp is a package manager for lisp; see src/quicklisp.lisp for details.
# This assumes quicklisp is installed in the default directory '~/quicklisp'
# It will create that directory, and update the ~/.sbclrc init file to initialize
# quicklisp automatically.

# First install ~/quicklisp; any Common Lisp will do that
ifneq ($(SBCL),)
$(HOME)/quicklisp : src/quicklisp.lisp
	$(SBCL) --load src/quicklisp.lisp \
                --eval "(quicklisp-quickstart:install)" \
                --quit
else
$(HOME)/quicklisp : src/quicklisp.lisp
	$(ALLEGRO) -L "src/quicklisp.lisp" \
                   -e "(quicklisp-quickstart:install)" \
                   --kill
endif

# Now make sure init file is set up to automatically load quicklisp/setup.lisp
# Note that if .sbclrc or .clinit.cl already exist, they are assumed to load
# quicklisp
ifneq ($(SBCL),)
$(HOME)/.sbclrc : $(HOME)/quicklisp
	$(SBCL) --load "$(HOME)/quicklisp/setup.lisp" \
                --eval "(ql-util:without-prompting (ql:add-to-init-file))" \
                --quit
endif

ifneq ($(ALLEGRO),)
$(HOME)/.clinit.cl : $(HOME)/quicklisp
	$(ALLEGRO) -L "$(HOME)/quicklisp/setup.lisp" \
                   -e "(ql-util:without-prompting (ql:add-to-init-file))" \
                   --kill
endif

etags : $(PVSPATH)TAGS

$(PVSPATH)TAGS : $(lisp-files) $(emacs-src)
	$(ETAGS) $^

fileutils = \
   $(PVSPATH)src/utils/file-utils.lisp \
   $(PVSPATH)src/utils/$(PLATFORM)/file_utils.$(LOAD-FOREIGN-EXTENSION)

bddlib = $(PVSPATH)src/BDD/$(PLATFORM)/mu.$(LOAD-FOREIGN-EXTENSION)

ws1slib = $(PVSPATH)src/WS1S/$(PLATFORM)/ws1s.$(LOAD-FOREIGN-EXTENSION)

image-deps = $(pvs-make-files) \
             $(ess-files) $(lisp-files) \
             $(PVSPATH)lib/prelude.pvs $(PVSPATH)lib/prelude.prf

# Set the yices downlowd URLs
yices1-version = 1.0.40
yices2-version = 2.6.4
yices1-url = https://yices.csl.sri.com/old/binaries
yices2-url = https://yices.csl.sri.com/releases
ifeq ($(PLATFORM),ix86_64-Linux)
yices1-tar = $(yices1-url)/yices-$(yices1-version)-x86_64-unknown-linux-gnu-static-gmp.tar.gz
yices2-tar = $(yices2-url)/$(yices2-version)/yices-$(yices2-version)-x86_64-pc-linux-gnu.tar.gz
else
ifeq ($(PLATFORM),ix86-MacOSX)
yices1-tar = $(yices1-url)/yices-$(yices1-version)-x86_64-apple-darwin10.8.0-static-gmp.tar.gz
yices2-tar = $(yices2-url)/$(yices2-version)/yices-$(yices2-version)-x86_64-apple-darwin20.6.0.tar.gz
else
ifeq ($(PLATFORM),arm-MacOSX)
yices1-tar = $(yices1-url)/yices-$(yices1-version)-x86_64-apple-darwin10.8.0-static-gmp.tar.gz
yices2-tar = $(yices2-url)/$(yices2-version)/yices-$(yices2-version)-x86_64-apple-darwin20.6.0.tar.gz
endif
endif
endif
yices1-tgt = yices/$(PLATFORM)/yices-$(yices1-version)/bin/yices
yices2-tgt = yices/$(PLATFORM)/yices-$(yices2-version)/bin/yices
yices1-lnk = bin/$(PLATFORM)/yices1
yices2-lnk = bin/$(PLATFORM)/yices2

yices : | $(yices1-lnk) $(yices2-lnk)

$(yices1-tgt) :
	@-$(MKDIR_P) yices/$(PLATFORM)
	curl --output - $(yices1-tar) | tar xzf - -C ./yices/$(PLATFORM)

$(yices1-lnk) : $(yices1-tgt)
	ln -s ../../$< $@

$(yices2-tgt) :
	@-$(MKDIR_P) yices/$(PLATFORM)
	curl --output - $(yices2-tar) | tar xzf - -C ./yices/$(PLATFORM)

$(yices2-lnk) : $(yices2-tgt)
	ln -s ../../$< $@

# Here are the rules for building PVS using pvs.asd, which does most of the
# work. It not only builds the image, it creates all the libraries
# (file_utils, mu, ws1s) and copies them to the bin directory

# ASDF manual deprecates asdf:*central-registry* in favor of
# ~/.config/common-lisp/source-registry.conf.d/ entries, but that is very
# inconvenient, especially with multiple PVS installations. In fact,
# Quicklisp itself uses *central-registry*.

ifneq ($(SBCL),)
$(sbcl-rt) : $(PVSPATH)pvs.asd $(image-deps)
	@-$(MKDIR_P) bin/$(PLATFORM)/runtime
	$(SBCL) --dynamic-space-size $(SBCL_SPACE_SIZE) \
		--eval "(require :asdf)" \
		--eval "(ql:quickload (list :babel :clack :websocket-driver :hunchentoot :anaphora :lparallel :cl-json :cffi) :silent t)" \
		--eval "(push *default-pathname-defaults* asdf:*central-registry*)" \
	        --eval "(asdf:operate :program-op :pvs)" \
	        --quit
endif

ifneq ($(ALLEGRO_HOME),)
$(allegro-rt) : $(image-deps) $(allegro-make-files) $(allegrolisp)
	@-$(MKDIR_P) bin/$(PLATFORM)/runtime
	$(ALLEGRO) -e "(require :asdf)" \
		-e "(ql:quickload (list :babel :clack :websocket-driver :hunchentoot :anaphora :lparallel :cl-json :cffi) :silent t)" \
		-e "(defvar *runtime* t)" \
		-e "(push *default-pathname-defaults* asdf:*central-registry*)" \
		-e "(asdf:operate :program-op :pvs)" \
		--kill
$(allegro-devel) : $(image-deps) $(allegro-make-files) $(allegrolisp)
	@-$(MKDIR_P) bin/$(PLATFORM)/devel
	$(ALLEGRO) -e "(require :asdf)" \
		-e "(ql:quickload (list :babel :clack :websocket-driver :hunchentoot :anaphora :lparallel :cl-json :cffi) :silent t)" \
		-e "(defvar *runtime* nil)" \
		-e "(push *default-pathname-defaults* asdf:*central-registry*)" \
		-e "(asdf:operate :program-op :pvs)" \
		--kill
endif

.PHONY: all doc clean distclean tar

make-release-notes :
	$(MAKE) -C $(PVSPATH)doc/release-notes

$(PVSiolib) : $(PVSPATH)lib/PVSio/top.pvs
	./pvs -batch -q -l $(PVSPATH)lib/PVSio/tc-pvsio.el 

$(bitvectorslib) : $(PVSPATH)lib/bitvectors/top.pvs
	./pvs -batch -q -l $(PVSPATH)lib/bitvectors/tc-bitvectors.el 

$(finitesetslib) : $(PVSPATH)lib/finite_sets/top.pvs
	./pvs -batch -q -l $(PVSPATH)lib/finite_sets/tc-finite_sets.el

libraries : $(PVSiolib) $(bitvectorslib) $(finitesetslib)

tar :
	bin/make-dist

# lib/strategies.lisp : src/prover/strategies.lisp
# 	(cd lib; ln -sf ../src/prover/strategies.lisp strategies.lisp)

$(PVSPATH)emacs/pvs-prelude-files-and-regions.el : \
                  $(PVSPATH)emacs/pvs-set-prelude-info.el \
                  $(PVSPATH)lib/prelude.pvs
	-./pvs -batch -l emacs/pvs-set-prelude-info.el \
                        -f set-prelude-files-and-regions

# We need to create the elc files, but this does not work well with make, as
# we can't simply byte-compile each file separately.  So we create a dummy
# .readme file.  It will be newer than all of the subdir source files, and
# the byte compiled files will thne be newer than it.

$(PVSPATH)emacs/.readme : $(emacs-src)
	echo "File exists for make dependency usage" > $@

$(emacs-elc) : $(PVSPATH)emacs/.readme
	(cd emacs; $(EMACS) -batch -l pvs-byte-compile.el)

install:
	@echo "target install is not used for PVS - see INSTALL"

platforms = ix86_64-Linux,ix86-MacOSX,arm-MacOSX
# HT: Need to put a comma in a variable, because a literal 
# comma cannot appear in a makefile function argument.
comma:= ,

clean :
	-rm $(pvs-parser-out)
	-for d in $(subst $(comma), ,$(fasldirs)) ; do \
		rm -rf $$d; \
	done
	-find . -type f -name \*.elc -exec rm \{\} \;
	-rm -f lib/*_adt.pvs
	-for p in $(subst $(comma), ,$(platforms)) ; do \
		rm -rf bin/$$p; \
		$(MAKE) -C src/utils/$$p clean; \
		$(MAKE) -C src/WS1S/$$p clean; \
		$(MAKE) -C src/BDD/$$p clean; \
	done

distclean :
	for e in $(subst $(comma), ,$(faslexts)) ; do \
		find . -type f -name \*.$$e -exec rm \{\} \; ; \
	done
	for p in $(subst $(comma), ,$(platforms)) ; do \
		rm -rf bin/$$p; \
		$(MAKE) -C src/utils/$$p clean; \
		$(MAKE) -C src/WS1S/$$p clean; \
		$(MAKE) -C src/BDD/$$p clean; \
	done
	find . -type f -name \*.elc -exec rm \{\} \; ; \
	rm -f Makefile TAGS autoloads.out config.log config.status configure \
              emacs/pvs-prelude-files-and-regions.el lib/*_adt.pvs \
              pvs pvsio
	rm -f src/pvs-info.lisp src/pvs-lexer.lisp src/pvs-methods.lisp \
              src/pvs-parser.lisp src/pvs-sorts.lisp
	rm -rf emacs/emacs19/*.{el,elc} emacs/emacs24 emacs/emacs23 \
               emacs/emacs22 emacs/emacs20 emacs/xeamcs20 emacs/xemacs21
	rm -rf */{$(platforms)}/*.{a,so,dylib} */*/{$(platforms)}/*.{a,so,dylib}
	rm -f doc/langauge/Makefile doc/language/pvs-doc.el doc/prover/Makefile doc/user-guide/Makefile
	rm -rf autom4te.cache bin/{$(platforms)}

define create-distdir
	@echo Creating $@...
	$(remove_distdir)
	test -d "$(DISTDIR)" || mkdir "$(DISTDIR)"
	list='$^'; \
	  dist_files=`for file in $$list; do echo $$file; done`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(DISTDIR)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(DISTDIR)/$$file"; then \
	      find "$(DISTDIR)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(DISTDIR)$$dir" || exit 1; \
	      find "$(DISTDIR)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(DISTDIR)$$dir" || exit 1; \
	  else \
	    test -f "$(DISTDIR)/$$file" \
	    || cp -pR $$d/$$file "$(DISTDIR)/$$file" \
	    || exit 1; \
	  fi; \
	done
endef

allegro-distdir: $(ALLEGRO_DISTFILES)
	$(create-distdir)

allegro-devel-distdir: $(ALLEGRO_DEVEL_DISTFILES)
	$(create-distdir)

sbclisp-distdir: $(SBCLISP_DISTFILES)
	$(create-distdir)

dist-gzip: dist-allegro-gzip dist-sbclisp-gzip

dist-allegro-gzip: ${dist-allegro-gzip}

dist-sbclisp-gzip: ${dist-sbclisp-gzip}

${dist-allegro-gzip}: ${SYSTEM_FILES} allegro-distdir
	tardir=$(DISTDIR) && $(TAR) $(TARFLAGS) | GZIP=$(GZIP_ENV) gzip -c >$(GIT_DESC)-$(PLATFORM)-allegro.tgz
	$(am__post_remove_distdir)
dist-allegro-devel-gzip: $(GIT_DESC)-$(PLATFORM)-allegro-devel.tgz
	tardir=$(DISTDIR) && $(TAR) $(TARFLAGS) | GZIP=$(GZIP_ENV) gzip -c >$(GIT_DESC)-$(PLATFORM)-allegro-devel.tgz
	$(am__post_remove_distdir)
${dist-sbclisp-gzip}: ${SYSTEM_FILES} sbclisp-distdir
	tardir=$(DISTDIR) && $(TAR) $(TARFLAGS) | GZIP=$(GZIP_ENV) gzip -c >$(GIT_DESC)-$(PLATFORM)-sbclisp.tgz
	$(am__post_remove_distdir)

dist-bzip2: distdir
	tardir=$(DISTDIR) && $(am__tar) | BZIP2=$${BZIP2--9} bzip2 -c >$(DISTDIR).tar.bz2
	$(am__post_remove_distdir)

dist-lzip: distdir
	tardir=$(DISTDIR) && $(am__tar) | lzip -c $${LZIP_OPT--9} >$(DISTDIR).tar.lz
	$(am__post_remove_distdir)
dist-xz: distdir
	tardir=$(DISTDIR) && $(am__tar) | XZ_OPT=$${XZ_OPT--e} xz -c >$(DISTDIR).tar.xz
	$(am__post_remove_distdir)

dist-tarZ: distdir
	@echo WARNING: "Support for shar distribution archives is" \
	               "deprecated." >&2
	@echo WARNING: "It will be removed altogether in Automake 2.0" >&2
	tardir=$(DISTDIR) && $(am__tar) | compress -c >$(DISTDIR).tar.Z
	$(am__post_remove_distdir)

dist-zip: distdir
	-rm -f $(DISTDIR).zip
	zip -rq $(DISTDIR).zip $(DISTDIR)
	$(am__post_remove_distdir)

dist dist-all: dist-gzip

# Cute hack for printing variables, e.g.,
#  make print-emacs-elc
# will print the value of emacs-elc
print-%:
	@echo '$*=$($*)'
